
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20005cc0 	.word	0x20005cc0
    1004:	00013765 	.word	0x00013765
    1008:	00020373 	.word	0x00020373
    100c:	00013739 	.word	0x00013739
    1010:	00013739 	.word	0x00013739
    1014:	00013739 	.word	0x00013739
    1018:	00013739 	.word	0x00013739
	...
    102c:	00013441 	.word	0x00013441
    1030:	00013739 	.word	0x00013739
    1034:	00000000 	.word	0x00000000
    1038:	000133ed 	.word	0x000133ed
    103c:	00013739 	.word	0x00013739

00001040 <_irq_vector_table>:
    1040:	000134f9 0002311f 000134f9 000134f9     .4...1...4...4..
    1050:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    1060:	000230e7 000134f9 000134f9 00023105     .0...4...4...1..
    1070:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    1080:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    1090:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10a0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10b0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10c0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10d0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10e0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..
    10f0:	000134f9 000134f9 000134f9 000134f9     .4...4...4...4..

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	3c01      	subs	r4, #1
    123c:	bf28      	it	cs
    123e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    1242:	d2e9      	bcs.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_dmul>:
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    147e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1486:	bf1d      	ittte	ne
    1488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    148c:	ea94 0f0c 	teqne	r4, ip
    1490:	ea95 0f0c 	teqne	r5, ip
    1494:	f000 f8de 	bleq	1654 <__aeabi_dmul+0x1dc>
    1498:	442c      	add	r4, r5
    149a:	ea81 0603 	eor.w	r6, r1, r3
    149e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    14a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    14a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    14aa:	bf18      	it	ne
    14ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    14b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    14b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    14b8:	d038      	beq.n	152c <__aeabi_dmul+0xb4>
    14ba:	fba0 ce02 	umull	ip, lr, r0, r2
    14be:	f04f 0500 	mov.w	r5, #0
    14c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    14c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    14ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    14ce:	f04f 0600 	mov.w	r6, #0
    14d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    14d6:	f09c 0f00 	teq	ip, #0
    14da:	bf18      	it	ne
    14dc:	f04e 0e01 	orrne.w	lr, lr, #1
    14e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    14e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    14e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    14ec:	d204      	bcs.n	14f8 <__aeabi_dmul+0x80>
    14ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    14f2:	416d      	adcs	r5, r5
    14f4:	eb46 0606 	adc.w	r6, r6, r6
    14f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    14fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    150c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1510:	bf88      	it	hi
    1512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1516:	d81e      	bhi.n	1556 <__aeabi_dmul+0xde>
    1518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    151c:	bf08      	it	eq
    151e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1522:	f150 0000 	adcs.w	r0, r0, #0
    1526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    152a:	bd70      	pop	{r4, r5, r6, pc}
    152c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1530:	ea46 0101 	orr.w	r1, r6, r1
    1534:	ea40 0002 	orr.w	r0, r0, r2
    1538:	ea81 0103 	eor.w	r1, r1, r3
    153c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1540:	bfc2      	ittt	gt
    1542:	ebd4 050c 	rsbsgt	r5, r4, ip
    1546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    154a:	bd70      	popgt	{r4, r5, r6, pc}
    154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1550:	f04f 0e00 	mov.w	lr, #0
    1554:	3c01      	subs	r4, #1
    1556:	f300 80ab 	bgt.w	16b0 <__aeabi_dmul+0x238>
    155a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    155e:	bfde      	ittt	le
    1560:	2000      	movle	r0, #0
    1562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1566:	bd70      	pople	{r4, r5, r6, pc}
    1568:	f1c4 0400 	rsb	r4, r4, #0
    156c:	3c20      	subs	r4, #32
    156e:	da35      	bge.n	15dc <__aeabi_dmul+0x164>
    1570:	340c      	adds	r4, #12
    1572:	dc1b      	bgt.n	15ac <__aeabi_dmul+0x134>
    1574:	f104 0414 	add.w	r4, r4, #20
    1578:	f1c4 0520 	rsb	r5, r4, #32
    157c:	fa00 f305 	lsl.w	r3, r0, r5
    1580:	fa20 f004 	lsr.w	r0, r0, r4
    1584:	fa01 f205 	lsl.w	r2, r1, r5
    1588:	ea40 0002 	orr.w	r0, r0, r2
    158c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1598:	fa21 f604 	lsr.w	r6, r1, r4
    159c:	eb42 0106 	adc.w	r1, r2, r6
    15a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15a4:	bf08      	it	eq
    15a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	f1c4 040c 	rsb	r4, r4, #12
    15b0:	f1c4 0520 	rsb	r5, r4, #32
    15b4:	fa00 f304 	lsl.w	r3, r0, r4
    15b8:	fa20 f005 	lsr.w	r0, r0, r5
    15bc:	fa01 f204 	lsl.w	r2, r1, r4
    15c0:	ea40 0002 	orr.w	r0, r0, r2
    15c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    15cc:	f141 0100 	adc.w	r1, r1, #0
    15d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15d4:	bf08      	it	eq
    15d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	f1c4 0520 	rsb	r5, r4, #32
    15e0:	fa00 f205 	lsl.w	r2, r0, r5
    15e4:	ea4e 0e02 	orr.w	lr, lr, r2
    15e8:	fa20 f304 	lsr.w	r3, r0, r4
    15ec:	fa01 f205 	lsl.w	r2, r1, r5
    15f0:	ea43 0302 	orr.w	r3, r3, r2
    15f4:	fa21 f004 	lsr.w	r0, r1, r4
    15f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15fc:	fa21 f204 	lsr.w	r2, r1, r4
    1600:	ea20 0002 	bic.w	r0, r0, r2
    1604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    160c:	bf08      	it	eq
    160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	f094 0f00 	teq	r4, #0
    1618:	d10f      	bne.n	163a <__aeabi_dmul+0x1c2>
    161a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    161e:	0040      	lsls	r0, r0, #1
    1620:	eb41 0101 	adc.w	r1, r1, r1
    1624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1628:	bf08      	it	eq
    162a:	3c01      	subeq	r4, #1
    162c:	d0f7      	beq.n	161e <__aeabi_dmul+0x1a6>
    162e:	ea41 0106 	orr.w	r1, r1, r6
    1632:	f095 0f00 	teq	r5, #0
    1636:	bf18      	it	ne
    1638:	4770      	bxne	lr
    163a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    163e:	0052      	lsls	r2, r2, #1
    1640:	eb43 0303 	adc.w	r3, r3, r3
    1644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1648:	bf08      	it	eq
    164a:	3d01      	subeq	r5, #1
    164c:	d0f7      	beq.n	163e <__aeabi_dmul+0x1c6>
    164e:	ea43 0306 	orr.w	r3, r3, r6
    1652:	4770      	bx	lr
    1654:	ea94 0f0c 	teq	r4, ip
    1658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    165c:	bf18      	it	ne
    165e:	ea95 0f0c 	teqne	r5, ip
    1662:	d00c      	beq.n	167e <__aeabi_dmul+0x206>
    1664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1668:	bf18      	it	ne
    166a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    166e:	d1d1      	bne.n	1614 <__aeabi_dmul+0x19c>
    1670:	ea81 0103 	eor.w	r1, r1, r3
    1674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1678:	f04f 0000 	mov.w	r0, #0
    167c:	bd70      	pop	{r4, r5, r6, pc}
    167e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1682:	bf06      	itte	eq
    1684:	4610      	moveq	r0, r2
    1686:	4619      	moveq	r1, r3
    1688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    168c:	d019      	beq.n	16c2 <__aeabi_dmul+0x24a>
    168e:	ea94 0f0c 	teq	r4, ip
    1692:	d102      	bne.n	169a <__aeabi_dmul+0x222>
    1694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1698:	d113      	bne.n	16c2 <__aeabi_dmul+0x24a>
    169a:	ea95 0f0c 	teq	r5, ip
    169e:	d105      	bne.n	16ac <__aeabi_dmul+0x234>
    16a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    16a4:	bf1c      	itt	ne
    16a6:	4610      	movne	r0, r2
    16a8:	4619      	movne	r1, r3
    16aa:	d10a      	bne.n	16c2 <__aeabi_dmul+0x24a>
    16ac:	ea81 0103 	eor.w	r1, r1, r3
    16b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    16b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    16bc:	f04f 0000 	mov.w	r0, #0
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    16ca:	bd70      	pop	{r4, r5, r6, pc}

000016cc <__aeabi_ddiv>:
    16cc:	b570      	push	{r4, r5, r6, lr}
    16ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    16d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    16d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    16da:	bf1d      	ittte	ne
    16dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    16e0:	ea94 0f0c 	teqne	r4, ip
    16e4:	ea95 0f0c 	teqne	r5, ip
    16e8:	f000 f8a7 	bleq	183a <__aeabi_ddiv+0x16e>
    16ec:	eba4 0405 	sub.w	r4, r4, r5
    16f0:	ea81 0e03 	eor.w	lr, r1, r3
    16f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    16f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    16fc:	f000 8088 	beq.w	1810 <__aeabi_ddiv+0x144>
    1700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    170c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    171c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1724:	429d      	cmp	r5, r3
    1726:	bf08      	it	eq
    1728:	4296      	cmpeq	r6, r2
    172a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    172e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1732:	d202      	bcs.n	173a <__aeabi_ddiv+0x6e>
    1734:	085b      	lsrs	r3, r3, #1
    1736:	ea4f 0232 	mov.w	r2, r2, rrx
    173a:	1ab6      	subs	r6, r6, r2
    173c:	eb65 0503 	sbc.w	r5, r5, r3
    1740:	085b      	lsrs	r3, r3, #1
    1742:	ea4f 0232 	mov.w	r2, r2, rrx
    1746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    174a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    174e:	ebb6 0e02 	subs.w	lr, r6, r2
    1752:	eb75 0e03 	sbcs.w	lr, r5, r3
    1756:	bf22      	ittt	cs
    1758:	1ab6      	subcs	r6, r6, r2
    175a:	4675      	movcs	r5, lr
    175c:	ea40 000c 	orrcs.w	r0, r0, ip
    1760:	085b      	lsrs	r3, r3, #1
    1762:	ea4f 0232 	mov.w	r2, r2, rrx
    1766:	ebb6 0e02 	subs.w	lr, r6, r2
    176a:	eb75 0e03 	sbcs.w	lr, r5, r3
    176e:	bf22      	ittt	cs
    1770:	1ab6      	subcs	r6, r6, r2
    1772:	4675      	movcs	r5, lr
    1774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1778:	085b      	lsrs	r3, r3, #1
    177a:	ea4f 0232 	mov.w	r2, r2, rrx
    177e:	ebb6 0e02 	subs.w	lr, r6, r2
    1782:	eb75 0e03 	sbcs.w	lr, r5, r3
    1786:	bf22      	ittt	cs
    1788:	1ab6      	subcs	r6, r6, r2
    178a:	4675      	movcs	r5, lr
    178c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1790:	085b      	lsrs	r3, r3, #1
    1792:	ea4f 0232 	mov.w	r2, r2, rrx
    1796:	ebb6 0e02 	subs.w	lr, r6, r2
    179a:	eb75 0e03 	sbcs.w	lr, r5, r3
    179e:	bf22      	ittt	cs
    17a0:	1ab6      	subcs	r6, r6, r2
    17a2:	4675      	movcs	r5, lr
    17a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    17a8:	ea55 0e06 	orrs.w	lr, r5, r6
    17ac:	d018      	beq.n	17e0 <__aeabi_ddiv+0x114>
    17ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    17b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    17b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    17ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    17c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    17c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    17ca:	d1c0      	bne.n	174e <__aeabi_ddiv+0x82>
    17cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17d0:	d10b      	bne.n	17ea <__aeabi_ddiv+0x11e>
    17d2:	ea41 0100 	orr.w	r1, r1, r0
    17d6:	f04f 0000 	mov.w	r0, #0
    17da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    17de:	e7b6      	b.n	174e <__aeabi_ddiv+0x82>
    17e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17e4:	bf04      	itt	eq
    17e6:	4301      	orreq	r1, r0
    17e8:	2000      	moveq	r0, #0
    17ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    17ee:	bf88      	it	hi
    17f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    17f4:	f63f aeaf 	bhi.w	1556 <__aeabi_dmul+0xde>
    17f8:	ebb5 0c03 	subs.w	ip, r5, r3
    17fc:	bf04      	itt	eq
    17fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    1802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1806:	f150 0000 	adcs.w	r0, r0, #0
    180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    181c:	bfc2      	ittt	gt
    181e:	ebd4 050c 	rsbsgt	r5, r4, ip
    1822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1826:	bd70      	popgt	{r4, r5, r6, pc}
    1828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    182c:	f04f 0e00 	mov.w	lr, #0
    1830:	3c01      	subs	r4, #1
    1832:	e690      	b.n	1556 <__aeabi_dmul+0xde>
    1834:	ea45 0e06 	orr.w	lr, r5, r6
    1838:	e68d      	b.n	1556 <__aeabi_dmul+0xde>
    183a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    183e:	ea94 0f0c 	teq	r4, ip
    1842:	bf08      	it	eq
    1844:	ea95 0f0c 	teqeq	r5, ip
    1848:	f43f af3b 	beq.w	16c2 <__aeabi_dmul+0x24a>
    184c:	ea94 0f0c 	teq	r4, ip
    1850:	d10a      	bne.n	1868 <__aeabi_ddiv+0x19c>
    1852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1856:	f47f af34 	bne.w	16c2 <__aeabi_dmul+0x24a>
    185a:	ea95 0f0c 	teq	r5, ip
    185e:	f47f af25 	bne.w	16ac <__aeabi_dmul+0x234>
    1862:	4610      	mov	r0, r2
    1864:	4619      	mov	r1, r3
    1866:	e72c      	b.n	16c2 <__aeabi_dmul+0x24a>
    1868:	ea95 0f0c 	teq	r5, ip
    186c:	d106      	bne.n	187c <__aeabi_ddiv+0x1b0>
    186e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1872:	f43f aefd 	beq.w	1670 <__aeabi_dmul+0x1f8>
    1876:	4610      	mov	r0, r2
    1878:	4619      	mov	r1, r3
    187a:	e722      	b.n	16c2 <__aeabi_dmul+0x24a>
    187c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1880:	bf18      	it	ne
    1882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1886:	f47f aec5 	bne.w	1614 <__aeabi_dmul+0x19c>
    188a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    188e:	f47f af0d 	bne.w	16ac <__aeabi_dmul+0x234>
    1892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1896:	f47f aeeb 	bne.w	1670 <__aeabi_dmul+0x1f8>
    189a:	e712      	b.n	16c2 <__aeabi_dmul+0x24a>

0000189c <__aeabi_d2uiz>:
    189c:	004a      	lsls	r2, r1, #1
    189e:	d211      	bcs.n	18c4 <__aeabi_d2uiz+0x28>
    18a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    18a4:	d211      	bcs.n	18ca <__aeabi_d2uiz+0x2e>
    18a6:	d50d      	bpl.n	18c4 <__aeabi_d2uiz+0x28>
    18a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    18ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    18b0:	d40e      	bmi.n	18d0 <__aeabi_d2uiz+0x34>
    18b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    18b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    18ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    18be:	fa23 f002 	lsr.w	r0, r3, r2
    18c2:	4770      	bx	lr
    18c4:	f04f 0000 	mov.w	r0, #0
    18c8:	4770      	bx	lr
    18ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    18ce:	d102      	bne.n	18d6 <__aeabi_d2uiz+0x3a>
    18d0:	f04f 30ff 	mov.w	r0, #4294967295
    18d4:	4770      	bx	lr
    18d6:	f04f 0000 	mov.w	r0, #0
    18da:	4770      	bx	lr

000018dc <__aeabi_ldivmod>:
    18dc:	b97b      	cbnz	r3, 18fe <__aeabi_ldivmod+0x22>
    18de:	b972      	cbnz	r2, 18fe <__aeabi_ldivmod+0x22>
    18e0:	2900      	cmp	r1, #0
    18e2:	bfbe      	ittt	lt
    18e4:	2000      	movlt	r0, #0
    18e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    18ea:	e006      	blt.n	18fa <__aeabi_ldivmod+0x1e>
    18ec:	bf08      	it	eq
    18ee:	2800      	cmpeq	r0, #0
    18f0:	bf1c      	itt	ne
    18f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    18f6:	f04f 30ff 	movne.w	r0, #4294967295
    18fa:	f000 b9b7 	b.w	1c6c <__aeabi_idiv0>
    18fe:	f1ad 0c08 	sub.w	ip, sp, #8
    1902:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1906:	2900      	cmp	r1, #0
    1908:	db09      	blt.n	191e <__aeabi_ldivmod+0x42>
    190a:	2b00      	cmp	r3, #0
    190c:	db1a      	blt.n	1944 <__aeabi_ldivmod+0x68>
    190e:	f000 f84d 	bl	19ac <__udivmoddi4>
    1912:	f8dd e004 	ldr.w	lr, [sp, #4]
    1916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    191a:	b004      	add	sp, #16
    191c:	4770      	bx	lr
    191e:	4240      	negs	r0, r0
    1920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1924:	2b00      	cmp	r3, #0
    1926:	db1b      	blt.n	1960 <__aeabi_ldivmod+0x84>
    1928:	f000 f840 	bl	19ac <__udivmoddi4>
    192c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1934:	b004      	add	sp, #16
    1936:	4240      	negs	r0, r0
    1938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    193c:	4252      	negs	r2, r2
    193e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1942:	4770      	bx	lr
    1944:	4252      	negs	r2, r2
    1946:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    194a:	f000 f82f 	bl	19ac <__udivmoddi4>
    194e:	f8dd e004 	ldr.w	lr, [sp, #4]
    1952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1956:	b004      	add	sp, #16
    1958:	4240      	negs	r0, r0
    195a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    195e:	4770      	bx	lr
    1960:	4252      	negs	r2, r2
    1962:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1966:	f000 f821 	bl	19ac <__udivmoddi4>
    196a:	f8dd e004 	ldr.w	lr, [sp, #4]
    196e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1972:	b004      	add	sp, #16
    1974:	4252      	negs	r2, r2
    1976:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    197a:	4770      	bx	lr

0000197c <__aeabi_uldivmod>:
    197c:	b953      	cbnz	r3, 1994 <__aeabi_uldivmod+0x18>
    197e:	b94a      	cbnz	r2, 1994 <__aeabi_uldivmod+0x18>
    1980:	2900      	cmp	r1, #0
    1982:	bf08      	it	eq
    1984:	2800      	cmpeq	r0, #0
    1986:	bf1c      	itt	ne
    1988:	f04f 31ff 	movne.w	r1, #4294967295
    198c:	f04f 30ff 	movne.w	r0, #4294967295
    1990:	f000 b96c 	b.w	1c6c <__aeabi_idiv0>
    1994:	f1ad 0c08 	sub.w	ip, sp, #8
    1998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    199c:	f000 f806 	bl	19ac <__udivmoddi4>
    19a0:	f8dd e004 	ldr.w	lr, [sp, #4]
    19a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    19a8:	b004      	add	sp, #16
    19aa:	4770      	bx	lr

000019ac <__udivmoddi4>:
    19ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19b0:	9e08      	ldr	r6, [sp, #32]
    19b2:	460d      	mov	r5, r1
    19b4:	4604      	mov	r4, r0
    19b6:	468e      	mov	lr, r1
    19b8:	2b00      	cmp	r3, #0
    19ba:	f040 8082 	bne.w	1ac2 <__udivmoddi4+0x116>
    19be:	428a      	cmp	r2, r1
    19c0:	4617      	mov	r7, r2
    19c2:	d946      	bls.n	1a52 <__udivmoddi4+0xa6>
    19c4:	fab2 f282 	clz	r2, r2
    19c8:	b14a      	cbz	r2, 19de <__udivmoddi4+0x32>
    19ca:	f1c2 0120 	rsb	r1, r2, #32
    19ce:	fa05 f302 	lsl.w	r3, r5, r2
    19d2:	fa20 f101 	lsr.w	r1, r0, r1
    19d6:	4097      	lsls	r7, r2
    19d8:	ea41 0e03 	orr.w	lr, r1, r3
    19dc:	4094      	lsls	r4, r2
    19de:	ea4f 4817 	mov.w	r8, r7, lsr #16
    19e2:	0c23      	lsrs	r3, r4, #16
    19e4:	fbbe fcf8 	udiv	ip, lr, r8
    19e8:	b2b9      	uxth	r1, r7
    19ea:	fb08 ee1c 	mls	lr, r8, ip, lr
    19ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    19f2:	fb0c f001 	mul.w	r0, ip, r1
    19f6:	4298      	cmp	r0, r3
    19f8:	d90a      	bls.n	1a10 <__udivmoddi4+0x64>
    19fa:	18fb      	adds	r3, r7, r3
    19fc:	f10c 35ff 	add.w	r5, ip, #4294967295
    1a00:	f080 8116 	bcs.w	1c30 <__udivmoddi4+0x284>
    1a04:	4298      	cmp	r0, r3
    1a06:	f240 8113 	bls.w	1c30 <__udivmoddi4+0x284>
    1a0a:	f1ac 0c02 	sub.w	ip, ip, #2
    1a0e:	443b      	add	r3, r7
    1a10:	1a1b      	subs	r3, r3, r0
    1a12:	b2a4      	uxth	r4, r4
    1a14:	fbb3 f0f8 	udiv	r0, r3, r8
    1a18:	fb08 3310 	mls	r3, r8, r0, r3
    1a1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1a20:	fb00 f101 	mul.w	r1, r0, r1
    1a24:	42a1      	cmp	r1, r4
    1a26:	d909      	bls.n	1a3c <__udivmoddi4+0x90>
    1a28:	193c      	adds	r4, r7, r4
    1a2a:	f100 33ff 	add.w	r3, r0, #4294967295
    1a2e:	f080 8101 	bcs.w	1c34 <__udivmoddi4+0x288>
    1a32:	42a1      	cmp	r1, r4
    1a34:	f240 80fe 	bls.w	1c34 <__udivmoddi4+0x288>
    1a38:	3802      	subs	r0, #2
    1a3a:	443c      	add	r4, r7
    1a3c:	1a64      	subs	r4, r4, r1
    1a3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1a42:	2100      	movs	r1, #0
    1a44:	b11e      	cbz	r6, 1a4e <__udivmoddi4+0xa2>
    1a46:	40d4      	lsrs	r4, r2
    1a48:	2300      	movs	r3, #0
    1a4a:	e9c6 4300 	strd	r4, r3, [r6]
    1a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a52:	b902      	cbnz	r2, 1a56 <__udivmoddi4+0xaa>
    1a54:	deff      	udf	#255	; 0xff
    1a56:	fab2 f282 	clz	r2, r2
    1a5a:	2a00      	cmp	r2, #0
    1a5c:	d14f      	bne.n	1afe <__udivmoddi4+0x152>
    1a5e:	1bcb      	subs	r3, r1, r7
    1a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1a64:	fa1f f887 	uxth.w	r8, r7
    1a68:	2101      	movs	r1, #1
    1a6a:	fbb3 fcfe 	udiv	ip, r3, lr
    1a6e:	0c25      	lsrs	r5, r4, #16
    1a70:	fb0e 331c 	mls	r3, lr, ip, r3
    1a74:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1a78:	fb08 f30c 	mul.w	r3, r8, ip
    1a7c:	42ab      	cmp	r3, r5
    1a7e:	d907      	bls.n	1a90 <__udivmoddi4+0xe4>
    1a80:	197d      	adds	r5, r7, r5
    1a82:	f10c 30ff 	add.w	r0, ip, #4294967295
    1a86:	d202      	bcs.n	1a8e <__udivmoddi4+0xe2>
    1a88:	42ab      	cmp	r3, r5
    1a8a:	f200 80e7 	bhi.w	1c5c <__udivmoddi4+0x2b0>
    1a8e:	4684      	mov	ip, r0
    1a90:	1aed      	subs	r5, r5, r3
    1a92:	b2a3      	uxth	r3, r4
    1a94:	fbb5 f0fe 	udiv	r0, r5, lr
    1a98:	fb0e 5510 	mls	r5, lr, r0, r5
    1a9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1aa0:	fb08 f800 	mul.w	r8, r8, r0
    1aa4:	45a0      	cmp	r8, r4
    1aa6:	d907      	bls.n	1ab8 <__udivmoddi4+0x10c>
    1aa8:	193c      	adds	r4, r7, r4
    1aaa:	f100 33ff 	add.w	r3, r0, #4294967295
    1aae:	d202      	bcs.n	1ab6 <__udivmoddi4+0x10a>
    1ab0:	45a0      	cmp	r8, r4
    1ab2:	f200 80d7 	bhi.w	1c64 <__udivmoddi4+0x2b8>
    1ab6:	4618      	mov	r0, r3
    1ab8:	eba4 0408 	sub.w	r4, r4, r8
    1abc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1ac0:	e7c0      	b.n	1a44 <__udivmoddi4+0x98>
    1ac2:	428b      	cmp	r3, r1
    1ac4:	d908      	bls.n	1ad8 <__udivmoddi4+0x12c>
    1ac6:	2e00      	cmp	r6, #0
    1ac8:	f000 80af 	beq.w	1c2a <__udivmoddi4+0x27e>
    1acc:	2100      	movs	r1, #0
    1ace:	e9c6 0500 	strd	r0, r5, [r6]
    1ad2:	4608      	mov	r0, r1
    1ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ad8:	fab3 f183 	clz	r1, r3
    1adc:	2900      	cmp	r1, #0
    1ade:	d14b      	bne.n	1b78 <__udivmoddi4+0x1cc>
    1ae0:	42ab      	cmp	r3, r5
    1ae2:	d302      	bcc.n	1aea <__udivmoddi4+0x13e>
    1ae4:	4282      	cmp	r2, r0
    1ae6:	f200 80b7 	bhi.w	1c58 <__udivmoddi4+0x2ac>
    1aea:	1a84      	subs	r4, r0, r2
    1aec:	eb65 0303 	sbc.w	r3, r5, r3
    1af0:	2001      	movs	r0, #1
    1af2:	469e      	mov	lr, r3
    1af4:	2e00      	cmp	r6, #0
    1af6:	d0aa      	beq.n	1a4e <__udivmoddi4+0xa2>
    1af8:	e9c6 4e00 	strd	r4, lr, [r6]
    1afc:	e7a7      	b.n	1a4e <__udivmoddi4+0xa2>
    1afe:	f1c2 0c20 	rsb	ip, r2, #32
    1b02:	fa01 f302 	lsl.w	r3, r1, r2
    1b06:	4097      	lsls	r7, r2
    1b08:	fa20 f00c 	lsr.w	r0, r0, ip
    1b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1b10:	fa21 fc0c 	lsr.w	ip, r1, ip
    1b14:	4318      	orrs	r0, r3
    1b16:	fbbc f1fe 	udiv	r1, ip, lr
    1b1a:	0c05      	lsrs	r5, r0, #16
    1b1c:	fb0e cc11 	mls	ip, lr, r1, ip
    1b20:	fa1f f887 	uxth.w	r8, r7
    1b24:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    1b28:	fb01 f308 	mul.w	r3, r1, r8
    1b2c:	42ab      	cmp	r3, r5
    1b2e:	fa04 f402 	lsl.w	r4, r4, r2
    1b32:	d909      	bls.n	1b48 <__udivmoddi4+0x19c>
    1b34:	197d      	adds	r5, r7, r5
    1b36:	f101 3cff 	add.w	ip, r1, #4294967295
    1b3a:	f080 808b 	bcs.w	1c54 <__udivmoddi4+0x2a8>
    1b3e:	42ab      	cmp	r3, r5
    1b40:	f240 8088 	bls.w	1c54 <__udivmoddi4+0x2a8>
    1b44:	3902      	subs	r1, #2
    1b46:	443d      	add	r5, r7
    1b48:	1aeb      	subs	r3, r5, r3
    1b4a:	b285      	uxth	r5, r0
    1b4c:	fbb3 f0fe 	udiv	r0, r3, lr
    1b50:	fb0e 3310 	mls	r3, lr, r0, r3
    1b54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1b58:	fb00 f308 	mul.w	r3, r0, r8
    1b5c:	42ab      	cmp	r3, r5
    1b5e:	d907      	bls.n	1b70 <__udivmoddi4+0x1c4>
    1b60:	197d      	adds	r5, r7, r5
    1b62:	f100 3cff 	add.w	ip, r0, #4294967295
    1b66:	d271      	bcs.n	1c4c <__udivmoddi4+0x2a0>
    1b68:	42ab      	cmp	r3, r5
    1b6a:	d96f      	bls.n	1c4c <__udivmoddi4+0x2a0>
    1b6c:	3802      	subs	r0, #2
    1b6e:	443d      	add	r5, r7
    1b70:	1aeb      	subs	r3, r5, r3
    1b72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1b76:	e778      	b.n	1a6a <__udivmoddi4+0xbe>
    1b78:	f1c1 0c20 	rsb	ip, r1, #32
    1b7c:	408b      	lsls	r3, r1
    1b7e:	fa22 f70c 	lsr.w	r7, r2, ip
    1b82:	431f      	orrs	r7, r3
    1b84:	fa20 f40c 	lsr.w	r4, r0, ip
    1b88:	fa05 f301 	lsl.w	r3, r5, r1
    1b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1b90:	fa25 f50c 	lsr.w	r5, r5, ip
    1b94:	431c      	orrs	r4, r3
    1b96:	0c23      	lsrs	r3, r4, #16
    1b98:	fbb5 f9fe 	udiv	r9, r5, lr
    1b9c:	fa1f f887 	uxth.w	r8, r7
    1ba0:	fb0e 5519 	mls	r5, lr, r9, r5
    1ba4:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1ba8:	fb09 fa08 	mul.w	sl, r9, r8
    1bac:	45aa      	cmp	sl, r5
    1bae:	fa02 f201 	lsl.w	r2, r2, r1
    1bb2:	fa00 f301 	lsl.w	r3, r0, r1
    1bb6:	d908      	bls.n	1bca <__udivmoddi4+0x21e>
    1bb8:	197d      	adds	r5, r7, r5
    1bba:	f109 30ff 	add.w	r0, r9, #4294967295
    1bbe:	d247      	bcs.n	1c50 <__udivmoddi4+0x2a4>
    1bc0:	45aa      	cmp	sl, r5
    1bc2:	d945      	bls.n	1c50 <__udivmoddi4+0x2a4>
    1bc4:	f1a9 0902 	sub.w	r9, r9, #2
    1bc8:	443d      	add	r5, r7
    1bca:	eba5 050a 	sub.w	r5, r5, sl
    1bce:	b2a4      	uxth	r4, r4
    1bd0:	fbb5 f0fe 	udiv	r0, r5, lr
    1bd4:	fb0e 5510 	mls	r5, lr, r0, r5
    1bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1bdc:	fb00 f808 	mul.w	r8, r0, r8
    1be0:	45a0      	cmp	r8, r4
    1be2:	d907      	bls.n	1bf4 <__udivmoddi4+0x248>
    1be4:	193c      	adds	r4, r7, r4
    1be6:	f100 35ff 	add.w	r5, r0, #4294967295
    1bea:	d22d      	bcs.n	1c48 <__udivmoddi4+0x29c>
    1bec:	45a0      	cmp	r8, r4
    1bee:	d92b      	bls.n	1c48 <__udivmoddi4+0x29c>
    1bf0:	3802      	subs	r0, #2
    1bf2:	443c      	add	r4, r7
    1bf4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1bf8:	eba4 0408 	sub.w	r4, r4, r8
    1bfc:	fba0 8902 	umull	r8, r9, r0, r2
    1c00:	454c      	cmp	r4, r9
    1c02:	46c6      	mov	lr, r8
    1c04:	464d      	mov	r5, r9
    1c06:	d319      	bcc.n	1c3c <__udivmoddi4+0x290>
    1c08:	d016      	beq.n	1c38 <__udivmoddi4+0x28c>
    1c0a:	b15e      	cbz	r6, 1c24 <__udivmoddi4+0x278>
    1c0c:	ebb3 020e 	subs.w	r2, r3, lr
    1c10:	eb64 0405 	sbc.w	r4, r4, r5
    1c14:	fa04 fc0c 	lsl.w	ip, r4, ip
    1c18:	40ca      	lsrs	r2, r1
    1c1a:	ea4c 0202 	orr.w	r2, ip, r2
    1c1e:	40cc      	lsrs	r4, r1
    1c20:	e9c6 2400 	strd	r2, r4, [r6]
    1c24:	2100      	movs	r1, #0
    1c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c2a:	4631      	mov	r1, r6
    1c2c:	4630      	mov	r0, r6
    1c2e:	e70e      	b.n	1a4e <__udivmoddi4+0xa2>
    1c30:	46ac      	mov	ip, r5
    1c32:	e6ed      	b.n	1a10 <__udivmoddi4+0x64>
    1c34:	4618      	mov	r0, r3
    1c36:	e701      	b.n	1a3c <__udivmoddi4+0x90>
    1c38:	4543      	cmp	r3, r8
    1c3a:	d2e6      	bcs.n	1c0a <__udivmoddi4+0x25e>
    1c3c:	ebb8 0e02 	subs.w	lr, r8, r2
    1c40:	eb69 0507 	sbc.w	r5, r9, r7
    1c44:	3801      	subs	r0, #1
    1c46:	e7e0      	b.n	1c0a <__udivmoddi4+0x25e>
    1c48:	4628      	mov	r0, r5
    1c4a:	e7d3      	b.n	1bf4 <__udivmoddi4+0x248>
    1c4c:	4660      	mov	r0, ip
    1c4e:	e78f      	b.n	1b70 <__udivmoddi4+0x1c4>
    1c50:	4681      	mov	r9, r0
    1c52:	e7ba      	b.n	1bca <__udivmoddi4+0x21e>
    1c54:	4661      	mov	r1, ip
    1c56:	e777      	b.n	1b48 <__udivmoddi4+0x19c>
    1c58:	4608      	mov	r0, r1
    1c5a:	e74b      	b.n	1af4 <__udivmoddi4+0x148>
    1c5c:	f1ac 0c02 	sub.w	ip, ip, #2
    1c60:	443d      	add	r5, r7
    1c62:	e715      	b.n	1a90 <__udivmoddi4+0xe4>
    1c64:	3802      	subs	r0, #2
    1c66:	443c      	add	r4, r7
    1c68:	e726      	b.n	1ab8 <__udivmoddi4+0x10c>
    1c6a:	bf00      	nop

00001c6c <__aeabi_idiv0>:
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop

00001c70 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    1c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c72:	4615      	mov	r5, r2
    1c74:	4a0a      	ldr	r2, [pc, #40]	; (1ca0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    1c76:	461c      	mov	r4, r3
    1c78:	6856      	ldr	r6, [r2, #4]
    1c7a:	b12e      	cbz	r6, 1c88 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1c7c:	b001      	add	sp, #4
    1c7e:	462a      	mov	r2, r5
    1c80:	46b4      	mov	ip, r6
    1c82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1c86:	4760      	bx	ip
    1c88:	2000      	movs	r0, #0
    1c8a:	f88d 0000 	strb.w	r0, [sp]
    1c8e:	4668      	mov	r0, sp
    1c90:	f00b f9da 	bl	d048 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1c94:	f89d 0000 	ldrb.w	r0, [sp]
    1c98:	1a28      	subs	r0, r5, r0
    1c9a:	7020      	strb	r0, [r4, #0]
    1c9c:	2000      	movs	r0, #0
    1c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca0:	20000000 	.word	0x20000000
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d019      	beq.n	1cdc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6c>
    1ca8:	7803      	ldrb	r3, [r0, #0]
    1caa:	4913      	ldr	r1, [pc, #76]	; (1cf8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x88>)
    1cac:	4a13      	ldr	r2, [pc, #76]	; (1cfc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x8c>)
    1cae:	b113      	cbz	r3, 1cb6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x46>
    1cb0:	2b01      	cmp	r3, #1
    1cb2:	d00e      	beq.n	1cd2 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x62>
    1cb4:	e011      	b.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cb6:	7903      	ldrb	r3, [r0, #4]
    1cb8:	2b01      	cmp	r3, #1
    1cba:	d000      	beq.n	1cbe <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x4e>
    1cbc:	b96b      	cbnz	r3, 1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cbe:	7943      	ldrb	r3, [r0, #5]
    1cc0:	b10b      	cbz	r3, 1cc6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x56>
    1cc2:	2b01      	cmp	r3, #1
    1cc4:	d109      	bne.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cc6:	6883      	ldr	r3, [r0, #8]
    1cc8:	3b64      	subs	r3, #100	; 0x64
    1cca:	428b      	cmp	r3, r1
    1ccc:	d205      	bcs.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cce:	68c0      	ldr	r0, [r0, #12]
    1cd0:	e00e      	b.n	1cf0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x80>
    1cd2:	7903      	ldrb	r3, [r0, #4]
    1cd4:	2b01      	cmp	r3, #1
    1cd6:	d002      	beq.n	1cde <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    1cd8:	b10b      	cbz	r3, 1cde <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6e>
    1cda:	2000      	movs	r0, #0
    1cdc:	4770      	bx	lr
    1cde:	7943      	ldrb	r3, [r0, #5]
    1ce0:	b10b      	cbz	r3, 1ce6 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x76>
    1ce2:	2b01      	cmp	r3, #1
    1ce4:	d1f9      	bne.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1ce6:	68c3      	ldr	r3, [r0, #12]
    1ce8:	3b64      	subs	r3, #100	; 0x64
    1cea:	428b      	cmp	r3, r1
    1cec:	d2f5      	bcs.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cee:	6880      	ldr	r0, [r0, #8]
    1cf0:	4290      	cmp	r0, r2
    1cf2:	d8f2      	bhi.n	1cda <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x6a>
    1cf4:	2001      	movs	r0, #1
    1cf6:	4770      	bx	lr
    1cf8:	0001863d 	.word	0x0001863d
    1cfc:	07a11fff 	.word	0x07a11fff
    1d00:	b510      	push	{r4, lr}
    1d02:	4c05      	ldr	r4, [pc, #20]	; (1d18 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0xa8>)
    1d04:	6820      	ldr	r0, [r4, #0]
    1d06:	b110      	cbz	r0, 1d0e <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x9e>
    1d08:	4780      	blx	r0
    1d0a:	2000      	movs	r0, #0
    1d0c:	6020      	str	r0, [r4, #0]
    1d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d12:	f001 bfd5 	b.w	3cc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    1d16:	0000      	.short	0x0000
    1d18:	20000008 	.word	0x20000008

00001d1c <mpsl_timeslot_session_open>:
    1d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d20:	460e      	mov	r6, r1
    1d22:	0005      	movs	r5, r0
    1d24:	d004      	beq.n	1d30 <mpsl_timeslot_session_open+0x14>
    1d26:	f000 f845 	bl	1db4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    1d2a:	4607      	mov	r7, r0
    1d2c:	2400      	movs	r4, #0
    1d2e:	e00a      	b.n	1d46 <mpsl_timeslot_session_open+0x2a>
    1d30:	f06f 0015 	mvn.w	r0, #21
    1d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d38:	4620      	mov	r0, r4
    1d3a:	f000 f841 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    1d3e:	7880      	ldrb	r0, [r0, #2]
    1d40:	b138      	cbz	r0, 1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d42:	1c64      	adds	r4, r4, #1
    1d44:	b2e4      	uxtb	r4, r4
    1d46:	42bc      	cmp	r4, r7
    1d48:	d3f6      	bcc.n	1d38 <mpsl_timeslot_session_open+0x1c>
    1d4a:	bf00      	nop
    1d4c:	f06f 000b 	mvn.w	r0, #11
    1d50:	e7f0      	b.n	1d34 <mpsl_timeslot_session_open+0x18>
    1d52:	4627      	mov	r7, r4
    1d54:	2cff      	cmp	r4, #255	; 0xff
    1d56:	d0f9      	beq.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1d58:	4620      	mov	r0, r4
    1d5a:	f000 f831 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    1d5e:	4604      	mov	r4, r0
    1d60:	f00b fb15 	bl	d38e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    1d64:	7127      	strb	r7, [r4, #4]
    1d66:	4621      	mov	r1, r4
    1d68:	4807      	ldr	r0, [pc, #28]	; (1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>)
    1d6a:	f001 ff81 	bl	3c70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    1d6e:	70e0      	strb	r0, [r4, #3]
    1d70:	2820      	cmp	r0, #32
    1d72:	d005      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d74:	2001      	movs	r0, #1
    1d76:	60a5      	str	r5, [r4, #8]
    1d78:	70a0      	strb	r0, [r4, #2]
    1d7a:	7037      	strb	r7, [r6, #0]
    1d7c:	2000      	movs	r0, #0
    1d7e:	e7d9      	b.n	1d34 <mpsl_timeslot_session_open+0x18>
    1d80:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1d84:	e7d6      	b.n	1d34 <mpsl_timeslot_session_open+0x18>
    1d86:	0000      	.short	0x0000
    1d88:	0000d0ef 	.word	0x0000d0ef

00001d8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    1d8c:	b510      	push	{r4, lr}
    1d8e:	0782      	lsls	r2, r0, #30
    1d90:	d002      	beq.n	1d98 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    1d92:	f06f 000d 	mvn.w	r0, #13
    1d96:	bd10      	pop	{r4, pc}
    1d98:	4a05      	ldr	r2, [pc, #20]	; (1db0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    1d9a:	7011      	strb	r1, [r2, #0]
    1d9c:	6050      	str	r0, [r2, #4]
    1d9e:	b128      	cbz	r0, 1dac <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    1da0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    1da4:	008a      	lsls	r2, r1, #2
    1da6:	2100      	movs	r1, #0
    1da8:	f00b fd77 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1dac:	2000      	movs	r0, #0
    1dae:	bd10      	pop	{r4, pc}
    1db0:	2000000c 	.word	0x2000000c

00001db4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1db4:	4801      	ldr	r0, [pc, #4]	; (1dbc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1db6:	7800      	ldrb	r0, [r0, #0]
    1db8:	4770      	bx	lr
    1dba:	0000      	.short	0x0000
    1dbc:	2000000c 	.word	0x2000000c

00001dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1dc0:	4905      	ldr	r1, [pc, #20]	; (1dd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1dc2:	780a      	ldrb	r2, [r1, #0]
    1dc4:	4290      	cmp	r0, r2
    1dc6:	d301      	bcc.n	1dcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1dc8:	2000      	movs	r0, #0
    1dca:	4770      	bx	lr
    1dcc:	6849      	ldr	r1, [r1, #4]
    1dce:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1dd2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1dd6:	4770      	bx	lr
    1dd8:	2000000c 	.word	0x2000000c
    1ddc:	b570      	push	{r4, r5, r6, lr}
    1dde:	4605      	mov	r5, r0
    1de0:	2a20      	cmp	r2, #32
    1de2:	d027      	beq.n	1e34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1de4:	4819      	ldr	r0, [pc, #100]	; (1e4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    1de6:	4c1a      	ldr	r4, [pc, #104]	; (1e50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    1de8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1dec:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1df0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1df4:	2920      	cmp	r1, #32
    1df6:	d022      	beq.n	1e3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    1df8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1dfc:	7840      	ldrb	r0, [r0, #1]
    1dfe:	784c      	ldrb	r4, [r1, #1]
    1e00:	7048      	strb	r0, [r1, #1]
    1e02:	4620      	mov	r0, r4
    1e04:	4601      	mov	r1, r0
    1e06:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1e0a:	4291      	cmp	r1, r2
    1e0c:	7005      	strb	r5, [r0, #0]
    1e0e:	7840      	ldrb	r0, [r0, #1]
    1e10:	d1f8      	bne.n	1e04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1e12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1e16:	2a20      	cmp	r2, #32
    1e18:	bf1a      	itte	ne
    1e1a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1e1e:	7054      	strbne	r4, [r2, #1]
    1e20:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1e24:	2220      	movs	r2, #32
    1e26:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1e2a:	f88c 2001 	strb.w	r2, [ip, #1]
    1e2e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1e32:	bd70      	pop	{r4, r5, r6, pc}
    1e34:	f240 217e 	movw	r1, #638	; 0x27e
    1e38:	2070      	movs	r0, #112	; 0x70
    1e3a:	f003 f999 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3e:	f893 4020 	ldrb.w	r4, [r3, #32]
    1e42:	7840      	ldrb	r0, [r0, #1]
    1e44:	f883 0020 	strb.w	r0, [r3, #32]
    1e48:	e7db      	b.n	1e02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    1e4a:	0000      	.short	0x0000
    1e4c:	2000112c 	.word	0x2000112c
    1e50:	200011ac 	.word	0x200011ac
    1e54:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e58:	b085      	sub	sp, #20
    1e5a:	4615      	mov	r5, r2
    1e5c:	460c      	mov	r4, r1
    1e5e:	f002 f8ef 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e62:	4428      	add	r0, r5
    1e64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e68:	9002      	str	r0, [sp, #8]
    1e6a:	6821      	ldr	r1, [r4, #0]
    1e6c:	1a08      	subs	r0, r1, r0
    1e6e:	0200      	lsls	r0, r0, #8
    1e70:	17c1      	asrs	r1, r0, #31
    1e72:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1e76:	1200      	asrs	r0, r0, #8
    1e78:	2800      	cmp	r0, #0
    1e7a:	f300 80d5 	bgt.w	2028 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    1e7e:	48ac      	ldr	r0, [pc, #688]	; (2130 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    1e80:	9f08      	ldr	r7, [sp, #32]
    1e82:	4eac      	ldr	r6, [pc, #688]	; (2134 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    1e84:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1e88:	9003      	str	r0, [sp, #12]
    1e8a:	f890 5020 	ldrb.w	r5, [r0, #32]
    1e8e:	2020      	movs	r0, #32
    1e90:	46e9      	mov	r9, sp
    1e92:	f10d 0804 	add.w	r8, sp, #4
    1e96:	f88d 0000 	strb.w	r0, [sp]
    1e9a:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1e9e:	2d20      	cmp	r5, #32
    1ea0:	bf18      	it	ne
    1ea2:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    1ea6:	d025      	beq.n	1ef4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1ea8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1eac:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1eb0:	6822      	ldr	r2, [r4, #0]
    1eb2:	68c1      	ldr	r1, [r0, #12]
    1eb4:	1a51      	subs	r1, r2, r1
    1eb6:	0209      	lsls	r1, r1, #8
    1eb8:	17ca      	asrs	r2, r1, #31
    1eba:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1ebe:	3008      	adds	r0, #8
    1ec0:	1209      	asrs	r1, r1, #8
    1ec2:	d417      	bmi.n	1ef4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1ec4:	8961      	ldrh	r1, [r4, #10]
    1ec6:	b171      	cbz	r1, 1ee6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1ec8:	8941      	ldrh	r1, [r0, #10]
    1eca:	b961      	cbnz	r1, 1ee6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1ecc:	f000 fdb4 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    1ed0:	f002 f8b6 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ed4:	6821      	ldr	r1, [r4, #0]
    1ed6:	1a08      	subs	r0, r1, r0
    1ed8:	0200      	lsls	r0, r0, #8
    1eda:	17c1      	asrs	r1, r0, #31
    1edc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1ee0:	1200      	asrs	r0, r0, #8
    1ee2:	2833      	cmp	r0, #51	; 0x33
    1ee4:	db06      	blt.n	1ef4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1ee6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1eea:	f889 5000 	strb.w	r5, [r9]
    1eee:	7845      	ldrb	r5, [r0, #1]
    1ef0:	2d20      	cmp	r5, #32
    1ef2:	d1d9      	bne.n	1ea8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1ef4:	f899 0000 	ldrb.w	r0, [r9]
    1ef8:	f888 0000 	strb.w	r0, [r8]
    1efc:	46a1      	mov	r9, r4
    1efe:	2d20      	cmp	r5, #32
    1f00:	bf1c      	itt	ne
    1f02:	488d      	ldrne	r0, [pc, #564]	; (2138 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1f04:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1f08:	f000 810e 	beq.w	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1f0c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1f10:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1f14:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1f18:	f8da 1008 	ldr.w	r1, [sl, #8]
    1f1c:	4648      	mov	r0, r9
    1f1e:	1a89      	subs	r1, r1, r2
    1f20:	0209      	lsls	r1, r1, #8
    1f22:	17ca      	asrs	r2, r1, #31
    1f24:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1f28:	f10a 0708 	add.w	r7, sl, #8
    1f2c:	1209      	asrs	r1, r1, #8
    1f2e:	d415      	bmi.n	1f5c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    1f30:	8979      	ldrh	r1, [r7, #10]
    1f32:	2900      	cmp	r1, #0
    1f34:	f000 80f8 	beq.w	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1f38:	8941      	ldrh	r1, [r0, #10]
    1f3a:	2900      	cmp	r1, #0
    1f3c:	f040 80f4 	bne.w	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1f40:	f000 fd7a 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    1f44:	f002 f87c 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f48:	6839      	ldr	r1, [r7, #0]
    1f4a:	1a08      	subs	r0, r1, r0
    1f4c:	0200      	lsls	r0, r0, #8
    1f4e:	17c1      	asrs	r1, r0, #31
    1f50:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1f54:	1200      	asrs	r0, r0, #8
    1f56:	2833      	cmp	r0, #51	; 0x33
    1f58:	f280 80e6 	bge.w	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1f5c:	f888 5000 	strb.w	r5, [r8]
    1f60:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1f64:	f899 000c 	ldrb.w	r0, [r9, #12]
    1f68:	4281      	cmp	r1, r0
    1f6a:	d906      	bls.n	1f7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1f6c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1f70:	7845      	ldrb	r5, [r0, #1]
    1f72:	2d20      	cmp	r5, #32
    1f74:	d1ca      	bne.n	1f0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1f76:	f000 b8d7 	b.w	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1f7a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f82:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1f86:	8a68      	ldrh	r0, [r5, #18]
    1f88:	68ef      	ldr	r7, [r5, #12]
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d143      	bne.n	2016 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1f8e:	8960      	ldrh	r0, [r4, #10]
    1f90:	b3e8      	cbz	r0, 200e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1f92:	68a8      	ldr	r0, [r5, #8]
    1f94:	f00b fa99 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1f98:	8a69      	ldrh	r1, [r5, #18]
    1f9a:	7c2a      	ldrb	r2, [r5, #16]
    1f9c:	4b67      	ldr	r3, [pc, #412]	; (213c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1f9e:	4411      	add	r1, r2
    1fa0:	1c49      	adds	r1, r1, #1
    1fa2:	1842      	adds	r2, r0, r1
    1fa4:	4298      	cmp	r0, r3
    1fa6:	d904      	bls.n	1fb2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    1fa8:	f240 6109 	movw	r1, #1545	; 0x609
    1fac:	2070      	movs	r0, #112	; 0x70
    1fae:	f003 f8df 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fb2:	4863      	ldr	r0, [pc, #396]	; (2140 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1fb4:	4281      	cmp	r1, r0
    1fb6:	dd04      	ble.n	1fc2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    1fb8:	f240 610a 	movw	r1, #1546	; 0x60a
    1fbc:	2070      	movs	r0, #112	; 0x70
    1fbe:	f003 f8d7 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fc2:	4860      	ldr	r0, [pc, #384]	; (2144 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1fc4:	4281      	cmp	r1, r0
    1fc6:	da04      	bge.n	1fd2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    1fc8:	f240 610b 	movw	r1, #1547	; 0x60b
    1fcc:	2070      	movs	r0, #112	; 0x70
    1fce:	f003 f8cf 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fd2:	485d      	ldr	r0, [pc, #372]	; (2148 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1fd4:	4290      	cmp	r0, r2
    1fd6:	bfdc      	itt	le
    1fd8:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1fdc:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1fe0:	dd05      	ble.n	1fee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1fe2:	2a00      	cmp	r2, #0
    1fe4:	bfbc      	itt	lt
    1fe6:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1fea:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1fee:	4610      	mov	r0, r2
    1ff0:	f002 f826 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ff4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ff8:	1a78      	subs	r0, r7, r1
    1ffa:	0200      	lsls	r0, r0, #8
    1ffc:	17c2      	asrs	r2, r0, #31
    1ffe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2002:	1200      	asrs	r0, r0, #8
    2004:	2833      	cmp	r0, #51	; 0x33
    2006:	bfb8      	it	lt
    2008:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    200c:	e000      	b.n	2010 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    200e:	e002      	b.n	2016 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    2010:	bfb8      	it	lt
    2012:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    2016:	9802      	ldr	r0, [sp, #8]
    2018:	1a38      	subs	r0, r7, r0
    201a:	0200      	lsls	r0, r0, #8
    201c:	17c1      	asrs	r1, r0, #31
    201e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2022:	1200      	asrs	r0, r0, #8
    2024:	2800      	cmp	r0, #0
    2026:	dd03      	ble.n	2030 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    2028:	b009      	add	sp, #36	; 0x24
    202a:	2000      	movs	r0, #0
    202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2030:	e9d4 1000 	ldrd	r1, r0, [r4]
    2034:	1a40      	subs	r0, r0, r1
    2036:	4438      	add	r0, r7
    2038:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    203c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2040:	e9c4 1000 	strd	r1, r0, [r4]
    2044:	9803      	ldr	r0, [sp, #12]
    2046:	f8dd 8020 	ldr.w	r8, [sp, #32]
    204a:	466f      	mov	r7, sp
    204c:	f890 5020 	ldrb.w	r5, [r0, #32]
    2050:	2020      	movs	r0, #32
    2052:	f10d 0a04 	add.w	sl, sp, #4
    2056:	f88d 0000 	strb.w	r0, [sp]
    205a:	2d20      	cmp	r5, #32
    205c:	bf1c      	itt	ne
    205e:	4836      	ldrne	r0, [pc, #216]	; (2138 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    2060:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    2064:	d025      	beq.n	20b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    2066:	bf00      	nop
    2068:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    206c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2070:	6822      	ldr	r2, [r4, #0]
    2072:	68c1      	ldr	r1, [r0, #12]
    2074:	1a51      	subs	r1, r2, r1
    2076:	0209      	lsls	r1, r1, #8
    2078:	17ca      	asrs	r2, r1, #31
    207a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    207e:	3008      	adds	r0, #8
    2080:	1209      	asrs	r1, r1, #8
    2082:	d416      	bmi.n	20b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    2084:	8961      	ldrh	r1, [r4, #10]
    2086:	b171      	cbz	r1, 20a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    2088:	8941      	ldrh	r1, [r0, #10]
    208a:	b961      	cbnz	r1, 20a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    208c:	f000 fcd4 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    2090:	f001 ffd6 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2094:	6821      	ldr	r1, [r4, #0]
    2096:	1a08      	subs	r0, r1, r0
    2098:	0200      	lsls	r0, r0, #8
    209a:	17c1      	asrs	r1, r0, #31
    209c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    20a0:	1200      	asrs	r0, r0, #8
    20a2:	2833      	cmp	r0, #51	; 0x33
    20a4:	db05      	blt.n	20b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    20a6:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    20aa:	703d      	strb	r5, [r7, #0]
    20ac:	7845      	ldrb	r5, [r0, #1]
    20ae:	2d20      	cmp	r5, #32
    20b0:	d1da      	bne.n	2068 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    20b2:	7838      	ldrb	r0, [r7, #0]
    20b4:	f88a 0000 	strb.w	r0, [sl]
    20b8:	4627      	mov	r7, r4
    20ba:	2d20      	cmp	r5, #32
    20bc:	bf1c      	itt	ne
    20be:	481e      	ldrne	r0, [pc, #120]	; (2138 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    20c0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    20c4:	d030      	beq.n	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    20c6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    20ca:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    20ce:	6879      	ldr	r1, [r7, #4]
    20d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    20d4:	4638      	mov	r0, r7
    20d6:	1a51      	subs	r1, r2, r1
    20d8:	0209      	lsls	r1, r1, #8
    20da:	17ca      	asrs	r2, r1, #31
    20dc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    20e0:	f109 0808 	add.w	r8, r9, #8
    20e4:	1209      	asrs	r1, r1, #8
    20e6:	d412      	bmi.n	210e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    20e8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    20ec:	b1e1      	cbz	r1, 2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    20ee:	8941      	ldrh	r1, [r0, #10]
    20f0:	b9d1      	cbnz	r1, 2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    20f2:	f000 fca1 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    20f6:	f001 ffa3 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    20fa:	f8d8 1000 	ldr.w	r1, [r8]
    20fe:	1a08      	subs	r0, r1, r0
    2100:	0200      	lsls	r0, r0, #8
    2102:	17c1      	asrs	r1, r0, #31
    2104:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2108:	1200      	asrs	r0, r0, #8
    210a:	2833      	cmp	r0, #51	; 0x33
    210c:	da0c      	bge.n	2128 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    210e:	f88a 5000 	strb.w	r5, [sl]
    2112:	f899 0014 	ldrb.w	r0, [r9, #20]
    2116:	7b39      	ldrb	r1, [r7, #12]
    2118:	4288      	cmp	r0, r1
    211a:	f67f af2e 	bls.w	1f7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    211e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2122:	7845      	ldrb	r5, [r0, #1]
    2124:	2d20      	cmp	r5, #32
    2126:	d1ce      	bne.n	20c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    2128:	b009      	add	sp, #36	; 0x24
    212a:	2001      	movs	r0, #1
    212c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2130:	200011ac 	.word	0x200011ac
    2134:	20000e2c 	.word	0x20000e2c
    2138:	2000112c 	.word	0x2000112c
    213c:	1e847fff 	.word	0x1e847fff
    2140:	07a12000 	.word	0x07a12000
    2144:	f85ee000 	.word	0xf85ee000
    2148:	1e848000 	.word	0x1e848000
    214c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2150:	4604      	mov	r4, r0
    2152:	483c      	ldr	r0, [pc, #240]	; (2244 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    2154:	460e      	mov	r6, r1
    2156:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    215a:	4f3b      	ldr	r7, [pc, #236]	; (2248 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    215c:	f890 5020 	ldrb.w	r5, [r0, #32]
    2160:	2020      	movs	r0, #32
    2162:	4698      	mov	r8, r3
    2164:	4692      	mov	sl, r2
    2166:	7010      	strb	r0, [r2, #0]
    2168:	f507 7940 	add.w	r9, r7, #768	; 0x300
    216c:	2d20      	cmp	r5, #32
    216e:	bf18      	it	ne
    2170:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    2174:	d028      	beq.n	21c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    2176:	bf00      	nop
    2178:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    217c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    2180:	f100 0108 	add.w	r1, r0, #8
    2184:	68c0      	ldr	r0, [r0, #12]
    2186:	6822      	ldr	r2, [r4, #0]
    2188:	1a10      	subs	r0, r2, r0
    218a:	0200      	lsls	r0, r0, #8
    218c:	17c2      	asrs	r2, r0, #31
    218e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2192:	1200      	asrs	r0, r0, #8
    2194:	d418      	bmi.n	21c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    2196:	8960      	ldrh	r0, [r4, #10]
    2198:	b178      	cbz	r0, 21ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    219a:	8948      	ldrh	r0, [r1, #10]
    219c:	b968      	cbnz	r0, 21ba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    219e:	4608      	mov	r0, r1
    21a0:	f000 fc4a 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    21a4:	f001 ff4c 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    21a8:	6821      	ldr	r1, [r4, #0]
    21aa:	1a08      	subs	r0, r1, r0
    21ac:	0200      	lsls	r0, r0, #8
    21ae:	17c1      	asrs	r1, r0, #31
    21b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    21b4:	1200      	asrs	r0, r0, #8
    21b6:	2833      	cmp	r0, #51	; 0x33
    21b8:	db06      	blt.n	21c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    21ba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    21be:	f88a 5000 	strb.w	r5, [sl]
    21c2:	7845      	ldrb	r5, [r0, #1]
    21c4:	2d20      	cmp	r5, #32
    21c6:	d1d7      	bne.n	2178 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    21c8:	f89a 0000 	ldrb.w	r0, [sl]
    21cc:	f888 0000 	strb.w	r0, [r8]
    21d0:	2d20      	cmp	r5, #32
    21d2:	bf18      	it	ne
    21d4:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    21d8:	d030      	beq.n	223c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    21da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    21de:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    21e2:	6861      	ldr	r1, [r4, #4]
    21e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    21e8:	4620      	mov	r0, r4
    21ea:	1a51      	subs	r1, r2, r1
    21ec:	0209      	lsls	r1, r1, #8
    21ee:	17ca      	asrs	r2, r1, #31
    21f0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    21f4:	f109 0608 	add.w	r6, r9, #8
    21f8:	1209      	asrs	r1, r1, #8
    21fa:	d410      	bmi.n	221e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    21fc:	8971      	ldrh	r1, [r6, #10]
    21fe:	b1e9      	cbz	r1, 223c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    2200:	8941      	ldrh	r1, [r0, #10]
    2202:	b9d9      	cbnz	r1, 223c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    2204:	f000 fc18 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    2208:	f001 ff1a 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    220c:	6831      	ldr	r1, [r6, #0]
    220e:	1a08      	subs	r0, r1, r0
    2210:	0200      	lsls	r0, r0, #8
    2212:	17c1      	asrs	r1, r0, #31
    2214:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2218:	1200      	asrs	r0, r0, #8
    221a:	2833      	cmp	r0, #51	; 0x33
    221c:	da0e      	bge.n	223c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    221e:	f888 5000 	strb.w	r5, [r8]
    2222:	f899 0014 	ldrb.w	r0, [r9, #20]
    2226:	7b21      	ldrb	r1, [r4, #12]
    2228:	4288      	cmp	r0, r1
    222a:	d802      	bhi.n	2232 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    222c:	2000      	movs	r0, #0
    222e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2232:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    2236:	7845      	ldrb	r5, [r0, #1]
    2238:	2d20      	cmp	r5, #32
    223a:	d1ce      	bne.n	21da <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    223c:	2001      	movs	r0, #1
    223e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2242:	0000      	.short	0x0000
    2244:	200011ac 	.word	0x200011ac
    2248:	20000e2c 	.word	0x20000e2c
    224c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2250:	b098      	sub	sp, #96	; 0x60
    2252:	4616      	mov	r6, r2
    2254:	460d      	mov	r5, r1
    2256:	f04f 0800 	mov.w	r8, #0
    225a:	f04f 0b01 	mov.w	fp, #1
    225e:	f002 f971 	bl	4544 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    2262:	4604      	mov	r4, r0
    2264:	2d01      	cmp	r5, #1
    2266:	bf18      	it	ne
    2268:	2d02      	cmpne	r5, #2
    226a:	d005      	beq.n	2278 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    226c:	f640 1194 	movw	r1, #2452	; 0x994
    2270:	f04f 0070 	mov.w	r0, #112	; 0x70
    2274:	f002 ff7c 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2278:	49f9      	ldr	r1, [pc, #996]	; (2660 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a0>)
    227a:	2001      	movs	r0, #1
    227c:	6008      	str	r0, [r1, #0]
    227e:	49f9      	ldr	r1, [pc, #996]	; (2664 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a4>)
    2280:	6889      	ldr	r1, [r1, #8]
    2282:	6008      	str	r0, [r1, #0]
    2284:	2000      	movs	r0, #0
    2286:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    228a:	900c      	str	r0, [sp, #48]	; 0x30
    228c:	1e40      	subs	r0, r0, #1
    228e:	900e      	str	r0, [sp, #56]	; 0x38
    2290:	49f5      	ldr	r1, [pc, #980]	; (2668 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    2292:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2296:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    229a:	3308      	adds	r3, #8
    229c:	af0f      	add	r7, sp, #60	; 0x3c
    229e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    22a0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    22a4:	a80f      	add	r0, sp, #60	; 0x3c
    22a6:	f000 fbc7 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    22aa:	900d      	str	r0, [sp, #52]	; 0x34
    22ac:	48ee      	ldr	r0, [pc, #952]	; (2668 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    22ae:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    22b2:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    22b6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    22ba:	f1b9 0f00 	cmp.w	r9, #0
    22be:	bf14      	ite	ne
    22c0:	f04f 0a01 	movne.w	sl, #1
    22c4:	f04f 0a00 	moveq.w	sl, #0
    22c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    22ca:	9014      	str	r0, [sp, #80]	; 0x50
    22cc:	f1ba 0f00 	cmp.w	sl, #0
    22d0:	d009      	beq.n	22e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    22d2:	48e6      	ldr	r0, [pc, #920]	; (266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    22d4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    22d8:	b928      	cbnz	r0, 22e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    22da:	f002 fed1 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    22de:	2800      	cmp	r0, #0
    22e0:	bf08      	it	eq
    22e2:	2701      	moveq	r7, #1
    22e4:	d000      	beq.n	22e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    22e6:	2700      	movs	r7, #0
    22e8:	48e1      	ldr	r0, [pc, #900]	; (2670 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    22ea:	2200      	movs	r2, #0
    22ec:	9215      	str	r2, [sp, #84]	; 0x54
    22ee:	7800      	ldrb	r0, [r0, #0]
    22f0:	4616      	mov	r6, r2
    22f2:	2801      	cmp	r0, #1
    22f4:	bf18      	it	ne
    22f6:	2803      	cmpne	r0, #3
    22f8:	d140      	bne.n	237c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    22fa:	48dd      	ldr	r0, [pc, #884]	; (2670 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    22fc:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    2300:	eba8 0009 	sub.w	r0, r8, r9
    2304:	9015      	str	r0, [sp, #84]	; 0x54
    2306:	45c8      	cmp	r8, r9
    2308:	d938      	bls.n	237c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    230a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    230c:	ea6f 0108 	mvn.w	r1, r8
    2310:	f8df e360 	ldr.w	lr, [pc, #864]	; 2674 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>
    2314:	1858      	adds	r0, r3, r1
    2316:	f10d 0c0c 	add.w	ip, sp, #12
    231a:	aa17      	add	r2, sp, #92	; 0x5c
    231c:	4573      	cmp	r3, lr
    231e:	d904      	bls.n	232a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    2320:	f240 6109 	movw	r1, #1545	; 0x609
    2324:	2070      	movs	r0, #112	; 0x70
    2326:	f002 ff23 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    232a:	4bd3      	ldr	r3, [pc, #844]	; (2678 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    232c:	4299      	cmp	r1, r3
    232e:	dd04      	ble.n	233a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    2330:	f240 610a 	movw	r1, #1546	; 0x60a
    2334:	2070      	movs	r0, #112	; 0x70
    2336:	f002 ff1b 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233a:	4bd0      	ldr	r3, [pc, #832]	; (267c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    233c:	4299      	cmp	r1, r3
    233e:	da04      	bge.n	234a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    2340:	f240 610b 	movw	r1, #1547	; 0x60b
    2344:	2070      	movs	r0, #112	; 0x70
    2346:	f002 ff13 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    234a:	49cd      	ldr	r1, [pc, #820]	; (2680 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    234c:	4281      	cmp	r1, r0
    234e:	bfdc      	itt	le
    2350:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2354:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2358:	dd05      	ble.n	2366 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    235a:	2800      	cmp	r0, #0
    235c:	bfbc      	itt	lt
    235e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2362:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2366:	4661      	mov	r1, ip
    2368:	f001 fe86 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    236c:	9803      	ldr	r0, [sp, #12]
    236e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2370:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2374:	9003      	str	r0, [sp, #12]
    2376:	1a08      	subs	r0, r1, r0
    2378:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    237c:	2f00      	cmp	r7, #0
    237e:	bf18      	it	ne
    2380:	2632      	movne	r6, #50	; 0x32
    2382:	d104      	bne.n	238e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    2384:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2388:	2800      	cmp	r0, #0
    238a:	bf18      	it	ne
    238c:	2602      	movne	r6, #2
    238e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    2392:	d008      	beq.n	23a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    2394:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2396:	1b00      	subs	r0, r0, r4
    2398:	0200      	lsls	r0, r0, #8
    239a:	17c1      	asrs	r1, r0, #31
    239c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23a0:	1200      	asrs	r0, r0, #8
    23a2:	2801      	cmp	r0, #1
    23a4:	da02      	bge.n	23ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    23a6:	2004      	movs	r0, #4
    23a8:	9918      	ldr	r1, [sp, #96]	; 0x60
    23aa:	e00b      	b.n	23c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    23ac:	b147      	cbz	r7, 23c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    23ae:	48af      	ldr	r0, [pc, #700]	; (266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    23b0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    23b4:	b120      	cbz	r0, 23c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    23b6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    23ba:	1c06      	adds	r6, r0, #0
    23bc:	bf18      	it	ne
    23be:	2602      	movne	r6, #2
    23c0:	4621      	mov	r1, r4
    23c2:	2001      	movs	r0, #1
    23c4:	f1b9 0f00 	cmp.w	r9, #0
    23c8:	d002      	beq.n	23d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    23ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    23cc:	2b1e      	cmp	r3, #30
    23ce:	da02      	bge.n	23d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    23d0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    23d4:	b113      	cbz	r3, 23dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    23d6:	f04f 0b00 	mov.w	fp, #0
    23da:	1e40      	subs	r0, r0, #1
    23dc:	1983      	adds	r3, r0, r6
    23de:	48a4      	ldr	r0, [pc, #656]	; (2670 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    23e0:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    23e4:	7800      	ldrb	r0, [r0, #0]
    23e6:	9015      	str	r0, [sp, #84]	; 0x54
    23e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    23ea:	1a80      	subs	r0, r0, r2
    23ec:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    23f0:	ebac 0001 	sub.w	r0, ip, r1
    23f4:	0200      	lsls	r0, r0, #8
    23f6:	17c6      	asrs	r6, r0, #31
    23f8:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    23fc:	1200      	asrs	r0, r0, #8
    23fe:	4298      	cmp	r0, r3
    2400:	db18      	blt.n	2434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    2402:	2a00      	cmp	r2, #0
    2404:	bf18      	it	ne
    2406:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    240a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    240c:	9705      	str	r7, [sp, #20]
    240e:	2700      	movs	r7, #0
    2410:	f001 ff90 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2414:	1a30      	subs	r0, r6, r0
    2416:	0200      	lsls	r0, r0, #8
    2418:	17c1      	asrs	r1, r0, #31
    241a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    241e:	1200      	asrs	r0, r0, #8
    2420:	283e      	cmp	r0, #62	; 0x3e
    2422:	da3f      	bge.n	24a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    2424:	2d01      	cmp	r5, #1
    2426:	d020      	beq.n	246a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    2428:	1e70      	subs	r0, r6, #1
    242a:	9905      	ldr	r1, [sp, #20]
    242c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2430:	b319      	cbz	r1, 247a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    2432:	e02d      	b.n	2490 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    2434:	b182      	cbz	r2, 2458 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    2436:	f1be 0f00 	cmp.w	lr, #0
    243a:	bf04      	itt	eq
    243c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    243e:	2803      	cmpeq	r0, #3
    2440:	d00a      	beq.n	2458 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    2442:	b927      	cbnz	r7, 244e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    2444:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2448:	2800      	cmp	r0, #0
    244a:	bf18      	it	ne
    244c:	1e9b      	subne	r3, r3, #2
    244e:	2200      	movs	r2, #0
    2450:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    2454:	4690      	mov	r8, r2
    2456:	e7c7      	b.n	23e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    2458:	bb07      	cbnz	r7, 249c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    245a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    245e:	b1e8      	cbz	r0, 249c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    2460:	2000      	movs	r0, #0
    2462:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    2466:	1e9b      	subs	r3, r3, #2
    2468:	e7be      	b.n	23e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    246a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    246e:	d120      	bne.n	24b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    2470:	f640 110d 	movw	r1, #2317	; 0x90d
    2474:	2070      	movs	r0, #112	; 0x70
    2476:	f002 fe7b 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    247a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    247e:	d007      	beq.n	2490 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    2480:	1a21      	subs	r1, r4, r0
    2482:	0209      	lsls	r1, r1, #8
    2484:	17ca      	asrs	r2, r1, #31
    2486:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    248a:	1209      	asrs	r1, r1, #8
    248c:	2904      	cmp	r1, #4
    248e:	dd03      	ble.n	2498 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    2490:	4604      	mov	r4, r0
    2492:	f001 ff55 	bl	4340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2496:	e00c      	b.n	24b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    2498:	2900      	cmp	r1, #0
    249a:	dd0a      	ble.n	24b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    249c:	b01b      	add	sp, #108	; 0x6c
    249e:	2000      	movs	r0, #0
    24a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24a4:	1e70      	subs	r0, r6, #1
    24a6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    24aa:	4620      	mov	r0, r4
    24ac:	f001 ff48 	bl	4340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24b0:	4657      	mov	r7, sl
    24b2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    24b6:	d024      	beq.n	2502 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    24b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    24ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    24bc:	1b00      	subs	r0, r0, r4
    24be:	1b1b      	subs	r3, r3, r4
    24c0:	4a70      	ldr	r2, [pc, #448]	; (2684 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    24c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    24ca:	4583      	cmp	fp, r0
    24cc:	bf98      	it	ls
    24ce:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    24d2:	d2e3      	bcs.n	249c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    24d4:	429a      	cmp	r2, r3
    24d6:	d3e1      	bcc.n	249c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    24d8:	4620      	mov	r0, r4
    24da:	f00a fff6 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    24de:	4965      	ldr	r1, [pc, #404]	; (2674 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    24e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    24e2:	1c4b      	adds	r3, r1, #1
    24e4:	1a16      	subs	r6, r2, r0
    24e6:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    24ea:	bf24      	itt	cs
    24ec:	eba0 0c02 	subcs.w	ip, r0, r2
    24f0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    24f4:	d310      	bcc.n	2518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    24f6:	42b1      	cmp	r1, r6
    24f8:	d208      	bcs.n	250c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    24fa:	1a08      	subs	r0, r1, r0
    24fc:	4410      	add	r0, r2
    24fe:	1c46      	adds	r6, r0, #1
    2500:	e00a      	b.n	2518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    2502:	f640 212d 	movw	r1, #2605	; 0xa2d
    2506:	2070      	movs	r0, #112	; 0x70
    2508:	f002 fe32 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    250c:	4561      	cmp	r1, ip
    250e:	d22c      	bcs.n	256a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    2510:	1a89      	subs	r1, r1, r2
    2512:	4408      	add	r0, r1
    2514:	1c40      	adds	r0, r0, #1
    2516:	4246      	negs	r6, r0
    2518:	4854      	ldr	r0, [pc, #336]	; (266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    251a:	7f80      	ldrb	r0, [r0, #30]
    251c:	b350      	cbz	r0, 2574 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    251e:	4628      	mov	r0, r5
    2520:	4645      	mov	r5, r8
    2522:	f04f 0b00 	mov.w	fp, #0
    2526:	46d8      	mov	r8, fp
    2528:	2801      	cmp	r0, #1
    252a:	d005      	beq.n	2538 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    252c:	2002      	movs	r0, #2
    252e:	f002 f95f 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2532:	2001      	movs	r0, #1
    2534:	f002 f95c 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2538:	45a9      	cmp	r9, r5
    253a:	d227      	bcs.n	258c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    253c:	eba6 0105 	sub.w	r1, r6, r5
    2540:	f04f 0301 	mov.w	r3, #1
    2544:	f04f 0203 	mov.w	r2, #3
    2548:	f04f 0002 	mov.w	r0, #2
    254c:	f002 f87c 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2550:	2800      	cmp	r0, #0
    2552:	bf08      	it	eq
    2554:	f04f 0801 	moveq.w	r8, #1
    2558:	f1b9 0f00 	cmp.w	r9, #0
    255c:	d030      	beq.n	25c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    255e:	2301      	movs	r3, #1
    2560:	eba6 0109 	sub.w	r1, r6, r9
    2564:	2203      	movs	r2, #3
    2566:	4618      	mov	r0, r3
    2568:	e01e      	b.n	25a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    256a:	f640 310c 	movw	r1, #2828	; 0xb0c
    256e:	2070      	movs	r0, #112	; 0x70
    2570:	f002 fdfe 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2574:	45c1      	cmp	r9, r8
    2576:	bf34      	ite	cc
    2578:	4640      	movcc	r0, r8
    257a:	4648      	movcs	r0, r9
    257c:	4458      	add	r0, fp
    257e:	42b0      	cmp	r0, r6
    2580:	dbcd      	blt.n	251e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    2582:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    2586:	2070      	movs	r0, #112	; 0x70
    2588:	f002 fdf2 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    258c:	d910      	bls.n	25b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    258e:	2301      	movs	r3, #1
    2590:	eba6 0109 	sub.w	r1, r6, r9
    2594:	2203      	movs	r2, #3
    2596:	4618      	mov	r0, r3
    2598:	f002 f856 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    259c:	b328      	cbz	r0, 25ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    259e:	b17d      	cbz	r5, 25c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    25a0:	1b71      	subs	r1, r6, r5
    25a2:	2301      	movs	r3, #1
    25a4:	2203      	movs	r2, #3
    25a6:	2002      	movs	r0, #2
    25a8:	f002 f84e 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    25ac:	b1e8      	cbz	r0, 25ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    25ae:	e007      	b.n	25c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    25b0:	ea55 0009 	orrs.w	r0, r5, r9
    25b4:	d004      	beq.n	25c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    25b6:	f640 1177 	movw	r1, #2423	; 0x977
    25ba:	2070      	movs	r0, #112	; 0x70
    25bc:	f002 fdd8 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c0:	2301      	movs	r3, #1
    25c2:	2203      	movs	r2, #3
    25c4:	4631      	mov	r1, r6
    25c6:	2000      	movs	r0, #0
    25c8:	f002 f83e 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    25cc:	b168      	cbz	r0, 25ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    25ce:	2501      	movs	r5, #1
    25d0:	f1b8 0f00 	cmp.w	r8, #0
    25d4:	d003      	beq.n	25de <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x81e>
    25d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    25d8:	900f      	str	r0, [sp, #60]	; 0x3c
    25da:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    25de:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>
    25e2:	f1ba 0f00 	cmp.w	sl, #0
    25e6:	d10e      	bne.n	2606 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    25e8:	e009      	b.n	25fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83e>
    25ea:	2002      	movs	r0, #2
    25ec:	f002 f900 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    25f0:	2001      	movs	r0, #1
    25f2:	f002 f8fd 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    25f6:	b01b      	add	sp, #108	; 0x6c
    25f8:	2000      	movs	r0, #0
    25fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25fe:	481b      	ldr	r0, [pc, #108]	; (266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    2600:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    2604:	b100      	cbz	r0, 2608 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x848>
    2606:	b34f      	cbz	r7, 265c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    2608:	f8df a060 	ldr.w	sl, [pc, #96]	; 266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>
    260c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    2610:	b118      	cbz	r0, 261a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    2612:	f002 fbdf 	bl	4dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2616:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    261a:	b307      	cbz	r7, 265e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89e>
    261c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    2620:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2624:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2628:	f8c8 0000 	str.w	r0, [r8]
    262c:	2300      	movs	r3, #0
    262e:	2203      	movs	r2, #3
    2630:	2005      	movs	r0, #5
    2632:	f002 f809 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2636:	b368      	cbz	r0, 2694 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    2638:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    263c:	2005      	movs	r0, #5
    263e:	f002 f9bd 	bl	49bc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    2642:	4912      	ldr	r1, [pc, #72]	; (268c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    2644:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    2648:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    264c:	4910      	ldr	r1, [pc, #64]	; (2690 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    264e:	12e0      	asrs	r0, r4, #11
    2650:	6008      	str	r0, [r1, #0]
    2652:	4c06      	ldr	r4, [pc, #24]	; (266c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    2654:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2658:	b3e8      	cbz	r0, 26d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x916>
    265a:	e030      	b.n	26be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    265c:	e01b      	b.n	2696 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d6>
    265e:	e01f      	b.n	26a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    2660:	40000508 	.word	0x40000508
    2664:	20000014 	.word	0x20000014
    2668:	20000e2c 	.word	0x20000e2c
    266c:	200011ac 	.word	0x200011ac
    2670:	20000016 	.word	0x20000016
    2674:	1e847fff 	.word	0x1e847fff
    2678:	07a12000 	.word	0x07a12000
    267c:	f85ee000 	.word	0xf85ee000
    2680:	1e848000 	.word	0x1e848000
    2684:	003fffff 	.word	0x003fffff
    2688:	4001f508 	.word	0x4001f508
    268c:	4001f098 	.word	0x4001f098
    2690:	4001f504 	.word	0x4001f504
    2694:	e025      	b.n	26e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x922>
    2696:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2750 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>
    269a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    269e:	b1c8      	cbz	r0, 26d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x914>
    26a0:	4c2b      	ldr	r4, [pc, #172]	; (2750 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x990>)
    26a2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    26a6:	b150      	cbz	r0, 26be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    26a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    26ac:	f8c8 0000 	str.w	r0, [r8]
    26b0:	2005      	movs	r0, #5
    26b2:	f002 f89d 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    26b6:	f002 fbf5 	bl	4ea4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    26ba:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    26be:	eba6 0009 	sub.w	r0, r6, r9
    26c2:	f1a0 0119 	sub.w	r1, r0, #25
    26c6:	2900      	cmp	r1, #0
    26c8:	dc15      	bgt.n	26f6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x936>
    26ca:	f640 2171 	movw	r1, #2673	; 0xa71
    26ce:	2070      	movs	r0, #112	; 0x70
    26d0:	f002 fd4e 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d4:	e000      	b.n	26d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x918>
    26d6:	e009      	b.n	26ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x92c>
    26d8:	f002 fb98 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26dc:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    26e0:	e79b      	b.n	261a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    26e2:	f240 313e 	movw	r1, #830	; 0x33e
    26e6:	2070      	movs	r0, #112	; 0x70
    26e8:	f002 fd42 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26ec:	f002 fbcc 	bl	4e88 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    26f0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    26f4:	e7e3      	b.n	26be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    26f6:	2203      	movs	r2, #3
    26f8:	2301      	movs	r3, #1
    26fa:	4610      	mov	r0, r2
    26fc:	f001 ffa4 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2700:	b308      	cbz	r0, 2746 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x986>
    2702:	4814      	ldr	r0, [pc, #80]	; (2754 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x994>)
    2704:	6880      	ldr	r0, [r0, #8]
    2706:	f8c0 b000 	str.w	fp, [r0]
    270a:	4813      	ldr	r0, [pc, #76]	; (2758 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x998>)
    270c:	f8c0 b000 	str.w	fp, [r0]
    2710:	ac0c      	add	r4, sp, #48	; 0x30
    2712:	4812      	ldr	r0, [pc, #72]	; (275c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x99c>)
    2714:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    2718:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    271c:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    2720:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    2724:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    2728:	ac10      	add	r4, sp, #64	; 0x40
    272a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    272e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    2732:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    2736:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    273a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    273e:	b01b      	add	sp, #108	; 0x6c
    2740:	2001      	movs	r0, #1
    2742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2746:	f640 2179 	movw	r1, #2681	; 0xa79
    274a:	2070      	movs	r0, #112	; 0x70
    274c:	f002 fd10 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2750:	200011ac 	.word	0x200011ac
    2754:	20000014 	.word	0x20000014
    2758:	40000508 	.word	0x40000508
    275c:	20000e2c 	.word	0x20000e2c
    2760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2764:	4606      	mov	r6, r0
    2766:	b083      	sub	sp, #12
    2768:	7808      	ldrb	r0, [r1, #0]
    276a:	7390      	strb	r0, [r2, #14]
    276c:	7acf      	ldrb	r7, [r1, #11]
    276e:	7357      	strb	r7, [r2, #13]
    2770:	7a88      	ldrb	r0, [r1, #10]
    2772:	7310      	strb	r0, [r2, #12]
    2774:	8908      	ldrh	r0, [r1, #8]
    2776:	4614      	mov	r4, r2
    2778:	8150      	strh	r0, [r2, #10]
    277a:	460d      	mov	r5, r1
    277c:	780a      	ldrb	r2, [r1, #0]
    277e:	495f      	ldr	r1, [pc, #380]	; (28fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb3c>)
    2780:	4699      	mov	r9, r3
    2782:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    2786:	424b      	negs	r3, r1
    2788:	f1ac 0801 	sub.w	r8, ip, #1
    278c:	b15a      	cbz	r2, 27a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9e6>
    278e:	43c0      	mvns	r0, r0
    2790:	f8d5 8004 	ldr.w	r8, [r5, #4]
    2794:	f104 0208 	add.w	r2, r4, #8
    2798:	4288      	cmp	r0, r1
    279a:	dd3d      	ble.n	2818 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa58>
    279c:	f240 610a 	movw	r1, #1546	; 0x60a
    27a0:	2070      	movs	r0, #112	; 0x70
    27a2:	f002 fce5 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27a6:	68ee      	ldr	r6, [r5, #12]
    27a8:	686d      	ldr	r5, [r5, #4]
    27aa:	ea6f 0900 	mvn.w	r9, r0
    27ae:	f104 0208 	add.w	r2, r4, #8
    27b2:	eb06 0009 	add.w	r0, r6, r9
    27b6:	4546      	cmp	r6, r8
    27b8:	d904      	bls.n	27c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa04>
    27ba:	f240 6109 	movw	r1, #1545	; 0x609
    27be:	2070      	movs	r0, #112	; 0x70
    27c0:	f002 fcd6 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c4:	4589      	cmp	r9, r1
    27c6:	dce9      	bgt.n	279c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9dc>
    27c8:	4599      	cmp	r9, r3
    27ca:	db28      	blt.n	281e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa5e>
    27cc:	4584      	cmp	ip, r0
    27ce:	bfdc      	itt	le
    27d0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    27d4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    27d8:	dd05      	ble.n	27e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa26>
    27da:	2800      	cmp	r0, #0
    27dc:	bfbc      	itt	lt
    27de:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    27e2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    27e6:	4621      	mov	r1, r4
    27e8:	f001 fc46 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    27ec:	6820      	ldr	r0, [r4, #0]
    27ee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    27f2:	1970      	adds	r0, r6, r5
    27f4:	1c40      	adds	r0, r0, #1
    27f6:	6021      	str	r1, [r4, #0]
    27f8:	2f00      	cmp	r7, #0
    27fa:	bf08      	it	eq
    27fc:	307a      	addeq	r0, #122	; 0x7a
    27fe:	d003      	beq.n	2808 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa48>
    2800:	2f01      	cmp	r7, #1
    2802:	bf08      	it	eq
    2804:	3048      	addeq	r0, #72	; 0x48
    2806:	d12d      	bne.n	2864 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaa4>
    2808:	f001 fc1a 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    280c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2810:	6060      	str	r0, [r4, #4]
    2812:	b003      	add	sp, #12
    2814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2818:	4601      	mov	r1, r0
    281a:	4298      	cmp	r0, r3
    281c:	da04      	bge.n	2828 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa68>
    281e:	f240 610b 	movw	r1, #1547	; 0x60b
    2822:	2070      	movs	r0, #112	; 0x70
    2824:	f002 fca4 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2828:	4584      	cmp	ip, r0
    282a:	bfdc      	itt	le
    282c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    2830:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    2834:	dd05      	ble.n	2842 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xa82>
    2836:	2800      	cmp	r0, #0
    2838:	bfbc      	itt	lt
    283a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    283e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    2842:	4621      	mov	r1, r4
    2844:	f001 fc18 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2848:	6820      	ldr	r0, [r4, #0]
    284a:	2f00      	cmp	r7, #0
    284c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2850:	f108 0001 	add.w	r0, r8, #1
    2854:	6021      	str	r1, [r4, #0]
    2856:	bf08      	it	eq
    2858:	307a      	addeq	r0, #122	; 0x7a
    285a:	d008      	beq.n	286e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    285c:	2f01      	cmp	r7, #1
    285e:	bf08      	it	eq
    2860:	3048      	addeq	r0, #72	; 0x48
    2862:	d004      	beq.n	286e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xaae>
    2864:	f240 61b1 	movw	r1, #1713	; 0x6b1
    2868:	2070      	movs	r0, #112	; 0x70
    286a:	f002 fc81 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    286e:	f001 fbe7 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2872:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2876:	6061      	str	r1, [r4, #4]
    2878:	8960      	ldrh	r0, [r4, #10]
    287a:	aa01      	add	r2, sp, #4
    287c:	4669      	mov	r1, sp
    287e:	f001 fbfb 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2882:	481f      	ldr	r0, [pc, #124]	; (2900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb40>)
    2884:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2888:	2920      	cmp	r1, #32
    288a:	d023      	beq.n	28d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb14>
    288c:	6900      	ldr	r0, [r0, #16]
    288e:	1d40      	adds	r0, r0, #5
    2890:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2894:	e9d4 2100 	ldrd	r2, r1, [r4]
    2898:	1a89      	subs	r1, r1, r2
    289a:	6020      	str	r0, [r4, #0]
    289c:	4408      	add	r0, r1
    289e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28a2:	6060      	str	r0, [r4, #4]
    28a4:	464b      	mov	r3, r9
    28a6:	4632      	mov	r2, r6
    28a8:	4621      	mov	r1, r4
    28aa:	68e8      	ldr	r0, [r5, #12]
    28ac:	f7ff fad2 	bl	1e54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    28b0:	2800      	cmp	r0, #0
    28b2:	bf1c      	itt	ne
    28b4:	b003      	addne	sp, #12
    28b6:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    28ba:	e9d4 1000 	ldrd	r1, r0, [r4]
    28be:	1a40      	subs	r0, r0, r1
    28c0:	4430      	add	r0, r6
    28c2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    28c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28ca:	e9c4 1000 	strd	r1, r0, [r4]
    28ce:	b003      	add	sp, #12
    28d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    28d4:	8960      	ldrh	r0, [r4, #10]
    28d6:	f106 0709 	add.w	r7, r6, #9
    28da:	b120      	cbz	r0, 28e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb26>
    28dc:	f002 fbd0 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    28e0:	2800      	cmp	r0, #0
    28e2:	bf08      	it	eq
    28e4:	3732      	addeq	r7, #50	; 0x32
    28e6:	4807      	ldr	r0, [pc, #28]	; (2904 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb44>)
    28e8:	7841      	ldrb	r1, [r0, #1]
    28ea:	9800      	ldr	r0, [sp, #0]
    28ec:	4281      	cmp	r1, r0
    28ee:	bf84      	itt	hi
    28f0:	1a08      	subhi	r0, r1, r0
    28f2:	4407      	addhi	r7, r0
    28f4:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    28f8:	e7cc      	b.n	2894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xad4>
    28fa:	0000      	.short	0x0000
    28fc:	07a12000 	.word	0x07a12000
    2900:	200011ac 	.word	0x200011ac
    2904:	20000016 	.word	0x20000016
    2908:	b510      	push	{r4, lr}
    290a:	4c15      	ldr	r4, [pc, #84]	; (2960 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba0>)
    290c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2910:	2820      	cmp	r0, #32
    2912:	bf18      	it	ne
    2914:	bd10      	popne	{r4, pc}
    2916:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    291a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    291e:	f890 1020 	ldrb.w	r1, [r0, #32]
    2922:	2920      	cmp	r1, #32
    2924:	d017      	beq.n	2956 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb96>
    2926:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2964 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xba4>
    292a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    292e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2932:	785b      	ldrb	r3, [r3, #1]
    2934:	f880 3020 	strb.w	r3, [r0, #32]
    2938:	2301      	movs	r3, #1
    293a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    293e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    2942:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2946:	2002      	movs	r0, #2
    2948:	f000 f8b0 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    294c:	2000      	movs	r0, #0
    294e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2952:	77a0      	strb	r0, [r4, #30]
    2954:	bd10      	pop	{r4, pc}
    2956:	f240 318b 	movw	r1, #907	; 0x38b
    295a:	2070      	movs	r0, #112	; 0x70
    295c:	f002 fc08 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2960:	200011ac 	.word	0x200011ac
    2964:	2000112c 	.word	0x2000112c
    2968:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    296c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2a28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc68>
    2970:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2974:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2978:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    297c:	2c20      	cmp	r4, #32
    297e:	bf08      	it	eq
    2980:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2984:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 2a2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc6c>
    2988:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2a30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc70>
    298c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2990:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2994:	2607      	movs	r6, #7
    2996:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    299a:	2801      	cmp	r0, #1
    299c:	d00e      	beq.n	29bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    299e:	2804      	cmp	r0, #4
    29a0:	bf08      	it	eq
    29a2:	2602      	moveq	r6, #2
    29a4:	d00a      	beq.n	29bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    29a6:	2805      	cmp	r0, #5
    29a8:	bf0c      	ite	eq
    29aa:	2603      	moveq	r6, #3
    29ac:	2806      	cmpne	r0, #6
    29ae:	d005      	beq.n	29bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbfc>
    29b0:	f640 01d9 	movw	r1, #2265	; 0x8d9
    29b4:	f04f 0070 	mov.w	r0, #112	; 0x70
    29b8:	f002 fbda 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29bc:	f1bb 0f00 	cmp.w	fp, #0
    29c0:	bf18      	it	ne
    29c2:	f3af 8000 	nopne.w
    29c6:	f3ef 8010 	mrs	r0, PRIMASK
    29ca:	b672      	cpsid	i
    29cc:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    29d0:	784a      	ldrb	r2, [r1, #1]
    29d2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    29d6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    29da:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    29de:	42a2      	cmp	r2, r4
    29e0:	bf04      	itt	eq
    29e2:	2220      	moveq	r2, #32
    29e4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    29e8:	b1b8      	cbz	r0, 2a1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc5a>
    29ea:	462a      	mov	r2, r5
    29ec:	4621      	mov	r1, r4
    29ee:	2001      	movs	r0, #1
    29f0:	f000 f85c 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    29f4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    29f8:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    29fc:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2a00:	6840      	ldr	r0, [r0, #4]
    2a02:	4631      	mov	r1, r6
    2a04:	4790      	blx	r2
    2a06:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2a0a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2a0e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2a12:	2c20      	cmp	r4, #32
    2a14:	d1bc      	bne.n	2990 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xbd0>
    2a16:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a1a:	4806      	ldr	r0, [pc, #24]	; (2a34 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc74>)
    2a1c:	2800      	cmp	r0, #0
    2a1e:	bf18      	it	ne
    2a20:	f3af 8000 	nopne.w
    2a24:	b662      	cpsie	i
    2a26:	e7e0      	b.n	29ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc2a>
    2a28:	200011ac 	.word	0x200011ac
    2a2c:	00000000 	.word	0x00000000
    2a30:	2000112c 	.word	0x2000112c
    2a34:	00000000 	.word	0x00000000
    2a38:	b510      	push	{r4, lr}
    2a3a:	4604      	mov	r4, r0
    2a3c:	6800      	ldr	r0, [r0, #0]
    2a3e:	f00a fd44 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a42:	4602      	mov	r2, r0
    2a44:	8960      	ldrh	r0, [r4, #10]
    2a46:	7a21      	ldrb	r1, [r4, #8]
    2a48:	4b14      	ldr	r3, [pc, #80]	; (2a9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcdc>)
    2a4a:	4408      	add	r0, r1
    2a4c:	1c41      	adds	r1, r0, #1
    2a4e:	1850      	adds	r0, r2, r1
    2a50:	429a      	cmp	r2, r3
    2a52:	d904      	bls.n	2a5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc9e>
    2a54:	f240 6109 	movw	r1, #1545	; 0x609
    2a58:	2070      	movs	r0, #112	; 0x70
    2a5a:	f002 fb89 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a5e:	4a10      	ldr	r2, [pc, #64]	; (2aa0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce0>)
    2a60:	4291      	cmp	r1, r2
    2a62:	dd04      	ble.n	2a6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcae>
    2a64:	f240 610a 	movw	r1, #1546	; 0x60a
    2a68:	2070      	movs	r0, #112	; 0x70
    2a6a:	f002 fb81 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a6e:	4a0d      	ldr	r2, [pc, #52]	; (2aa4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce4>)
    2a70:	4291      	cmp	r1, r2
    2a72:	da04      	bge.n	2a7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcbe>
    2a74:	f240 610b 	movw	r1, #1547	; 0x60b
    2a78:	2070      	movs	r0, #112	; 0x70
    2a7a:	f002 fb79 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a7e:	490a      	ldr	r1, [pc, #40]	; (2aa8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xce8>)
    2a80:	4281      	cmp	r1, r0
    2a82:	bfde      	ittt	le
    2a84:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2a88:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2a8c:	bd10      	pople	{r4, pc}
    2a8e:	2800      	cmp	r0, #0
    2a90:	bfbc      	itt	lt
    2a92:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2a96:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2a9a:	bd10      	pop	{r4, pc}
    2a9c:	1e847fff 	.word	0x1e847fff
    2aa0:	07a12000 	.word	0x07a12000
    2aa4:	f85ee000 	.word	0xf85ee000
    2aa8:	1e848000 	.word	0x1e848000
    2aac:	f8df c054 	ldr.w	ip, [pc, #84]	; 2b04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd44>
    2ab0:	b510      	push	{r4, lr}
    2ab2:	2300      	movs	r3, #0
    2ab4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2ab8:	2807      	cmp	r0, #7
    2aba:	d21e      	bcs.n	2afa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd3a>
    2abc:	e8df f000 	tbb	[pc, r0]
    2ac0:	05050505 	.word	0x05050505
    2ac4:	00040404 	.word	0x00040404
    2ac8:	2301      	movs	r3, #1
    2aca:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	bf08      	it	eq
    2ad2:	bd10      	popeq	{r4, pc}
    2ad4:	480c      	ldr	r0, [pc, #48]	; (2b08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd48>)
    2ad6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2ada:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2ade:	2820      	cmp	r0, #32
    2ae0:	bf0e      	itee	eq
    2ae2:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2ae6:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    2aea:	7041      	strbne	r1, [r0, #1]
    2aec:	2020      	movs	r0, #32
    2aee:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2af2:	7058      	strb	r0, [r3, #1]
    2af4:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2af8:	bd10      	pop	{r4, pc}
    2afa:	f44f 7115 	mov.w	r1, #596	; 0x254
    2afe:	2070      	movs	r0, #112	; 0x70
    2b00:	f002 fb36 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b04:	2000112c 	.word	0x2000112c
    2b08:	200011ac 	.word	0x200011ac
    2b0c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b10:	b083      	sub	sp, #12
    2b12:	485c      	ldr	r0, [pc, #368]	; (2c84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    2b14:	9904      	ldr	r1, [sp, #16]
    2b16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2b1a:	9001      	str	r0, [sp, #4]
    2b1c:	f890 4020 	ldrb.w	r4, [r0, #32]
    2b20:	9803      	ldr	r0, [sp, #12]
    2b22:	4625      	mov	r5, r4
    2b24:	2801      	cmp	r0, #1
    2b26:	bf18      	it	ne
    2b28:	2802      	cmpne	r0, #2
    2b2a:	d005      	beq.n	2b38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd78>
    2b2c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    2b30:	f04f 0070 	mov.w	r0, #112	; 0x70
    2b34:	f002 fb1c 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b38:	2700      	movs	r7, #0
    2b3a:	2d20      	cmp	r5, #32
    2b3c:	d04a      	beq.n	2bd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe14>
    2b3e:	4851      	ldr	r0, [pc, #324]	; (2c84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    2b40:	9100      	str	r1, [sp, #0]
    2b42:	2600      	movs	r6, #0
    2b44:	7f80      	ldrb	r0, [r0, #30]
    2b46:	2800      	cmp	r0, #0
    2b48:	bf08      	it	eq
    2b4a:	2602      	moveq	r6, #2
    2b4c:	f001 fbf2 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2b50:	f8df a138 	ldr.w	sl, [pc, #312]	; 2c8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xecc>
    2b54:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2b58:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2b5c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec8>
    2b60:	688a      	ldr	r2, [r1, #8]
    2b62:	68c9      	ldr	r1, [r1, #12]
    2b64:	1a12      	subs	r2, r2, r0
    2b66:	1a09      	subs	r1, r1, r0
    2b68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2b70:	4296      	cmp	r6, r2
    2b72:	bf98      	it	ls
    2b74:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    2b78:	d201      	bcs.n	2b7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdbe>
    2b7a:	4589      	cmp	r9, r1
    2b7c:	d228      	bcs.n	2bd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    2b7e:	4a44      	ldr	r2, [pc, #272]	; (2c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed0>)
    2b80:	9900      	ldr	r1, [sp, #0]
    2b82:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2b86:	4622      	mov	r2, r4
    2b88:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    2b8c:	784c      	ldrb	r4, [r1, #1]
    2b8e:	2c20      	cmp	r4, #32
    2b90:	d016      	beq.n	2bc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe00>
    2b92:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2b96:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    2b9a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    2b9e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2ba2:	eba8 0800 	sub.w	r8, r8, r0
    2ba6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2baa:	ebac 0100 	sub.w	r1, ip, r0
    2bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2bb2:	4546      	cmp	r6, r8
    2bb4:	bf98      	it	ls
    2bb6:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    2bba:	d2e4      	bcs.n	2b86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    2bbc:	4589      	cmp	r9, r1
    2bbe:	d3e2      	bcc.n	2b86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xdc6>
    2bc0:	2a20      	cmp	r2, #32
    2bc2:	d005      	beq.n	2bd0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe10>
    2bc4:	2120      	movs	r1, #32
    2bc6:	2004      	movs	r0, #4
    2bc8:	9b00      	ldr	r3, [sp, #0]
    2bca:	f7ff f907 	bl	1ddc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2bce:	4604      	mov	r4, r0
    2bd0:	42ac      	cmp	r4, r5
    2bd2:	d115      	bne.n	2c00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe40>
    2bd4:	482f      	ldr	r0, [pc, #188]	; (2c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed4>)
    2bd6:	2800      	cmp	r0, #0
    2bd8:	bf18      	it	ne
    2bda:	f3af 8000 	nopne.w
    2bde:	f001 fba9 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2be2:	4c28      	ldr	r4, [pc, #160]	; (2c84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xec4>)
    2be4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    2be8:	2920      	cmp	r1, #32
    2bea:	d00d      	beq.n	2c08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    2bec:	68e1      	ldr	r1, [r4, #12]
    2bee:	1c82      	adds	r2, r0, #2
    2bf0:	1a51      	subs	r1, r2, r1
    2bf2:	0209      	lsls	r1, r1, #8
    2bf4:	17ca      	asrs	r2, r1, #31
    2bf6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2bfa:	1209      	asrs	r1, r1, #8
    2bfc:	2900      	cmp	r1, #0
    2bfe:	dd03      	ble.n	2c08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe48>
    2c00:	b005      	add	sp, #20
    2c02:	2000      	movs	r0, #0
    2c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c08:	2d20      	cmp	r5, #32
    2c0a:	d00d      	beq.n	2c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe68>
    2c0c:	462a      	mov	r2, r5
    2c0e:	9903      	ldr	r1, [sp, #12]
    2c10:	f7ff fb1c 	bl	224c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2c14:	b358      	cbz	r0, 2c6e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xeae>
    2c16:	9801      	ldr	r0, [sp, #4]
    2c18:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    2c1c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2c20:	b005      	add	sp, #20
    2c22:	2001      	movs	r0, #1
    2c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c28:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2c2c:	b118      	cbz	r0, 2c36 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe76>
    2c2e:	f002 f8d1 	bl	4dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2c32:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    2c36:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2c3a:	b150      	cbz	r0, 2c52 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe92>
    2c3c:	4916      	ldr	r1, [pc, #88]	; (2c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xed8>)
    2c3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2c42:	6008      	str	r0, [r1, #0]
    2c44:	2005      	movs	r0, #5
    2c46:	f001 fdd3 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c4a:	f002 f92b 	bl	4ea4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    2c4e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    2c52:	2004      	movs	r0, #4
    2c54:	f001 fdcc 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2c58:	f001 fe38 	bl	48cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2c5c:	2020      	movs	r0, #32
    2c5e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2c62:	480e      	ldr	r0, [pc, #56]	; (2c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xedc>)
    2c64:	6880      	ldr	r0, [r0, #8]
    2c66:	6007      	str	r7, [r0, #0]
    2c68:	480d      	ldr	r0, [pc, #52]	; (2ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xee0>)
    2c6a:	6007      	str	r7, [r0, #0]
    2c6c:	e7d8      	b.n	2c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe60>
    2c6e:	462a      	mov	r2, r5
    2c70:	2120      	movs	r1, #32
    2c72:	2004      	movs	r0, #4
    2c74:	9b04      	ldr	r3, [sp, #16]
    2c76:	f7ff f8b1 	bl	1ddc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2c7a:	b005      	add	sp, #20
    2c7c:	2000      	movs	r0, #0
    2c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c82:	0000      	.short	0x0000
    2c84:	200011ac 	.word	0x200011ac
    2c88:	003fffff 	.word	0x003fffff
    2c8c:	20000e2c 	.word	0x20000e2c
    2c90:	2000112c 	.word	0x2000112c
    2c94:	00000000 	.word	0x00000000
    2c98:	4001f508 	.word	0x4001f508
    2c9c:	20000014 	.word	0x20000014
    2ca0:	40000508 	.word	0x40000508

00002ca4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2ca4:	4906      	ldr	r1, [pc, #24]	; (2cc0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2ca6:	b510      	push	{r4, lr}
    2ca8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2cac:	2a20      	cmp	r2, #32
    2cae:	bf1c      	itt	ne
    2cb0:	7788      	strbne	r0, [r1, #30]
    2cb2:	bd10      	popne	{r4, pc}
    2cb4:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2cb8:	2070      	movs	r0, #112	; 0x70
    2cba:	f002 fa59 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cbe:	0000      	.short	0x0000
    2cc0:	200011ac 	.word	0x200011ac

00002cc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc8:	4e5b      	ldr	r6, [pc, #364]	; (2e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2cca:	4681      	mov	r9, r0
    2ccc:	b085      	sub	sp, #20
    2cce:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2cd2:	468a      	mov	sl, r1
    2cd4:	2820      	cmp	r0, #32
    2cd6:	d04d      	beq.n	2d74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2cd8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2cdc:	f106 040c 	add.w	r4, r6, #12
    2ce0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2ce4:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2ce8:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2cec:	2020      	movs	r0, #32
    2cee:	f88d 0000 	strb.w	r0, [sp]
    2cf2:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2cf6:	aa03      	add	r2, sp, #12
    2cf8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2cfc:	a901      	add	r1, sp, #4
    2cfe:	f890 5020 	ldrb.w	r5, [r0, #32]
    2d02:	6930      	ldr	r0, [r6, #16]
    2d04:	9002      	str	r0, [sp, #8]
    2d06:	6830      	ldr	r0, [r6, #0]
    2d08:	4448      	add	r0, r9
    2d0a:	f001 f9b5 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2d0e:	68f8      	ldr	r0, [r7, #12]
    2d10:	9901      	ldr	r1, [sp, #4]
    2d12:	4a4a      	ldr	r2, [pc, #296]	; (2e3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2d14:	4408      	add	r0, r1
    2d16:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    2d1a:	4291      	cmp	r1, r2
    2d1c:	d82f      	bhi.n	2d7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    2d1e:	68b9      	ldr	r1, [r7, #8]
    2d20:	1a41      	subs	r1, r0, r1
    2d22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d26:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2d2a:	d228      	bcs.n	2d7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    2d2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d30:	6060      	str	r0, [r4, #4]
    2d32:	4630      	mov	r0, r6
    2d34:	f884 a00c 	strb.w	sl, [r4, #12]
    2d38:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    2d3c:	46ea      	mov	sl, sp
    2d3e:	2d20      	cmp	r5, #32
    2d40:	bf1c      	itt	ne
    2d42:	493f      	ldrne	r1, [pc, #252]	; (2e40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2d44:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2d48:	d03c      	beq.n	2dc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2d4a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2d4e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2d52:	6860      	ldr	r0, [r4, #4]
    2d54:	68ba      	ldr	r2, [r7, #8]
    2d56:	4621      	mov	r1, r4
    2d58:	1a10      	subs	r0, r2, r0
    2d5a:	0200      	lsls	r0, r0, #8
    2d5c:	17c2      	asrs	r2, r0, #31
    2d5e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2d62:	f107 0608 	add.w	r6, r7, #8
    2d66:	1200      	asrs	r0, r0, #8
    2d68:	d41b      	bmi.n	2da2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    2d6a:	8970      	ldrh	r0, [r6, #10]
    2d6c:	b350      	cbz	r0, 2dc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2d6e:	8948      	ldrh	r0, [r1, #10]
    2d70:	b148      	cbz	r0, 2d86 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2d72:	e027      	b.n	2dc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2d74:	f640 317b 	movw	r1, #2939	; 0xb7b
    2d78:	2070      	movs	r0, #112	; 0x70
    2d7a:	f002 f9f9 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d7e:	b005      	add	sp, #20
    2d80:	2001      	movs	r0, #1
    2d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d86:	4620      	mov	r0, r4
    2d88:	f7ff fe56 	bl	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    2d8c:	f001 f958 	bl	4040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2d90:	6831      	ldr	r1, [r6, #0]
    2d92:	1a08      	subs	r0, r1, r0
    2d94:	0200      	lsls	r0, r0, #8
    2d96:	17c1      	asrs	r1, r0, #31
    2d98:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2d9c:	1200      	asrs	r0, r0, #8
    2d9e:	2833      	cmp	r0, #51	; 0x33
    2da0:	da10      	bge.n	2dc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2da2:	f88a 5000 	strb.w	r5, [sl]
    2da6:	7d39      	ldrb	r1, [r7, #20]
    2da8:	7b20      	ldrb	r0, [r4, #12]
    2daa:	4281      	cmp	r1, r0
    2dac:	d805      	bhi.n	2dba <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    2dae:	9802      	ldr	r0, [sp, #8]
    2db0:	6060      	str	r0, [r4, #4]
    2db2:	b005      	add	sp, #20
    2db4:	2002      	movs	r0, #2
    2db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dba:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2dbe:	7845      	ldrb	r5, [r0, #1]
    2dc0:	2d20      	cmp	r5, #32
    2dc2:	d1c2      	bne.n	2d4a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2dc4:	2005      	movs	r0, #5
    2dc6:	f001 fd13 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2dca:	4c1b      	ldr	r4, [pc, #108]	; (2e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2dcc:	f04f 30ff 	mov.w	r0, #4294967295
    2dd0:	60a0      	str	r0, [r4, #8]
    2dd2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2dd6:	f89d 2000 	ldrb.w	r2, [sp]
    2dda:	2120      	movs	r1, #32
    2ddc:	2a20      	cmp	r2, #32
    2dde:	bf13      	iteet	ne
    2de0:	2005      	movne	r0, #5
    2de2:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2de6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2dea:	f7fe fff7 	blne	1ddc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2dee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2df2:	4913      	ldr	r1, [pc, #76]	; (2e40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2df4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2df8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    2dfc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2e00:	7048      	strb	r0, [r1, #1]
    2e02:	6820      	ldr	r0, [r4, #0]
    2e04:	4448      	add	r0, r9
    2e06:	6020      	str	r0, [r4, #0]
    2e08:	2001      	movs	r0, #1
    2e0a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2e0e:	7e60      	ldrb	r0, [r4, #25]
    2e10:	2801      	cmp	r0, #1
    2e12:	d105      	bne.n	2e20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2e14:	6920      	ldr	r0, [r4, #16]
    2e16:	1e40      	subs	r0, r0, #1
    2e18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e1c:	f001 fb2e 	bl	447c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2e20:	f89d 0000 	ldrb.w	r0, [sp]
    2e24:	2820      	cmp	r0, #32
    2e26:	d003      	beq.n	2e30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    2e28:	4806      	ldr	r0, [pc, #24]	; (2e44 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    2e2a:	7840      	ldrb	r0, [r0, #1]
    2e2c:	f002 fa70 	bl	5310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2e30:	b005      	add	sp, #20
    2e32:	2000      	movs	r0, #0
    2e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e38:	200011ac 	.word	0x200011ac
    2e3c:	07a11f9b 	.word	0x07a11f9b
    2e40:	2000112c 	.word	0x2000112c
    2e44:	20000014 	.word	0x20000014

00002e48 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2e48:	4806      	ldr	r0, [pc, #24]	; (2e64 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2e4a:	b510      	push	{r4, lr}
    2e4c:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2e50:	2920      	cmp	r1, #32
    2e52:	bf1c      	itt	ne
    2e54:	7e00      	ldrbne	r0, [r0, #24]
    2e56:	bd10      	popne	{r4, pc}
    2e58:	f640 3174 	movw	r1, #2932	; 0xb74
    2e5c:	2070      	movs	r0, #112	; 0x70
    2e5e:	f002 f987 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e62:	0000      	.short	0x0000
    2e64:	200011ac 	.word	0x200011ac

00002e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    2e68:	4602      	mov	r2, r0
    2e6a:	4b14      	ldr	r3, [pc, #80]	; (2ebc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2e6c:	b510      	push	{r4, lr}
    2e6e:	4408      	add	r0, r1
    2e70:	429a      	cmp	r2, r3
    2e72:	d904      	bls.n	2e7e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2e74:	f240 6109 	movw	r1, #1545	; 0x609
    2e78:	2070      	movs	r0, #112	; 0x70
    2e7a:	f002 f979 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e7e:	4a10      	ldr	r2, [pc, #64]	; (2ec0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2e80:	4291      	cmp	r1, r2
    2e82:	dd04      	ble.n	2e8e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2e84:	f240 610a 	movw	r1, #1546	; 0x60a
    2e88:	2070      	movs	r0, #112	; 0x70
    2e8a:	f002 f971 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e8e:	4a0d      	ldr	r2, [pc, #52]	; (2ec4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    2e90:	4291      	cmp	r1, r2
    2e92:	da04      	bge.n	2e9e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2e94:	f240 610b 	movw	r1, #1547	; 0x60b
    2e98:	2070      	movs	r0, #112	; 0x70
    2e9a:	f002 f969 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e9e:	490a      	ldr	r1, [pc, #40]	; (2ec8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    2ea0:	4281      	cmp	r1, r0
    2ea2:	bfde      	ittt	le
    2ea4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2ea8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2eac:	bd10      	pople	{r4, pc}
    2eae:	2800      	cmp	r0, #0
    2eb0:	bfbc      	itt	lt
    2eb2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2eb6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2eba:	bd10      	pop	{r4, pc}
    2ebc:	1e847fff 	.word	0x1e847fff
    2ec0:	07a12000 	.word	0x07a12000
    2ec4:	f85ee000 	.word	0xf85ee000
    2ec8:	1e848000 	.word	0x1e848000

00002ecc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2ecc:	4a10      	ldr	r2, [pc, #64]	; (2f10 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    2ece:	1a0b      	subs	r3, r1, r0
    2ed0:	f102 0c01 	add.w	ip, r2, #1
    2ed4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2ed8:	bf3c      	itt	cc
    2eda:	4618      	movcc	r0, r3
    2edc:	4770      	bxcc	lr
    2ede:	b510      	push	{r4, lr}
    2ee0:	1a44      	subs	r4, r0, r1
    2ee2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    2ee6:	bf3c      	itt	cc
    2ee8:	4618      	movcc	r0, r3
    2eea:	bd10      	popcc	{r4, pc}
    2eec:	429a      	cmp	r2, r3
    2eee:	d203      	bcs.n	2ef8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2ef0:	1a10      	subs	r0, r2, r0
    2ef2:	4408      	add	r0, r1
    2ef4:	1c40      	adds	r0, r0, #1
    2ef6:	bd10      	pop	{r4, pc}
    2ef8:	42a2      	cmp	r2, r4
    2efa:	d204      	bcs.n	2f06 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2efc:	1a51      	subs	r1, r2, r1
    2efe:	4408      	add	r0, r1
    2f00:	1c40      	adds	r0, r0, #1
    2f02:	4240      	negs	r0, r0
    2f04:	bd10      	pop	{r4, pc}
    2f06:	f640 310c 	movw	r1, #2828	; 0xb0c
    2f0a:	2070      	movs	r0, #112	; 0x70
    2f0c:	f002 f930 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f10:	1e847fff 	.word	0x1e847fff

00002f14 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2f14:	4907      	ldr	r1, [pc, #28]	; (2f34 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    2f16:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    2f1a:	4282      	cmp	r2, r0
    2f1c:	bf04      	itt	eq
    2f1e:	6848      	ldreq	r0, [r1, #4]
    2f20:	4770      	bxeq	lr
    2f22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2f26:	4904      	ldr	r1, [pc, #16]	; (2f38 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2f28:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2f2c:	3008      	adds	r0, #8
    2f2e:	f7ff bd83 	b.w	2a38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc78>
    2f32:	0000      	.short	0x0000
    2f34:	200011ac 	.word	0x200011ac
    2f38:	20000e2c 	.word	0x20000e2c

00002f3c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2f3c:	490e      	ldr	r1, [pc, #56]	; (2f78 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2f3e:	b510      	push	{r4, lr}
    2f40:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2f44:	2820      	cmp	r0, #32
    2f46:	d012      	beq.n	2f6e <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2f48:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2f4c:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2f50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2f54:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2f58:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2f5c:	6840      	ldr	r0, [r0, #4]
    2f5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2f62:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    2f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f6a:	2104      	movs	r1, #4
    2f6c:	4710      	bx	r2
    2f6e:	f640 01bc 	movw	r1, #2236	; 0x8bc
    2f72:	2070      	movs	r0, #112	; 0x70
    2f74:	f002 f8fc 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f78:	200011ac 	.word	0x200011ac

00002f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7e:	4d6d      	ldr	r5, [pc, #436]	; (3134 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2f80:	496d      	ldr	r1, [pc, #436]	; (3138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2f82:	2601      	movs	r6, #1
    2f84:	f505 7460 	add.w	r4, r5, #896	; 0x380
    2f88:	2808      	cmp	r0, #8
    2f8a:	d273      	bcs.n	3074 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    2f8c:	e8df f000 	tbb	[pc, r0]
    2f90:	af9d6704 	.word	0xaf9d6704
    2f94:	b9b444cd 	.word	0xb9b444cd
    2f98:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2f9c:	b918      	cbnz	r0, 2fa6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2f9e:	f001 ff35 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2fa2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2fa6:	8ae0      	ldrh	r0, [r4, #22]
    2fa8:	b110      	cbz	r0, 2fb0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2faa:	f002 f869 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2fae:	b188      	cbz	r0, 2fd4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2fb0:	f7ff fcaa 	bl	2908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    2fb4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2fb8:	68a1      	ldr	r1, [r4, #8]
    2fba:	f1b1 3fff 	cmp.w	r1, #4294967295
    2fbe:	d005      	beq.n	2fcc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2fc0:	2301      	movs	r3, #1
    2fc2:	2203      	movs	r2, #3
    2fc4:	2005      	movs	r0, #5
    2fc6:	f001 fb3f 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2fca:	b140      	cbz	r0, 2fde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2fcc:	7e60      	ldrb	r0, [r4, #25]
    2fce:	2801      	cmp	r0, #1
    2fd0:	d110      	bne.n	2ff4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    2fd2:	e009      	b.n	2fe8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    2fd4:	f44f 6107 	mov.w	r1, #2160	; 0x870
    2fd8:	2070      	movs	r0, #112	; 0x70
    2fda:	f002 f8c9 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fde:	f640 0175 	movw	r1, #2165	; 0x875
    2fe2:	2070      	movs	r0, #112	; 0x70
    2fe4:	f002 f8c4 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fe8:	6920      	ldr	r0, [r4, #16]
    2fea:	1e40      	subs	r0, r0, #1
    2fec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ff0:	f001 fa44 	bl	447c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2ff4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ff8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2ffc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3000:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    3004:	6840      	ldr	r0, [r0, #4]
    3006:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    300a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    300e:	b001      	add	sp, #4
    3010:	2101      	movs	r1, #1
    3012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3016:	4710      	bx	r2
    3018:	f7ff fc76 	bl	2908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    301c:	f04f 30ff 	mov.w	r0, #4294967295
    3020:	60a0      	str	r0, [r4, #8]
    3022:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3026:	f88d 0000 	strb.w	r0, [sp]
    302a:	f89d 0000 	ldrb.w	r0, [sp]
    302e:	b188      	cbz	r0, 3054 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    3030:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3034:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    303c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    3040:	6840      	ldr	r0, [r0, #4]
    3042:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3046:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    304a:	b001      	add	sp, #4
    304c:	2106      	movs	r1, #6
    304e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3052:	4710      	bx	r2
    3054:	f640 0186 	movw	r1, #2182	; 0x886
    3058:	2070      	movs	r0, #112	; 0x70
    305a:	f002 f889 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    305e:	f7ff fc53 	bl	2908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    3062:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3066:	f002 f80b 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    306a:	b120      	cbz	r0, 3076 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    306c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    3070:	b130      	cbz	r0, 3080 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    3072:	e009      	b.n	3088 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    3074:	e059      	b.n	312a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    3076:	f640 0196 	movw	r1, #2198	; 0x896
    307a:	2070      	movs	r0, #112	; 0x70
    307c:	f002 f878 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3080:	f001 fec4 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3084:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    3088:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    308c:	b158      	cbz	r0, 30a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    308e:	492b      	ldr	r1, [pc, #172]	; (313c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    3090:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3094:	6008      	str	r0, [r1, #0]
    3096:	2005      	movs	r0, #5
    3098:	f001 fbaa 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    309c:	f001 ff02 	bl	4ea4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    30a0:	2000      	movs	r0, #0
    30a2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    30a6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    30aa:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    30ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    30b2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    30b6:	6840      	ldr	r0, [r0, #4]
    30b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    30bc:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    30c0:	b001      	add	sp, #4
    30c2:	2100      	movs	r1, #0
    30c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    30c8:	4710      	bx	r2
    30ca:	f001 fc49 	bl	4960 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    30ce:	8ae0      	ldrh	r0, [r4, #22]
    30d0:	b110      	cbz	r0, 30d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    30d2:	f001 ffd5 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30d6:	b128      	cbz	r0, 30e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    30d8:	4819      	ldr	r0, [pc, #100]	; (3140 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    30da:	7800      	ldrb	r0, [r0, #0]
    30dc:	2803      	cmp	r0, #3
    30de:	bf08      	it	eq
    30e0:	7766      	strbeq	r6, [r4, #29]
    30e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30e4:	f640 01a1 	movw	r1, #2209	; 0x8a1
    30e8:	2070      	movs	r0, #112	; 0x70
    30ea:	f002 f841 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30ee:	4815      	ldr	r0, [pc, #84]	; (3144 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    30f0:	6006      	str	r6, [r0, #0]
    30f2:	6888      	ldr	r0, [r1, #8]
    30f4:	6006      	str	r6, [r0, #0]
    30f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30f8:	7808      	ldrb	r0, [r1, #0]
    30fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    30fe:	f002 b907 	b.w	5310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3102:	f7ff fc01 	bl	2908 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xb48>
    3106:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    310a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    310e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3112:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    3116:	6840      	ldr	r0, [r0, #4]
    3118:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    311c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    3120:	b001      	add	sp, #4
    3122:	2105      	movs	r1, #5
    3124:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3128:	4710      	bx	r2
    312a:	f640 01b4 	movw	r1, #2228	; 0x8b4
    312e:	2070      	movs	r0, #112	; 0x70
    3130:	f002 f81e 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3134:	20000e2c 	.word	0x20000e2c
    3138:	20000014 	.word	0x20000014
    313c:	4001f508 	.word	0x4001f508
    3140:	20000016 	.word	0x20000016
    3144:	40000508 	.word	0x40000508

00003148 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    3148:	4803      	ldr	r0, [pc, #12]	; (3158 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    314a:	b510      	push	{r4, lr}
    314c:	7840      	ldrb	r0, [r0, #1]
    314e:	f00a f9bc 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3152:	b280      	uxth	r0, r0
    3154:	bd10      	pop	{r4, pc}
    3156:	0000      	.short	0x0000
    3158:	20000016 	.word	0x20000016

0000315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    315c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3160:	4682      	mov	sl, r0
    3162:	48dc      	ldr	r0, [pc, #880]	; (34d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    3164:	b08b      	sub	sp, #44	; 0x2c
    3166:	6800      	ldr	r0, [r0, #0]
    3168:	4ddb      	ldr	r5, [pc, #876]	; (34d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    316a:	05c0      	lsls	r0, r0, #23
    316c:	0dc0      	lsrs	r0, r0, #23
    316e:	d00e      	beq.n	318e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    3170:	3810      	subs	r0, #16
    3172:	b240      	sxtb	r0, r0
    3174:	2800      	cmp	r0, #0
    3176:	bfb8      	it	lt
    3178:	f000 000f 	andlt.w	r0, r0, #15
    317c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3180:	bfac      	ite	ge
    3182:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    3186:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    318a:	0940      	lsrs	r0, r0, #5
    318c:	d00d      	beq.n	31aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    318e:	980c      	ldr	r0, [sp, #48]	; 0x30
    3190:	f04f 0b00 	mov.w	fp, #0
    3194:	7800      	ldrb	r0, [r0, #0]
    3196:	2800      	cmp	r0, #0
    3198:	bf18      	it	ne
    319a:	2801      	cmpne	r0, #1
    319c:	d018      	beq.n	31d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    319e:	f240 714f 	movw	r1, #1871	; 0x74f
    31a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    31a6:	f001 ffe3 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    31ae:	f04f 0b01 	mov.w	fp, #1
    31b2:	2820      	cmp	r0, #32
    31b4:	d007      	beq.n	31c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    31b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    31b8:	7800      	ldrb	r0, [r0, #0]
    31ba:	b148      	cbz	r0, 31d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    31bc:	f240 714b 	movw	r1, #1867	; 0x74b
    31c0:	2070      	movs	r0, #112	; 0x70
    31c2:	f001 ffd5 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    31ca:	2070      	movs	r0, #112	; 0x70
    31cc:	f001 ffd0 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31d0:	4cc2      	ldr	r4, [pc, #776]	; (34dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    31d2:	b124      	cbz	r4, 31de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    31d4:	2100      	movs	r1, #0
    31d6:	f240 7052 	movw	r0, #1874	; 0x752
    31da:	f3af 8000 	nop.w
    31de:	49c0      	ldr	r1, [pc, #768]	; (34e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    31e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    31e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    31e8:	f04f 0801 	mov.w	r8, #1
    31ec:	9000      	str	r0, [sp, #0]
    31ee:	b124      	cbz	r4, 31fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    31f0:	2100      	movs	r1, #0
    31f2:	f240 705a 	movw	r0, #1882	; 0x75a
    31f6:	f3af 8000 	nop.w
    31fa:	f1b8 0f00 	cmp.w	r8, #0
    31fe:	d009      	beq.n	3214 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    3200:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    3204:	f04f 0900 	mov.w	r9, #0
    3208:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    320c:	f1bb 0f00 	cmp.w	fp, #0
    3210:	d007      	beq.n	3222 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    3212:	e032      	b.n	327a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    3214:	48b3      	ldr	r0, [pc, #716]	; (34e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    3216:	2800      	cmp	r0, #0
    3218:	bf18      	it	ne
    321a:	f3af 8000 	nopne.w
    321e:	b662      	cpsie	i
    3220:	e7ee      	b.n	3200 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    3222:	4637      	mov	r7, r6
    3224:	2001      	movs	r0, #1
    3226:	ea20 0607 	bic.w	r6, r0, r7
    322a:	48af      	ldr	r0, [pc, #700]	; (34e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    322c:	2240      	movs	r2, #64	; 0x40
    322e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    3232:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    3236:	f00a fab6 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    323a:	b124      	cbz	r4, 3246 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    323c:	2100      	movs	r1, #0
    323e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3242:	f3af 8000 	nop.w
    3246:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    324a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    324e:	6a09      	ldr	r1, [r1, #32]
    3250:	6201      	str	r1, [r0, #32]
    3252:	b124      	cbz	r4, 325e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    3254:	2100      	movs	r1, #0
    3256:	f240 50d1 	movw	r0, #1489	; 0x5d1
    325a:	f3af 8000 	nop.w
    325e:	b124      	cbz	r4, 326a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    3260:	2100      	movs	r1, #0
    3262:	f240 7064 	movw	r0, #1892	; 0x764
    3266:	f3af 8000 	nop.w
    326a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    326e:	f88d 0004 	strb.w	r0, [sp, #4]
    3272:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3276:	2800      	cmp	r0, #0
    3278:	d1b9      	bne.n	31ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    327a:	b124      	cbz	r4, 3286 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    327c:	2100      	movs	r1, #0
    327e:	f240 706e 	movw	r0, #1902	; 0x76e
    3282:	f3af 8000 	nop.w
    3286:	f001 f855 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    328a:	4680      	mov	r8, r0
    328c:	4633      	mov	r3, r6
    328e:	aa06      	add	r2, sp, #24
    3290:	990c      	ldr	r1, [sp, #48]	; 0x30
    3292:	f7ff fa65 	bl	2760 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    3296:	b124      	cbz	r4, 32a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    3298:	2100      	movs	r1, #0
    329a:	f240 7075 	movw	r0, #1909	; 0x775
    329e:	f3af 8000 	nop.w
    32a2:	4991      	ldr	r1, [pc, #580]	; (34e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    32a4:	a806      	add	r0, sp, #24
    32a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    32aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    32ae:	2901      	cmp	r1, #1
    32b0:	bf18      	it	ne
    32b2:	2902      	cmpne	r1, #2
    32b4:	d13c      	bne.n	3330 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    32b6:	9906      	ldr	r1, [sp, #24]
    32b8:	9b07      	ldr	r3, [sp, #28]
    32ba:	eba1 0108 	sub.w	r1, r1, r8
    32be:	4a8b      	ldr	r2, [pc, #556]	; (34ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    32c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    32c4:	eba3 0308 	sub.w	r3, r3, r8
    32c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    32cc:	2902      	cmp	r1, #2
    32ce:	d371      	bcc.n	33b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    32d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    32d4:	d26e      	bcs.n	33b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    32d6:	429a      	cmp	r2, r3
    32d8:	d36c      	bcc.n	33b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    32da:	f04f 0901 	mov.w	r9, #1
    32de:	ab01      	add	r3, sp, #4
    32e0:	aa05      	add	r2, sp, #20
    32e2:	4631      	mov	r1, r6
    32e4:	f7fe ff32 	bl	214c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    32e8:	2800      	cmp	r0, #0
    32ea:	d06b      	beq.n	33c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    32ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    32f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    32f4:	4633      	mov	r3, r6
    32f6:	428a      	cmp	r2, r1
    32f8:	d068      	beq.n	33cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    32fa:	2005      	movs	r0, #5
    32fc:	f7fe fd6e 	bl	1ddc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    3300:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    3304:	7048      	strb	r0, [r1, #1]
    3306:	f89d 0014 	ldrb.w	r0, [sp, #20]
    330a:	2820      	cmp	r0, #32
    330c:	bf03      	ittte	eq
    330e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    3312:	f880 a020 	strbeq.w	sl, [r0, #32]
    3316:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    331a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    331e:	bf18      	it	ne
    3320:	f880 a001 	strbne.w	sl, [r0, #1]
    3324:	4632      	mov	r2, r6
    3326:	4651      	mov	r1, sl
    3328:	f05f 0003 	movs.w	r0, #3
    332c:	f7ff fbbe 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3330:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    3334:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3338:	f88d 0004 	strb.w	r0, [sp, #4]
    333c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    3340:	b124      	cbz	r4, 334c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    3342:	2100      	movs	r1, #0
    3344:	f240 707c 	movw	r0, #1916	; 0x77c
    3348:	f3af 8000 	nop.w
    334c:	4868      	ldr	r0, [pc, #416]	; (34f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    334e:	2800      	cmp	r0, #0
    3350:	bf18      	it	ne
    3352:	f3af 8000 	nopne.w
    3356:	f3ef 8810 	mrs	r8, PRIMASK
    335a:	b672      	cpsid	i
    335c:	b124      	cbz	r4, 3368 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    335e:	2100      	movs	r1, #0
    3360:	f240 7082 	movw	r0, #1922	; 0x782
    3364:	f3af 8000 	nop.w
    3368:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    336c:	f88d 0004 	strb.w	r0, [sp, #4]
    3370:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3374:	2800      	cmp	r0, #0
    3376:	f47f af3a 	bne.w	31ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    337a:	b124      	cbz	r4, 3386 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    337c:	2100      	movs	r1, #0
    337e:	f240 708a 	movw	r0, #1930	; 0x78a
    3382:	f3af 8000 	nop.w
    3386:	f10d 0e18 	add.w	lr, sp, #24
    338a:	9800      	ldr	r0, [sp, #0]
    338c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    3390:	f100 0008 	add.w	r0, r0, #8
    3394:	f1b9 0f00 	cmp.w	r9, #0
    3398:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    339c:	d044      	beq.n	3428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    339e:	b124      	cbz	r4, 33aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    33a0:	2100      	movs	r1, #0
    33a2:	f240 7097 	movw	r0, #1943	; 0x797
    33a6:	f3af 8000 	nop.w
    33aa:	f1bb 0f00 	cmp.w	fp, #0
    33ae:	d12c      	bne.n	340a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    33b0:	e016      	b.n	33e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    33b2:	e7ff      	b.n	33b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    33b4:	4632      	mov	r2, r6
    33b6:	4651      	mov	r1, sl
    33b8:	2004      	movs	r0, #4
    33ba:	f7ff fb77 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    33be:	f04f 0901 	mov.w	r9, #1
    33c2:	e7b5      	b.n	3330 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    33c4:	4632      	mov	r2, r6
    33c6:	4651      	mov	r1, sl
    33c8:	2004      	movs	r0, #4
    33ca:	e7af      	b.n	332c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    33cc:	2920      	cmp	r1, #32
    33ce:	bf19      	ittee	ne
    33d0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    33d4:	7840      	ldrbne	r0, [r0, #1]
    33d6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    33da:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    33de:	e78f      	b.n	3300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    33e0:	b19f      	cbz	r7, 340a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    33e2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    33e6:	2820      	cmp	r0, #32
    33e8:	d10f      	bne.n	340a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    33ea:	b124      	cbz	r4, 33f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    33ec:	2100      	movs	r1, #0
    33ee:	f240 709c 	movw	r0, #1948	; 0x79c
    33f2:	f3af 8000 	nop.w
    33f6:	4631      	mov	r1, r6
    33f8:	2002      	movs	r0, #2
    33fa:	f7ff fb87 	bl	2b0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    33fe:	b920      	cbnz	r0, 340a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    3400:	980c      	ldr	r0, [sp, #48]	; 0x30
    3402:	7800      	ldrb	r0, [r0, #0]
    3404:	b3f0      	cbz	r0, 3484 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    3406:	2801      	cmp	r0, #1
    3408:	d04c      	beq.n	34a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    340a:	b124      	cbz	r4, 3416 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    340c:	2100      	movs	r1, #0
    340e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    3412:	f3af 8000 	nop.w
    3416:	f1bb 0f00 	cmp.w	fp, #0
    341a:	bf18      	it	ne
    341c:	2001      	movne	r0, #1
    341e:	d04a      	beq.n	34b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    3420:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    3424:	f04f 0901 	mov.w	r9, #1
    3428:	b124      	cbz	r4, 3434 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    342a:	2100      	movs	r1, #0
    342c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    3430:	f3af 8000 	nop.w
    3434:	f1b8 0f00 	cmp.w	r8, #0
    3438:	d045      	beq.n	34c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    343a:	b124      	cbz	r4, 3446 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    343c:	2100      	movs	r1, #0
    343e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    3442:	f3af 8000 	nop.w
    3446:	f1b9 0f00 	cmp.w	r9, #0
    344a:	d011      	beq.n	3470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    344c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3450:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    3454:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    3458:	2820      	cmp	r0, #32
    345a:	d009      	beq.n	3470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    345c:	b124      	cbz	r4, 3468 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    345e:	2100      	movs	r1, #0
    3460:	f240 70d5 	movw	r0, #2005	; 0x7d5
    3464:	f3af 8000 	nop.w
    3468:	4822      	ldr	r0, [pc, #136]	; (34f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    346a:	7840      	ldrb	r0, [r0, #1]
    346c:	f001 ff50 	bl	5310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3470:	b124      	cbz	r4, 347c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    3472:	2100      	movs	r1, #0
    3474:	f240 70da 	movw	r0, #2010	; 0x7da
    3478:	f3af 8000 	nop.w
    347c:	b00d      	add	sp, #52	; 0x34
    347e:	4648      	mov	r0, r9
    3480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3484:	e7ff      	b.n	3486 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    3486:	b124      	cbz	r4, 3492 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    3488:	2100      	movs	r1, #0
    348a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    348e:	f3af 8000 	nop.w
    3492:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    3496:	4651      	mov	r1, sl
    3498:	2004      	movs	r0, #4
    349a:	f7ff fb07 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    349e:	f04f 0901 	mov.w	r9, #1
    34a2:	e7c1      	b.n	3428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    34a4:	2c00      	cmp	r4, #0
    34a6:	f43f aea2 	beq.w	31ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    34aa:	2100      	movs	r1, #0
    34ac:	f240 70af 	movw	r0, #1967	; 0x7af
    34b0:	f3af 8000 	nop.w
    34b4:	e69b      	b.n	31ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    34b6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    34ba:	2001      	movs	r0, #1
    34bc:	ea20 0101 	bic.w	r1, r0, r1
    34c0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    34c4:	e7ac      	b.n	3420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    34c6:	4807      	ldr	r0, [pc, #28]	; (34e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    34c8:	2800      	cmp	r0, #0
    34ca:	bf18      	it	ne
    34cc:	f3af 8000 	nopne.w
    34d0:	b662      	cpsie	i
    34d2:	e7b2      	b.n	343a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    34d4:	e000ed04 	.word	0xe000ed04
    34d8:	200011ac 	.word	0x200011ac
    34dc:	00000000 	.word	0x00000000
    34e0:	20000e2c 	.word	0x20000e2c
    34e4:	00000000 	.word	0x00000000
    34e8:	2000112c 	.word	0x2000112c
    34ec:	003fffff 	.word	0x003fffff
    34f0:	00000000 	.word	0x00000000
    34f4:	20000014 	.word	0x20000014

000034f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    34f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34fc:	48a5      	ldr	r0, [pc, #660]	; (3794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    34fe:	b08c      	sub	sp, #48	; 0x30
    3500:	6800      	ldr	r0, [r0, #0]
    3502:	05c0      	lsls	r0, r0, #23
    3504:	0dc0      	lsrs	r0, r0, #23
    3506:	d011      	beq.n	352c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    3508:	3810      	subs	r0, #16
    350a:	b240      	sxtb	r0, r0
    350c:	2800      	cmp	r0, #0
    350e:	bfb8      	it	lt
    3510:	f000 000f 	andlt.w	r0, r0, #15
    3514:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3518:	bfac      	ite	ge
    351a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    351e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    3522:	0940      	lsrs	r0, r0, #5
    3524:	bf08      	it	eq
    3526:	f04f 0901 	moveq.w	r9, #1
    352a:	d001      	beq.n	3530 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    352c:	f04f 0900 	mov.w	r9, #0
    3530:	980c      	ldr	r0, [sp, #48]	; 0x30
    3532:	7800      	ldrb	r0, [r0, #0]
    3534:	2800      	cmp	r0, #0
    3536:	f04f 0000 	mov.w	r0, #0
    353a:	bf1c      	itt	ne
    353c:	b00d      	addne	sp, #52	; 0x34
    353e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3542:	f8df a254 	ldr.w	sl, [pc, #596]	; 3798 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    3546:	4d95      	ldr	r5, [pc, #596]	; (379c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    3548:	4c95      	ldr	r4, [pc, #596]	; (37a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    354a:	f04f 0b00 	mov.w	fp, #0
    354e:	900b      	str	r0, [sp, #44]	; 0x2c
    3550:	b125      	cbz	r5, 355c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    3552:	2100      	movs	r1, #0
    3554:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    3558:	f3af 8000 	nop.w
    355c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    3560:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    3564:	f04f 0800 	mov.w	r8, #0
    3568:	b125      	cbz	r5, 3574 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    356a:	2100      	movs	r1, #0
    356c:	f240 605d 	movw	r0, #1629	; 0x65d
    3570:	f3af 8000 	nop.w
    3574:	f1b9 0f00 	cmp.w	r9, #0
    3578:	d11d      	bne.n	35b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    357a:	4637      	mov	r7, r6
    357c:	2001      	movs	r0, #1
    357e:	ea20 0607 	bic.w	r6, r0, r7
    3582:	4888      	ldr	r0, [pc, #544]	; (37a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    3584:	2240      	movs	r2, #64	; 0x40
    3586:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    358a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    358e:	f00a f90a 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3592:	b125      	cbz	r5, 359e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    3594:	2100      	movs	r1, #0
    3596:	f240 50cd 	movw	r0, #1485	; 0x5cd
    359a:	f3af 8000 	nop.w
    359e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    35a2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    35a6:	6a09      	ldr	r1, [r1, #32]
    35a8:	6201      	str	r1, [r0, #32]
    35aa:	b125      	cbz	r5, 35b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    35ac:	2100      	movs	r1, #0
    35ae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    35b2:	f3af 8000 	nop.w
    35b6:	b125      	cbz	r5, 35c2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    35b8:	2100      	movs	r1, #0
    35ba:	f240 6065 	movw	r0, #1637	; 0x665
    35be:	f3af 8000 	nop.w
    35c2:	f000 feb7 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    35c6:	4607      	mov	r7, r0
    35c8:	4633      	mov	r3, r6
    35ca:	466a      	mov	r2, sp
    35cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    35ce:	f7ff f8c7 	bl	2760 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x9a0>
    35d2:	b125      	cbz	r5, 35de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    35d4:	2100      	movs	r1, #0
    35d6:	f240 606b 	movw	r0, #1643	; 0x66b
    35da:	f3af 8000 	nop.w
    35de:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    35e2:	2820      	cmp	r0, #32
    35e4:	d014      	beq.n	3610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    35e6:	6920      	ldr	r0, [r4, #16]
    35e8:	9900      	ldr	r1, [sp, #0]
    35ea:	1a09      	subs	r1, r1, r0
    35ec:	0209      	lsls	r1, r1, #8
    35ee:	17ca      	asrs	r2, r1, #31
    35f0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    35f4:	1209      	asrs	r1, r1, #8
    35f6:	d50b      	bpl.n	3610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    35f8:	e9dd 2100 	ldrd	r2, r1, [sp]
    35fc:	1a89      	subs	r1, r1, r2
    35fe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    3602:	4408      	add	r0, r1
    3604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3608:	e9cd 2000 	strd	r2, r0, [sp]
    360c:	f04f 0801 	mov.w	r8, #1
    3610:	b14d      	cbz	r5, 3626 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    3612:	2100      	movs	r1, #0
    3614:	f240 6075 	movw	r0, #1653	; 0x675
    3618:	f3af 8000 	nop.w
    361c:	2100      	movs	r1, #0
    361e:	f240 607b 	movw	r0, #1659	; 0x67b
    3622:	f3af 8000 	nop.w
    3626:	9800      	ldr	r0, [sp, #0]
    3628:	9901      	ldr	r1, [sp, #4]
    362a:	1bc0      	subs	r0, r0, r7
    362c:	1bc9      	subs	r1, r1, r7
    362e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3632:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3636:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    363a:	d205      	bcs.n	3648 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    363c:	458a      	cmp	sl, r1
    363e:	d303      	bcc.n	3648 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    3640:	f1b9 0f00 	cmp.w	r9, #0
    3644:	d10c      	bne.n	3660 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    3646:	e003      	b.n	3650 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    3648:	f1b9 0f00 	cmp.w	r9, #0
    364c:	d038      	beq.n	36c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    364e:	e094      	b.n	377a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    3650:	4633      	mov	r3, r6
    3652:	463a      	mov	r2, r7
    3654:	4669      	mov	r1, sp
    3656:	4854      	ldr	r0, [pc, #336]	; (37a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    3658:	f7fe fbfc 	bl	1e54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    365c:	ea48 0800 	orr.w	r8, r8, r0
    3660:	f1b8 0f00 	cmp.w	r8, #0
    3664:	d022      	beq.n	36ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    3666:	9800      	ldr	r0, [sp, #0]
    3668:	f009 ff2f 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    366c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3670:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3674:	4b4d      	ldr	r3, [pc, #308]	; (37ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    3676:	4411      	add	r1, r2
    3678:	1c49      	adds	r1, r1, #1
    367a:	1842      	adds	r2, r0, r1
    367c:	4298      	cmp	r0, r3
    367e:	d841      	bhi.n	3704 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    3680:	4849      	ldr	r0, [pc, #292]	; (37a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    3682:	4281      	cmp	r1, r0
    3684:	dc5a      	bgt.n	373c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    3686:	4240      	negs	r0, r0
    3688:	4281      	cmp	r1, r0
    368a:	db5f      	blt.n	374c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    368c:	1c58      	adds	r0, r3, #1
    368e:	4290      	cmp	r0, r2
    3690:	bfdc      	itt	le
    3692:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    3696:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    369a:	dd05      	ble.n	36a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    369c:	2a00      	cmp	r2, #0
    369e:	bfbc      	itt	lt
    36a0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    36a4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    36a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    36aa:	60c2      	str	r2, [r0, #12]
    36ac:	2001      	movs	r0, #1
    36ae:	900b      	str	r0, [sp, #44]	; 0x2c
    36b0:	2d00      	cmp	r5, #0
    36b2:	d062      	beq.n	377a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    36b4:	2100      	movs	r1, #0
    36b6:	f240 608e 	movw	r0, #1678	; 0x68e
    36ba:	f3af 8000 	nop.w
    36be:	e05c      	b.n	377a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    36c0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    36c4:	aa08      	add	r2, sp, #32
    36c6:	a907      	add	r1, sp, #28
    36c8:	f000 fcd6 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    36cc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    36d0:	2820      	cmp	r0, #32
    36d2:	d01c      	beq.n	370e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    36d4:	6920      	ldr	r0, [r4, #16]
    36d6:	1d40      	adds	r0, r0, #5
    36d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36dc:	e9dd 2100 	ldrd	r2, r1, [sp]
    36e0:	1a89      	subs	r1, r1, r2
    36e2:	4401      	add	r1, r0
    36e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    36e8:	e9cd 0100 	strd	r0, r1, [sp]
    36ec:	f009 feed 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    36f0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    36f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    36f8:	4b2c      	ldr	r3, [pc, #176]	; (37ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    36fa:	4411      	add	r1, r2
    36fc:	1c4a      	adds	r2, r1, #1
    36fe:	1881      	adds	r1, r0, r2
    3700:	4298      	cmp	r0, r3
    3702:	d918      	bls.n	3736 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    3704:	f240 6109 	movw	r1, #1545	; 0x609
    3708:	2070      	movs	r0, #112	; 0x70
    370a:	f001 fd31 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    370e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3712:	f107 0609 	add.w	r6, r7, #9
    3716:	b120      	cbz	r0, 3722 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    3718:	f001 fcb2 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    371c:	2800      	cmp	r0, #0
    371e:	bf08      	it	eq
    3720:	3632      	addeq	r6, #50	; 0x32
    3722:	4823      	ldr	r0, [pc, #140]	; (37b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    3724:	7841      	ldrb	r1, [r0, #1]
    3726:	9807      	ldr	r0, [sp, #28]
    3728:	4281      	cmp	r1, r0
    372a:	bf84      	itt	hi
    372c:	1a08      	subhi	r0, r1, r0
    372e:	4406      	addhi	r6, r0
    3730:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    3734:	e7d2      	b.n	36dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    3736:	481c      	ldr	r0, [pc, #112]	; (37a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    3738:	4282      	cmp	r2, r0
    373a:	dd04      	ble.n	3746 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    373c:	f240 610a 	movw	r1, #1546	; 0x60a
    3740:	2070      	movs	r0, #112	; 0x70
    3742:	f001 fd15 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3746:	481b      	ldr	r0, [pc, #108]	; (37b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    3748:	4282      	cmp	r2, r0
    374a:	da04      	bge.n	3756 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    374c:	f240 610b 	movw	r1, #1547	; 0x60b
    3750:	2070      	movs	r0, #112	; 0x70
    3752:	f001 fd0d 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3756:	4818      	ldr	r0, [pc, #96]	; (37b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    3758:	4288      	cmp	r0, r1
    375a:	bfdc      	itt	le
    375c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    3760:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    3764:	dd05      	ble.n	3772 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    3766:	2900      	cmp	r1, #0
    3768:	bfbc      	itt	lt
    376a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    376e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    3772:	980c      	ldr	r0, [sp, #48]	; 0x30
    3774:	60c1      	str	r1, [r0, #12]
    3776:	2001      	movs	r0, #1
    3778:	900b      	str	r0, [sp, #44]	; 0x2c
    377a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    377e:	f88d 0010 	strb.w	r0, [sp, #16]
    3782:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3786:	2800      	cmp	r0, #0
    3788:	f47f aee2 	bne.w	3550 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    378c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    378e:	b00d      	add	sp, #52	; 0x34
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3794:	e000ed04 	.word	0xe000ed04
    3798:	003fffff 	.word	0x003fffff
    379c:	00000000 	.word	0x00000000
    37a0:	200011ac 	.word	0x200011ac
    37a4:	2000112c 	.word	0x2000112c
    37a8:	07a12000 	.word	0x07a12000
    37ac:	1e847fff 	.word	0x1e847fff
    37b0:	20000016 	.word	0x20000016
    37b4:	f85ee000 	.word	0xf85ee000
    37b8:	1e848000 	.word	0x1e848000

000037bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    37bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c0:	4d88      	ldr	r5, [pc, #544]	; (39e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    37c2:	b08c      	sub	sp, #48	; 0x30
    37c4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    37c8:	2000      	movs	r0, #0
    37ca:	9009      	str	r0, [sp, #36]	; 0x24
    37cc:	2001      	movs	r0, #1
    37ce:	4c86      	ldr	r4, [pc, #536]	; (39e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    37d0:	f04f 0900 	mov.w	r9, #0
    37d4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    37d8:	4680      	mov	r8, r0
    37da:	9008      	str	r0, [sp, #32]
    37dc:	b124      	cbz	r4, 37e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    37de:	2100      	movs	r1, #0
    37e0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    37e4:	f3af 8000 	nop.w
    37e8:	9808      	ldr	r0, [sp, #32]
    37ea:	2800      	cmp	r0, #0
    37ec:	d037      	beq.n	385e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    37ee:	bf00      	nop
    37f0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    37f4:	b124      	cbz	r4, 3800 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    37f6:	2100      	movs	r1, #0
    37f8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    37fc:	f3af 8000 	nop.w
    3800:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    3804:	2240      	movs	r2, #64	; 0x40
    3806:	ea28 060a 	bic.w	r6, r8, sl
    380a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    380e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    3812:	4683      	mov	fp, r0
    3814:	f009 ffc7 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3818:	b124      	cbz	r4, 3824 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    381a:	2100      	movs	r1, #0
    381c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3820:	f3af 8000 	nop.w
    3824:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    3828:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    382c:	9000      	str	r0, [sp, #0]
    382e:	6a09      	ldr	r1, [r1, #32]
    3830:	6201      	str	r1, [r0, #32]
    3832:	b124      	cbz	r4, 383e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    3834:	2100      	movs	r1, #0
    3836:	f240 50d1 	movw	r0, #1489	; 0x5d1
    383a:	f3af 8000 	nop.w
    383e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    3842:	f88d 0008 	strb.w	r0, [sp, #8]
    3846:	f89d 0008 	ldrb.w	r0, [sp, #8]
    384a:	b178      	cbz	r0, 386c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    384c:	2c00      	cmp	r4, #0
    384e:	bf1c      	itt	ne
    3850:	2100      	movne	r1, #0
    3852:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    3856:	d0c1      	beq.n	37dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3858:	f3af 8000 	nop.w
    385c:	e7be      	b.n	37dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    385e:	4863      	ldr	r0, [pc, #396]	; (39ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    3860:	2800      	cmp	r0, #0
    3862:	bf18      	it	ne
    3864:	f3af 8000 	nopne.w
    3868:	b662      	cpsie	i
    386a:	e7c1      	b.n	37f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    386c:	b124      	cbz	r4, 3878 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    386e:	2100      	movs	r1, #0
    3870:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    3874:	f3af 8000 	nop.w
    3878:	980c      	ldr	r0, [sp, #48]	; 0x30
    387a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    387e:	2803      	cmp	r0, #3
    3880:	d172      	bne.n	3968 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    3882:	f8dd a000 	ldr.w	sl, [sp]
    3886:	f8cd a018 	str.w	sl, [sp, #24]
    388a:	990c      	ldr	r1, [sp, #48]	; 0x30
    388c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3890:	4288      	cmp	r0, r1
    3892:	bf14      	ite	ne
    3894:	f04f 0b00 	movne.w	fp, #0
    3898:	f04f 0b01 	moveq.w	fp, #1
    389c:	f10a 0c20 	add.w	ip, sl, #32
    38a0:	4686      	mov	lr, r0
    38a2:	2220      	movs	r2, #32
    38a4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    38a8:	e003      	b.n	38b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    38aa:	4602      	mov	r2, r0
    38ac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    38b0:	7840      	ldrb	r0, [r0, #1]
    38b2:	4288      	cmp	r0, r1
    38b4:	d002      	beq.n	38bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    38b6:	2820      	cmp	r0, #32
    38b8:	d00a      	beq.n	38d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    38ba:	e7f6      	b.n	38aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    38bc:	2820      	cmp	r0, #32
    38be:	d007      	beq.n	38d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    38c0:	4586      	cmp	lr, r0
    38c2:	d107      	bne.n	38d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    38c4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    38c8:	7840      	ldrb	r0, [r0, #1]
    38ca:	f88c 0000 	strb.w	r0, [ip]
    38ce:	e007      	b.n	38e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    38d0:	4648      	mov	r0, r9
    38d2:	e00c      	b.n	38ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    38d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    38d8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    38dc:	7840      	ldrb	r0, [r0, #1]
    38de:	7048      	strb	r0, [r1, #1]
    38e0:	b124      	cbz	r4, 38ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    38e2:	2100      	movs	r1, #0
    38e4:	f240 5037 	movw	r0, #1335	; 0x537
    38e8:	f3af 8000 	nop.w
    38ec:	4640      	mov	r0, r8
    38ee:	ea10 0f0b 	tst.w	r0, fp
    38f2:	bf18      	it	ne
    38f4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    38f8:	2800      	cmp	r0, #0
    38fa:	d052      	beq.n	39a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    38fc:	b124      	cbz	r4, 3908 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    38fe:	2100      	movs	r1, #0
    3900:	f240 70fd 	movw	r0, #2045	; 0x7fd
    3904:	f3af 8000 	nop.w
    3908:	4632      	mov	r2, r6
    390a:	2001      	movs	r0, #1
    390c:	990c      	ldr	r1, [sp, #48]	; 0x30
    390e:	f7ff f8cd 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3912:	9806      	ldr	r0, [sp, #24]
    3914:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3918:	f88d 0008 	strb.w	r0, [sp, #8]
    391c:	f89d a008 	ldrb.w	sl, [sp, #8]
    3920:	b124      	cbz	r4, 392c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3922:	2100      	movs	r1, #0
    3924:	f640 0008 	movw	r0, #2056	; 0x808
    3928:	f3af 8000 	nop.w
    392c:	4830      	ldr	r0, [pc, #192]	; (39f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    392e:	2800      	cmp	r0, #0
    3930:	bf18      	it	ne
    3932:	f3af 8000 	nopne.w
    3936:	f3ef 8010 	mrs	r0, PRIMASK
    393a:	b672      	cpsid	i
    393c:	9008      	str	r0, [sp, #32]
    393e:	b124      	cbz	r4, 394a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    3940:	2100      	movs	r1, #0
    3942:	f640 000d 	movw	r0, #2061	; 0x80d
    3946:	f3af 8000 	nop.w
    394a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    394e:	f88d 0008 	strb.w	r0, [sp, #8]
    3952:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3956:	b140      	cbz	r0, 396a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    3958:	2c00      	cmp	r4, #0
    395a:	bf1c      	itt	ne
    395c:	2100      	movne	r1, #0
    395e:	f640 0011 	movwne	r0, #2065	; 0x811
    3962:	f43f af3b 	beq.w	37dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3966:	e777      	b.n	3858 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    3968:	e01b      	b.n	39a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    396a:	f1ba 0f00 	cmp.w	sl, #0
    396e:	d008      	beq.n	3982 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    3970:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3974:	2820      	cmp	r0, #32
    3976:	d104      	bne.n	3982 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    3978:	4631      	mov	r1, r6
    397a:	2002      	movs	r0, #2
    397c:	f7ff f8c6 	bl	2b0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    3980:	b308      	cbz	r0, 39c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    3982:	b124      	cbz	r4, 398e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    3984:	2100      	movs	r1, #0
    3986:	f640 0025 	movw	r0, #2085	; 0x825
    398a:	f3af 8000 	nop.w
    398e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3992:	ea28 0000 	bic.w	r0, r8, r0
    3996:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    399a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    399e:	2001      	movs	r0, #1
    39a0:	9009      	str	r0, [sp, #36]	; 0x24
    39a2:	b124      	cbz	r4, 39ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    39a4:	2100      	movs	r1, #0
    39a6:	f640 002e 	movw	r0, #2094	; 0x82e
    39aa:	f3af 8000 	nop.w
    39ae:	9808      	ldr	r0, [sp, #32]
    39b0:	b188      	cbz	r0, 39d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    39b2:	b124      	cbz	r4, 39be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    39b4:	2100      	movs	r1, #0
    39b6:	f640 0032 	movw	r0, #2098	; 0x832
    39ba:	f3af 8000 	nop.w
    39be:	9809      	ldr	r0, [sp, #36]	; 0x24
    39c0:	b00d      	add	sp, #52	; 0x34
    39c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39c6:	2c00      	cmp	r4, #0
    39c8:	d0f1      	beq.n	39ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    39ca:	2100      	movs	r1, #0
    39cc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    39d0:	f3af 8000 	nop.w
    39d4:	e7e6      	b.n	39a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    39d6:	4805      	ldr	r0, [pc, #20]	; (39ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    39d8:	2800      	cmp	r0, #0
    39da:	bf18      	it	ne
    39dc:	f3af 8000 	nopne.w
    39e0:	b662      	cpsie	i
    39e2:	e7e6      	b.n	39b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    39e4:	200011ac 	.word	0x200011ac
	...

000039f4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    39f4:	2820      	cmp	r0, #32
    39f6:	bf24      	itt	cs
    39f8:	2000      	movcs	r0, #0
    39fa:	4770      	bxcs	lr
    39fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3a00:	4b03      	ldr	r3, [pc, #12]	; (3a10 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    3a02:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    3a06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3a0a:	6042      	str	r2, [r0, #4]
    3a0c:	2001      	movs	r0, #1
    3a0e:	4770      	bx	lr
    3a10:	20000e2c 	.word	0x20000e2c

00003a14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3a14:	b510      	push	{r4, lr}
    3a16:	2820      	cmp	r0, #32
    3a18:	d211      	bcs.n	3a3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3a1a:	490e      	ldr	r1, [pc, #56]	; (3a54 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3a1c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3a20:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3a24:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3a28:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3a2c:	b13b      	cbz	r3, 3a3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3a2e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3a32:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3a36:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    3a3a:	2a01      	cmp	r2, #1
    3a3c:	d001      	beq.n	3a42 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3a3e:	2000      	movs	r0, #0
    3a40:	bd10      	pop	{r4, pc}
    3a42:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3a46:	4601      	mov	r1, r0
    3a48:	2000      	movs	r0, #0
    3a4a:	f7ff f82f 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3a4e:	2001      	movs	r0, #1
    3a50:	bd10      	pop	{r4, pc}
    3a52:	0000      	.short	0x0000
    3a54:	200011ac 	.word	0x200011ac

00003a58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a5c:	4e80      	ldr	r6, [pc, #512]	; (3c60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    3a5e:	4680      	mov	r8, r0
    3a60:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3a64:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3a68:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3a6c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3a70:	2800      	cmp	r0, #0
    3a72:	d068      	beq.n	3b46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3a74:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3a78:	4d7a      	ldr	r5, [pc, #488]	; (3c64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    3a7a:	b125      	cbz	r5, 3a86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3a7c:	2100      	movs	r1, #0
    3a7e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    3a82:	f3af 8000 	nop.w
    3a86:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    3a8a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3a8e:	2801      	cmp	r0, #1
    3a90:	d018      	beq.n	3ac4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3a92:	b2c0      	uxtb	r0, r0
    3a94:	2804      	cmp	r0, #4
    3a96:	bf1c      	itt	ne
    3a98:	2805      	cmpne	r0, #5
    3a9a:	2806      	cmpne	r0, #6
    3a9c:	d058      	beq.n	3b50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    3a9e:	b12d      	cbz	r5, 3aac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3aa0:	f04f 0100 	mov.w	r1, #0
    3aa4:	f640 30cd 	movw	r0, #3021	; 0xbcd
    3aa8:	f3af 8000 	nop.w
    3aac:	f001 fc86 	bl	53bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3ab0:	b125      	cbz	r5, 3abc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3ab2:	2100      	movs	r1, #0
    3ab4:	f640 30d1 	movw	r0, #3025	; 0xbd1
    3ab8:	f3af 8000 	nop.w
    3abc:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3ac0:	2801      	cmp	r0, #1
    3ac2:	d1e6      	bne.n	3a92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    3ac4:	2401      	movs	r4, #1
    3ac6:	b125      	cbz	r5, 3ad2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3ac8:	2100      	movs	r1, #0
    3aca:	f640 30d8 	movw	r0, #3032	; 0xbd8
    3ace:	f3af 8000 	nop.w
    3ad2:	2c00      	cmp	r4, #0
    3ad4:	d042      	beq.n	3b5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    3ad6:	2000      	movs	r0, #0
    3ad8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3adc:	b125      	cbz	r5, 3ae8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3ade:	2100      	movs	r1, #0
    3ae0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    3ae4:	f3af 8000 	nop.w
    3ae8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    3aec:	2001      	movs	r0, #1
    3aee:	ea20 090b 	bic.w	r9, r0, fp
    3af2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    3af6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3afa:	2240      	movs	r2, #64	; 0x40
    3afc:	f009 fe53 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b00:	b125      	cbz	r5, 3b0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    3b02:	2100      	movs	r1, #0
    3b04:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3b08:	f3af 8000 	nop.w
    3b0c:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    3b10:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    3b14:	6a00      	ldr	r0, [r0, #32]
    3b16:	f8ca 0020 	str.w	r0, [sl, #32]
    3b1a:	b125      	cbz	r5, 3b26 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3b1c:	2100      	movs	r1, #0
    3b1e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    3b22:	f3af 8000 	nop.w
    3b26:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3b2a:	f88d 0000 	strb.w	r0, [sp]
    3b2e:	f89d 0000 	ldrb.w	r0, [sp]
    3b32:	b1d0      	cbz	r0, 3b6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3b34:	2d00      	cmp	r5, #0
    3b36:	bf1c      	itt	ne
    3b38:	2100      	movne	r1, #0
    3b3a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    3b3e:	d0c2      	beq.n	3ac6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3b40:	f3af 8000 	nop.w
    3b44:	e7bf      	b.n	3ac6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3b46:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3b4a:	2070      	movs	r0, #112	; 0x70
    3b4c:	f001 fb10 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b50:	464a      	mov	r2, r9
    3b52:	4641      	mov	r1, r8
    3b54:	2001      	movs	r0, #1
    3b56:	f7fe ffa9 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3b5a:	e7a9      	b.n	3ab0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3b5c:	4842      	ldr	r0, [pc, #264]	; (3c68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3b5e:	2800      	cmp	r0, #0
    3b60:	bf18      	it	ne
    3b62:	f3af 8000 	nopne.w
    3b66:	b662      	cpsie	i
    3b68:	e7b5      	b.n	3ad6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    3b6a:	b125      	cbz	r5, 3b76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    3b6c:	2100      	movs	r1, #0
    3b6e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    3b72:	f3af 8000 	nop.w
    3b76:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    3b7a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    3b7e:	4614      	mov	r4, r2
    3b80:	f04f 0b20 	mov.w	fp, #32
    3b84:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3b88:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    3b8c:	e003      	b.n	3b96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    3b8e:	46a3      	mov	fp, r4
    3b90:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    3b94:	785c      	ldrb	r4, [r3, #1]
    3b96:	4544      	cmp	r4, r8
    3b98:	d002      	beq.n	3ba0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    3b9a:	2c20      	cmp	r4, #32
    3b9c:	d02b      	beq.n	3bf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3b9e:	e7f6      	b.n	3b8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    3ba0:	2c20      	cmp	r4, #32
    3ba2:	d028      	beq.n	3bf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3ba4:	42a2      	cmp	r2, r4
    3ba6:	d104      	bne.n	3bb2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    3ba8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3bac:	7840      	ldrb	r0, [r0, #1]
    3bae:	7008      	strb	r0, [r1, #0]
    3bb0:	e005      	b.n	3bbe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    3bb2:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    3bb6:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    3bba:	7849      	ldrb	r1, [r1, #1]
    3bbc:	7041      	strb	r1, [r0, #1]
    3bbe:	f1ba 0f00 	cmp.w	sl, #0
    3bc2:	d011      	beq.n	3be8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    3bc4:	b125      	cbz	r5, 3bd0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    3bc6:	2100      	movs	r1, #0
    3bc8:	f240 502f 	movw	r0, #1327	; 0x52f
    3bcc:	f3af 8000 	nop.w
    3bd0:	f89a 0000 	ldrb.w	r0, [sl]
    3bd4:	42a0      	cmp	r0, r4
    3bd6:	d107      	bne.n	3be8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    3bd8:	b125      	cbz	r5, 3be4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    3bda:	2100      	movs	r1, #0
    3bdc:	f240 5032 	movw	r0, #1330	; 0x532
    3be0:	f3af 8000 	nop.w
    3be4:	f88a b000 	strb.w	fp, [sl]
    3be8:	b15d      	cbz	r5, 3c02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    3bea:	2100      	movs	r1, #0
    3bec:	f240 5037 	movw	r0, #1335	; 0x537
    3bf0:	f3af 8000 	nop.w
    3bf4:	e000      	b.n	3bf8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    3bf6:	b125      	cbz	r5, 3c02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    3bf8:	2100      	movs	r1, #0
    3bfa:	f640 30eb 	movw	r0, #3051	; 0xbeb
    3bfe:	f3af 8000 	nop.w
    3c02:	481a      	ldr	r0, [pc, #104]	; (3c6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3c04:	2800      	cmp	r0, #0
    3c06:	bf18      	it	ne
    3c08:	f3af 8000 	nopne.w
    3c0c:	f3ef 8410 	mrs	r4, PRIMASK
    3c10:	b672      	cpsid	i
    3c12:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3c16:	f88d 0000 	strb.w	r0, [sp]
    3c1a:	f89d 0000 	ldrb.w	r0, [sp]
    3c1e:	b138      	cbz	r0, 3c30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3c20:	2d00      	cmp	r5, #0
    3c22:	bf1c      	itt	ne
    3c24:	2100      	movne	r1, #0
    3c26:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    3c2a:	f43f af4c 	beq.w	3ac6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3c2e:	e787      	b.n	3b40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3c30:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3c34:	2001      	movs	r0, #1
    3c36:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3c3a:	b154      	cbz	r4, 3c52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3c3c:	2d00      	cmp	r5, #0
    3c3e:	bf08      	it	eq
    3c40:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c44:	2100      	movs	r1, #0
    3c46:	f640 30fe 	movw	r0, #3070	; 0xbfe
    3c4a:	f3af 8000 	nop.w
    3c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c52:	4805      	ldr	r0, [pc, #20]	; (3c68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3c54:	2800      	cmp	r0, #0
    3c56:	bf18      	it	ne
    3c58:	f3af 8000 	nopne.w
    3c5c:	b662      	cpsie	i
    3c5e:	e7ed      	b.n	3c3c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3c60:	200011ac 	.word	0x200011ac
	...

00003c70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3c70:	b570      	push	{r4, r5, r6, lr}
    3c72:	460d      	mov	r5, r1
    3c74:	4606      	mov	r6, r0
    3c76:	f001 f9f1 	bl	505c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3c7a:	480f      	ldr	r0, [pc, #60]	; (3cb8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3c7c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3c80:	2400      	movs	r4, #0
    3c82:	3880      	subs	r0, #128	; 0x80
    3c84:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3c88:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3c8c:	b129      	cbz	r1, 3c9a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3c8e:	1c61      	adds	r1, r4, #1
    3c90:	b2cc      	uxtb	r4, r1
    3c92:	2c20      	cmp	r4, #32
    3c94:	d3f8      	bcc.n	3c88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3c96:	2020      	movs	r0, #32
    3c98:	bd70      	pop	{r4, r5, r6, pc}
    3c9a:	4808      	ldr	r0, [pc, #32]	; (3cbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3c9c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3ca0:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3ca4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3ca8:	4621      	mov	r1, r4
    3caa:	6045      	str	r5, [r0, #4]
    3cac:	2001      	movs	r0, #1
    3cae:	f7fe fefd 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3cb2:	4620      	mov	r0, r4
    3cb4:	bd70      	pop	{r4, r5, r6, pc}
    3cb6:	0000      	.short	0x0000
    3cb8:	200011ac 	.word	0x200011ac
    3cbc:	20000e2c 	.word	0x20000e2c

00003cc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cc4:	b083      	sub	sp, #12
    3cc6:	f000 fb35 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3cca:	4605      	mov	r5, r0
    3ccc:	f000 fdfe 	bl	48cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3cd0:	4c67      	ldr	r4, [pc, #412]	; (3e70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    3cd2:	68a0      	ldr	r0, [r4, #8]
    3cd4:	f1b0 3fff 	cmp.w	r0, #4294967295
    3cd8:	bf1c      	itt	ne
    3cda:	f04f 30ff 	movne.w	r0, #4294967295
    3cde:	60a0      	strne	r0, [r4, #8]
    3ce0:	7fa0      	ldrb	r0, [r4, #30]
    3ce2:	f8df b190 	ldr.w	fp, [pc, #400]	; 3e74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    3ce6:	b9a8      	cbnz	r0, 3d14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    3ce8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    3cec:	1a08      	subs	r0, r1, r0
    3cee:	0200      	lsls	r0, r0, #8
    3cf0:	17c1      	asrs	r1, r0, #31
    3cf2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3cf6:	1200      	asrs	r0, r0, #8
    3cf8:	f44f 710c 	mov.w	r1, #560	; 0x230
    3cfc:	f009 fc12 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3d00:	6921      	ldr	r1, [r4, #16]
    3d02:	4408      	add	r0, r1
    3d04:	1a28      	subs	r0, r5, r0
    3d06:	0200      	lsls	r0, r0, #8
    3d08:	17c1      	asrs	r1, r0, #31
    3d0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3d0e:	1200      	asrs	r0, r0, #8
    3d10:	0fc0      	lsrs	r0, r0, #31
    3d12:	d013      	beq.n	3d3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    3d14:	7e60      	ldrb	r0, [r4, #25]
    3d16:	b328      	cbz	r0, 3d64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3d18:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3d1c:	f88d 0000 	strb.w	r0, [sp]
    3d20:	f89d 0000 	ldrb.w	r0, [sp]
    3d24:	b1f0      	cbz	r0, 3d64 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3d26:	f000 fc13 	bl	4550 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3d2a:	bf00      	nop
    3d2c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3d30:	b1f0      	cbz	r0, 3d70 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    3d32:	f240 4147 	movw	r1, #1095	; 0x447
    3d36:	2070      	movs	r0, #112	; 0x70
    3d38:	f001 fa1a 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d3c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3d40:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3d44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3d48:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3d4c:	6840      	ldr	r0, [r0, #4]
    3d4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3d52:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3d56:	2108      	movs	r1, #8
    3d58:	4790      	blx	r2
    3d5a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    3d5e:	2070      	movs	r0, #112	; 0x70
    3d60:	f001 fa06 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d64:	1ce8      	adds	r0, r5, #3
    3d66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d6a:	f000 fae9 	bl	4340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3d6e:	e7dd      	b.n	3d2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3d70:	f04f 0a01 	mov.w	sl, #1
    3d74:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3d78:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3d7c:	2820      	cmp	r0, #32
    3d7e:	d024      	beq.n	3dca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3d80:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3d84:	2020      	movs	r0, #32
    3d86:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3d8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    3d8e:	2600      	movs	r6, #0
    3d90:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3d94:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3d98:	4837      	ldr	r0, [pc, #220]	; (3e78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    3d9a:	6026      	str	r6, [r4, #0]
    3d9c:	7800      	ldrb	r0, [r0, #0]
    3d9e:	2802      	cmp	r0, #2
    3da0:	bf16      	itet	ne
    3da2:	2803      	cmpne	r0, #3
    3da4:	2001      	moveq	r0, #1
    3da6:	2000      	movne	r0, #0
    3da8:	7720      	strb	r0, [r4, #28]
    3daa:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    3dae:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    3db2:	f899 0020 	ldrb.w	r0, [r9, #32]
    3db6:	2820      	cmp	r0, #32
    3db8:	d031      	beq.n	3e1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3dba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3dbe:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3dc2:	7d81      	ldrb	r1, [r0, #22]
    3dc4:	2901      	cmp	r1, #1
    3dc6:	d005      	beq.n	3dd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    3dc8:	e029      	b.n	3e1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3dca:	f240 414a 	movw	r1, #1098	; 0x44a
    3dce:	2070      	movs	r0, #112	; 0x70
    3dd0:	f001 f9ce 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dd4:	46ab      	mov	fp, r5
    3dd6:	f100 0508 	add.w	r5, r0, #8
    3dda:	8a40      	ldrh	r0, [r0, #18]
    3ddc:	aa01      	add	r2, sp, #4
    3dde:	4669      	mov	r1, sp
    3de0:	f000 f94a 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3de4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3de8:	2820      	cmp	r0, #32
    3dea:	d004      	beq.n	3df6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    3dec:	6920      	ldr	r0, [r4, #16]
    3dee:	1d40      	adds	r0, r0, #5
    3df0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3df4:	e00b      	b.n	3e0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    3df6:	8968      	ldrh	r0, [r5, #10]
    3df8:	f10b 0b09 	add.w	fp, fp, #9
    3dfc:	b128      	cbz	r0, 3e0a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    3dfe:	f001 f93f 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e02:	2800      	cmp	r0, #0
    3e04:	bf08      	it	eq
    3e06:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    3e0a:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    3e0e:	e9d5 2100 	ldrd	r2, r1, [r5]
    3e12:	1a89      	subs	r1, r1, r2
    3e14:	6028      	str	r0, [r5, #0]
    3e16:	4408      	add	r0, r1
    3e18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3e1c:	6068      	str	r0, [r5, #4]
    3e1e:	4639      	mov	r1, r7
    3e20:	2001      	movs	r0, #1
    3e22:	f7fe fe73 	bl	2b0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xd4c>
    3e26:	2800      	cmp	r0, #0
    3e28:	d0f9      	beq.n	3e1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3e2a:	4814      	ldr	r0, [pc, #80]	; (3e7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3e2c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3e30:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3e34:	2802      	cmp	r0, #2
    3e36:	d104      	bne.n	3e42 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3e38:	463a      	mov	r2, r7
    3e3a:	4641      	mov	r1, r8
    3e3c:	2006      	movs	r0, #6
    3e3e:	f7fe fe35 	bl	2aac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xcec>
    3e42:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3e46:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    3e4a:	2820      	cmp	r0, #32
    3e4c:	d003      	beq.n	3e56 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    3e4e:	480c      	ldr	r0, [pc, #48]	; (3e80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3e50:	7840      	ldrb	r0, [r0, #1]
    3e52:	f001 fa5d 	bl	5310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3e56:	7f20      	ldrb	r0, [r4, #28]
    3e58:	2800      	cmp	r0, #0
    3e5a:	bf04      	itt	eq
    3e5c:	b003      	addeq	sp, #12
    3e5e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e62:	f000 fd7d 	bl	4960 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3e66:	7726      	strb	r6, [r4, #28]
    3e68:	7766      	strb	r6, [r4, #29]
    3e6a:	b003      	add	sp, #12
    3e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e70:	200011ac 	.word	0x200011ac
    3e74:	20000e2c 	.word	0x20000e2c
    3e78:	20000016 	.word	0x20000016
    3e7c:	2000112c 	.word	0x2000112c
    3e80:	20000014 	.word	0x20000014

00003e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3e84:	b510      	push	{r4, lr}
    3e86:	4c32      	ldr	r4, [pc, #200]	; (3f50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3e88:	b082      	sub	sp, #8
    3e8a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3e8e:	2920      	cmp	r1, #32
    3e90:	d008      	beq.n	3ea4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3e92:	68a1      	ldr	r1, [r4, #8]
    3e94:	f1b1 3fff 	cmp.w	r1, #4294967295
    3e98:	d009      	beq.n	3eae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    3e9a:	f640 21e9 	movw	r1, #2793	; 0xae9
    3e9e:	2070      	movs	r0, #112	; 0x70
    3ea0:	f001 f966 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ea4:	f640 21e8 	movw	r1, #2792	; 0xae8
    3ea8:	2070      	movs	r0, #112	; 0x70
    3eaa:	f001 f961 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3eae:	6862      	ldr	r2, [r4, #4]
    3eb0:	4601      	mov	r1, r0
    3eb2:	4b28      	ldr	r3, [pc, #160]	; (3f54 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3eb4:	1850      	adds	r0, r2, r1
    3eb6:	429a      	cmp	r2, r3
    3eb8:	d904      	bls.n	3ec4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    3eba:	f240 6109 	movw	r1, #1545	; 0x609
    3ebe:	2070      	movs	r0, #112	; 0x70
    3ec0:	f001 f956 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ec4:	4a24      	ldr	r2, [pc, #144]	; (3f58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    3ec6:	4291      	cmp	r1, r2
    3ec8:	dd04      	ble.n	3ed4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    3eca:	f240 610a 	movw	r1, #1546	; 0x60a
    3ece:	2070      	movs	r0, #112	; 0x70
    3ed0:	f001 f94e 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ed4:	4a21      	ldr	r2, [pc, #132]	; (3f5c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    3ed6:	4291      	cmp	r1, r2
    3ed8:	da04      	bge.n	3ee4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    3eda:	f240 610b 	movw	r1, #1547	; 0x60b
    3ede:	2070      	movs	r0, #112	; 0x70
    3ee0:	f001 f946 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ee4:	491e      	ldr	r1, [pc, #120]	; (3f60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    3ee6:	4281      	cmp	r1, r0
    3ee8:	bfdc      	itt	le
    3eea:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3eee:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3ef2:	dd05      	ble.n	3f00 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    3ef4:	2800      	cmp	r0, #0
    3ef6:	bfbc      	itt	lt
    3ef8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3efc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3f00:	aa01      	add	r2, sp, #4
    3f02:	4669      	mov	r1, sp
    3f04:	f000 f8b8 	bl	4078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3f08:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3f0c:	280f      	cmp	r0, #15
    3f0e:	bf8c      	ite	hi
    3f10:	2001      	movhi	r0, #1
    3f12:	2000      	movls	r0, #0
    3f14:	9900      	ldr	r1, [sp, #0]
    3f16:	4408      	add	r0, r1
    3f18:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3f1c:	60a1      	str	r1, [r4, #8]
    3f1e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3f22:	f88d 0000 	strb.w	r0, [sp]
    3f26:	f89d 0000 	ldrb.w	r0, [sp]
    3f2a:	2800      	cmp	r0, #0
    3f2c:	bf04      	itt	eq
    3f2e:	b002      	addeq	sp, #8
    3f30:	bd10      	popeq	{r4, pc}
    3f32:	2301      	movs	r3, #1
    3f34:	2203      	movs	r2, #3
    3f36:	2005      	movs	r0, #5
    3f38:	f000 fb86 	bl	4648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3f3c:	2800      	cmp	r0, #0
    3f3e:	bf1c      	itt	ne
    3f40:	b002      	addne	sp, #8
    3f42:	bd10      	popne	{r4, pc}
    3f44:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3f48:	2070      	movs	r0, #112	; 0x70
    3f4a:	f001 f911 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f4e:	0000      	.short	0x0000
    3f50:	200011ac 	.word	0x200011ac
    3f54:	1e847fff 	.word	0x1e847fff
    3f58:	07a12000 	.word	0x07a12000
    3f5c:	f85ee000 	.word	0xf85ee000
    3f60:	1e848000 	.word	0x1e848000

00003f64 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3f64:	b570      	push	{r4, r5, r6, lr}
    3f66:	4c1e      	ldr	r4, [pc, #120]	; (3fe0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3f68:	2120      	movs	r1, #32
    3f6a:	f884 1020 	strb.w	r1, [r4, #32]
    3f6e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3f72:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3f76:	2000      	movs	r0, #0
    3f78:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3f7c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3f80:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3f84:	1e42      	subs	r2, r0, #1
    3f86:	60a2      	str	r2, [r4, #8]
    3f88:	6020      	str	r0, [r4, #0]
    3f8a:	77a0      	strb	r0, [r4, #30]
    3f8c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3f90:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3f94:	7720      	strb	r0, [r4, #28]
    3f96:	7760      	strb	r0, [r4, #29]
    3f98:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3f9c:	4911      	ldr	r1, [pc, #68]	; (3fe4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    3f9e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3fa2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3fa6:	7008      	strb	r0, [r1, #0]
    3fa8:	7048      	strb	r0, [r1, #1]
    3faa:	8048      	strh	r0, [r1, #2]
    3fac:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3fb0:	2210      	movs	r2, #16
    3fb2:	7088      	strb	r0, [r1, #2]
    3fb4:	f801 0f04 	strb.w	r0, [r1, #4]!
    3fb8:	1e52      	subs	r2, r2, #1
    3fba:	d1fa      	bne.n	3fb2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3fbc:	4d0a      	ldr	r5, [pc, #40]	; (3fe8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    3fbe:	2601      	movs	r6, #1
    3fc0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    3fc4:	20ff      	movs	r0, #255	; 0xff
    3fc6:	7028      	strb	r0, [r5, #0]
    3fc8:	4808      	ldr	r0, [pc, #32]	; (3fec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    3fca:	f001 f983 	bl	52d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3fce:	7068      	strb	r0, [r5, #1]
    3fd0:	f001 f9de 	bl	5390 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    3fd4:	60a8      	str	r0, [r5, #8]
    3fd6:	f000 fd0b 	bl	49f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3fda:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3fde:	bd70      	pop	{r4, r5, r6, pc}
    3fe0:	200011ac 	.word	0x200011ac
    3fe4:	20000016 	.word	0x20000016
    3fe8:	20000014 	.word	0x20000014
    3fec:	00002969 	.word	0x00002969

00003ff0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	4604      	mov	r4, r0
    3ff4:	4615      	mov	r5, r2
    3ff6:	4608      	mov	r0, r1
    3ff8:	f009 fa67 	bl	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3ffc:	4a0f      	ldr	r2, [pc, #60]	; (403c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    3ffe:	1b01      	subs	r1, r0, r4
    4000:	1c53      	adds	r3, r2, #1
    4002:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    4006:	bf24      	itt	cs
    4008:	eba4 0c00 	subcs.w	ip, r4, r0
    400c:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    4010:	d30b      	bcc.n	402a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    4012:	428a      	cmp	r2, r1
    4014:	d203      	bcs.n	401e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    4016:	1b11      	subs	r1, r2, r4
    4018:	4408      	add	r0, r1
    401a:	1c41      	adds	r1, r0, #1
    401c:	e005      	b.n	402a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    401e:	4562      	cmp	r2, ip
    4020:	d207      	bcs.n	4032 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    4022:	1a10      	subs	r0, r2, r0
    4024:	4420      	add	r0, r4
    4026:	1c40      	adds	r0, r0, #1
    4028:	4241      	negs	r1, r0
    402a:	f101 000f 	add.w	r0, r1, #15
    402e:	1a28      	subs	r0, r5, r0
    4030:	bd70      	pop	{r4, r5, r6, pc}
    4032:	f640 310c 	movw	r1, #2828	; 0xb0c
    4036:	2070      	movs	r0, #112	; 0x70
    4038:	f001 f89a 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    403c:	1e847fff 	.word	0x1e847fff

00004040 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    4040:	0b41      	lsrs	r1, r0, #13
    4042:	f248 6237 	movw	r2, #34359	; 0x8637
    4046:	4351      	muls	r1, r2
    4048:	0c0a      	lsrs	r2, r1, #16
    404a:	4b09      	ldr	r3, [pc, #36]	; (4070 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    404c:	0251      	lsls	r1, r2, #9
    404e:	fb02 0203 	mla	r2, r2, r3, r0
    4052:	4808      	ldr	r0, [pc, #32]	; (4074 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    4054:	4350      	muls	r0, r2
    4056:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    405a:	306e      	adds	r0, #110	; 0x6e
    405c:	0d40      	lsrs	r0, r0, #21
    405e:	425b      	negs	r3, r3
    4060:	fb10 f303 	smulbb	r3, r0, r3
    4064:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    4068:	bf88      	it	hi
    406a:	1c49      	addhi	r1, r1, #1
    406c:	4408      	add	r0, r1
    406e:	4770      	bx	lr
    4070:	ffffc2f7 	.word	0xffffc2f7
    4074:	00010c6f 	.word	0x00010c6f

00004078 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    4078:	0b43      	lsrs	r3, r0, #13
    407a:	f248 6c37 	movw	ip, #34359	; 0x8637
    407e:	fb03 f30c 	mul.w	r3, r3, ip
    4082:	b430      	push	{r4, r5}
    4084:	0c1b      	lsrs	r3, r3, #16
    4086:	f8df c044 	ldr.w	ip, [pc, #68]	; 40cc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    408a:	025c      	lsls	r4, r3, #9
    408c:	fb03 030c 	mla	r3, r3, ip, r0
    4090:	480f      	ldr	r0, [pc, #60]	; (40d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    4092:	4358      	muls	r0, r3
    4094:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    4098:	eb04 000c 	add.w	r0, r4, ip
    409c:	f643 5409 	movw	r4, #15625	; 0x3d09
    40a0:	fb1c f404 	smulbb	r4, ip, r4
    40a4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    40a8:	f643 5508 	movw	r5, #15624	; 0x3d08
    40ac:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    40b0:	442c      	add	r4, r5
    40b2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    40b6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    40ba:	bf84      	itt	hi
    40bc:	f04f 0c00 	movhi.w	ip, #0
    40c0:	1c40      	addhi	r0, r0, #1
    40c2:	6008      	str	r0, [r1, #0]
    40c4:	f882 c000 	strb.w	ip, [r2]
    40c8:	bc30      	pop	{r4, r5}
    40ca:	4770      	bx	lr
    40cc:	ffffc2f7 	.word	0xffffc2f7
    40d0:	00010c6f 	.word	0x00010c6f

000040d4 <MPSL_IRQ_RTC0_Handler>:
    40d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40d8:	4c36      	ldr	r4, [pc, #216]	; (41b4 <MPSL_IRQ_RTC0_Handler+0xe0>)
    40da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    40de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    40e2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    40e6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    40ea:	f04f 0500 	mov.w	r5, #0
    40ee:	d019      	beq.n	4124 <MPSL_IRQ_RTC0_Handler+0x50>
    40f0:	4831      	ldr	r0, [pc, #196]	; (41b8 <MPSL_IRQ_RTC0_Handler+0xe4>)
    40f2:	6800      	ldr	r0, [r0, #0]
    40f4:	b1b0      	cbz	r0, 4124 <MPSL_IRQ_RTC0_Handler+0x50>
    40f6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    40fa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    40fe:	482f      	ldr	r0, [pc, #188]	; (41bc <MPSL_IRQ_RTC0_Handler+0xe8>)
    4100:	6800      	ldr	r0, [r0, #0]
    4102:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    4106:	1a40      	subs	r0, r0, r1
    4108:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    410c:	2802      	cmp	r0, #2
    410e:	d302      	bcc.n	4116 <MPSL_IRQ_RTC0_Handler+0x42>
    4110:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    4114:	d306      	bcc.n	4124 <MPSL_IRQ_RTC0_Handler+0x50>
    4116:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    411a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    411e:	2004      	movs	r0, #4
    4120:	f7fe ff2c 	bl	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4124:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4128:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    412c:	d019      	beq.n	4162 <MPSL_IRQ_RTC0_Handler+0x8e>
    412e:	4824      	ldr	r0, [pc, #144]	; (41c0 <MPSL_IRQ_RTC0_Handler+0xec>)
    4130:	6800      	ldr	r0, [r0, #0]
    4132:	b1b0      	cbz	r0, 4162 <MPSL_IRQ_RTC0_Handler+0x8e>
    4134:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    4138:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    413c:	4821      	ldr	r0, [pc, #132]	; (41c4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    413e:	6800      	ldr	r0, [r0, #0]
    4140:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    4144:	1a40      	subs	r0, r0, r1
    4146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    414a:	2802      	cmp	r0, #2
    414c:	d302      	bcc.n	4154 <MPSL_IRQ_RTC0_Handler+0x80>
    414e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    4152:	d306      	bcc.n	4162 <MPSL_IRQ_RTC0_Handler+0x8e>
    4154:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4158:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    415c:	2005      	movs	r0, #5
    415e:	f7fe ff0d 	bl	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    4162:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4166:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    416a:	bf08      	it	eq
    416c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4170:	4815      	ldr	r0, [pc, #84]	; (41c8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    4172:	6800      	ldr	r0, [r0, #0]
    4174:	2800      	cmp	r0, #0
    4176:	bf08      	it	eq
    4178:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    417c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    4180:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    4184:	4811      	ldr	r0, [pc, #68]	; (41cc <MPSL_IRQ_RTC0_Handler+0xf8>)
    4186:	6800      	ldr	r0, [r0, #0]
    4188:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    418c:	1a40      	subs	r0, r0, r1
    418e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4192:	2802      	cmp	r0, #2
    4194:	d304      	bcc.n	41a0 <MPSL_IRQ_RTC0_Handler+0xcc>
    4196:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    419a:	bf38      	it	cc
    419c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    41a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    41a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    41a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41ac:	2006      	movs	r0, #6
    41ae:	f7fe bee5 	b.w	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    41b2:	0000      	.short	0x0000
    41b4:	4000b000 	.word	0x4000b000
    41b8:	4000b140 	.word	0x4000b140
    41bc:	4000b540 	.word	0x4000b540
    41c0:	4000b144 	.word	0x4000b144
    41c4:	4000b544 	.word	0x4000b544
    41c8:	4000b148 	.word	0x4000b148
    41cc:	4000b548 	.word	0x4000b548

000041d0 <MPSL_IRQ_TIMER0_Handler>:
    41d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41d4:	4d38      	ldr	r5, [pc, #224]	; (42b8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    41d6:	7828      	ldrb	r0, [r5, #0]
    41d8:	2804      	cmp	r0, #4
    41da:	d068      	beq.n	42ae <MPSL_IRQ_TIMER0_Handler+0xde>
    41dc:	1ce8      	adds	r0, r5, #3
    41de:	2201      	movs	r2, #1
    41e0:	7801      	ldrb	r1, [r0, #0]
    41e2:	b159      	cbz	r1, 41fc <MPSL_IRQ_TIMER0_Handler+0x2c>
    41e4:	2901      	cmp	r1, #1
    41e6:	bf08      	it	eq
    41e8:	706a      	strbeq	r2, [r5, #1]
    41ea:	d002      	beq.n	41f2 <MPSL_IRQ_TIMER0_Handler+0x22>
    41ec:	7869      	ldrb	r1, [r5, #1]
    41ee:	2900      	cmp	r1, #0
    41f0:	d058      	beq.n	42a4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    41f2:	2102      	movs	r1, #2
    41f4:	7001      	strb	r1, [r0, #0]
    41f6:	7840      	ldrb	r0, [r0, #1]
    41f8:	f000 fafa 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    41fc:	4c2f      	ldr	r4, [pc, #188]	; (42bc <MPSL_IRQ_TIMER0_Handler+0xec>)
    41fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    4202:	f04f 0800 	mov.w	r8, #0
    4206:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    420a:	f44f 7780 	mov.w	r7, #256	; 0x100
    420e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    4212:	d00a      	beq.n	422a <MPSL_IRQ_TIMER0_Handler+0x5a>
    4214:	482a      	ldr	r0, [pc, #168]	; (42c0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    4216:	6800      	ldr	r0, [r0, #0]
    4218:	b138      	cbz	r0, 422a <MPSL_IRQ_TIMER0_Handler+0x5a>
    421a:	2003      	movs	r0, #3
    421c:	f000 fae8 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4220:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4224:	2003      	movs	r0, #3
    4226:	f7fe fea9 	bl	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    422a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    422e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    4232:	d00a      	beq.n	424a <MPSL_IRQ_TIMER0_Handler+0x7a>
    4234:	4823      	ldr	r0, [pc, #140]	; (42c4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    4236:	6800      	ldr	r0, [r0, #0]
    4238:	b138      	cbz	r0, 424a <MPSL_IRQ_TIMER0_Handler+0x7a>
    423a:	2002      	movs	r0, #2
    423c:	f000 fad8 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4240:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4244:	2002      	movs	r0, #2
    4246:	f7fe fe99 	bl	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    424a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    424e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    4252:	d00a      	beq.n	426a <MPSL_IRQ_TIMER0_Handler+0x9a>
    4254:	481c      	ldr	r0, [pc, #112]	; (42c8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    4256:	6800      	ldr	r0, [r0, #0]
    4258:	b138      	cbz	r0, 426a <MPSL_IRQ_TIMER0_Handler+0x9a>
    425a:	2001      	movs	r0, #1
    425c:	f000 fac8 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4260:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    4264:	2001      	movs	r0, #1
    4266:	f7fe fe89 	bl	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    426a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    426e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4272:	bf08      	it	eq
    4274:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4278:	4814      	ldr	r0, [pc, #80]	; (42cc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    427a:	6800      	ldr	r0, [r0, #0]
    427c:	2800      	cmp	r0, #0
    427e:	bf08      	it	eq
    4280:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    4284:	2000      	movs	r0, #0
    4286:	f000 fab3 	bl	47f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    428a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    428e:	2004      	movs	r0, #4
    4290:	7028      	strb	r0, [r5, #0]
    4292:	f8c5 8008 	str.w	r8, [r5, #8]
    4296:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    429a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    429e:	2000      	movs	r0, #0
    42a0:	f7fe be6c 	b.w	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    42a4:	f240 316a 	movw	r1, #874	; 0x36a
    42a8:	206c      	movs	r0, #108	; 0x6c
    42aa:	f000 ff61 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42b2:	2007      	movs	r0, #7
    42b4:	f7fe be62 	b.w	2f7c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    42b8:	20000020 	.word	0x20000020
    42bc:	40008000 	.word	0x40008000
    42c0:	4000814c 	.word	0x4000814c
    42c4:	40008148 	.word	0x40008148
    42c8:	40008144 	.word	0x40008144
    42cc:	40008140 	.word	0x40008140
    42d0:	2201      	movs	r2, #1
    42d2:	0211      	lsls	r1, r2, #8
    42d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    42d8:	2000      	movs	r0, #0
    42da:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    42de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    42e2:	f3bf 8f4f 	dsb	sy
    42e6:	f3bf 8f6f 	isb	sy
    42ea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    42ee:	490e      	ldr	r1, [pc, #56]	; (4328 <MPSL_IRQ_TIMER0_Handler+0x158>)
    42f0:	f841 2f04 	str.w	r2, [r1, #4]!
    42f4:	1e43      	subs	r3, r0, #1
    42f6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    42fa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    42fe:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    4302:	4b0a      	ldr	r3, [pc, #40]	; (432c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    4304:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4308:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    430c:	1d1b      	adds	r3, r3, #4
    430e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    4312:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4316:	1d1b      	adds	r3, r3, #4
    4318:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    431c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4320:	60ca      	str	r2, [r1, #12]
    4322:	4903      	ldr	r1, [pc, #12]	; (4330 <MPSL_IRQ_TIMER0_Handler+0x160>)
    4324:	7048      	strb	r0, [r1, #1]
    4326:	4770      	bx	lr
    4328:	40008000 	.word	0x40008000
    432c:	40008004 	.word	0x40008004
    4330:	20000020 	.word	0x20000020

00004334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    4334:	4801      	ldr	r0, [pc, #4]	; (433c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    4336:	6800      	ldr	r0, [r0, #0]
    4338:	4770      	bx	lr
    433a:	0000      	.short	0x0000
    433c:	4000b504 	.word	0x4000b504

00004340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    4340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4344:	4e47      	ldr	r6, [pc, #284]	; (4464 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    4346:	4605      	mov	r5, r0
    4348:	1ef7      	subs	r7, r6, #3
    434a:	7832      	ldrb	r2, [r6, #0]
    434c:	68f9      	ldr	r1, [r7, #12]
    434e:	2a01      	cmp	r2, #1
    4350:	bf04      	itt	eq
    4352:	42a9      	cmpeq	r1, r5
    4354:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4358:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    435c:	4b42      	ldr	r3, [pc, #264]	; (4468 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    435e:	6018      	str	r0, [r3, #0]
    4360:	4842      	ldr	r0, [pc, #264]	; (446c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    4362:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    4366:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    436a:	f100 0304 	add.w	r3, r0, #4
    436e:	f04f 0400 	mov.w	r4, #0
    4372:	2a00      	cmp	r2, #0
    4374:	d061      	beq.n	443a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    4376:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    437a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    437e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    4382:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4386:	4b3a      	ldr	r3, [pc, #232]	; (4470 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    4388:	681b      	ldr	r3, [r3, #0]
    438a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    438e:	f04f 0801 	mov.w	r8, #1
    4392:	2b00      	cmp	r3, #0
    4394:	bf04      	itt	eq
    4396:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    439a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    439e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43a2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    43a6:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    43aa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    43ae:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    43b2:	1aeb      	subs	r3, r5, r3
    43b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    43b8:	2b02      	cmp	r3, #2
    43ba:	d34b      	bcc.n	4454 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    43bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    43c0:	d248      	bcs.n	4454 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    43c2:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    43c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43ca:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    43ce:	b132      	cbz	r2, 43de <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    43d0:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    43d4:	1a8a      	subs	r2, r1, r2
    43d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    43da:	2a02      	cmp	r2, #2
    43dc:	d3f8      	bcc.n	43d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    43de:	f8c7 8008 	str.w	r8, [r7, #8]
    43e2:	703c      	strb	r4, [r7, #0]
    43e4:	f7ff ff74 	bl	42d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    43e8:	4822      	ldr	r0, [pc, #136]	; (4474 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    43ea:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    43ee:	f364 0101 	bfi	r1, r4, #0, #2
    43f2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    43f6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    43fa:	2102      	movs	r1, #2
    43fc:	f361 0201 	bfi	r2, r1, #0, #2
    4400:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4404:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    4408:	2104      	movs	r1, #4
    440a:	f361 0203 	bfi	r2, r1, #0, #4
    440e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    4412:	f8c0 800c 	str.w	r8, [r0, #12]
    4416:	68b9      	ldr	r1, [r7, #8]
    4418:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    441c:	1580      	asrs	r0, r0, #22
    441e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    4422:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    4426:	4914      	ldr	r1, [pc, #80]	; (4478 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    4428:	05c0      	lsls	r0, r0, #23
    442a:	6008      	str	r0, [r1, #0]
    442c:	2004      	movs	r0, #4
    442e:	60fd      	str	r5, [r7, #12]
    4430:	7070      	strb	r0, [r6, #1]
    4432:	f886 8000 	strb.w	r8, [r6]
    4436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    443a:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    443e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    4442:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4446:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    444a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    444e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4452:	e798      	b.n	4386 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    4454:	2100      	movs	r1, #0
    4456:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    445a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    445e:	206c      	movs	r0, #108	; 0x6c
    4460:	f000 fe86 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4464:	20000023 	.word	0x20000023
    4468:	4001f508 	.word	0x4001f508
    446c:	4000b000 	.word	0x4000b000
    4470:	4000b148 	.word	0x4000b148
    4474:	40008000 	.word	0x40008000
    4478:	4001f504 	.word	0x4001f504

0000447c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    447c:	b570      	push	{r4, r5, r6, lr}
    447e:	4c2c      	ldr	r4, [pc, #176]	; (4530 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    4480:	68e2      	ldr	r2, [r4, #12]
    4482:	4282      	cmp	r2, r0
    4484:	bf14      	ite	ne
    4486:	2101      	movne	r1, #1
    4488:	2100      	moveq	r1, #0
    448a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 4534 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    448e:	f89c 5000 	ldrb.w	r5, [ip]
    4492:	2d02      	cmp	r5, #2
    4494:	d002      	beq.n	449c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    4496:	2900      	cmp	r1, #0
    4498:	d037      	beq.n	450a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    449a:	e002      	b.n	44a2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    449c:	2900      	cmp	r1, #0
    449e:	bf08      	it	eq
    44a0:	bd70      	popeq	{r4, r5, r6, pc}
    44a2:	7861      	ldrb	r1, [r4, #1]
    44a4:	b381      	cbz	r1, 4508 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    44a6:	4b24      	ldr	r3, [pc, #144]	; (4538 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    44a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    44ac:	6019      	str	r1, [r3, #0]
    44ae:	138b      	asrs	r3, r1, #14
    44b0:	4922      	ldr	r1, [pc, #136]	; (453c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    44b2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    44b6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    44ba:	2300      	movs	r3, #0
    44bc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    44c0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    44c4:	1ac3      	subs	r3, r0, r3
    44c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    44ca:	2b02      	cmp	r3, #2
    44cc:	d327      	bcc.n	451e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    44ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    44d2:	d224      	bcs.n	451e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    44d4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    44d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    44dc:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    44e0:	b13d      	cbz	r5, 44f2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    44e2:	bf00      	nop
    44e4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    44e8:	1ad3      	subs	r3, r2, r3
    44ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    44ee:	2b02      	cmp	r3, #2
    44f0:	d3f8      	bcc.n	44e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    44f2:	4b13      	ldr	r3, [pc, #76]	; (4540 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    44f4:	2102      	movs	r1, #2
    44f6:	074a      	lsls	r2, r1, #29
    44f8:	601a      	str	r2, [r3, #0]
    44fa:	60e0      	str	r0, [r4, #12]
    44fc:	2004      	movs	r0, #4
    44fe:	f88c 0001 	strb.w	r0, [ip, #1]
    4502:	f88c 1000 	strb.w	r1, [ip]
    4506:	bd70      	pop	{r4, r5, r6, pc}
    4508:	e004      	b.n	4514 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    450a:	f240 2102 	movw	r1, #514	; 0x202
    450e:	206c      	movs	r0, #108	; 0x6c
    4510:	f000 fe2e 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4514:	f240 2106 	movw	r1, #518	; 0x206
    4518:	206c      	movs	r0, #108	; 0x6c
    451a:	f000 fe29 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    451e:	2000      	movs	r0, #0
    4520:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4524:	f240 2112 	movw	r1, #530	; 0x212
    4528:	206c      	movs	r0, #108	; 0x6c
    452a:	f000 fe21 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    452e:	0000      	.short	0x0000
    4530:	20000020 	.word	0x20000020
    4534:	20000023 	.word	0x20000023
    4538:	4001f508 	.word	0x4001f508
    453c:	4000b000 	.word	0x4000b000
    4540:	4001f504 	.word	0x4001f504

00004544 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    4544:	4801      	ldr	r0, [pc, #4]	; (454c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    4546:	68c0      	ldr	r0, [r0, #12]
    4548:	4770      	bx	lr
    454a:	0000      	.short	0x0000
    454c:	20000020 	.word	0x20000020

00004550 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    4550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4554:	4936      	ldr	r1, [pc, #216]	; (4630 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    4556:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    455a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    455e:	4d35      	ldr	r5, [pc, #212]	; (4634 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    4560:	1d0b      	adds	r3, r1, #4
    4562:	2200      	movs	r2, #0
    4564:	7828      	ldrb	r0, [r5, #0]
    4566:	b168      	cbz	r0, 4584 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    4568:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    456c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    4570:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    4574:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    4578:	4b2f      	ldr	r3, [pc, #188]	; (4638 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    457a:	681b      	ldr	r3, [r3, #0]
    457c:	f04f 0c01 	mov.w	ip, #1
    4580:	b99b      	cbnz	r3, 45aa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    4582:	e00c      	b.n	459e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    4584:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    4588:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    458c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    4590:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    4594:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    4598:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    459c:	e7ec      	b.n	4578 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    459e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    45a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    45a6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    45aa:	2802      	cmp	r0, #2
    45ac:	d004      	beq.n	45b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    45ae:	f240 211e 	movw	r1, #542	; 0x21e
    45b2:	206c      	movs	r0, #108	; 0x6c
    45b4:	f000 fddc 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45b8:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    45bc:	4c1f      	ldr	r4, [pc, #124]	; (463c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    45be:	1cc0      	adds	r0, r0, #3
    45c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45c4:	68e3      	ldr	r3, [r4, #12]
    45c6:	4e1e      	ldr	r6, [pc, #120]	; (4640 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    45c8:	4298      	cmp	r0, r3
    45ca:	d00c      	beq.n	45e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    45cc:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    45d0:	1bdf      	subs	r7, r3, r7
    45d2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    45d6:	2f04      	cmp	r7, #4
    45d8:	d305      	bcc.n	45e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    45da:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    45de:	d202      	bcs.n	45e6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    45e0:	f7ff feae 	bl	4340 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    45e4:	e01f      	b.n	4626 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    45e6:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    45ea:	1a18      	subs	r0, r3, r0
    45ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45f0:	2802      	cmp	r0, #2
    45f2:	d315      	bcc.n	4620 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    45f4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    45f8:	d212      	bcs.n	4620 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    45fa:	4912      	ldr	r1, [pc, #72]	; (4644 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    45fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4600:	6008      	str	r0, [r1, #0]
    4602:	f8c4 c008 	str.w	ip, [r4, #8]
    4606:	7022      	strb	r2, [r4, #0]
    4608:	f8c6 c004 	str.w	ip, [r6, #4]
    460c:	f8c6 c00c 	str.w	ip, [r6, #12]
    4610:	0040      	lsls	r0, r0, #1
    4612:	1f09      	subs	r1, r1, #4
    4614:	6008      	str	r0, [r1, #0]
    4616:	2004      	movs	r0, #4
    4618:	7068      	strb	r0, [r5, #1]
    461a:	f885 c000 	strb.w	ip, [r5]
    461e:	e002      	b.n	4626 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    4620:	f8c4 c008 	str.w	ip, [r4, #8]
    4624:	7022      	strb	r2, [r4, #0]
    4626:	68a0      	ldr	r0, [r4, #8]
    4628:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4630:	4000b000 	.word	0x4000b000
    4634:	20000023 	.word	0x20000023
    4638:	4000b148 	.word	0x4000b148
    463c:	20000020 	.word	0x20000020
    4640:	40008000 	.word	0x40008000
    4644:	4001f508 	.word	0x4001f508

00004648 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    4648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    464c:	f8df c190 	ldr.w	ip, [pc, #400]	; 47e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    4650:	2600      	movs	r6, #0
    4652:	2701      	movs	r7, #1
    4654:	f89c 4000 	ldrb.w	r4, [ip]
    4658:	f89c c001 	ldrb.w	ip, [ip, #1]
    465c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    4660:	2807      	cmp	r0, #7
    4662:	d27b      	bcs.n	475c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    4664:	e8df f000 	tbb	[pc, r0]
    4668:	04040404 	.word	0x04040404
    466c:	006c6c6c 	.word	0x006c6c6c
    4670:	f8df 8170 	ldr.w	r8, [pc, #368]	; 47e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    4674:	f8d8 900c 	ldr.w	r9, [r8, #12]
    4678:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    467c:	bf04      	itt	eq
    467e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    4682:	f1b8 0f00 	cmpeq.w	r8, #0
    4686:	d002      	beq.n	468e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    4688:	2c02      	cmp	r4, #2
    468a:	d005      	beq.n	4698 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    468c:	e02c      	b.n	46e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    468e:	f240 2151 	movw	r1, #593	; 0x251
    4692:	206c      	movs	r0, #108	; 0x6c
    4694:	f000 fd6c 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4698:	f1ac 0804 	sub.w	r8, ip, #4
    469c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    46a0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    46a4:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    46a8:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    46ac:	2500      	movs	r5, #0
    46ae:	2c01      	cmp	r4, #1
    46b0:	d002      	beq.n	46b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    46b2:	2c02      	cmp	r4, #2
    46b4:	d00b      	beq.n	46ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    46b6:	e014      	b.n	46e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    46b8:	f1bc 0f04 	cmp.w	ip, #4
    46bc:	bf24      	itt	cs
    46be:	f8d8 9000 	ldrcs.w	r9, [r8]
    46c2:	f1b9 0f00 	cmpcs.w	r9, #0
    46c6:	bf08      	it	eq
    46c8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    46cc:	e009      	b.n	46e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    46ce:	f1bc 0f04 	cmp.w	ip, #4
    46d2:	bf24      	itt	cs
    46d4:	f8d8 9000 	ldrcs.w	r9, [r8]
    46d8:	f1b9 0f00 	cmpcs.w	r9, #0
    46dc:	bf08      	it	eq
    46de:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    46e2:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    46e6:	d1e1      	bne.n	46ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    46e8:	4c3f      	ldr	r4, [pc, #252]	; (47e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    46ea:	f100 0c10 	add.w	ip, r0, #16
    46ee:	fa07 fc0c 	lsl.w	ip, r7, ip
    46f2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    46f6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    46fa:	b1c2      	cbz	r2, 472e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    46fc:	f04f 0840 	mov.w	r8, #64	; 0x40
    4700:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    4704:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    4708:	44a0      	add	r8, r4
    470a:	f8c8 7000 	str.w	r7, [r8]
    470e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    4712:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    4716:	eba1 0000 	sub.w	r0, r1, r0
    471a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    471e:	4282      	cmp	r2, r0
    4720:	bf98      	it	ls
    4722:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    4726:	bf28      	it	cs
    4728:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    472c:	d250      	bcs.n	47d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    472e:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    4732:	2b01      	cmp	r3, #1
    4734:	bf08      	it	eq
    4736:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    473a:	2001      	movs	r0, #1
    473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4740:	b134      	cbz	r4, 4750 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    4742:	4584      	cmp	ip, r0
    4744:	d104      	bne.n	4750 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    4746:	f44f 711d 	mov.w	r1, #628	; 0x274
    474a:	206c      	movs	r0, #108	; 0x6c
    474c:	f000 fd10 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4750:	f1a0 0c04 	sub.w	ip, r0, #4
    4754:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    4758:	2b01      	cmp	r3, #1
    475a:	e000      	b.n	475e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    475c:	e03b      	b.n	47d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    475e:	bf0c      	ite	eq
    4760:	f04f 0801 	moveq.w	r8, #1
    4764:	f04f 0800 	movne.w	r8, #0
    4768:	2c03      	cmp	r4, #3
    476a:	d304      	bcc.n	4776 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    476c:	f240 114d 	movw	r1, #333	; 0x14d
    4770:	206c      	movs	r0, #108	; 0x6c
    4772:	f000 fcfd 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4776:	f8df c074 	ldr.w	ip, [pc, #116]	; 47ec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    477a:	f104 0310 	add.w	r3, r4, #16
    477e:	fa07 f303 	lsl.w	r3, r7, r3
    4782:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    4786:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    478a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    478e:	f84c 6004 	str.w	r6, [ip, r4]
    4792:	1f00      	subs	r0, r0, #4
    4794:	b2c0      	uxtb	r0, r0
    4796:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    479a:	b16a      	cbz	r2, 47b8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    479c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    47a0:	1b0c      	subs	r4, r1, r4
    47a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    47a6:	42a2      	cmp	r2, r4
    47a8:	bf98      	it	ls
    47aa:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    47ae:	bf24      	itt	cs
    47b0:	2100      	movcs	r1, #0
    47b2:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    47b6:	d20b      	bcs.n	47d0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    47b8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    47bc:	f1b8 0f00 	cmp.w	r8, #0
    47c0:	bf18      	it	ne
    47c2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    47c6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    47ca:	2001      	movs	r0, #1
    47cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47d0:	2000      	movs	r0, #0
    47d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47d6:	f240 2179 	movw	r1, #633	; 0x279
    47da:	206c      	movs	r0, #108	; 0x6c
    47dc:	f000 fcc8 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47e0:	20000023 	.word	0x20000023
    47e4:	20000020 	.word	0x20000020
    47e8:	40008000 	.word	0x40008000
    47ec:	4000b000 	.word	0x4000b000

000047f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    47f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    47f4:	2600      	movs	r6, #0
    47f6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    47fa:	f04f 0801 	mov.w	r8, #1
    47fe:	2807      	cmp	r0, #7
    4800:	d251      	bcs.n	48a6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    4802:	e8df f000 	tbb	[pc, r0]
    4806:	0404      	.short	0x0404
    4808:	19190404 	.word	0x19190404
    480c:	0019      	.short	0x0019
    480e:	f100 0110 	add.w	r1, r0, #16
    4812:	fa08 f201 	lsl.w	r2, r8, r1
    4816:	4926      	ldr	r1, [pc, #152]	; (48b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    4818:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    481c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    4820:	2200      	movs	r2, #0
    4822:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    4826:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    482a:	508e      	str	r6, [r1, r2]
    482c:	4921      	ldr	r1, [pc, #132]	; (48b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    482e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4832:	9000      	str	r0, [sp, #0]
    4834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4838:	4d1f      	ldr	r5, [pc, #124]	; (48b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    483a:	1f01      	subs	r1, r0, #4
    483c:	b2cc      	uxtb	r4, r1
    483e:	7829      	ldrb	r1, [r5, #0]
    4840:	b179      	cbz	r1, 4862 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    4842:	786a      	ldrb	r2, [r5, #1]
    4844:	4282      	cmp	r2, r0
    4846:	d10c      	bne.n	4862 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    4848:	4a1c      	ldr	r2, [pc, #112]	; (48bc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    484a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    484e:	6010      	str	r0, [r2, #0]
    4850:	2901      	cmp	r1, #1
    4852:	bf08      	it	eq
    4854:	f7ff fd3c 	bleq	42d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    4858:	702e      	strb	r6, [r5, #0]
    485a:	4919      	ldr	r1, [pc, #100]	; (48c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    485c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4860:	60c8      	str	r0, [r1, #12]
    4862:	f104 0010 	add.w	r0, r4, #16
    4866:	fa08 f100 	lsl.w	r1, r8, r0
    486a:	4816      	ldr	r0, [pc, #88]	; (48c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    486c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4870:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    4874:	00a1      	lsls	r1, r4, #2
    4876:	4401      	add	r1, r0
    4878:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    487c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    4880:	1a89      	subs	r1, r1, r2
    4882:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4886:	2902      	cmp	r1, #2
    4888:	d307      	bcc.n	489a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    488a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    488e:	2100      	movs	r1, #0
    4890:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    4894:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4898:	5046      	str	r6, [r0, r1]
    489a:	480b      	ldr	r0, [pc, #44]	; (48c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    489c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    48a0:	9000      	str	r0, [sp, #0]
    48a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48a6:	f240 21f1 	movw	r1, #753	; 0x2f1
    48aa:	206c      	movs	r0, #108	; 0x6c
    48ac:	f000 fc60 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48b0:	40008000 	.word	0x40008000
    48b4:	40008140 	.word	0x40008140
    48b8:	20000023 	.word	0x20000023
    48bc:	4001f508 	.word	0x4001f508
    48c0:	20000020 	.word	0x20000020
    48c4:	4000b000 	.word	0x4000b000
    48c8:	4000b140 	.word	0x4000b140

000048cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    48cc:	4920      	ldr	r1, [pc, #128]	; (4950 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    48ce:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    48d2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    48d6:	481f      	ldr	r0, [pc, #124]	; (4954 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    48d8:	1d0a      	adds	r2, r1, #4
    48da:	7803      	ldrb	r3, [r0, #0]
    48dc:	2000      	movs	r0, #0
    48de:	b15b      	cbz	r3, 48f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    48e0:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    48e4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    48e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    48ec:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    48f0:	4919      	ldr	r1, [pc, #100]	; (4958 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    48f2:	6809      	ldr	r1, [r1, #0]
    48f4:	b999      	cbnz	r1, 491e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    48f6:	e00c      	b.n	4912 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    48f8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    48fc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    4900:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4904:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4908:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    490c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4910:	e7ee      	b.n	48f0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    4912:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4916:	f44f 6100 	mov.w	r1, #2048	; 0x800
    491a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    491e:	490f      	ldr	r1, [pc, #60]	; (495c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    4920:	f04f 32ff 	mov.w	r2, #4294967295
    4924:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4928:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    492c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4930:	1d0a      	adds	r2, r1, #4
    4932:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4936:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    493a:	1d12      	adds	r2, r2, #4
    493c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4940:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4944:	1d12      	adds	r2, r2, #4
    4946:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    494a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    494e:	4770      	bx	lr
    4950:	4000b000 	.word	0x4000b000
    4954:	20000023 	.word	0x20000023
    4958:	4000b148 	.word	0x4000b148
    495c:	40008000 	.word	0x40008000

00004960 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    4960:	4808      	ldr	r0, [pc, #32]	; (4984 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    4962:	f990 0002 	ldrsb.w	r0, [r0, #2]
    4966:	2800      	cmp	r0, #0
    4968:	bfb8      	it	lt
    496a:	4770      	bxlt	lr
    496c:	f000 011f 	and.w	r1, r0, #31
    4970:	2201      	movs	r2, #1
    4972:	fa02 f101 	lsl.w	r1, r2, r1
    4976:	0940      	lsrs	r0, r0, #5
    4978:	0080      	lsls	r0, r0, #2
    497a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    497e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4982:	4770      	bx	lr
    4984:	20000020 	.word	0x20000020

00004988 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    4988:	b510      	push	{r4, lr}
    498a:	2807      	cmp	r0, #7
    498c:	d20d      	bcs.n	49aa <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    498e:	e8df f000 	tbb	[pc, r0]
    4992:	0404      	.short	0x0404
    4994:	06060404 	.word	0x06060404
    4998:	0006      	.short	0x0006
    499a:	4906      	ldr	r1, [pc, #24]	; (49b4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    499c:	e002      	b.n	49a4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    499e:	1f00      	subs	r0, r0, #4
    49a0:	4905      	ldr	r1, [pc, #20]	; (49b8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    49a2:	b2c0      	uxtb	r0, r0
    49a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    49a8:	bd10      	pop	{r4, pc}
    49aa:	f240 219d 	movw	r1, #669	; 0x29d
    49ae:	206c      	movs	r0, #108	; 0x6c
    49b0:	f000 fbde 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49b4:	40008140 	.word	0x40008140
    49b8:	4000b140 	.word	0x4000b140

000049bc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    49bc:	b510      	push	{r4, lr}
    49be:	2807      	cmp	r0, #7
    49c0:	d20d      	bcs.n	49de <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    49c2:	e8df f000 	tbb	[pc, r0]
    49c6:	0404      	.short	0x0404
    49c8:	06060404 	.word	0x06060404
    49cc:	0006      	.short	0x0006
    49ce:	4906      	ldr	r1, [pc, #24]	; (49e8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    49d0:	e002      	b.n	49d8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    49d2:	1f00      	subs	r0, r0, #4
    49d4:	4905      	ldr	r1, [pc, #20]	; (49ec <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    49d6:	b2c0      	uxtb	r0, r0
    49d8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    49dc:	bd10      	pop	{r4, pc}
    49de:	f240 219d 	movw	r1, #669	; 0x29d
    49e2:	206c      	movs	r0, #108	; 0x6c
    49e4:	f000 fbc4 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49e8:	40008140 	.word	0x40008140
    49ec:	4000b140 	.word	0x4000b140

000049f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    49f0:	b510      	push	{r4, lr}
    49f2:	481c      	ldr	r0, [pc, #112]	; (4a64 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    49f4:	2400      	movs	r4, #0
    49f6:	2104      	movs	r1, #4
    49f8:	7004      	strb	r4, [r0, #0]
    49fa:	1ec0      	subs	r0, r0, #3
    49fc:	7001      	strb	r1, [r0, #0]
    49fe:	0589      	lsls	r1, r1, #22
    4a00:	60c1      	str	r1, [r0, #12]
    4a02:	f7ff fc65 	bl	42d0 <MPSL_IRQ_TIMER0_Handler+0x100>
    4a06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4a0e:	f04f 0c01 	mov.w	ip, #1
    4a12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4a16:	f3bf 8f4f 	dsb	sy
    4a1a:	f3bf 8f6f 	isb	sy
    4a1e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    4a22:	4811      	ldr	r0, [pc, #68]	; (4a68 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    4a24:	f8c0 c004 	str.w	ip, [r0, #4]
    4a28:	f8c0 c008 	str.w	ip, [r0, #8]
    4a2c:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    4a30:	2900      	cmp	r1, #0
    4a32:	d1fb      	bne.n	4a2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    4a34:	1e49      	subs	r1, r1, #1
    4a36:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4a3a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    4a3e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4a42:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    4a46:	4909      	ldr	r1, [pc, #36]	; (4a6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    4a48:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4a4c:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4a50:	1d09      	adds	r1, r1, #4
    4a52:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4a56:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4a5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4a5e:	f8c0 c000 	str.w	ip, [r0]
    4a62:	bd10      	pop	{r4, pc}
    4a64:	20000023 	.word	0x20000023
    4a68:	4000b000 	.word	0x4000b000
    4a6c:	4000b004 	.word	0x4000b004

00004a70 <MPSL_IRQ_CLOCK_Handler>:
    4a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a74:	4c16      	ldr	r4, [pc, #88]	; (4ad0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4a76:	7a60      	ldrb	r0, [r4, #9]
    4a78:	2800      	cmp	r0, #0
    4a7a:	d027      	beq.n	4acc <MPSL_IRQ_CLOCK_Handler+0x5c>
    4a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4a80:	058d      	lsls	r5, r1, #22
    4a82:	4628      	mov	r0, r5
    4a84:	f008 fd72 	bl	d56c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a88:	4680      	mov	r8, r0
    4a8a:	f44f 7182 	mov.w	r1, #260	; 0x104
    4a8e:	4628      	mov	r0, r5
    4a90:	f008 fd6c 	bl	d56c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4a94:	2600      	movs	r6, #0
    4a96:	4607      	mov	r7, r0
    4a98:	f1b8 0f00 	cmp.w	r8, #0
    4a9c:	d009      	beq.n	4ab2 <MPSL_IRQ_CLOCK_Handler+0x42>
    4a9e:	2001      	movs	r0, #1
    4aa0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4aa4:	7920      	ldrb	r0, [r4, #4]
    4aa6:	b120      	cbz	r0, 4ab2 <MPSL_IRQ_CLOCK_Handler+0x42>
    4aa8:	7126      	strb	r6, [r4, #4]
    4aaa:	69e0      	ldr	r0, [r4, #28]
    4aac:	b108      	cbz	r0, 4ab2 <MPSL_IRQ_CLOCK_Handler+0x42>
    4aae:	4780      	blx	r0
    4ab0:	61e6      	str	r6, [r4, #28]
    4ab2:	b137      	cbz	r7, 4ac2 <MPSL_IRQ_CLOCK_Handler+0x52>
    4ab4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4ab8:	2002      	movs	r0, #2
    4aba:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4abe:	f000 fa8b 	bl	4fd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4ac2:	4640      	mov	r0, r8
    4ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ac8:	f000 b85a 	b.w	4b80 <MPSL_IRQ_CLOCK_Handler+0x110>
    4acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ad0:	20000030 	.word	0x20000030
    4ad4:	b510      	push	{r4, lr}
    4ad6:	f008 fdf3 	bl	d6c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4ada:	b930      	cbnz	r0, 4aea <MPSL_IRQ_CLOCK_Handler+0x7a>
    4adc:	f008 fe11 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4ae0:	b918      	cbnz	r0, 4aea <MPSL_IRQ_CLOCK_Handler+0x7a>
    4ae2:	f008 fe44 	bl	d76e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4ae6:	2800      	cmp	r0, #0
    4ae8:	d002      	beq.n	4af0 <MPSL_IRQ_CLOCK_Handler+0x80>
    4aea:	4902      	ldr	r1, [pc, #8]	; (4af4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4aec:	2002      	movs	r0, #2
    4aee:	6008      	str	r0, [r1, #0]
    4af0:	bd10      	pop	{r4, pc}
    4af2:	0000      	.short	0x0000
    4af4:	40000c34 	.word	0x40000c34
    4af8:	b570      	push	{r4, r5, r6, lr}
    4afa:	f000 f987 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4afe:	f000 fabf 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4b02:	4c09      	ldr	r4, [pc, #36]	; (4b28 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4b04:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4b08:	b130      	cbz	r0, 4b18 <MPSL_IRQ_CLOCK_Handler+0xa8>
    4b0a:	f7ff ffe3 	bl	4ad4 <MPSL_IRQ_CLOCK_Handler+0x64>
    4b0e:	2001      	movs	r0, #1
    4b10:	6128      	str	r0, [r5, #16]
    4b12:	2004      	movs	r0, #4
    4b14:	72a0      	strb	r0, [r4, #10]
    4b16:	e004      	b.n	4b22 <MPSL_IRQ_CLOCK_Handler+0xb2>
    4b18:	2003      	movs	r0, #3
    4b1a:	72a0      	strb	r0, [r4, #10]
    4b1c:	2001      	movs	r0, #1
    4b1e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4b22:	2000      	movs	r0, #0
    4b24:	71e0      	strb	r0, [r4, #7]
    4b26:	bd70      	pop	{r4, r5, r6, pc}
    4b28:	20000030 	.word	0x20000030
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	4c13      	ldr	r4, [pc, #76]	; (4b7c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4b30:	79a0      	ldrb	r0, [r4, #6]
    4b32:	b1f0      	cbz	r0, 4b72 <MPSL_IRQ_CLOCK_Handler+0x102>
    4b34:	2801      	cmp	r0, #1
    4b36:	d003      	beq.n	4b40 <MPSL_IRQ_CLOCK_Handler+0xd0>
    4b38:	79e1      	ldrb	r1, [r4, #7]
    4b3a:	1e40      	subs	r0, r0, #1
    4b3c:	4281      	cmp	r1, r0
    4b3e:	da18      	bge.n	4b72 <MPSL_IRQ_CLOCK_Handler+0x102>
    4b40:	f000 fa9e 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4b44:	4605      	mov	r5, r0
    4b46:	f000 fb83 	bl	5250 <mpsl_temperature_get>
    4b4a:	79a1      	ldrb	r1, [r4, #6]
    4b4c:	2901      	cmp	r1, #1
    4b4e:	d902      	bls.n	4b56 <MPSL_IRQ_CLOCK_Handler+0xe6>
    4b50:	79e1      	ldrb	r1, [r4, #7]
    4b52:	1c49      	adds	r1, r1, #1
    4b54:	71e1      	strb	r1, [r4, #7]
    4b56:	b10d      	cbz	r5, 4b5c <MPSL_IRQ_CLOCK_Handler+0xec>
    4b58:	6961      	ldr	r1, [r4, #20]
    4b5a:	e000      	b.n	4b5e <MPSL_IRQ_CLOCK_Handler+0xee>
    4b5c:	6921      	ldr	r1, [r4, #16]
    4b5e:	1a41      	subs	r1, r0, r1
    4b60:	2902      	cmp	r1, #2
    4b62:	da02      	bge.n	4b6a <MPSL_IRQ_CLOCK_Handler+0xfa>
    4b64:	f111 0f02 	cmn.w	r1, #2
    4b68:	dc07      	bgt.n	4b7a <MPSL_IRQ_CLOCK_Handler+0x10a>
    4b6a:	b10d      	cbz	r5, 4b70 <MPSL_IRQ_CLOCK_Handler+0x100>
    4b6c:	6160      	str	r0, [r4, #20]
    4b6e:	e000      	b.n	4b72 <MPSL_IRQ_CLOCK_Handler+0x102>
    4b70:	6120      	str	r0, [r4, #16]
    4b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4b76:	f7ff bfbf 	b.w	4af8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
    4b7c:	20000030 	.word	0x20000030
    4b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b84:	4606      	mov	r6, r0
    4b86:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4b8a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4b8e:	4628      	mov	r0, r5
    4b90:	f008 fcec 	bl	d56c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4b94:	4680      	mov	r8, r0
    4b96:	f44f 7188 	mov.w	r1, #272	; 0x110
    4b9a:	4628      	mov	r0, r5
    4b9c:	f008 fce6 	bl	d56c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4ba0:	4c27      	ldr	r4, [pc, #156]	; (4c40 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4ba2:	4682      	mov	sl, r0
    4ba4:	7827      	ldrb	r7, [r4, #0]
    4ba6:	f104 0008 	add.w	r0, r4, #8
    4baa:	f008 fd53 	bl	d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4bae:	b110      	cbz	r0, 4bb6 <MPSL_IRQ_CLOCK_Handler+0x146>
    4bb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4bb4:	e016      	b.n	4be4 <MPSL_IRQ_CLOCK_Handler+0x174>
    4bb6:	f04f 0901 	mov.w	r9, #1
    4bba:	b146      	cbz	r6, 4bce <MPSL_IRQ_CLOCK_Handler+0x15e>
    4bbc:	7aa0      	ldrb	r0, [r4, #10]
    4bbe:	2803      	cmp	r0, #3
    4bc0:	d105      	bne.n	4bce <MPSL_IRQ_CLOCK_Handler+0x15e>
    4bc2:	2004      	movs	r0, #4
    4bc4:	72a0      	strb	r0, [r4, #10]
    4bc6:	f7ff ff85 	bl	4ad4 <MPSL_IRQ_CLOCK_Handler+0x64>
    4bca:	f8c5 9010 	str.w	r9, [r5, #16]
    4bce:	2600      	movs	r6, #0
    4bd0:	f1b8 0f00 	cmp.w	r8, #0
    4bd4:	d018      	beq.n	4c08 <MPSL_IRQ_CLOCK_Handler+0x198>
    4bd6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4bda:	7aa0      	ldrb	r0, [r4, #10]
    4bdc:	2804      	cmp	r0, #4
    4bde:	d004      	beq.n	4bea <MPSL_IRQ_CLOCK_Handler+0x17a>
    4be0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    4be4:	206d      	movs	r0, #109	; 0x6d
    4be6:	f000 fac3 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bea:	f008 fd69 	bl	d6c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4bee:	b928      	cbnz	r0, 4bfc <MPSL_IRQ_CLOCK_Handler+0x18c>
    4bf0:	f008 fd87 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4bf4:	b910      	cbnz	r0, 4bfc <MPSL_IRQ_CLOCK_Handler+0x18c>
    4bf6:	f008 fdba 	bl	d76e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4bfa:	b108      	cbz	r0, 4c00 <MPSL_IRQ_CLOCK_Handler+0x190>
    4bfc:	4811      	ldr	r0, [pc, #68]	; (4c44 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    4bfe:	6006      	str	r6, [r0, #0]
    4c00:	2002      	movs	r0, #2
    4c02:	72a0      	strb	r0, [r4, #10]
    4c04:	f000 f8e6 	bl	4dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4c08:	f1ba 0f00 	cmp.w	sl, #0
    4c0c:	d008      	beq.n	4c20 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    4c0e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4c12:	7aa0      	ldrb	r0, [r4, #10]
    4c14:	2802      	cmp	r0, #2
    4c16:	d101      	bne.n	4c1c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4c18:	f7ff ff88 	bl	4b2c <MPSL_IRQ_CLOCK_Handler+0xbc>
    4c1c:	f8c5 9014 	str.w	r9, [r5, #20]
    4c20:	b13f      	cbz	r7, 4c32 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    4c22:	7026      	strb	r6, [r4, #0]
    4c24:	7aa0      	ldrb	r0, [r4, #10]
    4c26:	2802      	cmp	r0, #2
    4c28:	d101      	bne.n	4c2e <MPSL_IRQ_CLOCK_Handler+0x1be>
    4c2a:	f7ff ff65 	bl	4af8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4c2e:	f000 f8d1 	bl	4dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4c32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c36:	4802      	ldr	r0, [pc, #8]	; (4c40 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4c38:	3008      	adds	r0, #8
    4c3a:	f008 bd22 	b.w	d682 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4c3e:	0000      	.short	0x0000
    4c40:	20000030 	.word	0x20000030
    4c44:	40000c34 	.word	0x40000c34
    4c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c4c:	4c5c      	ldr	r4, [pc, #368]	; (4dc0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    4c4e:	f04f 0800 	mov.w	r8, #0
    4c52:	4606      	mov	r6, r0
    4c54:	f8c4 8018 	str.w	r8, [r4, #24]
    4c58:	7843      	ldrb	r3, [r0, #1]
    4c5a:	7882      	ldrb	r2, [r0, #2]
    4c5c:	7800      	ldrb	r0, [r0, #0]
    4c5e:	72e0      	strb	r0, [r4, #11]
    4c60:	7163      	strb	r3, [r4, #5]
    4c62:	2701      	movs	r7, #1
    4c64:	71a2      	strb	r2, [r4, #6]
    4c66:	07bd      	lsls	r5, r7, #30
    4c68:	f884 8007 	strb.w	r8, [r4, #7]
    4c6c:	2805      	cmp	r0, #5
    4c6e:	d224      	bcs.n	4cba <MPSL_IRQ_CLOCK_Handler+0x24a>
    4c70:	e8df f000 	tbb	[pc, r0]
    4c74:	1f05030f 	.word	0x1f05030f
    4c78:	0021      	.short	0x0021
    4c7a:	61a7      	str	r7, [r4, #24]
    4c7c:	e009      	b.n	4c92 <MPSL_IRQ_CLOCK_Handler+0x222>
    4c7e:	f000 f8c5 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4c82:	2101      	movs	r1, #1
    4c84:	4628      	mov	r0, r5
    4c86:	f008 fc76 	bl	d576 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4c8a:	2800      	cmp	r0, #0
    4c8c:	d0f9      	beq.n	4c82 <MPSL_IRQ_CLOCK_Handler+0x212>
    4c8e:	2002      	movs	r0, #2
    4c90:	61a0      	str	r0, [r4, #24]
    4c92:	f008 fc9c 	bl	d5ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4c96:	b1b0      	cbz	r0, 4cc6 <MPSL_IRQ_CLOCK_Handler+0x256>
    4c98:	f000 fa0c 	bl	50b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4c9c:	7e21      	ldrb	r1, [r4, #24]
    4c9e:	f001 0103 	and.w	r1, r1, #3
    4ca2:	4288      	cmp	r0, r1
    4ca4:	d10f      	bne.n	4cc6 <MPSL_IRQ_CLOCK_Handler+0x256>
    4ca6:	79b0      	ldrb	r0, [r6, #6]
    4ca8:	b150      	cbz	r0, 4cc0 <MPSL_IRQ_CLOCK_Handler+0x250>
    4caa:	2002      	movs	r0, #2
    4cac:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4cb0:	e06a      	b.n	4d88 <MPSL_IRQ_CLOCK_Handler+0x318>
    4cb2:	4844      	ldr	r0, [pc, #272]	; (4dc4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4cb4:	e7ec      	b.n	4c90 <MPSL_IRQ_CLOCK_Handler+0x220>
    4cb6:	4844      	ldr	r0, [pc, #272]	; (4dc8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4cb8:	e7ea      	b.n	4c90 <MPSL_IRQ_CLOCK_Handler+0x220>
    4cba:	f240 312d 	movw	r1, #813	; 0x32d
    4cbe:	e049      	b.n	4d54 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4cc0:	f000 f9cc 	bl	505c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4cc4:	e060      	b.n	4d88 <MPSL_IRQ_CLOCK_Handler+0x318>
    4cc6:	60ef      	str	r7, [r5, #12]
    4cc8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4ccc:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4cd0:	69a0      	ldr	r0, [r4, #24]
    4cd2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4cd6:	f008 fcdf 	bl	d698 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4cda:	b940      	cbnz	r0, 4cee <MPSL_IRQ_CLOCK_Handler+0x27e>
    4cdc:	f008 fce6 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4ce0:	b928      	cbnz	r0, 4cee <MPSL_IRQ_CLOCK_Handler+0x27e>
    4ce2:	f008 fcfa 	bl	d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4ce6:	b910      	cbnz	r0, 4cee <MPSL_IRQ_CLOCK_Handler+0x27e>
    4ce8:	f008 fd0b 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4cec:	b138      	cbz	r0, 4cfe <MPSL_IRQ_CLOCK_Handler+0x28e>
    4cee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4cf2:	4836      	ldr	r0, [pc, #216]	; (4dcc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4cf4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    4cf8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4cfc:	6001      	str	r1, [r0, #0]
    4cfe:	f008 fccb 	bl	d698 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4d02:	b940      	cbnz	r0, 4d16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4d04:	f008 fcd2 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4d08:	b928      	cbnz	r0, 4d16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4d0a:	f008 fce6 	bl	d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4d0e:	b910      	cbnz	r0, 4d16 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4d10:	f008 fcf7 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4d14:	b110      	cbz	r0, 4d1c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4d16:	482d      	ldr	r0, [pc, #180]	; (4dcc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4d18:	3010      	adds	r0, #16
    4d1a:	6007      	str	r7, [r0, #0]
    4d1c:	60af      	str	r7, [r5, #8]
    4d1e:	2002      	movs	r0, #2
    4d20:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4d24:	79b0      	ldrb	r0, [r6, #6]
    4d26:	bb78      	cbnz	r0, 4d88 <MPSL_IRQ_CLOCK_Handler+0x318>
    4d28:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4d2c:	f010 0f02 	tst.w	r0, #2
    4d30:	d00e      	beq.n	4d50 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    4d32:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4dd0 <MPSL_IRQ_CLOCK_Handler+0x360>
    4d36:	f8d9 1000 	ldr.w	r1, [r9]
    4d3a:	43c9      	mvns	r1, r1
    4d3c:	f341 1700 	sbfx	r7, r1, #4, #1
    4d40:	f8d9 1000 	ldr.w	r1, [r9]
    4d44:	f041 0110 	orr.w	r1, r1, #16
    4d48:	f8c9 1000 	str.w	r1, [r9]
    4d4c:	1c7f      	adds	r7, r7, #1
    4d4e:	e007      	b.n	4d60 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4d50:	f240 21ee 	movw	r1, #750	; 0x2ee
    4d54:	206d      	movs	r0, #109	; 0x6d
    4d56:	f000 fa0b 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d5a:	bf00      	nop
    4d5c:	f000 fb2e 	bl	53bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4d60:	4651      	mov	r1, sl
    4d62:	4628      	mov	r0, r5
    4d64:	f008 fc02 	bl	d56c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4d68:	2800      	cmp	r0, #0
    4d6a:	d0f7      	beq.n	4d5c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    4d6c:	f000 f976 	bl	505c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4d70:	b92f      	cbnz	r7, 4d7e <MPSL_IRQ_CLOCK_Handler+0x30e>
    4d72:	f8d9 1000 	ldr.w	r1, [r9]
    4d76:	f021 0110 	bic.w	r1, r1, #16
    4d7a:	f8c9 1000 	str.w	r1, [r9]
    4d7e:	2002      	movs	r0, #2
    4d80:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4d84:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4d88:	79a0      	ldrb	r0, [r4, #6]
    4d8a:	b170      	cbz	r0, 4daa <MPSL_IRQ_CLOCK_Handler+0x33a>
    4d8c:	7830      	ldrb	r0, [r6, #0]
    4d8e:	b960      	cbnz	r0, 4daa <MPSL_IRQ_CLOCK_Handler+0x33a>
    4d90:	f000 f976 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4d94:	4606      	mov	r6, r0
    4d96:	f000 fa5b 	bl	5250 <mpsl_temperature_get>
    4d9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d9e:	b116      	cbz	r6, 4da6 <MPSL_IRQ_CLOCK_Handler+0x336>
    4da0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4da4:	e001      	b.n	4daa <MPSL_IRQ_CLOCK_Handler+0x33a>
    4da6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    4daa:	2101      	movs	r1, #1
    4dac:	4628      	mov	r0, r5
    4dae:	f008 fbe2 	bl	d576 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4db2:	b108      	cbz	r0, 4db8 <MPSL_IRQ_CLOCK_Handler+0x348>
    4db4:	f000 f95e 	bl	5074 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4db8:	f884 800a 	strb.w	r8, [r4, #10]
    4dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dc0:	20000030 	.word	0x20000030
    4dc4:	00020001 	.word	0x00020001
    4dc8:	00030001 	.word	0x00030001
    4dcc:	4000053c 	.word	0x4000053c
    4dd0:	e000ed10 	.word	0xe000ed10

00004dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4dd4:	b510      	push	{r4, lr}
    4dd6:	f3ef 8410 	mrs	r4, PRIMASK
    4dda:	b672      	cpsid	i
    4ddc:	480a      	ldr	r0, [pc, #40]	; (4e08 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4dde:	7841      	ldrb	r1, [r0, #1]
    4de0:	b129      	cbz	r1, 4dee <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4de2:	7841      	ldrb	r1, [r0, #1]
    4de4:	1e49      	subs	r1, r1, #1
    4de6:	7041      	strb	r1, [r0, #1]
    4de8:	7841      	ldrb	r1, [r0, #1]
    4dea:	b129      	cbz	r1, 4df8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4dec:	e008      	b.n	4e00 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4dee:	f240 110d 	movw	r1, #269	; 0x10d
    4df2:	206d      	movs	r0, #109	; 0x6d
    4df4:	f000 f9bc 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4df8:	7880      	ldrb	r0, [r0, #2]
    4dfa:	b908      	cbnz	r0, 4e00 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4dfc:	f000 f94e 	bl	509c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4e00:	2c00      	cmp	r4, #0
    4e02:	d100      	bne.n	4e06 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4e04:	b662      	cpsie	i
    4e06:	bd10      	pop	{r4, pc}
    4e08:	20000030 	.word	0x20000030

00004e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4e0c:	b510      	push	{r4, lr}
    4e0e:	f3ef 8410 	mrs	r4, PRIMASK
    4e12:	b672      	cpsid	i
    4e14:	4806      	ldr	r0, [pc, #24]	; (4e30 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    4e16:	7841      	ldrb	r1, [r0, #1]
    4e18:	1c49      	adds	r1, r1, #1
    4e1a:	7041      	strb	r1, [r0, #1]
    4e1c:	7840      	ldrb	r0, [r0, #1]
    4e1e:	2801      	cmp	r0, #1
    4e20:	d101      	bne.n	4e26 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4e22:	f008 fbbf 	bl	d5a4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4e26:	2c00      	cmp	r4, #0
    4e28:	d100      	bne.n	4e2c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4e2a:	b662      	cpsie	i
    4e2c:	bd10      	pop	{r4, pc}
    4e2e:	0000      	.short	0x0000
    4e30:	20000030 	.word	0x20000030

00004e34 <mpsl_clock_hfclk_release>:
    4e34:	4805      	ldr	r0, [pc, #20]	; (4e4c <mpsl_clock_hfclk_release+0x18>)
    4e36:	b510      	push	{r4, lr}
    4e38:	78c1      	ldrb	r1, [r0, #3]
    4e3a:	b121      	cbz	r1, 4e46 <mpsl_clock_hfclk_release+0x12>
    4e3c:	2100      	movs	r1, #0
    4e3e:	7101      	strb	r1, [r0, #4]
    4e40:	70c1      	strb	r1, [r0, #3]
    4e42:	f7ff ffc7 	bl	4dd4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4e46:	2000      	movs	r0, #0
    4e48:	bd10      	pop	{r4, pc}
    4e4a:	0000      	.short	0x0000
    4e4c:	20000030 	.word	0x20000030

00004e50 <mpsl_clock_hfclk_request>:
    4e50:	b570      	push	{r4, r5, r6, lr}
    4e52:	4c0c      	ldr	r4, [pc, #48]	; (4e84 <mpsl_clock_hfclk_request+0x34>)
    4e54:	78e1      	ldrb	r1, [r4, #3]
    4e56:	b961      	cbnz	r1, 4e72 <mpsl_clock_hfclk_request+0x22>
    4e58:	2501      	movs	r5, #1
    4e5a:	70e5      	strb	r5, [r4, #3]
    4e5c:	61e0      	str	r0, [r4, #28]
    4e5e:	f7ff ffd5 	bl	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4e62:	f000 f90d 	bl	5080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4e66:	b130      	cbz	r0, 4e76 <mpsl_clock_hfclk_request+0x26>
    4e68:	69e0      	ldr	r0, [r4, #28]
    4e6a:	b110      	cbz	r0, 4e72 <mpsl_clock_hfclk_request+0x22>
    4e6c:	4780      	blx	r0
    4e6e:	2000      	movs	r0, #0
    4e70:	61e0      	str	r0, [r4, #28]
    4e72:	2000      	movs	r0, #0
    4e74:	bd70      	pop	{r4, r5, r6, pc}
    4e76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4e7a:	7125      	strb	r5, [r4, #4]
    4e7c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4e80:	e7f7      	b.n	4e72 <mpsl_clock_hfclk_request+0x22>
    4e82:	0000      	.short	0x0000
    4e84:	20000030 	.word	0x20000030

00004e88 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    4e88:	f3ef 8010 	mrs	r0, PRIMASK
    4e8c:	b672      	cpsid	i
    4e8e:	4904      	ldr	r1, [pc, #16]	; (4ea0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    4e90:	788a      	ldrb	r2, [r1, #2]
    4e92:	1c52      	adds	r2, r2, #1
    4e94:	708a      	strb	r2, [r1, #2]
    4e96:	2800      	cmp	r0, #0
    4e98:	d100      	bne.n	4e9c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    4e9a:	b662      	cpsie	i
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	20000030 	.word	0x20000030

00004ea4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4ea4:	b510      	push	{r4, lr}
    4ea6:	f3ef 8410 	mrs	r4, PRIMASK
    4eaa:	b672      	cpsid	i
    4eac:	480a      	ldr	r0, [pc, #40]	; (4ed8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4eae:	7881      	ldrb	r1, [r0, #2]
    4eb0:	b129      	cbz	r1, 4ebe <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4eb2:	7881      	ldrb	r1, [r0, #2]
    4eb4:	1e49      	subs	r1, r1, #1
    4eb6:	7081      	strb	r1, [r0, #2]
    4eb8:	7841      	ldrb	r1, [r0, #1]
    4eba:	b129      	cbz	r1, 4ec8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4ebc:	e008      	b.n	4ed0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4ebe:	f240 1125 	movw	r1, #293	; 0x125
    4ec2:	206d      	movs	r0, #109	; 0x6d
    4ec4:	f000 f954 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4ec8:	7880      	ldrb	r0, [r0, #2]
    4eca:	b908      	cbnz	r0, 4ed0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4ecc:	f000 f8e6 	bl	509c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4ed0:	2c00      	cmp	r4, #0
    4ed2:	d100      	bne.n	4ed6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4ed4:	b662      	cpsie	i
    4ed6:	bd10      	pop	{r4, pc}
    4ed8:	20000030 	.word	0x20000030

00004edc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ee0:	0004      	movs	r4, r0
    4ee2:	f06f 0015 	mvn.w	r0, #21
    4ee6:	d03c      	beq.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4ee8:	7821      	ldrb	r1, [r4, #0]
    4eea:	2904      	cmp	r1, #4
    4eec:	d839      	bhi.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4eee:	2900      	cmp	r1, #0
    4ef0:	7861      	ldrb	r1, [r4, #1]
    4ef2:	d038      	beq.n	4f66 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4ef4:	2900      	cmp	r1, #0
    4ef6:	d134      	bne.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4ef8:	78a1      	ldrb	r1, [r4, #2]
    4efa:	2900      	cmp	r1, #0
    4efc:	d131      	bne.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4efe:	2000      	movs	r0, #0
    4f00:	f008 faff 	bl	d502 <MPSL_IRQ_RADIO_Handler+0x1e>
    4f04:	2000      	movs	r0, #0
    4f06:	f008 faef 	bl	d4e8 <MPSL_IRQ_RADIO_Handler+0x4>
    4f0a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4f0e:	f04f 31ff 	mov.w	r1, #4294967295
    4f12:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4f16:	2600      	movs	r6, #0
    4f18:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4f1c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4f20:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4f24:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4f28:	4f14      	ldr	r7, [pc, #80]	; (4f7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    4f2a:	707e      	strb	r6, [r7, #1]
    4f2c:	88a0      	ldrh	r0, [r4, #4]
    4f2e:	81b8      	strh	r0, [r7, #12]
    4f30:	f008 fb2f 	bl	d592 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4f34:	2501      	movs	r5, #1
    4f36:	b108      	cbz	r0, 4f3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4f38:	70fd      	strb	r5, [r7, #3]
    4f3a:	707d      	strb	r5, [r7, #1]
    4f3c:	2101      	movs	r1, #1
    4f3e:	4640      	mov	r0, r8
    4f40:	f008 fb19 	bl	d576 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4f44:	b108      	cbz	r0, 4f4a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4f46:	f000 f895 	bl	5074 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4f4a:	4620      	mov	r0, r4
    4f4c:	f7ff fe7c 	bl	4c48 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    4f50:	727d      	strb	r5, [r7, #9]
    4f52:	2000      	movs	r0, #0
    4f54:	f008 fac8 	bl	d4e8 <MPSL_IRQ_RADIO_Handler+0x4>
    4f58:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4f5c:	4630      	mov	r0, r6
    4f5e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    4f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f66:	2900      	cmp	r1, #0
    4f68:	d0fb      	beq.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4f6a:	2920      	cmp	r1, #32
    4f6c:	d8f9      	bhi.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4f6e:	78a1      	ldrb	r1, [r4, #2]
    4f70:	2921      	cmp	r1, #33	; 0x21
    4f72:	d8f6      	bhi.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4f74:	2901      	cmp	r1, #1
    4f76:	d1c2      	bne.n	4efe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4f78:	e7f3      	b.n	4f62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4f7a:	0000      	.short	0x0000
    4f7c:	20000030 	.word	0x20000030

00004f80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4f80:	4801      	ldr	r0, [pc, #4]	; (4f88 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4f82:	8980      	ldrh	r0, [r0, #12]
    4f84:	4770      	bx	lr
    4f86:	0000      	.short	0x0000
    4f88:	20000030 	.word	0x20000030

00004f8c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4f8c:	b510      	push	{r4, lr}
    4f8e:	480d      	ldr	r0, [pc, #52]	; (4fc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4f90:	f008 fb60 	bl	d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4f94:	490b      	ldr	r1, [pc, #44]	; (4fc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4f96:	3908      	subs	r1, #8
    4f98:	b148      	cbz	r0, 4fae <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4f9a:	2001      	movs	r0, #1
    4f9c:	7008      	strb	r0, [r1, #0]
    4f9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4fa2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4faa:	f7ff bf2f 	b.w	4e0c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4fae:	7a88      	ldrb	r0, [r1, #10]
    4fb0:	2802      	cmp	r0, #2
    4fb2:	d101      	bne.n	4fb8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4fb4:	f7ff fda0 	bl	4af8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fbc:	4801      	ldr	r0, [pc, #4]	; (4fc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4fbe:	f008 bb60 	b.w	d682 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4fc2:	0000      	.short	0x0000
    4fc4:	20000038 	.word	0x20000038

00004fc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4fc8:	4802      	ldr	r0, [pc, #8]	; (4fd4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4fca:	7a80      	ldrb	r0, [r0, #10]
    4fcc:	2800      	cmp	r0, #0
    4fce:	d000      	beq.n	4fd2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4fd0:	2001      	movs	r0, #1
    4fd2:	4770      	bx	lr
    4fd4:	20000030 	.word	0x20000030

00004fd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fda:	4d1f      	ldr	r5, [pc, #124]	; (5058 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4fdc:	7ae8      	ldrb	r0, [r5, #11]
    4fde:	2800      	cmp	r0, #0
    4fe0:	d10f      	bne.n	5002 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4fe2:	7e28      	ldrb	r0, [r5, #24]
    4fe4:	f000 0003 	and.w	r0, r0, #3
    4fe8:	f008 fae1 	bl	d5ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4fec:	2800      	cmp	r0, #0
    4fee:	d008      	beq.n	5002 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4ff0:	f3ef 8110 	mrs	r1, PRIMASK
    4ff4:	b672      	cpsid	i
    4ff6:	f7ff ffe7 	bl	4fc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4ffa:	b118      	cbz	r0, 5004 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4ffc:	2900      	cmp	r1, #0
    4ffe:	d100      	bne.n	5002 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    5000:	b662      	cpsie	i
    5002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5004:	2601      	movs	r6, #1
    5006:	72ae      	strb	r6, [r5, #10]
    5008:	b901      	cbnz	r1, 500c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    500a:	b662      	cpsie	i
    500c:	2018      	movs	r0, #24
    500e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    5012:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5016:	61a6      	str	r6, [r4, #24]
    5018:	f44f 7020 	mov.w	r0, #640	; 0x280
    501c:	f8ad 0000 	strh.w	r0, [sp]
    5020:	f8bd 0000 	ldrh.w	r0, [sp]
    5024:	1e41      	subs	r1, r0, #1
    5026:	f8ad 1000 	strh.w	r1, [sp]
    502a:	d2f9      	bcs.n	5020 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    502c:	2700      	movs	r7, #0
    502e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    5032:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    5036:	4808      	ldr	r0, [pc, #32]	; (5058 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    5038:	3008      	adds	r0, #8
    503a:	f008 fb1e 	bl	d67a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    503e:	702f      	strb	r7, [r5, #0]
    5040:	f7ff fd5a 	bl	4af8 <MPSL_IRQ_CLOCK_Handler+0x88>
    5044:	6166      	str	r6, [r4, #20]
    5046:	7968      	ldrb	r0, [r5, #5]
    5048:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    504c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    5050:	2018      	movs	r0, #24
    5052:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    5056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5058:	20000030 	.word	0x20000030

0000505c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    505c:	b510      	push	{r4, lr}
    505e:	4c04      	ldr	r4, [pc, #16]	; (5070 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    5060:	7e20      	ldrb	r0, [r4, #24]
    5062:	f000 0003 	and.w	r0, r0, #3
    5066:	f008 faa2 	bl	d5ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    506a:	2800      	cmp	r0, #0
    506c:	d0f8      	beq.n	5060 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    506e:	bd10      	pop	{r4, pc}
    5070:	20000030 	.word	0x20000030

00005074 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    5074:	4901      	ldr	r1, [pc, #4]	; (507c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    5076:	2001      	movs	r0, #1
    5078:	7008      	strb	r0, [r1, #0]
    507a:	4770      	bx	lr
    507c:	20000294 	.word	0x20000294

00005080 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    5080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    5084:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    5088:	b918      	cbnz	r0, 5092 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    508a:	4803      	ldr	r0, [pc, #12]	; (5098 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    508c:	7800      	ldrb	r0, [r0, #0]
    508e:	2800      	cmp	r0, #0
    5090:	d000      	beq.n	5094 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    5092:	2001      	movs	r0, #1
    5094:	4770      	bx	lr
    5096:	0000      	.short	0x0000
    5098:	20000294 	.word	0x20000294

0000509c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    509c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    50a0:	2101      	movs	r1, #1
    50a2:	6041      	str	r1, [r0, #4]
    50a4:	2100      	movs	r1, #0
    50a6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    50aa:	4801      	ldr	r0, [pc, #4]	; (50b0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    50ac:	7001      	strb	r1, [r0, #0]
    50ae:	4770      	bx	lr
    50b0:	20000294 	.word	0x20000294

000050b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    50b4:	4802      	ldr	r0, [pc, #8]	; (50c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    50b6:	6800      	ldr	r0, [r0, #0]
    50b8:	f000 0003 	and.w	r0, r0, #3
    50bc:	4770      	bx	lr
    50be:	0000      	.short	0x0000
    50c0:	4000041c 	.word	0x4000041c
    50c4:	b510      	push	{r4, lr}
    50c6:	b131      	cbz	r1, 50d6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    50c8:	2901      	cmp	r1, #1
    50ca:	d007      	beq.n	50dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    50cc:	f240 3102 	movw	r1, #770	; 0x302
    50d0:	a005      	add	r0, pc, #20	; (adr r0, 50e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    50d2:	f000 f821 	bl	5118 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    50d6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    50da:	e001      	b.n	50e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    50dc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    50e0:	f000 0001 	and.w	r0, r0, #1
    50e4:	bd10      	pop	{r4, pc}
    50e6:	0000      	.short	0x0000
    50e8:	5f66726e 	.word	0x5f66726e
    50ec:	636f6c63 	.word	0x636f6c63
    50f0:	00682e6b 	.word	0x00682e6b
    50f4:	f3bf 8f4f 	dsb	sy
    50f8:	4805      	ldr	r0, [pc, #20]	; (5110 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    50fa:	6801      	ldr	r1, [r0, #0]
    50fc:	4a05      	ldr	r2, [pc, #20]	; (5114 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    50fe:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    5102:	4311      	orrs	r1, r2
    5104:	6001      	str	r1, [r0, #0]
    5106:	f3bf 8f4f 	dsb	sy
    510a:	bf00      	nop
    510c:	e7fd      	b.n	510a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    510e:	0000      	.short	0x0000
    5110:	e000ed0c 	.word	0xe000ed0c
    5114:	05fa0004 	.word	0x05fa0004

00005118 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    5118:	b672      	cpsid	i
    511a:	4a03      	ldr	r2, [pc, #12]	; (5128 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    511c:	6852      	ldr	r2, [r2, #4]
    511e:	b102      	cbz	r2, 5122 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    5120:	4790      	blx	r2
    5122:	f7ff ffe7 	bl	50f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    5126:	0000      	.short	0x0000
    5128:	20000050 	.word	0x20000050
    512c:	4806      	ldr	r0, [pc, #24]	; (5148 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    512e:	b510      	push	{r4, lr}
    5130:	2100      	movs	r1, #0
    5132:	6001      	str	r1, [r0, #0]
    5134:	2101      	movs	r1, #1
    5136:	6001      	str	r1, [r0, #0]
    5138:	4608      	mov	r0, r1
    513a:	f008 fa5f 	bl	d5fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    513e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5142:	2001      	movs	r0, #1
    5144:	f008 ba4d 	b.w	d5e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    5148:	40001ffc 	.word	0x40001ffc
    514c:	4807      	ldr	r0, [pc, #28]	; (516c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    514e:	b510      	push	{r4, lr}
    5150:	2101      	movs	r1, #1
    5152:	6041      	str	r1, [r0, #4]
    5154:	1e89      	subs	r1, r1, #2
    5156:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    515a:	200c      	movs	r0, #12
    515c:	f008 fa4e 	bl	d5fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    5160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5164:	200c      	movs	r0, #12
    5166:	f008 ba3c 	b.w	d5e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    516a:	0000      	.short	0x0000
    516c:	4000c000 	.word	0x4000c000

00005170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    5170:	b50e      	push	{r1, r2, r3, lr}
    5172:	b672      	cpsid	i
    5174:	4a0f      	ldr	r2, [pc, #60]	; (51b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    5176:	6855      	ldr	r5, [r2, #4]
    5178:	b1d5      	cbz	r5, 51b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    517a:	2200      	movs	r2, #0
    517c:	4603      	mov	r3, r0
    517e:	466e      	mov	r6, sp
    5180:	240a      	movs	r4, #10
    5182:	e003      	b.n	518c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    5184:	fbb0 f0f4 	udiv	r0, r0, r4
    5188:	1c52      	adds	r2, r2, #1
    518a:	b2d2      	uxtb	r2, r2
    518c:	2800      	cmp	r0, #0
    518e:	d1f9      	bne.n	5184 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    5190:	54b0      	strb	r0, [r6, r2]
    5192:	e009      	b.n	51a8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    5194:	fbb3 f0f4 	udiv	r0, r3, r4
    5198:	fb04 3010 	mls	r0, r4, r0, r3
    519c:	fbb3 f3f4 	udiv	r3, r3, r4
    51a0:	1e52      	subs	r2, r2, #1
    51a2:	b2d2      	uxtb	r2, r2
    51a4:	3030      	adds	r0, #48	; 0x30
    51a6:	54b0      	strb	r0, [r6, r2]
    51a8:	2a00      	cmp	r2, #0
    51aa:	d1f3      	bne.n	5194 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    51ac:	4630      	mov	r0, r6
    51ae:	47a8      	blx	r5
    51b0:	f7ff ffa0 	bl	50f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    51b4:	20000050 	.word	0x20000050

000051b8 <mpsl_init>:
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	4c17      	ldr	r4, [pc, #92]	; (5218 <mpsl_init+0x60>)
    51bc:	4606      	mov	r6, r0
    51be:	460d      	mov	r5, r1
    51c0:	7860      	ldrb	r0, [r4, #1]
    51c2:	b110      	cbz	r0, 51ca <mpsl_init+0x12>
    51c4:	f04f 30ff 	mov.w	r0, #4294967295
    51c8:	bd70      	pop	{r4, r5, r6, pc}
    51ca:	b906      	cbnz	r6, 51ce <mpsl_init+0x16>
    51cc:	4e13      	ldr	r6, [pc, #76]	; (521c <mpsl_init+0x64>)
    51ce:	6062      	str	r2, [r4, #4]
    51d0:	7025      	strb	r5, [r4, #0]
    51d2:	f7ff ffab 	bl	512c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    51d6:	f7ff ffb9 	bl	514c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    51da:	4630      	mov	r0, r6
    51dc:	f7ff fe7e 	bl	4edc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    51e0:	0006      	movs	r6, r0
    51e2:	d1f1      	bne.n	51c8 <mpsl_init+0x10>
    51e4:	f7fe febe 	bl	3f64 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    51e8:	f7ff fef6 	bl	4fd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    51ec:	f008 f8d4 	bl	d398 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    51f0:	4628      	mov	r0, r5
    51f2:	f008 f9f6 	bl	d5e2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    51f6:	2001      	movs	r0, #1
    51f8:	2d00      	cmp	r5, #0
    51fa:	db09      	blt.n	5210 <mpsl_init+0x58>
    51fc:	f005 011f 	and.w	r1, r5, #31
    5200:	fa00 f101 	lsl.w	r1, r0, r1
    5204:	096a      	lsrs	r2, r5, #5
    5206:	0092      	lsls	r2, r2, #2
    5208:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    520c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    5210:	7060      	strb	r0, [r4, #1]
    5212:	4630      	mov	r0, r6
    5214:	bd70      	pop	{r4, r5, r6, pc}
    5216:	0000      	.short	0x0000
    5218:	20000050 	.word	0x20000050
    521c:	0000d61e 	.word	0x0000d61e

00005220 <mpsl_is_initialized>:
    5220:	4801      	ldr	r0, [pc, #4]	; (5228 <mpsl_is_initialized+0x8>)
    5222:	7840      	ldrb	r0, [r0, #1]
    5224:	4770      	bx	lr
    5226:	0000      	.short	0x0000
    5228:	20000050 	.word	0x20000050

0000522c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    522c:	4807      	ldr	r0, [pc, #28]	; (524c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    522e:	f990 0000 	ldrsb.w	r0, [r0]
    5232:	2800      	cmp	r0, #0
    5234:	db09      	blt.n	524a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    5236:	f000 021f 	and.w	r2, r0, #31
    523a:	2101      	movs	r1, #1
    523c:	4091      	lsls	r1, r2
    523e:	0940      	lsrs	r0, r0, #5
    5240:	0080      	lsls	r0, r0, #2
    5242:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5246:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    524a:	4770      	bx	lr
    524c:	20000050 	.word	0x20000050

00005250 <mpsl_temperature_get>:
    5250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5254:	2601      	movs	r6, #1
    5256:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    525a:	0331      	lsls	r1, r6, #12
    525c:	f04f 0800 	mov.w	r8, #0
    5260:	4640      	mov	r0, r8
    5262:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    5266:	f3bf 8f4f 	dsb	sy
    526a:	f3bf 8f6f 	isb	sy
    526e:	4c16      	ldr	r4, [pc, #88]	; (52c8 <mpsl_temperature_get+0x78>)
    5270:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    5274:	200c      	movs	r0, #12
    5276:	f008 f9e0 	bl	d63a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    527a:	4d14      	ldr	r5, [pc, #80]	; (52cc <mpsl_temperature_get+0x7c>)
    527c:	6828      	ldr	r0, [r5, #0]
    527e:	43c0      	mvns	r0, r0
    5280:	f340 1700 	sbfx	r7, r0, #4, #1
    5284:	6828      	ldr	r0, [r5, #0]
    5286:	f040 0010 	orr.w	r0, r0, #16
    528a:	6028      	str	r0, [r5, #0]
    528c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    5290:	6026      	str	r6, [r4, #0]
    5292:	1c7f      	adds	r7, r7, #1
    5294:	e002      	b.n	529c <mpsl_temperature_get+0x4c>
    5296:	bf00      	nop
    5298:	f000 f890 	bl	53bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    529c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    52a0:	2800      	cmp	r0, #0
    52a2:	d0f9      	beq.n	5298 <mpsl_temperature_get+0x48>
    52a4:	b91f      	cbnz	r7, 52ae <mpsl_temperature_get+0x5e>
    52a6:	6828      	ldr	r0, [r5, #0]
    52a8:	f020 0010 	bic.w	r0, r0, #16
    52ac:	6028      	str	r0, [r5, #0]
    52ae:	4808      	ldr	r0, [pc, #32]	; (52d0 <mpsl_temperature_get+0x80>)
    52b0:	6805      	ldr	r5, [r0, #0]
    52b2:	6066      	str	r6, [r4, #4]
    52b4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    52b8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    52bc:	200c      	movs	r0, #12
    52be:	f008 f9bc 	bl	d63a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    52c2:	4628      	mov	r0, r5
    52c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52c8:	4000c000 	.word	0x4000c000
    52cc:	e000ed10 	.word	0xe000ed10
    52d0:	4000c508 	.word	0x4000c508

000052d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    52d4:	b510      	push	{r4, lr}
    52d6:	4602      	mov	r2, r0
    52d8:	2005      	movs	r0, #5
    52da:	490c      	ldr	r1, [pc, #48]	; (530c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    52dc:	e004      	b.n	52e8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    52de:	bf00      	nop
    52e0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    52e4:	791b      	ldrb	r3, [r3, #4]
    52e6:	b133      	cbz	r3, 52f6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    52e8:	1e40      	subs	r0, r0, #1
    52ea:	b2c0      	uxtb	r0, r0
    52ec:	d2f8      	bcs.n	52e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    52ee:	2148      	movs	r1, #72	; 0x48
    52f0:	2069      	movs	r0, #105	; 0x69
    52f2:	f7ff ff3d 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    52f6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    52fa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    52fe:	2200      	movs	r2, #0
    5300:	714a      	strb	r2, [r1, #5]
    5302:	718a      	strb	r2, [r1, #6]
    5304:	2201      	movs	r2, #1
    5306:	710a      	strb	r2, [r1, #4]
    5308:	bd10      	pop	{r4, pc}
    530a:	0000      	.short	0x0000
    530c:	200011e0 	.word	0x200011e0

00005310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    5310:	b510      	push	{r4, lr}
    5312:	2805      	cmp	r0, #5
    5314:	d301      	bcc.n	531a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    5316:	2158      	movs	r1, #88	; 0x58
    5318:	e006      	b.n	5328 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    531a:	490a      	ldr	r1, [pc, #40]	; (5344 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    531c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5320:	7901      	ldrb	r1, [r0, #4]
    5322:	2901      	cmp	r1, #1
    5324:	d003      	beq.n	532e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    5326:	2159      	movs	r1, #89	; 0x59
    5328:	2069      	movs	r0, #105	; 0x69
    532a:	f7ff ff21 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    532e:	7941      	ldrb	r1, [r0, #5]
    5330:	7982      	ldrb	r2, [r0, #6]
    5332:	1c49      	adds	r1, r1, #1
    5334:	b2c9      	uxtb	r1, r1
    5336:	428a      	cmp	r2, r1
    5338:	d000      	beq.n	533c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    533a:	7141      	strb	r1, [r0, #5]
    533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5340:	f7ff bf74 	b.w	522c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    5344:	200011e0 	.word	0x200011e0

00005348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    5348:	b570      	push	{r4, r5, r6, lr}
    534a:	2505      	movs	r5, #5
    534c:	4e0e      	ldr	r6, [pc, #56]	; (5388 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    534e:	4c0f      	ldr	r4, [pc, #60]	; (538c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    5350:	e016      	b.n	5380 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    5352:	7821      	ldrb	r1, [r4, #0]
    5354:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    5358:	7902      	ldrb	r2, [r0, #4]
    535a:	2a01      	cmp	r2, #1
    535c:	d108      	bne.n	5370 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    535e:	7942      	ldrb	r2, [r0, #5]
    5360:	7983      	ldrb	r3, [r0, #6]
    5362:	429a      	cmp	r2, r3
    5364:	d004      	beq.n	5370 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    5366:	7942      	ldrb	r2, [r0, #5]
    5368:	7182      	strb	r2, [r0, #6]
    536a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    536e:	4780      	blx	r0
    5370:	7820      	ldrb	r0, [r4, #0]
    5372:	1c40      	adds	r0, r0, #1
    5374:	b2c0      	uxtb	r0, r0
    5376:	7020      	strb	r0, [r4, #0]
    5378:	2805      	cmp	r0, #5
    537a:	d301      	bcc.n	5380 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    537c:	2000      	movs	r0, #0
    537e:	7020      	strb	r0, [r4, #0]
    5380:	1e6d      	subs	r5, r5, #1
    5382:	b2ed      	uxtb	r5, r5
    5384:	d2e5      	bcs.n	5352 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    5386:	bd70      	pop	{r4, r5, r6, pc}
    5388:	200011e0 	.word	0x200011e0
    538c:	20000295 	.word	0x20000295

00005390 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    5390:	b500      	push	{lr}
    5392:	f008 f981 	bl	d698 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    5396:	b940      	cbnz	r0, 53aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    5398:	f008 f988 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    539c:	b928      	cbnz	r0, 53aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    539e:	f008 f99c 	bl	d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    53a2:	b910      	cbnz	r0, 53aa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    53a4:	f008 f9ad 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    53a8:	b108      	cbz	r0, 53ae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    53aa:	4802      	ldr	r0, [pc, #8]	; (53b4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    53ac:	bd00      	pop	{pc}
    53ae:	4802      	ldr	r0, [pc, #8]	; (53b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    53b0:	bd00      	pop	{pc}
    53b2:	0000      	.short	0x0000
    53b4:	4000050c 	.word	0x4000050c
    53b8:	4001e700 	.word	0x4001e700

000053bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    53bc:	b510      	push	{r4, lr}
    53be:	f008 f9a0 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    53c2:	b330      	cbz	r0, 5412 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    53c4:	f3ef 8010 	mrs	r0, PRIMASK
    53c8:	b1c8      	cbz	r0, 53fe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    53ca:	2100      	movs	r1, #0
    53cc:	b672      	cpsid	i
    53ce:	4812      	ldr	r0, [pc, #72]	; (5418 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    53d0:	6802      	ldr	r2, [r0, #0]
    53d2:	6803      	ldr	r3, [r0, #0]
    53d4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    53d8:	f043 0310 	orr.w	r3, r3, #16
    53dc:	6003      	str	r3, [r0, #0]
    53de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    53e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    53e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    53ea:	431c      	orrs	r4, r3
    53ec:	d000      	beq.n	53f0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    53ee:	bf40      	sev
    53f0:	bf20      	wfe
    53f2:	bf00      	nop
    53f4:	bf00      	nop
    53f6:	bf00      	nop
    53f8:	bf00      	nop
    53fa:	b112      	cbz	r2, 5402 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    53fc:	e005      	b.n	540a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    53fe:	2101      	movs	r1, #1
    5400:	e7e4      	b.n	53cc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    5402:	6802      	ldr	r2, [r0, #0]
    5404:	f022 0210 	bic.w	r2, r2, #16
    5408:	6002      	str	r2, [r0, #0]
    540a:	2900      	cmp	r1, #0
    540c:	d000      	beq.n	5410 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    540e:	b662      	cpsie	i
    5410:	bd10      	pop	{r4, pc}
    5412:	bf20      	wfe
    5414:	bd10      	pop	{r4, pc}
    5416:	0000      	.short	0x0000
    5418:	e000ed10 	.word	0xe000ed10

0000541c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    541c:	0000d973 0000d98f 0000d97d 0000d989     s.......}.......
    542c:	0000d977 0000d971 0000d96f 0000d995     w...q...o.......
    543c:	0000d983 0000d969 0000d961 0000d965     ....i...a...e...
    544c:	0000d95b                                [...

00005450 <mpsl_fem_disable>:
    5450:	4801      	ldr	r0, [pc, #4]	; (5458 <mpsl_fem_disable+0x8>)
    5452:	6800      	ldr	r0, [r0, #0]
    5454:	6800      	ldr	r0, [r0, #0]
    5456:	4700      	bx	r0
    5458:	20000058 	.word	0x20000058

0000545c <mpsl_fem_lna_configuration_clear>:
    545c:	4801      	ldr	r0, [pc, #4]	; (5464 <mpsl_fem_lna_configuration_clear+0x8>)
    545e:	6800      	ldr	r0, [r0, #0]
    5460:	6900      	ldr	r0, [r0, #16]
    5462:	4700      	bx	r0
    5464:	20000058 	.word	0x20000058

00005468 <mpsl_fem_lna_configuration_set>:
    5468:	4a01      	ldr	r2, [pc, #4]	; (5470 <mpsl_fem_lna_configuration_set+0x8>)
    546a:	6812      	ldr	r2, [r2, #0]
    546c:	6892      	ldr	r2, [r2, #8]
    546e:	4710      	bx	r2
    5470:	20000058 	.word	0x20000058

00005474 <mpsl_fem_pa_configuration_clear>:
    5474:	4801      	ldr	r0, [pc, #4]	; (547c <mpsl_fem_pa_configuration_clear+0x8>)
    5476:	6800      	ldr	r0, [r0, #0]
    5478:	68c0      	ldr	r0, [r0, #12]
    547a:	4700      	bx	r0
    547c:	20000058 	.word	0x20000058

00005480 <mpsl_fem_pa_configuration_set>:
    5480:	4a01      	ldr	r2, [pc, #4]	; (5488 <mpsl_fem_pa_configuration_set+0x8>)
    5482:	6812      	ldr	r2, [r2, #0]
    5484:	6852      	ldr	r2, [r2, #4]
    5486:	4710      	bx	r2
    5488:	20000058 	.word	0x20000058

0000548c <mpsl_fem_pa_is_configured>:
    548c:	4901      	ldr	r1, [pc, #4]	; (5494 <mpsl_fem_pa_is_configured+0x8>)
    548e:	6809      	ldr	r1, [r1, #0]
    5490:	6a09      	ldr	r1, [r1, #32]
    5492:	4708      	bx	r1
    5494:	20000058 	.word	0x20000058

00005498 <mpsl_fem_device_config_254_apply_get>:
    5498:	4801      	ldr	r0, [pc, #4]	; (54a0 <mpsl_fem_device_config_254_apply_get+0x8>)
    549a:	7800      	ldrb	r0, [r0, #0]
    549c:	4770      	bx	lr
    549e:	0000      	.short	0x0000
    54a0:	20000296 	.word	0x20000296
    54a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    54a6:	4c17      	ldr	r4, [pc, #92]	; (5504 <mpsl_fem_device_config_254_apply_get+0x6c>)
    54a8:	7a20      	ldrb	r0, [r4, #8]
    54aa:	2802      	cmp	r0, #2
    54ac:	d200      	bcs.n	54b0 <mpsl_fem_device_config_254_apply_get+0x18>
    54ae:	2002      	movs	r0, #2
    54b0:	f88d 0001 	strb.w	r0, [sp, #1]
    54b4:	79e0      	ldrb	r0, [r4, #7]
    54b6:	2803      	cmp	r0, #3
    54b8:	d200      	bcs.n	54bc <mpsl_fem_device_config_254_apply_get+0x24>
    54ba:	2003      	movs	r0, #3
    54bc:	f88d 0000 	strb.w	r0, [sp]
    54c0:	79a0      	ldrb	r0, [r4, #6]
    54c2:	f8ad 0004 	strh.w	r0, [sp, #4]
    54c6:	7960      	ldrb	r0, [r4, #5]
    54c8:	f8ad 0002 	strh.w	r0, [sp, #2]
    54cc:	4668      	mov	r0, sp
    54ce:	f006 f95b 	bl	b788 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    54d2:	b108      	cbz	r0, 54d8 <mpsl_fem_device_config_254_apply_get+0x40>
    54d4:	2184      	movs	r1, #132	; 0x84
    54d6:	e010      	b.n	54fa <mpsl_fem_device_config_254_apply_get+0x62>
    54d8:	68e0      	ldr	r0, [r4, #12]
    54da:	9002      	str	r0, [sp, #8]
    54dc:	a802      	add	r0, sp, #8
    54de:	f006 f969 	bl	b7b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    54e2:	b108      	cbz	r0, 54e8 <mpsl_fem_device_config_254_apply_get+0x50>
    54e4:	2188      	movs	r1, #136	; 0x88
    54e6:	e008      	b.n	54fa <mpsl_fem_device_config_254_apply_get+0x62>
    54e8:	4807      	ldr	r0, [pc, #28]	; (5508 <mpsl_fem_device_config_254_apply_get+0x70>)
    54ea:	6800      	ldr	r0, [r0, #0]
    54ec:	9003      	str	r0, [sp, #12]
    54ee:	a803      	add	r0, sp, #12
    54f0:	f00b fb24 	bl	10b3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    54f4:	2800      	cmp	r0, #0
    54f6:	d003      	beq.n	5500 <mpsl_fem_device_config_254_apply_get+0x68>
    54f8:	218c      	movs	r1, #140	; 0x8c
    54fa:	2003      	movs	r0, #3
    54fc:	f000 f8e4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5500:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5502:	0000      	.short	0x0000
    5504:	20001208 	.word	0x20001208
    5508:	000057b0 	.word	0x000057b0

0000550c <sdc_build_revision_get>:
    550c:	b510      	push	{r4, lr}
    550e:	b128      	cbz	r0, 551c <sdc_build_revision_get+0x10>
    5510:	2214      	movs	r2, #20
    5512:	4904      	ldr	r1, [pc, #16]	; (5524 <sdc_build_revision_get+0x18>)
    5514:	f008 f947 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5518:	2000      	movs	r0, #0
    551a:	bd10      	pop	{r4, pc}
    551c:	f06f 0015 	mvn.w	r0, #21
    5520:	bd10      	pop	{r4, pc}
    5522:	0000      	.short	0x0000
    5524:	000057cc 	.word	0x000057cc

00005528 <sdc_cfg_set>:
    5528:	b570      	push	{r4, r5, r6, lr}
    552a:	0003      	movs	r3, r0
    552c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    5530:	d103      	bne.n	553a <sdc_cfg_set+0x12>
    5532:	4c29      	ldr	r4, [pc, #164]	; (55d8 <sdc_cfg_set+0xb0>)
    5534:	7863      	ldrb	r3, [r4, #1]
    5536:	b10b      	cbz	r3, 553c <sdc_cfg_set+0x14>
    5538:	1180      	asrs	r0, r0, #6
    553a:	bd70      	pop	{r4, r5, r6, pc}
    553c:	b309      	cbz	r1, 5582 <sdc_cfg_set+0x5a>
    553e:	f06f 0515 	mvn.w	r5, #21
    5542:	b37a      	cbz	r2, 55a4 <sdc_cfg_set+0x7c>
    5544:	4b25      	ldr	r3, [pc, #148]	; (55dc <sdc_cfg_set+0xb4>)
    5546:	290c      	cmp	r1, #12
    5548:	d241      	bcs.n	55ce <sdc_cfg_set+0xa6>
    554a:	e8df f001 	tbb	[pc, r1]
    554e:	0640      	.short	0x0640
    5550:	13100c09 	.word	0x13100c09
    5554:	2616231b 	.word	0x2616231b
    5558:	312c      	.short	0x312c
    555a:	7810      	ldrb	r0, [r2, #0]
    555c:	7018      	strb	r0, [r3, #0]
    555e:	e02b      	b.n	55b8 <sdc_cfg_set+0x90>
    5560:	7810      	ldrb	r0, [r2, #0]
    5562:	7058      	strb	r0, [r3, #1]
    5564:	e028      	b.n	55b8 <sdc_cfg_set+0x90>
    5566:	6810      	ldr	r0, [r2, #0]
    5568:	f8c3 0005 	str.w	r0, [r3, #5]
    556c:	e024      	b.n	55b8 <sdc_cfg_set+0x90>
    556e:	6810      	ldr	r0, [r2, #0]
    5570:	60d8      	str	r0, [r3, #12]
    5572:	e021      	b.n	55b8 <sdc_cfg_set+0x90>
    5574:	7810      	ldrb	r0, [r2, #0]
    5576:	7098      	strb	r0, [r3, #2]
    5578:	e01e      	b.n	55b8 <sdc_cfg_set+0x90>
    557a:	7811      	ldrb	r1, [r2, #0]
    557c:	2900      	cmp	r1, #0
    557e:	d1dc      	bne.n	553a <sdc_cfg_set+0x12>
    5580:	70d9      	strb	r1, [r3, #3]
    5582:	e019      	b.n	55b8 <sdc_cfg_set+0x90>
    5584:	78e0      	ldrb	r0, [r4, #3]
    5586:	b110      	cbz	r0, 558e <sdc_cfg_set+0x66>
    5588:	7810      	ldrb	r0, [r2, #0]
    558a:	2802      	cmp	r0, #2
    558c:	d31f      	bcc.n	55ce <sdc_cfg_set+0xa6>
    558e:	7810      	ldrb	r0, [r2, #0]
    5590:	7418      	strb	r0, [r3, #16]
    5592:	e011      	b.n	55b8 <sdc_cfg_set+0x90>
    5594:	8810      	ldrh	r0, [r2, #0]
    5596:	8258      	strh	r0, [r3, #18]
    5598:	e00e      	b.n	55b8 <sdc_cfg_set+0x90>
    559a:	7811      	ldrb	r1, [r2, #0]
    559c:	2900      	cmp	r1, #0
    559e:	d1cc      	bne.n	553a <sdc_cfg_set+0x12>
    55a0:	7119      	strb	r1, [r3, #4]
    55a2:	e009      	b.n	55b8 <sdc_cfg_set+0x90>
    55a4:	e013      	b.n	55ce <sdc_cfg_set+0xa6>
    55a6:	7810      	ldrb	r0, [r2, #0]
    55a8:	2802      	cmp	r0, #2
    55aa:	d310      	bcc.n	55ce <sdc_cfg_set+0xa6>
    55ac:	7518      	strb	r0, [r3, #20]
    55ae:	e003      	b.n	55b8 <sdc_cfg_set+0x90>
    55b0:	7811      	ldrb	r1, [r2, #0]
    55b2:	2900      	cmp	r1, #0
    55b4:	d1c1      	bne.n	553a <sdc_cfg_set+0x12>
    55b6:	7559      	strb	r1, [r3, #21]
    55b8:	2201      	movs	r2, #1
    55ba:	4908      	ldr	r1, [pc, #32]	; (55dc <sdc_cfg_set+0xb4>)
    55bc:	2000      	movs	r0, #0
    55be:	f008 f9eb 	bl	d998 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    55c2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    55c6:	db04      	blt.n	55d2 <sdc_cfg_set+0xaa>
    55c8:	f06f 000b 	mvn.w	r0, #11
    55cc:	bd70      	pop	{r4, r5, r6, pc}
    55ce:	4628      	mov	r0, r5
    55d0:	bd70      	pop	{r4, r5, r6, pc}
    55d2:	2101      	movs	r1, #1
    55d4:	70a1      	strb	r1, [r4, #2]
    55d6:	bd70      	pop	{r4, r5, r6, pc}
    55d8:	2000005c 	.word	0x2000005c
    55dc:	20001208 	.word	0x20001208

000055e0 <sdc_enable>:
    55e0:	b570      	push	{r4, r5, r6, lr}
    55e2:	460c      	mov	r4, r1
    55e4:	0005      	movs	r5, r0
    55e6:	d019      	beq.n	561c <sdc_enable+0x3c>
    55e8:	b1c4      	cbz	r4, 561c <sdc_enable+0x3c>
    55ea:	f000 f915 	bl	5818 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    55ee:	b1c0      	cbz	r0, 5622 <sdc_enable+0x42>
    55f0:	4628      	mov	r0, r5
    55f2:	f7ff fe6f 	bl	52d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    55f6:	4d0c      	ldr	r5, [pc, #48]	; (5628 <sdc_enable+0x48>)
    55f8:	2200      	movs	r2, #0
    55fa:	490c      	ldr	r1, [pc, #48]	; (562c <sdc_enable+0x4c>)
    55fc:	7028      	strb	r0, [r5, #0]
    55fe:	4620      	mov	r0, r4
    5600:	f008 f9ca 	bl	d998 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    5604:	f00b ff03 	bl	1140e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    5608:	2100      	movs	r1, #0
    560a:	7828      	ldrb	r0, [r5, #0]
    560c:	f006 fb12 	bl	bc34 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    5610:	f7ff ff48 	bl	54a4 <mpsl_fem_device_config_254_apply_get+0xc>
    5614:	2001      	movs	r0, #1
    5616:	7068      	strb	r0, [r5, #1]
    5618:	2000      	movs	r0, #0
    561a:	bd70      	pop	{r4, r5, r6, pc}
    561c:	f06f 0015 	mvn.w	r0, #21
    5620:	bd70      	pop	{r4, r5, r6, pc}
    5622:	f04f 30ff 	mov.w	r0, #4294967295
    5626:	bd70      	pop	{r4, r5, r6, pc}
    5628:	2000005c 	.word	0x2000005c
    562c:	20001208 	.word	0x20001208

00005630 <sdc_init>:
    5630:	b530      	push	{r4, r5, lr}
    5632:	b087      	sub	sp, #28
    5634:	0005      	movs	r5, r0
    5636:	d00c      	beq.n	5652 <sdc_init+0x22>
    5638:	f7ff fdf2 	bl	5220 <mpsl_is_initialized>
    563c:	f04f 34ff 	mov.w	r4, #4294967295
    5640:	b120      	cbz	r0, 564c <sdc_init+0x1c>
    5642:	f7ff fc9d 	bl	4f80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    5646:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    564a:	d905      	bls.n	5658 <sdc_init+0x28>
    564c:	4620      	mov	r0, r4
    564e:	b007      	add	sp, #28
    5650:	bd30      	pop	{r4, r5, pc}
    5652:	f06f 0015 	mvn.w	r0, #21
    5656:	e7fa      	b.n	564e <sdc_init+0x1e>
    5658:	4c15      	ldr	r4, [pc, #84]	; (56b0 <sdc_init+0x80>)
    565a:	4816      	ldr	r0, [pc, #88]	; (56b4 <sdc_init+0x84>)
    565c:	6065      	str	r5, [r4, #4]
    565e:	f000 f9eb 	bl	5a38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    5662:	2000      	movs	r0, #0
    5664:	7060      	strb	r0, [r4, #1]
    5666:	70a0      	strb	r0, [r4, #2]
    5668:	70e0      	strb	r0, [r4, #3]
    566a:	4601      	mov	r1, r0
    566c:	2218      	movs	r2, #24
    566e:	4668      	mov	r0, sp
    5670:	f008 f913 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5674:	2218      	movs	r2, #24
    5676:	4910      	ldr	r1, [pc, #64]	; (56b8 <sdc_init+0x88>)
    5678:	4668      	mov	r0, sp
    567a:	f008 f894 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    567e:	2218      	movs	r2, #24
    5680:	4669      	mov	r1, sp
    5682:	480e      	ldr	r0, [pc, #56]	; (56bc <sdc_init+0x8c>)
    5684:	f008 f88f 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5688:	f3ef 8410 	mrs	r4, PRIMASK
    568c:	b672      	cpsid	i
    568e:	480c      	ldr	r0, [pc, #48]	; (56c0 <sdc_init+0x90>)
    5690:	f06f 010c 	mvn.w	r1, #12
    5694:	f000 fd9e 	bl	61d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    5698:	480a      	ldr	r0, [pc, #40]	; (56c4 <sdc_init+0x94>)
    569a:	f000 fe6b 	bl	6374 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    569e:	b118      	cbz	r0, 56a8 <sdc_init+0x78>
    56a0:	219a      	movs	r1, #154	; 0x9a
    56a2:	2003      	movs	r0, #3
    56a4:	f000 f810 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56a8:	b904      	cbnz	r4, 56ac <sdc_init+0x7c>
    56aa:	b662      	cpsie	i
    56ac:	2000      	movs	r0, #0
    56ae:	e7ce      	b.n	564e <sdc_init+0x1e>
    56b0:	2000005c 	.word	0x2000005c
    56b4:	000054a5 	.word	0x000054a5
    56b8:	000057b4 	.word	0x000057b4
    56bc:	20001208 	.word	0x20001208
    56c0:	4000c000 	.word	0x4000c000
    56c4:	00005845 	.word	0x00005845

000056c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    56c8:	b50e      	push	{r1, r2, r3, lr}
    56ca:	b672      	cpsid	i
    56cc:	4a15      	ldr	r2, [pc, #84]	; (5724 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    56ce:	6855      	ldr	r5, [r2, #4]
    56d0:	b1d5      	cbz	r5, 5708 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    56d2:	2200      	movs	r2, #0
    56d4:	4603      	mov	r3, r0
    56d6:	466e      	mov	r6, sp
    56d8:	240a      	movs	r4, #10
    56da:	e003      	b.n	56e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    56dc:	fbb0 f0f4 	udiv	r0, r0, r4
    56e0:	1c52      	adds	r2, r2, #1
    56e2:	b2d2      	uxtb	r2, r2
    56e4:	2800      	cmp	r0, #0
    56e6:	d1f9      	bne.n	56dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    56e8:	54b0      	strb	r0, [r6, r2]
    56ea:	e009      	b.n	5700 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    56ec:	fbb3 f0f4 	udiv	r0, r3, r4
    56f0:	fb04 3010 	mls	r0, r4, r0, r3
    56f4:	fbb3 f3f4 	udiv	r3, r3, r4
    56f8:	1e52      	subs	r2, r2, #1
    56fa:	b2d2      	uxtb	r2, r2
    56fc:	3030      	adds	r0, #48	; 0x30
    56fe:	54b0      	strb	r0, [r6, r2]
    5700:	2a00      	cmp	r2, #0
    5702:	d1f3      	bne.n	56ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    5704:	4630      	mov	r0, r6
    5706:	47a8      	blx	r5
    5708:	f3bf 8f4f 	dsb	sy
    570c:	4806      	ldr	r0, [pc, #24]	; (5728 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    570e:	6801      	ldr	r1, [r0, #0]
    5710:	4a06      	ldr	r2, [pc, #24]	; (572c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    5712:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    5716:	4311      	orrs	r1, r2
    5718:	6001      	str	r1, [r0, #0]
    571a:	f3bf 8f4f 	dsb	sy
    571e:	bf00      	nop
    5720:	e7fd      	b.n	571e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    5722:	0000      	.short	0x0000
    5724:	2000005c 	.word	0x2000005c
    5728:	e000ed0c 	.word	0xe000ed0c
    572c:	05fa0004 	.word	0x05fa0004

00005730 <sdc_support_adv>:
    5730:	4806      	ldr	r0, [pc, #24]	; (574c <sdc_support_adv+0x1c>)
    5732:	b510      	push	{r4, lr}
    5734:	7881      	ldrb	r1, [r0, #2]
    5736:	7840      	ldrb	r0, [r0, #1]
    5738:	4301      	orrs	r1, r0
    573a:	d002      	beq.n	5742 <sdc_support_adv+0x12>
    573c:	f04f 30ff 	mov.w	r0, #4294967295
    5740:	bd10      	pop	{r4, pc}
    5742:	f006 fa97 	bl	bc74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    5746:	2000      	movs	r0, #0
    5748:	bd10      	pop	{r4, pc}
    574a:	0000      	.short	0x0000
    574c:	2000005c 	.word	0x2000005c

00005750 <sdc_support_dle>:
    5750:	4806      	ldr	r0, [pc, #24]	; (576c <sdc_support_dle+0x1c>)
    5752:	b510      	push	{r4, lr}
    5754:	7881      	ldrb	r1, [r0, #2]
    5756:	7840      	ldrb	r0, [r0, #1]
    5758:	4301      	orrs	r1, r0
    575a:	d002      	beq.n	5762 <sdc_support_dle+0x12>
    575c:	f04f 30ff 	mov.w	r0, #4294967295
    5760:	bd10      	pop	{r4, pc}
    5762:	f006 f83f 	bl	b7e4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    5766:	2000      	movs	r0, #0
    5768:	bd10      	pop	{r4, pc}
    576a:	0000      	.short	0x0000
    576c:	2000005c 	.word	0x2000005c

00005770 <sdc_support_le_2m_phy>:
    5770:	4806      	ldr	r0, [pc, #24]	; (578c <sdc_support_le_2m_phy+0x1c>)
    5772:	b510      	push	{r4, lr}
    5774:	7881      	ldrb	r1, [r0, #2]
    5776:	7840      	ldrb	r0, [r0, #1]
    5778:	4301      	orrs	r1, r0
    577a:	d002      	beq.n	5782 <sdc_support_le_2m_phy+0x12>
    577c:	f04f 30ff 	mov.w	r0, #4294967295
    5780:	bd10      	pop	{r4, pc}
    5782:	f00b fbab 	bl	10edc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    5786:	2000      	movs	r0, #0
    5788:	bd10      	pop	{r4, pc}
    578a:	0000      	.short	0x0000
    578c:	2000005c 	.word	0x2000005c

00005790 <sdc_support_slave>:
    5790:	4806      	ldr	r0, [pc, #24]	; (57ac <sdc_support_slave+0x1c>)
    5792:	b510      	push	{r4, lr}
    5794:	7881      	ldrb	r1, [r0, #2]
    5796:	7840      	ldrb	r0, [r0, #1]
    5798:	4301      	orrs	r1, r0
    579a:	d002      	beq.n	57a2 <sdc_support_slave+0x12>
    579c:	f04f 30ff 	mov.w	r0, #4294967295
    57a0:	bd10      	pop	{r4, pc}
    57a2:	f006 fa79 	bl	bc98 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    57a6:	2000      	movs	r0, #0
    57a8:	bd10      	pop	{r4, pc}
    57aa:	0000      	.short	0x0000
    57ac:	2000005c 	.word	0x2000005c
    57b0:	00000001 	.word	0x00000001
    57b4:	00010101 	.word	0x00010101
    57b8:	031b1b00 	.word	0x031b1b00
    57bc:	00000002 	.word	0x00000002
    57c0:	00001d4c 	.word	0x00001d4c
    57c4:	001f0003 	.word	0x001f0003
    57c8:	00000000 	.word	0x00000000
    57cc:	66c5e70e 	.word	0x66c5e70e
    57d0:	ac3c1867 	.word	0xac3c1867
    57d4:	81ccd2b3 	.word	0x81ccd2b3
    57d8:	c0f1dca3 	.word	0xc0f1dca3
    57dc:	220236c0 	.word	0x220236c0

000057e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    57e0:	4a05      	ldr	r2, [pc, #20]	; (57f8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    57e2:	b510      	push	{r4, lr}
    57e4:	6852      	ldr	r2, [r2, #4]
    57e6:	b112      	cbz	r2, 57ee <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    57e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    57ec:	4710      	bx	r2
    57ee:	2183      	movs	r1, #131	; 0x83
    57f0:	2004      	movs	r0, #4
    57f2:	f7ff ff69 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f6:	0000      	.short	0x0000
    57f8:	20001220 	.word	0x20001220

000057fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    57fc:	4a05      	ldr	r2, [pc, #20]	; (5814 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    57fe:	b510      	push	{r4, lr}
    5800:	6892      	ldr	r2, [r2, #8]
    5802:	b112      	cbz	r2, 580a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    5804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5808:	4710      	bx	r2
    580a:	2189      	movs	r1, #137	; 0x89
    580c:	2004      	movs	r0, #4
    580e:	f7ff ff5b 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5812:	0000      	.short	0x0000
    5814:	20001220 	.word	0x20001220

00005818 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    5818:	4805      	ldr	r0, [pc, #20]	; (5830 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    581a:	6801      	ldr	r1, [r0, #0]
    581c:	b129      	cbz	r1, 582a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    581e:	6841      	ldr	r1, [r0, #4]
    5820:	b119      	cbz	r1, 582a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5822:	6880      	ldr	r0, [r0, #8]
    5824:	b108      	cbz	r0, 582a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5826:	2001      	movs	r0, #1
    5828:	4770      	bx	lr
    582a:	2000      	movs	r0, #0
    582c:	4770      	bx	lr
    582e:	0000      	.short	0x0000
    5830:	20001220 	.word	0x20001220

00005834 <sdc_rand_source_register>:
    5834:	4902      	ldr	r1, [pc, #8]	; (5840 <sdc_rand_source_register+0xc>)
    5836:	c80d      	ldmia	r0, {r0, r2, r3}
    5838:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    583c:	2000      	movs	r0, #0
    583e:	4770      	bx	lr
    5840:	20001220 	.word	0x20001220

00005844 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    5844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5846:	4c12      	ldr	r4, [pc, #72]	; (5890 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    5848:	2600      	movs	r6, #0
    584a:	6825      	ldr	r5, [r4, #0]
    584c:	e011      	b.n	5872 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    584e:	9800      	ldr	r0, [sp, #0]
    5850:	2802      	cmp	r0, #2
    5852:	d002      	beq.n	585a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    5854:	2803      	cmp	r0, #3
    5856:	d10c      	bne.n	5872 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5858:	e006      	b.n	5868 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    585a:	6820      	ldr	r0, [r4, #0]
    585c:	b110      	cbz	r0, 5864 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    585e:	2000      	movs	r0, #0
    5860:	6026      	str	r6, [r4, #0]
    5862:	e005      	b.n	5870 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    5864:	2128      	movs	r1, #40	; 0x28
    5866:	e00c      	b.n	5882 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5868:	6820      	ldr	r0, [r4, #0]
    586a:	b168      	cbz	r0, 5888 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    586c:	2001      	movs	r0, #1
    586e:	6026      	str	r6, [r4, #0]
    5870:	47a8      	blx	r5
    5872:	4668      	mov	r0, sp
    5874:	f000 fd50 	bl	6318 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    5878:	2800      	cmp	r0, #0
    587a:	d0e8      	beq.n	584e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    587c:	2805      	cmp	r0, #5
    587e:	d005      	beq.n	588c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    5880:	2135      	movs	r1, #53	; 0x35
    5882:	2004      	movs	r0, #4
    5884:	f7ff ff20 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5888:	212d      	movs	r1, #45	; 0x2d
    588a:	e7fa      	b.n	5882 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    588e:	0000      	.short	0x0000
    5890:	20000064 	.word	0x20000064
    5894:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5896:	4c1f      	ldr	r4, [pc, #124]	; (5914 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    5898:	4605      	mov	r5, r0
    589a:	7820      	ldrb	r0, [r4, #0]
    589c:	b140      	cbz	r0, 58b0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    589e:	78a2      	ldrb	r2, [r4, #2]
    58a0:	1c61      	adds	r1, r4, #1
    58a2:	4628      	mov	r0, r5
    58a4:	1c92      	adds	r2, r2, #2
    58a6:	f007 ff7e 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    58aa:	2000      	movs	r0, #0
    58ac:	7020      	strb	r0, [r4, #0]
    58ae:	e021      	b.n	58f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    58b0:	4819      	ldr	r0, [pc, #100]	; (5918 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    58b2:	f002 f837 	bl	7924 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    58b6:	2800      	cmp	r0, #0
    58b8:	d01d      	beq.n	58f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    58ba:	4c17      	ldr	r4, [pc, #92]	; (5918 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    58bc:	7820      	ldrb	r0, [r4, #0]
    58be:	2811      	cmp	r0, #17
    58c0:	d104      	bne.n	58cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    58c2:	210a      	movs	r1, #10
    58c4:	203e      	movs	r0, #62	; 0x3e
    58c6:	f008 f8ef 	bl	daa8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    58ca:	b118      	cbz	r0, 58d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    58cc:	7820      	ldrb	r0, [r4, #0]
    58ce:	2808      	cmp	r0, #8
    58d0:	d005      	beq.n	58de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    58d2:	e009      	b.n	58e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    58d4:	4910      	ldr	r1, [pc, #64]	; (5918 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    58d6:	4628      	mov	r0, r5
    58d8:	f008 faee 	bl	deb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    58dc:	e00a      	b.n	58f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    58de:	2105      	movs	r1, #5
    58e0:	203e      	movs	r0, #62	; 0x3e
    58e2:	f008 f8e1 	bl	daa8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    58e6:	b138      	cbz	r0, 58f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    58e8:	490b      	ldr	r1, [pc, #44]	; (5918 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    58ea:	4628      	mov	r0, r5
    58ec:	f008 f93a 	bl	db64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    58f0:	2800      	cmp	r0, #0
    58f2:	d000      	beq.n	58f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    58f4:	2001      	movs	r0, #1
    58f6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58f8:	88a0      	ldrh	r0, [r4, #4]
    58fa:	f8ad 0000 	strh.w	r0, [sp]
    58fe:	a901      	add	r1, sp, #4
    5900:	4668      	mov	r0, sp
    5902:	f008 fbf7 	bl	e0f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    5906:	2800      	cmp	r0, #0
    5908:	d0f5      	beq.n	58f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    590a:	219b      	movs	r1, #155	; 0x9b
    590c:	2008      	movs	r0, #8
    590e:	f7ff fedb 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5912:	0000      	.short	0x0000
    5914:	200013be 	.word	0x200013be
    5918:	200012bc 	.word	0x200012bc
    591c:	b570      	push	{r4, r5, r6, lr}
    591e:	780a      	ldrb	r2, [r1, #0]
    5920:	7082      	strb	r2, [r0, #2]
    5922:	b33a      	cbz	r2, 5974 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5924:	2a01      	cmp	r2, #1
    5926:	d825      	bhi.n	5974 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5928:	2313      	movs	r3, #19
    592a:	7003      	strb	r3, [r0, #0]
    592c:	2300      	movs	r3, #0
    592e:	e00a      	b.n	5946 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    5930:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5934:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    5938:	78a6      	ldrb	r6, [r4, #2]
    593a:	70ee      	strb	r6, [r5, #3]
    593c:	8864      	ldrh	r4, [r4, #2]
    593e:	0a24      	lsrs	r4, r4, #8
    5940:	1c5b      	adds	r3, r3, #1
    5942:	712c      	strb	r4, [r5, #4]
    5944:	b2db      	uxtb	r3, r3
    5946:	4293      	cmp	r3, r2
    5948:	d3f2      	bcc.n	5930 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    594a:	2300      	movs	r3, #0
    594c:	e00b      	b.n	5966 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    594e:	bf00      	nop
    5950:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5954:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5958:	792e      	ldrb	r6, [r5, #4]
    595a:	7166      	strb	r6, [r4, #5]
    595c:	88ad      	ldrh	r5, [r5, #4]
    595e:	0a2d      	lsrs	r5, r5, #8
    5960:	1c5b      	adds	r3, r3, #1
    5962:	71a5      	strb	r5, [r4, #6]
    5964:	b2db      	uxtb	r3, r3
    5966:	4293      	cmp	r3, r2
    5968:	d3f2      	bcc.n	5950 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    596a:	2101      	movs	r1, #1
    596c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    5970:	b2c0      	uxtb	r0, r0
    5972:	bd70      	pop	{r4, r5, r6, pc}
    5974:	2000      	movs	r0, #0
    5976:	bd70      	pop	{r4, r5, r6, pc}

00005978 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5978:	2101      	movs	r1, #1
    597a:	4a0c      	ldr	r2, [pc, #48]	; (59ac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    597c:	2840      	cmp	r0, #64	; 0x40
    597e:	d20c      	bcs.n	599a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    5980:	2820      	cmp	r0, #32
    5982:	d803      	bhi.n	598c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    5984:	1e40      	subs	r0, r0, #1
    5986:	4081      	lsls	r1, r0
    5988:	6810      	ldr	r0, [r2, #0]
    598a:	e002      	b.n	5992 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    598c:	3821      	subs	r0, #33	; 0x21
    598e:	4081      	lsls	r1, r0
    5990:	6850      	ldr	r0, [r2, #4]
    5992:	4201      	tst	r1, r0
    5994:	d107      	bne.n	59a6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    5996:	2000      	movs	r0, #0
    5998:	4770      	bx	lr
    599a:	28ff      	cmp	r0, #255	; 0xff
    599c:	d003      	beq.n	59a6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    599e:	3840      	subs	r0, #64	; 0x40
    59a0:	4081      	lsls	r1, r0
    59a2:	6890      	ldr	r0, [r2, #8]
    59a4:	e7f5      	b.n	5992 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    59a6:	2001      	movs	r0, #1
    59a8:	4770      	bx	lr
    59aa:	0000      	.short	0x0000
    59ac:	20000068 	.word	0x20000068

000059b0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    59b0:	2101      	movs	r1, #1
    59b2:	1e40      	subs	r0, r0, #1
    59b4:	4081      	lsls	r1, r0
    59b6:	4804      	ldr	r0, [pc, #16]	; (59c8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    59b8:	68c0      	ldr	r0, [r0, #12]
    59ba:	4201      	tst	r1, r0
    59bc:	d001      	beq.n	59c2 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    59be:	2001      	movs	r0, #1
    59c0:	4770      	bx	lr
    59c2:	2000      	movs	r0, #0
    59c4:	4770      	bx	lr
    59c6:	0000      	.short	0x0000
    59c8:	20000068 	.word	0x20000068

000059cc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    59cc:	4901      	ldr	r1, [pc, #4]	; (59d4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    59ce:	6800      	ldr	r0, [r0, #0]
    59d0:	60c8      	str	r0, [r1, #12]
    59d2:	4770      	bx	lr
    59d4:	20000068 	.word	0x20000068

000059d8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    59d8:	4904      	ldr	r1, [pc, #16]	; (59ec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    59da:	6802      	ldr	r2, [r0, #0]
    59dc:	6840      	ldr	r0, [r0, #4]
    59de:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    59e2:	600a      	str	r2, [r1, #0]
    59e4:	4a02      	ldr	r2, [pc, #8]	; (59f0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    59e6:	4310      	orrs	r0, r2
    59e8:	6048      	str	r0, [r1, #4]
    59ea:	4770      	bx	lr
    59ec:	20000068 	.word	0x20000068
    59f0:	024007f8 	.word	0x024007f8

000059f4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    59f4:	4901      	ldr	r1, [pc, #4]	; (59fc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    59f6:	6800      	ldr	r0, [r0, #0]
    59f8:	6088      	str	r0, [r1, #8]
    59fa:	4770      	bx	lr
    59fc:	20000068 	.word	0x20000068

00005a00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5a00:	4805      	ldr	r0, [pc, #20]	; (5a18 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    5a02:	f04f 31ff 	mov.w	r1, #4294967295
    5a06:	6001      	str	r1, [r0, #0]
    5a08:	0cc9      	lsrs	r1, r1, #19
    5a0a:	6041      	str	r1, [r0, #4]
    5a0c:	2100      	movs	r1, #0
    5a0e:	6081      	str	r1, [r0, #8]
    5a10:	211f      	movs	r1, #31
    5a12:	60c1      	str	r1, [r0, #12]
    5a14:	4770      	bx	lr
    5a16:	0000      	.short	0x0000
    5a18:	20000068 	.word	0x20000068

00005a1c <sdc_hci_cmd_cb_reset>:
    5a1c:	b510      	push	{r4, lr}
    5a1e:	f7ff ffef 	bl	5a00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5a22:	f00b f9cf 	bl	10dc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    5a26:	4604      	mov	r4, r0
    5a28:	4802      	ldr	r0, [pc, #8]	; (5a34 <sdc_hci_cmd_cb_reset+0x18>)
    5a2a:	6800      	ldr	r0, [r0, #0]
    5a2c:	b100      	cbz	r0, 5a30 <sdc_hci_cmd_cb_reset+0x14>
    5a2e:	4780      	blx	r0
    5a30:	4620      	mov	r0, r4
    5a32:	bd10      	pop	{r4, pc}
    5a34:	20000078 	.word	0x20000078

00005a38 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5a38:	4901      	ldr	r1, [pc, #4]	; (5a40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    5a3a:	6008      	str	r0, [r1, #0]
    5a3c:	4770      	bx	lr
    5a3e:	0000      	.short	0x0000
    5a40:	20000078 	.word	0x20000078

00005a44 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5a44:	2102      	movs	r1, #2
    5a46:	8001      	strh	r1, [r0, #0]
    5a48:	8041      	strh	r1, [r0, #2]
    5a4a:	2100      	movs	r1, #0
    5a4c:	7101      	strb	r1, [r0, #4]
    5a4e:	210e      	movs	r1, #14
    5a50:	7141      	strb	r1, [r0, #5]
    5a52:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    5a56:	80c1      	strh	r1, [r0, #6]
    5a58:	4901      	ldr	r1, [pc, #4]	; (5a60 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5a5a:	6081      	str	r1, [r0, #8]
    5a5c:	2000      	movs	r0, #0
    5a5e:	4770      	bx	lr
    5a60:	3c186766 	.word	0x3c186766

00005a64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5a64:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5a66:	4604      	mov	r4, r0
    5a68:	4669      	mov	r1, sp
    5a6a:	f008 fea1 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    5a6e:	b170      	cbz	r0, 5a8e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5a70:	f240 215a 	movw	r1, #602	; 0x25a
    5a74:	e008      	b.n	5a88 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5a76:	bf00      	nop
    5a78:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5a7c:	4621      	mov	r1, r4
    5a7e:	f000 f8ab 	bl	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5a82:	b120      	cbz	r0, 5a8e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5a84:	f240 215f 	movw	r1, #607	; 0x25f
    5a88:	2017      	movs	r0, #23
    5a8a:	f7ff fe1d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a8e:	4668      	mov	r0, sp
    5a90:	f000 f852 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5a94:	2800      	cmp	r0, #0
    5a96:	d0ef      	beq.n	5a78 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5a98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5a9c:	b510      	push	{r4, lr}
    5a9e:	2802      	cmp	r0, #2
    5aa0:	d304      	bcc.n	5aac <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5aa2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    5aa6:	2017      	movs	r0, #23
    5aa8:	f7ff fe0e 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5aac:	4901      	ldr	r1, [pc, #4]	; (5ab4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5aae:	5c08      	ldrb	r0, [r1, r0]
    5ab0:	bd10      	pop	{r4, pc}
    5ab2:	0000      	.short	0x0000
    5ab4:	2000122c 	.word	0x2000122c

00005ab8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aba:	0005      	movs	r5, r0
    5abc:	9500      	str	r5, [sp, #0]
    5abe:	d010      	beq.n	5ae2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5ac0:	2600      	movs	r6, #0
    5ac2:	7808      	ldrb	r0, [r1, #0]
    5ac4:	7849      	ldrb	r1, [r1, #1]
    5ac6:	4604      	mov	r4, r0
    5ac8:	42a1      	cmp	r1, r4
    5aca:	d900      	bls.n	5ace <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5acc:	460c      	mov	r4, r1
    5ace:	1cea      	adds	r2, r5, #3
    5ad0:	f022 0203 	bic.w	r2, r2, #3
    5ad4:	42aa      	cmp	r2, r5
    5ad6:	d006      	beq.n	5ae6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5ad8:	f240 1179 	movw	r1, #377	; 0x179
    5adc:	2017      	movs	r0, #23
    5ade:	f7ff fdf3 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ae2:	2601      	movs	r6, #1
    5ae4:	e7ed      	b.n	5ac2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    5ae6:	4f13      	ldr	r7, [pc, #76]	; (5b34 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    5ae8:	7038      	strb	r0, [r7, #0]
    5aea:	7079      	strb	r1, [r7, #1]
    5aec:	4631      	mov	r1, r6
    5aee:	4668      	mov	r0, sp
    5af0:	f000 f8ee 	bl	5cd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5af4:	2100      	movs	r1, #0
    5af6:	460b      	mov	r3, r1
    5af8:	9800      	ldr	r0, [sp, #0]
    5afa:	1cc0      	adds	r0, r0, #3
    5afc:	f020 0003 	bic.w	r0, r0, #3
    5b00:	9000      	str	r0, [sp, #0]
    5b02:	b96e      	cbnz	r6, 5b20 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5b04:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    5b08:	60d0      	str	r0, [r2, #12]
    5b0a:	2000      	movs	r0, #0
    5b0c:	e006      	b.n	5b1c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5b0e:	bf00      	nop
    5b10:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5b14:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    5b18:	1c40      	adds	r0, r0, #1
    5b1a:	b2c0      	uxtb	r0, r0
    5b1c:	42a0      	cmp	r0, r4
    5b1e:	d3f7      	bcc.n	5b10 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5b20:	9800      	ldr	r0, [sp, #0]
    5b22:	1c49      	adds	r1, r1, #1
    5b24:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5b28:	b2c9      	uxtb	r1, r1
    5b2a:	9000      	str	r0, [sp, #0]
    5b2c:	2902      	cmp	r1, #2
    5b2e:	d3e3      	bcc.n	5af8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    5b30:	1b40      	subs	r0, r0, r5
    5b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b34:	2000122c 	.word	0x2000122c

00005b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5b38:	b570      	push	{r4, r5, r6, lr}
    5b3a:	4604      	mov	r4, r0
    5b3c:	f008 ffb1 	bl	eaa2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5b40:	b108      	cbz	r0, 5b46 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5b42:	2010      	movs	r0, #16
    5b44:	bd70      	pop	{r4, r5, r6, pc}
    5b46:	7825      	ldrb	r5, [r4, #0]
    5b48:	f000 f8fe 	bl	5d48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5b4c:	4602      	mov	r2, r0
    5b4e:	480c      	ldr	r0, [pc, #48]	; (5b80 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5b50:	8861      	ldrh	r1, [r4, #2]
    5b52:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5b56:	e00e      	b.n	5b76 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5b58:	68c3      	ldr	r3, [r0, #12]
    5b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5b5e:	b143      	cbz	r3, 5b72 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5b60:	1c4a      	adds	r2, r1, #1
    5b62:	8062      	strh	r2, [r4, #2]
    5b64:	80a1      	strh	r1, [r4, #4]
    5b66:	68c0      	ldr	r0, [r0, #12]
    5b68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5b6c:	60a0      	str	r0, [r4, #8]
    5b6e:	2000      	movs	r0, #0
    5b70:	bd70      	pop	{r4, r5, r6, pc}
    5b72:	1c49      	adds	r1, r1, #1
    5b74:	b289      	uxth	r1, r1
    5b76:	4291      	cmp	r1, r2
    5b78:	d3ee      	bcc.n	5b58 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5b7a:	8061      	strh	r1, [r4, #2]
    5b7c:	2005      	movs	r0, #5
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
    5b80:	2000122c 	.word	0x2000122c

00005b84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b88:	b121      	cbz	r1, 5b94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5b8a:	2901      	cmp	r1, #1
    5b8c:	d002      	beq.n	5b94 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5b8e:	2000      	movs	r0, #0
    5b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b94:	4c0f      	ldr	r4, [pc, #60]	; (5bd4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5b96:	2700      	movs	r7, #0
    5b98:	463b      	mov	r3, r7
    5b9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5b9e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5ba2:	f814 c001 	ldrb.w	ip, [r4, r1]
    5ba6:	e00a      	b.n	5bbe <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5ba8:	19dc      	adds	r4, r3, r7
    5baa:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5bae:	b2a4      	uxth	r4, r4
    5bb0:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5bb4:	f1be 0f00 	cmp.w	lr, #0
    5bb8:	d004      	beq.n	5bc4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5bba:	1c5b      	adds	r3, r3, #1
    5bbc:	b29b      	uxth	r3, r3
    5bbe:	459c      	cmp	ip, r3
    5bc0:	d8f2      	bhi.n	5ba8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5bc2:	4634      	mov	r4, r6
    5bc4:	8004      	strh	r4, [r0, #0]
    5bc6:	4620      	mov	r0, r4
    5bc8:	42b4      	cmp	r4, r6
    5bca:	d0e0      	beq.n	5b8e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5bd0:	f000 b834 	b.w	5c3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5bd4:	2000122c 	.word	0x2000122c

00005bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bdc:	4606      	mov	r6, r0
    5bde:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    5be2:	460c      	mov	r4, r1
    5be4:	f243 0702 	movw	r7, #12290	; 0x3002
    5be8:	38ff      	subs	r0, #255	; 0xff
    5bea:	d020      	beq.n	5c2e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5bec:	2c02      	cmp	r4, #2
    5bee:	d302      	bcc.n	5bf6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    5bf0:	2007      	movs	r0, #7
    5bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bf6:	4630      	mov	r0, r6
    5bf8:	f000 f85a 	bl	5cb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5bfc:	0005      	movs	r5, r0
    5bfe:	d016      	beq.n	5c2e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    5c00:	480c      	ldr	r0, [pc, #48]	; (5c34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    5c02:	4629      	mov	r1, r5
    5c04:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5c08:	4630      	mov	r0, r6
    5c0a:	4790      	blx	r2
    5c0c:	480a      	ldr	r0, [pc, #40]	; (5c38 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    5c0e:	2100      	movs	r1, #0
    5c10:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5c14:	68f8      	ldr	r0, [r7, #12]
    5c16:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5c1a:	4620      	mov	r0, r4
    5c1c:	f000 f88a 	bl	5d34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5c20:	4602      	mov	r2, r0
    5c22:	4629      	mov	r1, r5
    5c24:	6878      	ldr	r0, [r7, #4]
    5c26:	f008 fda2 	bl	e76e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5c2a:	2000      	movs	r0, #0
    5c2c:	e7e1      	b.n	5bf2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5c2e:	4638      	mov	r0, r7
    5c30:	e7df      	b.n	5bf2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5c32:	0000      	.short	0x0000
    5c34:	00005d68 	.word	0x00005d68
    5c38:	2000122c 	.word	0x2000122c
    5c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c40:	4690      	mov	r8, r2
    5c42:	460d      	mov	r5, r1
    5c44:	4607      	mov	r7, r0
    5c46:	f008 fdc4 	bl	e7d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5c4a:	b148      	cbz	r0, 5c60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5c4c:	4816      	ldr	r0, [pc, #88]	; (5ca8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5c4e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5c52:	68f0      	ldr	r0, [r6, #12]
    5c54:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5c58:	b128      	cbz	r0, 5c66 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5c5a:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5c5e:	e015      	b.n	5c8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5c60:	f240 1139 	movw	r1, #313	; 0x139
    5c64:	e012      	b.n	5c8c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5c66:	6870      	ldr	r0, [r6, #4]
    5c68:	2800      	cmp	r0, #0
    5c6a:	d01a      	beq.n	5ca2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5c6c:	4628      	mov	r0, r5
    5c6e:	f000 f861 	bl	5d34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5c72:	4601      	mov	r1, r0
    5c74:	6870      	ldr	r0, [r6, #4]
    5c76:	f008 fd2c 	bl	e6d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5c7a:	0004      	movs	r4, r0
    5c7c:	d010      	beq.n	5ca0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5c7e:	68f0      	ldr	r0, [r6, #12]
    5c80:	2d02      	cmp	r5, #2
    5c82:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5c86:	d304      	bcc.n	5c92 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5c88:	f240 1145 	movw	r1, #325	; 0x145
    5c8c:	2017      	movs	r0, #23
    5c8e:	f7ff fd1b 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c92:	4806      	ldr	r0, [pc, #24]	; (5cac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5c94:	4642      	mov	r2, r8
    5c96:	4621      	mov	r1, r4
    5c98:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5c9c:	4638      	mov	r0, r7
    5c9e:	4798      	blx	r3
    5ca0:	4620      	mov	r0, r4
    5ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ca6:	0000      	.short	0x0000
    5ca8:	2000122c 	.word	0x2000122c
    5cac:	00005d60 	.word	0x00005d60
    5cb0:	b570      	push	{r4, r5, r6, lr}
    5cb2:	460c      	mov	r4, r1
    5cb4:	4605      	mov	r5, r0
    5cb6:	f008 fd8c 	bl	e7d2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5cba:	2800      	cmp	r0, #0
    5cbc:	d005      	beq.n	5cca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5cbe:	4803      	ldr	r0, [pc, #12]	; (5ccc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5cc0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5cc4:	68c0      	ldr	r0, [r0, #12]
    5cc6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5cca:	bd70      	pop	{r4, r5, r6, pc}
    5ccc:	2000122c 	.word	0x2000122c
    5cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cd4:	4e16      	ldr	r6, [pc, #88]	; (5d30 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5cd6:	4688      	mov	r8, r1
    5cd8:	4605      	mov	r5, r0
    5cda:	2400      	movs	r4, #0
    5cdc:	6828      	ldr	r0, [r5, #0]
    5cde:	1cc0      	adds	r0, r0, #3
    5ce0:	f020 0003 	bic.w	r0, r0, #3
    5ce4:	6028      	str	r0, [r5, #0]
    5ce6:	4620      	mov	r0, r4
    5ce8:	f000 f824 	bl	5d34 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5cec:	5d31      	ldrb	r1, [r6, r4]
    5cee:	4348      	muls	r0, r1
    5cf0:	f1b8 0f00 	cmp.w	r8, #0
    5cf4:	d001      	beq.n	5cfa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5cf6:	2200      	movs	r2, #0
    5cf8:	e000      	b.n	5cfc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5cfa:	682a      	ldr	r2, [r5, #0]
    5cfc:	4601      	mov	r1, r0
    5cfe:	9200      	str	r2, [sp, #0]
    5d00:	b132      	cbz	r2, 5d10 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5d02:	2700      	movs	r7, #0
    5d04:	ea4f 000d 	mov.w	r0, sp
    5d08:	f008 fd10 	bl	e72c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5d0c:	b11f      	cbz	r7, 5d16 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5d0e:	e006      	b.n	5d1e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5d10:	2701      	movs	r7, #1
    5d12:	2000      	movs	r0, #0
    5d14:	e7f8      	b.n	5d08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5d16:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5d1a:	9a00      	ldr	r2, [sp, #0]
    5d1c:	604a      	str	r2, [r1, #4]
    5d1e:	6829      	ldr	r1, [r5, #0]
    5d20:	1c64      	adds	r4, r4, #1
    5d22:	4408      	add	r0, r1
    5d24:	b2e4      	uxtb	r4, r4
    5d26:	6028      	str	r0, [r5, #0]
    5d28:	2c02      	cmp	r4, #2
    5d2a:	d3d7      	bcc.n	5cdc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d30:	2000122c 	.word	0x2000122c
    5d34:	4903      	ldr	r1, [pc, #12]	; (5d44 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5d36:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5d3a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5d3e:	1cc0      	adds	r0, r0, #3
    5d40:	4008      	ands	r0, r1
    5d42:	4770      	bx	lr
    5d44:	00005d5c 	.word	0x00005d5c
    5d48:	4903      	ldr	r1, [pc, #12]	; (5d58 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5d4a:	7808      	ldrb	r0, [r1, #0]
    5d4c:	7849      	ldrb	r1, [r1, #1]
    5d4e:	4288      	cmp	r0, r1
    5d50:	d200      	bcs.n	5d54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5d52:	4608      	mov	r0, r1
    5d54:	4770      	bx	lr
    5d56:	0000      	.short	0x0000
    5d58:	2000122c 	.word	0x2000122c
    5d5c:	00d40218 	.word	0x00d40218
    5d60:	0000e7e7 	.word	0x0000e7e7
    5d64:	0000e7e7 	.word	0x0000e7e7
    5d68:	000103a7 	.word	0x000103a7
    5d6c:	0000f795 	.word	0x0000f795

00005d70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5d70:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d74:	4c26      	ldr	r4, [pc, #152]	; (5e10 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    5d76:	4680      	mov	r8, r0
    5d78:	b081      	sub	sp, #4
    5d7a:	6820      	ldr	r0, [r4, #0]
    5d7c:	469a      	mov	sl, r3
    5d7e:	4693      	mov	fp, r2
    5d80:	b158      	cbz	r0, 5d9a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5d82:	7a02      	ldrb	r2, [r0, #8]
    5d84:	4542      	cmp	r2, r8
    5d86:	d903      	bls.n	5d90 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5d88:	6841      	ldr	r1, [r0, #4]
    5d8a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    5d8e:	b140      	cbz	r0, 5da2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5d90:	f243 0002 	movw	r0, #12290	; 0x3002
    5d94:	b005      	add	sp, #20
    5d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d9a:	21a5      	movs	r1, #165	; 0xa5
    5d9c:	2018      	movs	r0, #24
    5d9e:	f7ff fc93 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5da2:	4619      	mov	r1, r3
    5da4:	9802      	ldr	r0, [sp, #8]
    5da6:	f008 fd36 	bl	e816 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5daa:	b286      	uxth	r6, r0
    5dac:	4658      	mov	r0, fp
    5dae:	990e      	ldr	r1, [sp, #56]	; 0x38
    5db0:	f008 fd28 	bl	e804 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5db4:	b285      	uxth	r5, r0
    5db6:	1970      	adds	r0, r6, r5
    5db8:	1d00      	adds	r0, r0, #4
    5dba:	b287      	uxth	r7, r0
    5dbc:	6820      	ldr	r0, [r4, #0]
    5dbe:	46a1      	mov	r9, r4
    5dc0:	4639      	mov	r1, r7
    5dc2:	6800      	ldr	r0, [r0, #0]
    5dc4:	f008 fc85 	bl	e6d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5dc8:	0004      	movs	r4, r0
    5dca:	d01f      	beq.n	5e0c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5dcc:	8067      	strh	r7, [r4, #2]
    5dce:	8025      	strh	r5, [r4, #0]
    5dd0:	4629      	mov	r1, r5
    5dd2:	1d20      	adds	r0, r4, #4
    5dd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5dd6:	4607      	mov	r7, r0
    5dd8:	465a      	mov	r2, fp
    5dda:	2301      	movs	r3, #1
    5ddc:	9500      	str	r5, [sp, #0]
    5dde:	f008 fbd8 	bl	e592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5de2:	8820      	ldrh	r0, [r4, #0]
    5de4:	4631      	mov	r1, r6
    5de6:	4438      	add	r0, r7
    5de8:	2301      	movs	r3, #1
    5dea:	9a02      	ldr	r2, [sp, #8]
    5dec:	f8cd a000 	str.w	sl, [sp]
    5df0:	f008 fbcf 	bl	e592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5df4:	8820      	ldrh	r0, [r4, #0]
    5df6:	19c1      	adds	r1, r0, r7
    5df8:	4638      	mov	r0, r7
    5dfa:	f008 fbfb 	bl	e5f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5dfe:	f8d9 0000 	ldr.w	r0, [r9]
    5e02:	6841      	ldr	r1, [r0, #4]
    5e04:	2000      	movs	r0, #0
    5e06:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5e0a:	e7c3      	b.n	5d94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5e0c:	2004      	movs	r0, #4
    5e0e:	e7c1      	b.n	5d94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5e10:	2000007c 	.word	0x2000007c

00005e14 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5e14:	b570      	push	{r4, r5, r6, lr}
    5e16:	4c14      	ldr	r4, [pc, #80]	; (5e68 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5e18:	6823      	ldr	r3, [r4, #0]
    5e1a:	b18b      	cbz	r3, 5e40 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5e1c:	7a19      	ldrb	r1, [r3, #8]
    5e1e:	4281      	cmp	r1, r0
    5e20:	d912      	bls.n	5e48 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5e22:	685a      	ldr	r2, [r3, #4]
    5e24:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5e28:	b171      	cbz	r1, 5e48 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5e2a:	2500      	movs	r5, #0
    5e2c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5e30:	884a      	ldrh	r2, [r1, #2]
    5e32:	6818      	ldr	r0, [r3, #0]
    5e34:	f008 fc9b 	bl	e76e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5e38:	6821      	ldr	r1, [r4, #0]
    5e3a:	2000      	movs	r0, #0
    5e3c:	7a0a      	ldrb	r2, [r1, #8]
    5e3e:	e00c      	b.n	5e5a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5e40:	21c8      	movs	r1, #200	; 0xc8
    5e42:	2018      	movs	r0, #24
    5e44:	f7ff fc40 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e48:	f243 0002 	movw	r0, #12290	; 0x3002
    5e4c:	bd70      	pop	{r4, r5, r6, pc}
    5e4e:	684b      	ldr	r3, [r1, #4]
    5e50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e54:	b933      	cbnz	r3, 5e64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5e56:	1c40      	adds	r0, r0, #1
    5e58:	b2c0      	uxtb	r0, r0
    5e5a:	4282      	cmp	r2, r0
    5e5c:	d8f7      	bhi.n	5e4e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5e5e:	6808      	ldr	r0, [r1, #0]
    5e60:	f008 fc7a 	bl	e758 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5e64:	2000      	movs	r0, #0
    5e66:	bd70      	pop	{r4, r5, r6, pc}
    5e68:	2000007c 	.word	0x2000007c

00005e6c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e70:	460d      	mov	r5, r1
    5e72:	0004      	movs	r4, r0
    5e74:	4690      	mov	r8, r2
    5e76:	f04f 0600 	mov.w	r6, #0
    5e7a:	d009      	beq.n	5e90 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5e7c:	2700      	movs	r7, #0
    5e7e:	1ce0      	adds	r0, r4, #3
    5e80:	f020 0003 	bic.w	r0, r0, #3
    5e84:	42a0      	cmp	r0, r4
    5e86:	d005      	beq.n	5e94 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5e88:	2186      	movs	r1, #134	; 0x86
    5e8a:	2018      	movs	r0, #24
    5e8c:	f7ff fc1c 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e90:	2701      	movs	r7, #1
    5e92:	e7f4      	b.n	5e7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5e94:	b1cd      	cbz	r5, 5eca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5e96:	4611      	mov	r1, r2
    5e98:	2000      	movs	r0, #0
    5e9a:	f008 fc47 	bl	e72c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5e9e:	300c      	adds	r0, #12
    5ea0:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5ea4:	b98f      	cbnz	r7, 5eca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5ea6:	4f0a      	ldr	r7, [pc, #40]	; (5ed0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5ea8:	f104 000c 	add.w	r0, r4, #12
    5eac:	00aa      	lsls	r2, r5, #2
    5eae:	603c      	str	r4, [r7, #0]
    5eb0:	7225      	strb	r5, [r4, #8]
    5eb2:	6060      	str	r0, [r4, #4]
    5eb4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5eb8:	6020      	str	r0, [r4, #0]
    5eba:	2100      	movs	r1, #0
    5ebc:	6860      	ldr	r0, [r4, #4]
    5ebe:	f007 fcec 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5ec2:	4641      	mov	r1, r8
    5ec4:	6838      	ldr	r0, [r7, #0]
    5ec6:	f008 fc31 	bl	e72c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5eca:	4630      	mov	r0, r6
    5ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ed0:	2000007c 	.word	0x2000007c

00005ed4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5ed4:	b570      	push	{r4, r5, r6, lr}
    5ed6:	4d08      	ldr	r5, [pc, #32]	; (5ef8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5ed8:	6828      	ldr	r0, [r5, #0]
    5eda:	2800      	cmp	r0, #0
    5edc:	d00a      	beq.n	5ef4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5ede:	2400      	movs	r4, #0
    5ee0:	e004      	b.n	5eec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5ee2:	4620      	mov	r0, r4
    5ee4:	f7ff ff96 	bl	5e14 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5ee8:	1c64      	adds	r4, r4, #1
    5eea:	b2e4      	uxtb	r4, r4
    5eec:	6828      	ldr	r0, [r5, #0]
    5eee:	7a00      	ldrb	r0, [r0, #8]
    5ef0:	42a0      	cmp	r0, r4
    5ef2:	d8f6      	bhi.n	5ee2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    5ef6:	0000      	.short	0x0000
    5ef8:	2000007c 	.word	0x2000007c

00005efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5efc:	4909      	ldr	r1, [pc, #36]	; (5f24 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5efe:	b510      	push	{r4, lr}
    5f00:	4602      	mov	r2, r0
    5f02:	6809      	ldr	r1, [r1, #0]
    5f04:	2000      	movs	r0, #0
    5f06:	b149      	cbz	r1, 5f1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5f08:	7a0b      	ldrb	r3, [r1, #8]
    5f0a:	4293      	cmp	r3, r2
    5f0c:	d905      	bls.n	5f1a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5f0e:	6849      	ldr	r1, [r1, #4]
    5f10:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5f14:	2900      	cmp	r1, #0
    5f16:	d000      	beq.n	5f1a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5f18:	1d08      	adds	r0, r1, #4
    5f1a:	bd10      	pop	{r4, pc}
    5f1c:	21ee      	movs	r1, #238	; 0xee
    5f1e:	2018      	movs	r0, #24
    5f20:	f7ff fbd2 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f24:	2000007c 	.word	0x2000007c

00005f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5f28:	490a      	ldr	r1, [pc, #40]	; (5f54 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5f2a:	b510      	push	{r4, lr}
    5f2c:	4602      	mov	r2, r0
    5f2e:	6809      	ldr	r1, [r1, #0]
    5f30:	2000      	movs	r0, #0
    5f32:	b159      	cbz	r1, 5f4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5f34:	7a0b      	ldrb	r3, [r1, #8]
    5f36:	4293      	cmp	r3, r2
    5f38:	d907      	bls.n	5f4a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5f3a:	6849      	ldr	r1, [r1, #4]
    5f3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5f40:	2900      	cmp	r1, #0
    5f42:	d002      	beq.n	5f4a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5f44:	f831 0b04 	ldrh.w	r0, [r1], #4
    5f48:	4408      	add	r0, r1
    5f4a:	bd10      	pop	{r4, pc}
    5f4c:	21fc      	movs	r1, #252	; 0xfc
    5f4e:	2018      	movs	r0, #24
    5f50:	f7ff fbba 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f54:	2000007c 	.word	0x2000007c
    5f58:	b570      	push	{r4, r5, r6, lr}
    5f5a:	4b1e      	ldr	r3, [pc, #120]	; (5fd4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5f5c:	6845      	ldr	r5, [r0, #4]
    5f5e:	4604      	mov	r4, r0
    5f60:	2200      	movs	r2, #0
    5f62:	b1a1      	cbz	r1, 5f8e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5f64:	2001      	movs	r0, #1
    5f66:	7060      	strb	r0, [r4, #1]
    5f68:	8858      	ldrh	r0, [r3, #2]
    5f6a:	0881      	lsrs	r1, r0, #2
    5f6c:	f05f 0000 	movs.w	r0, #0
    5f70:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5f74:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5f78:	831a      	strh	r2, [r3, #24]
    5f7a:	8419      	strh	r1, [r3, #32]
    5f7c:	fb00 5301 	mla	r3, r0, r1, r5
    5f80:	6073      	str	r3, [r6, #4]
    5f82:	1823      	adds	r3, r4, r0
    5f84:	1c40      	adds	r0, r0, #1
    5f86:	751a      	strb	r2, [r3, #20]
    5f88:	2804      	cmp	r0, #4
    5f8a:	d3f1      	bcc.n	5f70 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5f8c:	bd70      	pop	{r4, r5, r6, pc}
    5f8e:	7062      	strb	r2, [r4, #1]
    5f90:	f05f 0000 	movs.w	r0, #0
    5f94:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5f98:	830a      	strh	r2, [r1, #24]
    5f9a:	840a      	strh	r2, [r1, #32]
    5f9c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5fa0:	604a      	str	r2, [r1, #4]
    5fa2:	1821      	adds	r1, r4, r0
    5fa4:	1c40      	adds	r0, r0, #1
    5fa6:	750a      	strb	r2, [r1, #20]
    5fa8:	2804      	cmp	r0, #4
    5faa:	d3f3      	bcc.n	5f94 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5fac:	8858      	ldrh	r0, [r3, #2]
    5fae:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5fb2:	d201      	bcs.n	5fb8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5fb4:	0846      	lsrs	r6, r0, #1
    5fb6:	e000      	b.n	5fba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5fb8:	26ff      	movs	r6, #255	; 0xff
    5fba:	f008 fc9f 	bl	e8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5fbe:	6065      	str	r5, [r4, #4]
    5fc0:	8420      	strh	r0, [r4, #32]
    5fc2:	1829      	adds	r1, r5, r0
    5fc4:	60a1      	str	r1, [r4, #8]
    5fc6:	8466      	strh	r6, [r4, #34]	; 0x22
    5fc8:	60e5      	str	r5, [r4, #12]
    5fca:	84a0      	strh	r0, [r4, #36]	; 0x24
    5fcc:	6121      	str	r1, [r4, #16]
    5fce:	84e6      	strh	r6, [r4, #38]	; 0x26
    5fd0:	bd70      	pop	{r4, r5, r6, pc}
    5fd2:	0000      	.short	0x0000
    5fd4:	20000080 	.word	0x20000080

00005fd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fdc:	b170      	cbz	r0, 5ffc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5fde:	2500      	movs	r5, #0
    5fe0:	4411      	add	r1, r2
    5fe2:	b2cc      	uxtb	r4, r1
    5fe4:	4e24      	ldr	r6, [pc, #144]	; (6078 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x78>)
    5fe6:	1cc1      	adds	r1, r0, #3
    5fe8:	2700      	movs	r7, #0
    5fea:	f021 0103 	bic.w	r1, r1, #3
    5fee:	7034      	strb	r4, [r6, #0]
    5ff0:	4281      	cmp	r1, r0
    5ff2:	d005      	beq.n	6000 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE>
    5ff4:	214e      	movs	r1, #78	; 0x4e
    5ff6:	2009      	movs	r0, #9
    5ff8:	f7ff fb66 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ffc:	2501      	movs	r5, #1
    5ffe:	e7ef      	b.n	5fe0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    6000:	2b1f      	cmp	r3, #31
    6002:	d804      	bhi.n	600e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0xe>
    6004:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6008:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    600c:	e009      	b.n	6022 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x22>
    600e:	0059      	lsls	r1, r3, #1
    6010:	2bff      	cmp	r3, #255	; 0xff
    6012:	d90b      	bls.n	602c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x2c>
    6014:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    6018:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    601c:	d200      	bcs.n	6020 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x20>
    601e:	4611      	mov	r1, r2
    6020:	b289      	uxth	r1, r1
    6022:	1cc9      	adds	r1, r1, #3
    6024:	f021 0303 	bic.w	r3, r1, #3
    6028:	b135      	cbz	r5, 6038 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x38>
    602a:	e007      	b.n	603c <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x3c>
    602c:	227c      	movs	r2, #124	; 0x7c
    602e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    6032:	d3f5      	bcc.n	6020 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x20>
    6034:	217c      	movs	r1, #124	; 0x7c
    6036:	e7f3      	b.n	6020 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x20>
    6038:	6070      	str	r0, [r6, #4]
    603a:	8073      	strh	r3, [r6, #2]
    603c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    6040:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    6044:	2100      	movs	r1, #0
    6046:	6876      	ldr	r6, [r6, #4]
    6048:	f04f 0c01 	mov.w	ip, #1
    604c:	e00d      	b.n	606a <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x6a>
    604e:	b94d      	cbnz	r5, 6064 <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x64>
    6050:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    6054:	eb00 0e02 	add.w	lr, r0, r2
    6058:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    605c:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    6060:	f8c7 e004 	str.w	lr, [r7, #4]
    6064:	1c49      	adds	r1, r1, #1
    6066:	441a      	add	r2, r3
    6068:	b2c9      	uxtb	r1, r1
    606a:	42a1      	cmp	r1, r4
    606c:	d3ef      	bcc.n	604e <CONFIG_PM_PARTITION_SIZE_NVS_STORAGE+0x4e>
    606e:	1dd2      	adds	r2, r2, #7
    6070:	f022 0007 	bic.w	r0, r2, #7
    6074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6078:	20000080 	.word	0x20000080

0000607c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    607c:	b570      	push	{r4, r5, r6, lr}
    607e:	4a10      	ldr	r2, [pc, #64]	; (60c0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    6080:	2000      	movs	r0, #0
    6082:	6851      	ldr	r1, [r2, #4]
    6084:	7812      	ldrb	r2, [r2, #0]
    6086:	e014      	b.n	60b2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    6088:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    608c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    6090:	b16b      	cbz	r3, 60ae <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    6092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6096:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    609a:	d00c      	beq.n	60b6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    609c:	2500      	movs	r5, #0
    609e:	70a5      	strb	r5, [r4, #2]
    60a0:	2101      	movs	r1, #1
    60a2:	4620      	mov	r0, r4
    60a4:	f7ff ff58 	bl	5f58 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    60a8:	7025      	strb	r5, [r4, #0]
    60aa:	4620      	mov	r0, r4
    60ac:	bd70      	pop	{r4, r5, r6, pc}
    60ae:	1c40      	adds	r0, r0, #1
    60b0:	b2c0      	uxtb	r0, r0
    60b2:	4290      	cmp	r0, r2
    60b4:	d3e8      	bcc.n	6088 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    60b6:	21a9      	movs	r1, #169	; 0xa9
    60b8:	2009      	movs	r0, #9
    60ba:	f7ff fb05 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60be:	0000      	.short	0x0000
    60c0:	20000080 	.word	0x20000080

000060c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    60c4:	4804      	ldr	r0, [pc, #16]	; (60d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    60c6:	b510      	push	{r4, lr}
    60c8:	8840      	ldrh	r0, [r0, #2]
    60ca:	0884      	lsrs	r4, r0, #2
    60cc:	f008 fc16 	bl	e8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    60d0:	4284      	cmp	r4, r0
    60d2:	d300      	bcc.n	60d6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    60d4:	4620      	mov	r0, r4
    60d6:	bd10      	pop	{r4, pc}
    60d8:	20000080 	.word	0x20000080
    60dc:	4909      	ldr	r1, [pc, #36]	; (6104 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    60de:	b510      	push	{r4, lr}
    60e0:	4807      	ldr	r0, [pc, #28]	; (6100 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    60e2:	6008      	str	r0, [r1, #0]
    60e4:	4b08      	ldr	r3, [pc, #32]	; (6108 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    60e6:	2011      	movs	r0, #17
    60e8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    60ec:	2200      	movs	r2, #0
    60ee:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    60f2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    60f6:	1c40      	adds	r0, r0, #1
    60f8:	b2c0      	uxtb	r0, r0
    60fa:	2814      	cmp	r0, #20
    60fc:	d3f4      	bcc.n	60e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    60fe:	bd10      	pop	{r4, pc}
    6100:	fffe0000 	.word	0xfffe0000
    6104:	4001f508 	.word	0x4001f508
    6108:	4001f000 	.word	0x4001f000
    610c:	b570      	push	{r4, r5, r6, lr}
    610e:	2420      	movs	r4, #32
    6110:	2100      	movs	r1, #0
    6112:	2301      	movs	r3, #1
    6114:	fa20 f201 	lsr.w	r2, r0, r1
    6118:	07d2      	lsls	r2, r2, #31
    611a:	d020      	beq.n	615e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    611c:	b24a      	sxtb	r2, r1
    611e:	2a00      	cmp	r2, #0
    6120:	db10      	blt.n	6144 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    6122:	bf00      	nop
    6124:	ea4f 1652 	mov.w	r6, r2, lsr #5
    6128:	ea4f 0686 	mov.w	r6, r6, lsl #2
    612c:	f002 051f 	and.w	r5, r2, #31
    6130:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    6134:	fa03 f505 	lsl.w	r5, r3, r5
    6138:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    613c:	f3bf 8f4f 	dsb	sy
    6140:	f3bf 8f6f 	isb	sy
    6144:	db0b      	blt.n	615e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    6146:	f002 051f 	and.w	r5, r2, #31
    614a:	ea4f 1252 	mov.w	r2, r2, lsr #5
    614e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    6152:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    6156:	fa03 f505 	lsl.w	r5, r3, r5
    615a:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    615e:	f101 0101 	add.w	r1, r1, #1
    6162:	42a1      	cmp	r1, r4
    6164:	d3d6      	bcc.n	6114 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    6166:	bd70      	pop	{r4, r5, r6, pc}
    6168:	b570      	push	{r4, r5, r6, lr}
    616a:	0042      	lsls	r2, r0, #1
    616c:	f04f 0100 	mov.w	r1, #0
    6170:	d501      	bpl.n	6176 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    6172:	4a14      	ldr	r2, [pc, #80]	; (61c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    6174:	6011      	str	r1, [r2, #0]
    6176:	f3c0 3280 	ubfx	r2, r0, #14, #1
    617a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    617e:	429a      	cmp	r2, r3
    6180:	d003      	beq.n	618a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    6182:	2169      	movs	r1, #105	; 0x69
    6184:	201b      	movs	r0, #27
    6186:	f7ff fa9f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    618e:	d014      	beq.n	61ba <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    6190:	4a0d      	ldr	r2, [pc, #52]	; (61c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    6192:	2001      	movs	r0, #1
    6194:	6050      	str	r0, [r2, #4]
    6196:	1e83      	subs	r3, r0, #2
    6198:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    619c:	4a0b      	ldr	r2, [pc, #44]	; (61cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    619e:	6090      	str	r0, [r2, #8]
    61a0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    61a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    61a8:	4c09      	ldr	r4, [pc, #36]	; (61d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    61aa:	6021      	str	r1, [r4, #0]
    61ac:	1d25      	adds	r5, r4, #4
    61ae:	6028      	str	r0, [r5, #0]
    61b0:	6090      	str	r0, [r2, #8]
    61b2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    61b6:	6021      	str	r1, [r4, #0]
    61b8:	6028      	str	r0, [r5, #0]
    61ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61be:	f7ff bf8d 	b.w	60dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    61c2:	0000      	.short	0x0000
    61c4:	4001e504 	.word	0x4001e504
    61c8:	4000e000 	.word	0x4000e000
    61cc:	4000f000 	.word	0x4000f000
    61d0:	4000f500 	.word	0x4000f500

000061d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    61d4:	b570      	push	{r4, r5, r6, lr}
    61d6:	4c0a      	ldr	r4, [pc, #40]	; (6200 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    61d8:	460d      	mov	r5, r1
    61da:	6020      	str	r0, [r4, #0]
    61dc:	f7ff ffc4 	bl	6168 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    61e0:	6820      	ldr	r0, [r4, #0]
    61e2:	f7ff ff93 	bl	610c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    61e6:	f000 f883 	bl	62f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    61ea:	f7ff ff77 	bl	60dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    61ee:	f008 fc4d 	bl	ea8c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    61f2:	4628      	mov	r0, r5
    61f4:	f000 f8b6 	bl	6364 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    61f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61fc:	f000 b8ce 	b.w	639c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    6200:	20000088 	.word	0x20000088

00006204 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    6204:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6208:	4c36      	ldr	r4, [pc, #216]	; (62e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    620a:	b082      	sub	sp, #8
    620c:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    6210:	2601      	movs	r6, #1
    6212:	4835      	ldr	r0, [pc, #212]	; (62e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    6214:	f007 fa1e 	bl	d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    6218:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 62e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    621c:	b920      	cbnz	r0, 6228 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    621e:	2600      	movs	r6, #0
    6220:	f109 0001 	add.w	r0, r9, #1
    6224:	f007 fa2d 	bl	d682 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    6228:	f44f 7580 	mov.w	r5, #256	; 0x100
    622c:	f04f 0800 	mov.w	r8, #0
    6230:	1d2f      	adds	r7, r5, #4
    6232:	2101      	movs	r1, #1
    6234:	6061      	str	r1, [r4, #4]
    6236:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    623a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    623e:	9802      	ldr	r0, [sp, #8]
    6240:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    6244:	6021      	str	r1, [r4, #0]
    6246:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 62ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    624a:	e01c      	b.n	6286 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    624c:	f8da 0000 	ldr.w	r0, [sl]
    6250:	06c0      	lsls	r0, r0, #27
    6252:	d518      	bpl.n	6286 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    6254:	200e      	movs	r0, #14
    6256:	f008 fc05 	bl	ea64 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    625a:	f3ef 8010 	mrs	r0, PRIMASK
    625e:	9000      	str	r0, [sp, #0]
    6260:	b672      	cpsid	i
    6262:	2103      	movs	r1, #3
    6264:	4620      	mov	r0, r4
    6266:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    626a:	4629      	mov	r1, r5
    626c:	f008 fc07 	bl	ea7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    6270:	b930      	cbnz	r0, 6280 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    6272:	4639      	mov	r1, r7
    6274:	4620      	mov	r0, r4
    6276:	f008 fc02 	bl	ea7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    627a:	b908      	cbnz	r0, 6280 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    627c:	f7ff f89e 	bl	53bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    6280:	9800      	ldr	r0, [sp, #0]
    6282:	b900      	cbnz	r0, 6286 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    6284:	b662      	cpsie	i
    6286:	4629      	mov	r1, r5
    6288:	4620      	mov	r0, r4
    628a:	f008 fbf8 	bl	ea7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    628e:	b928      	cbnz	r0, 629c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    6290:	4639      	mov	r1, r7
    6292:	4620      	mov	r0, r4
    6294:	f008 fbf3 	bl	ea7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    6298:	2800      	cmp	r0, #0
    629a:	d0d7      	beq.n	624c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    629c:	4639      	mov	r1, r7
    629e:	4620      	mov	r0, r4
    62a0:	f008 fbed 	bl	ea7e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    62a4:	2800      	cmp	r0, #0
    62a6:	d1c4      	bne.n	6232 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    62a8:	b136      	cbz	r6, 62b8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    62aa:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    62ae:	f109 0001 	add.w	r0, r9, #1
    62b2:	f007 f9cf 	bl	d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    62b6:	e012      	b.n	62de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    62b8:	f109 0001 	add.w	r0, r9, #1
    62bc:	f007 f9ca 	bl	d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    62c0:	2800      	cmp	r0, #0
    62c2:	d1ad      	bne.n	6220 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    62c4:	2003      	movs	r0, #3
    62c6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    62ca:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    62ce:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    62d2:	200e      	movs	r0, #14
    62d4:	f008 fbc6 	bl	ea64 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    62d8:	4803      	ldr	r0, [pc, #12]	; (62e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    62da:	f007 f9d2 	bl	d682 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    62de:	2000      	movs	r0, #0
    62e0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62e4:	4000e000 	.word	0x4000e000
    62e8:	20000297 	.word	0x20000297
    62ec:	e000ed10 	.word	0xe000ed10

000062f0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    62f0:	b510      	push	{r4, lr}
    62f2:	4808      	ldr	r0, [pc, #32]	; (6314 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    62f4:	f007 f9c1 	bl	d67a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    62f8:	b108      	cbz	r0, 62fe <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    62fa:	2125      	movs	r1, #37	; 0x25
    62fc:	e006      	b.n	630c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    62fe:	4805      	ldr	r0, [pc, #20]	; (6314 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    6300:	1c40      	adds	r0, r0, #1
    6302:	f007 f9ba 	bl	d67a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    6306:	2800      	cmp	r0, #0
    6308:	d003      	beq.n	6312 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    630a:	2129      	movs	r1, #41	; 0x29
    630c:	201d      	movs	r0, #29
    630e:	f7ff f9db 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6312:	bd10      	pop	{r4, pc}
    6314:	20000297 	.word	0x20000297

00006318 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	4911      	ldr	r1, [pc, #68]	; (6360 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    631c:	680a      	ldr	r2, [r1, #0]
    631e:	b1ea      	cbz	r2, 635c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    6320:	2300      	movs	r3, #0
    6322:	461d      	mov	r5, r3
    6324:	2401      	movs	r4, #1
    6326:	684a      	ldr	r2, [r1, #4]
    6328:	1c52      	adds	r2, r2, #1
    632a:	604a      	str	r2, [r1, #4]
    632c:	2a09      	cmp	r2, #9
    632e:	d300      	bcc.n	6332 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    6330:	604d      	str	r5, [r1, #4]
    6332:	790e      	ldrb	r6, [r1, #4]
    6334:	fa04 f206 	lsl.w	r2, r4, r6
    6338:	680e      	ldr	r6, [r1, #0]
    633a:	4216      	tst	r6, r2
    633c:	d00b      	beq.n	6356 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    633e:	f3ef 8310 	mrs	r3, PRIMASK
    6342:	b672      	cpsid	i
    6344:	680c      	ldr	r4, [r1, #0]
    6346:	4394      	bics	r4, r2
    6348:	600c      	str	r4, [r1, #0]
    634a:	b903      	cbnz	r3, 634e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    634c:	b662      	cpsie	i
    634e:	6849      	ldr	r1, [r1, #4]
    6350:	6001      	str	r1, [r0, #0]
    6352:	2000      	movs	r0, #0
    6354:	bd70      	pop	{r4, r5, r6, pc}
    6356:	1c5b      	adds	r3, r3, #1
    6358:	2b09      	cmp	r3, #9
    635a:	d3e4      	bcc.n	6326 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    635c:	2005      	movs	r0, #5
    635e:	bd70      	pop	{r4, r5, r6, pc}
    6360:	2000008c 	.word	0x2000008c

00006364 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    6364:	4802      	ldr	r0, [pc, #8]	; (6370 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    6366:	2100      	movs	r1, #0
    6368:	6001      	str	r1, [r0, #0]
    636a:	6041      	str	r1, [r0, #4]
    636c:	4770      	bx	lr
    636e:	0000      	.short	0x0000
    6370:	2000008c 	.word	0x2000008c

00006374 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    6374:	b510      	push	{r4, lr}
    6376:	4c08      	ldr	r4, [pc, #32]	; (6398 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    6378:	7861      	ldrb	r1, [r4, #1]
    637a:	b109      	cbz	r1, 6380 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    637c:	200f      	movs	r0, #15
    637e:	bd10      	pop	{r4, pc}
    6380:	f7fe ffa8 	bl	52d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6384:	7020      	strb	r0, [r4, #0]
    6386:	28ff      	cmp	r0, #255	; 0xff
    6388:	d001      	beq.n	638e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    638a:	2000      	movs	r0, #0
    638c:	bd10      	pop	{r4, pc}
    638e:	2176      	movs	r1, #118	; 0x76
    6390:	201f      	movs	r0, #31
    6392:	f7ff f999 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6396:	0000      	.short	0x0000
    6398:	20000094 	.word	0x20000094

0000639c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    639c:	4901      	ldr	r1, [pc, #4]	; (63a4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    639e:	2000      	movs	r0, #0
    63a0:	7048      	strb	r0, [r1, #1]
    63a2:	4770      	bx	lr
    63a4:	20000094 	.word	0x20000094

000063a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    63a8:	4806      	ldr	r0, [pc, #24]	; (63c4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    63aa:	4a07      	ldr	r2, [pc, #28]	; (63c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    63ac:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    63ae:	8852      	ldrh	r2, [r2, #2]
    63b0:	4291      	cmp	r1, r2
    63b2:	d104      	bne.n	63be <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    63b4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    63b8:	b108      	cbz	r0, 63be <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    63ba:	2000      	movs	r0, #0
    63bc:	4770      	bx	lr
    63be:	2001      	movs	r0, #1
    63c0:	4770      	bx	lr
    63c2:	0000      	.short	0x0000
    63c4:	200014c0 	.word	0x200014c0
    63c8:	2000027c 	.word	0x2000027c

000063cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    63cc:	4901      	ldr	r1, [pc, #4]	; (63d4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    63ce:	8048      	strh	r0, [r1, #2]
    63d0:	4770      	bx	lr
    63d2:	0000      	.short	0x0000
    63d4:	2000027c 	.word	0x2000027c

000063d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    63d8:	4808      	ldr	r0, [pc, #32]	; (63fc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    63da:	4a09      	ldr	r2, [pc, #36]	; (6400 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    63dc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    63de:	8852      	ldrh	r2, [r2, #2]
    63e0:	4291      	cmp	r1, r2
    63e2:	d109      	bne.n	63f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    63e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63e8:	8481      	strh	r1, [r0, #36]	; 0x24
    63ea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    63ee:	b119      	cbz	r1, 63f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    63f0:	2100      	movs	r1, #0
    63f2:	7001      	strb	r1, [r0, #0]
    63f4:	2001      	movs	r0, #1
    63f6:	4770      	bx	lr
    63f8:	2000      	movs	r0, #0
    63fa:	4770      	bx	lr
    63fc:	200014c0 	.word	0x200014c0
    6400:	2000027c 	.word	0x2000027c

00006404 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    6404:	4807      	ldr	r0, [pc, #28]	; (6424 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    6406:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    640a:	2901      	cmp	r1, #1
    640c:	d007      	beq.n	641e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    640e:	2101      	movs	r1, #1
    6410:	7001      	strb	r1, [r0, #0]
    6412:	4805      	ldr	r0, [pc, #20]	; (6428 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    6414:	4903      	ldr	r1, [pc, #12]	; (6424 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    6416:	8800      	ldrh	r0, [r0, #0]
    6418:	8488      	strh	r0, [r1, #36]	; 0x24
    641a:	2001      	movs	r0, #1
    641c:	4770      	bx	lr
    641e:	2000      	movs	r0, #0
    6420:	4770      	bx	lr
    6422:	0000      	.short	0x0000
    6424:	200014c0 	.word	0x200014c0
    6428:	2000027c 	.word	0x2000027c

0000642c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    642c:	4906      	ldr	r1, [pc, #24]	; (6448 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    642e:	4b07      	ldr	r3, [pc, #28]	; (644c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    6430:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6432:	885b      	ldrh	r3, [r3, #2]
    6434:	429a      	cmp	r2, r3
    6436:	d105      	bne.n	6444 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    6438:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    643c:	b112      	cbz	r2, 6444 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    643e:	6001      	str	r1, [r0, #0]
    6440:	2001      	movs	r0, #1
    6442:	4770      	bx	lr
    6444:	2000      	movs	r0, #0
    6446:	4770      	bx	lr
    6448:	200014c0 	.word	0x200014c0
    644c:	2000027c 	.word	0x2000027c

00006450 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    6450:	4909      	ldr	r1, [pc, #36]	; (6478 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    6452:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    6454:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    6458:	3bff      	subs	r3, #255	; 0xff
    645a:	d002      	beq.n	6462 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    645c:	2100      	movs	r1, #0
    645e:	6001      	str	r1, [r0, #0]
    6460:	e007      	b.n	6472 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    6462:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    6466:	4904      	ldr	r1, [pc, #16]	; (6478 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    6468:	2a01      	cmp	r2, #1
    646a:	d002      	beq.n	6472 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    646c:	6001      	str	r1, [r0, #0]
    646e:	2001      	movs	r0, #1
    6470:	4770      	bx	lr
    6472:	2000      	movs	r0, #0
    6474:	4770      	bx	lr
    6476:	0000      	.short	0x0000
    6478:	200014c0 	.word	0x200014c0

0000647c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    647c:	4901      	ldr	r1, [pc, #4]	; (6484 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    647e:	8008      	strh	r0, [r1, #0]
    6480:	4770      	bx	lr
    6482:	0000      	.short	0x0000
    6484:	2000027c 	.word	0x2000027c

00006488 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    6488:	4905      	ldr	r1, [pc, #20]	; (64a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    648a:	2000      	movs	r0, #0
    648c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    6490:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6494:	8488      	strh	r0, [r1, #36]	; 0x24
    6496:	4903      	ldr	r1, [pc, #12]	; (64a4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    6498:	8008      	strh	r0, [r1, #0]
    649a:	8048      	strh	r0, [r1, #2]
    649c:	4770      	bx	lr
    649e:	0000      	.short	0x0000
    64a0:	200014c0 	.word	0x200014c0
    64a4:	2000027c 	.word	0x2000027c
    64a8:	4905      	ldr	r1, [pc, #20]	; (64c0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    64aa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    64ac:	4282      	cmp	r2, r0
    64ae:	d105      	bne.n	64bc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    64b0:	2000      	movs	r0, #0
    64b2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    64b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    64ba:	8488      	strh	r0, [r1, #36]	; 0x24
    64bc:	4770      	bx	lr
    64be:	0000      	.short	0x0000
    64c0:	200014c0 	.word	0x200014c0

000064c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    64c4:	4a0a      	ldr	r2, [pc, #40]	; (64f0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    64c6:	b110      	cbz	r0, 64ce <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    64c8:	2801      	cmp	r0, #1
    64ca:	d007      	beq.n	64dc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    64cc:	e00e      	b.n	64ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    64ce:	7850      	ldrb	r0, [r2, #1]
    64d0:	b160      	cbz	r0, 64ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    64d2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    64d6:	6008      	str	r0, [r1, #0]
    64d8:	88d0      	ldrh	r0, [r2, #6]
    64da:	e004      	b.n	64e6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    64dc:	7810      	ldrb	r0, [r2, #0]
    64de:	b128      	cbz	r0, 64ec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    64e0:	6890      	ldr	r0, [r2, #8]
    64e2:	6008      	str	r0, [r1, #0]
    64e4:	8990      	ldrh	r0, [r2, #12]
    64e6:	8088      	strh	r0, [r1, #4]
    64e8:	2001      	movs	r0, #1
    64ea:	4770      	bx	lr
    64ec:	2000      	movs	r0, #0
    64ee:	4770      	bx	lr
    64f0:	20000299 	.word	0x20000299

000064f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    64f4:	4a08      	ldr	r2, [pc, #32]	; (6518 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    64f6:	2301      	movs	r3, #1
    64f8:	b138      	cbz	r0, 650a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    64fa:	2801      	cmp	r0, #1
    64fc:	d104      	bne.n	6508 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    64fe:	7013      	strb	r3, [r2, #0]
    6500:	6808      	ldr	r0, [r1, #0]
    6502:	6090      	str	r0, [r2, #8]
    6504:	8888      	ldrh	r0, [r1, #4]
    6506:	8190      	strh	r0, [r2, #12]
    6508:	4770      	bx	lr
    650a:	7053      	strb	r3, [r2, #1]
    650c:	6808      	ldr	r0, [r1, #0]
    650e:	f8c2 0002 	str.w	r0, [r2, #2]
    6512:	8888      	ldrh	r0, [r1, #4]
    6514:	80d0      	strh	r0, [r2, #6]
    6516:	4770      	bx	lr
    6518:	20000299 	.word	0x20000299

0000651c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    651c:	4906      	ldr	r1, [pc, #24]	; (6538 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    651e:	b110      	cbz	r0, 6526 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    6520:	2801      	cmp	r0, #1
    6522:	d002      	beq.n	652a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    6524:	e005      	b.n	6532 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    6526:	7848      	ldrb	r0, [r1, #1]
    6528:	e000      	b.n	652c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    652a:	7808      	ldrb	r0, [r1, #0]
    652c:	b108      	cbz	r0, 6532 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    652e:	2001      	movs	r0, #1
    6530:	4770      	bx	lr
    6532:	2000      	movs	r0, #0
    6534:	4770      	bx	lr
    6536:	0000      	.short	0x0000
    6538:	20000299 	.word	0x20000299

0000653c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    653c:	4901      	ldr	r1, [pc, #4]	; (6544 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    653e:	7448      	strb	r0, [r1, #17]
    6540:	4770      	bx	lr
    6542:	0000      	.short	0x0000
    6544:	20000e1a 	.word	0x20000e1a

00006548 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    6548:	4801      	ldr	r0, [pc, #4]	; (6550 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    654a:	78c0      	ldrb	r0, [r0, #3]
    654c:	4770      	bx	lr
    654e:	0000      	.short	0x0000
    6550:	200000b0 	.word	0x200000b0

00006554 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    6554:	4801      	ldr	r0, [pc, #4]	; (655c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    6556:	7900      	ldrb	r0, [r0, #4]
    6558:	4770      	bx	lr
    655a:	0000      	.short	0x0000
    655c:	200000b0 	.word	0x200000b0

00006560 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    6560:	b578      	push	{r3, r4, r5, r6, lr}
    6562:	4913      	ldr	r1, [pc, #76]	; (65b0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    6564:	7c4a      	ldrb	r2, [r1, #17]
    6566:	b30a      	cbz	r2, 65ac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    6568:	7c0a      	ldrb	r2, [r1, #16]
    656a:	f88d 2000 	strb.w	r2, [sp]
    656e:	9a00      	ldr	r2, [sp, #0]
    6570:	9200      	str	r2, [sp, #0]
    6572:	f89d 2000 	ldrb.w	r2, [sp]
    6576:	b1ca      	cbz	r2, 65ac <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    6578:	2300      	movs	r3, #0
    657a:	f101 0210 	add.w	r2, r1, #16
    657e:	241a      	movs	r4, #26
    6580:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    6584:	7c0e      	ldrb	r6, [r1, #16]
    6586:	f88d 6000 	strb.w	r6, [sp]
    658a:	9e00      	ldr	r6, [sp, #0]
    658c:	9600      	str	r6, [sp, #0]
    658e:	f89d 6000 	ldrb.w	r6, [sp]
    6592:	b14e      	cbz	r6, 65a8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    6594:	7013      	strb	r3, [r2, #0]
    6596:	7043      	strb	r3, [r0, #1]
    6598:	7004      	strb	r4, [r0, #0]
    659a:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    659e:	6046      	str	r6, [r0, #4]
    65a0:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    65a4:	6086      	str	r6, [r0, #8]
    65a6:	e7ed      	b.n	6584 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    65a8:	2001      	movs	r0, #1
    65aa:	bd78      	pop	{r3, r4, r5, r6, pc}
    65ac:	2000      	movs	r0, #0
    65ae:	bd78      	pop	{r3, r4, r5, r6, pc}
    65b0:	20000e1a 	.word	0x20000e1a

000065b4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    65b4:	b510      	push	{r4, lr}
    65b6:	4604      	mov	r4, r0
    65b8:	f000 f956 	bl	6868 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    65bc:	b118      	cbz	r0, 65c6 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    65be:	21bd      	movs	r1, #189	; 0xbd
    65c0:	2027      	movs	r0, #39	; 0x27
    65c2:	f7ff f881 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c6:	4803      	ldr	r0, [pc, #12]	; (65d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    65c8:	2101      	movs	r1, #1
    65ca:	f008 fe27 	bl	f21c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    65ce:	4802      	ldr	r0, [pc, #8]	; (65d8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    65d0:	62c4      	str	r4, [r0, #44]	; 0x2c
    65d2:	bd10      	pop	{r4, pc}
    65d4:	20000df8 	.word	0x20000df8
    65d8:	200000b0 	.word	0x200000b0

000065dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    65dc:	4901      	ldr	r1, [pc, #4]	; (65e4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    65de:	2001      	movs	r0, #1
    65e0:	7188      	strb	r0, [r1, #6]
    65e2:	4770      	bx	lr
    65e4:	200000b0 	.word	0x200000b0

000065e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    65e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65ec:	4d5f      	ldr	r5, [pc, #380]	; (676c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    65ee:	9c08      	ldr	r4, [sp, #32]
    65f0:	782e      	ldrb	r6, [r5, #0]
    65f2:	2e00      	cmp	r6, #0
    65f4:	d16b      	bne.n	66ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    65f6:	2a00      	cmp	r2, #0
    65f8:	d069      	beq.n	66ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    65fa:	2b00      	cmp	r3, #0
    65fc:	d067      	beq.n	66ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    65fe:	2c00      	cmp	r4, #0
    6600:	d065      	beq.n	66ce <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    6602:	f105 0614 	add.w	r6, r5, #20
    6606:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    660a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    660e:	2700      	movs	r7, #0
    6610:	71af      	strb	r7, [r5, #6]
    6612:	716f      	strb	r7, [r5, #5]
    6614:	70ef      	strb	r7, [r5, #3]
    6616:	70af      	strb	r7, [r5, #2]
    6618:	712f      	strb	r7, [r5, #4]
    661a:	81af      	strh	r7, [r5, #12]
    661c:	81ef      	strh	r7, [r5, #14]
    661e:	f000 f95b 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6622:	4606      	mov	r6, r0
    6624:	f000 f952 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6628:	4604      	mov	r4, r0
    662a:	f006 f825 	bl	c678 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    662e:	f005 fcb9 	bl	bfa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6632:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    6636:	f006 f8a5 	bl	c784 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    663a:	f104 0018 	add.w	r0, r4, #24
    663e:	f006 f97f 	bl	c940 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6642:	6920      	ldr	r0, [r4, #16]
    6644:	f006 f972 	bl	c92c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6648:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    664c:	f006 f996 	bl	c97c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6650:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6654:	6840      	ldr	r0, [r0, #4]
    6656:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    665a:	b108      	cbz	r0, 6660 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    665c:	f005 ff56 	bl	c50c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    6660:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    6664:	2001      	movs	r0, #1
    6666:	f005 fe81 	bl	c36c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    666a:	2800      	cmp	r0, #0
    666c:	d076      	beq.n	675c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    666e:	4840      	ldr	r0, [pc, #256]	; (6770 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    6670:	f005 fef8 	bl	c464 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6674:	8820      	ldrh	r0, [r4, #0]
    6676:	f7ff fc57 	bl	5f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    667a:	6328      	str	r0, [r5, #48]	; 0x30
    667c:	8820      	ldrh	r0, [r4, #0]
    667e:	f7ff fc3d 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6682:	f106 0160 	add.w	r1, r6, #96	; 0x60
    6686:	6368      	str	r0, [r5, #52]	; 0x34
    6688:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 6774 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    668c:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    6690:	f109 0808 	add.w	r8, r9, #8
    6694:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    6698:	6f31      	ldr	r1, [r6, #112]	; 0x70
    669a:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    669e:	6f71      	ldr	r1, [r6, #116]	; 0x74
    66a0:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    66a4:	f000 f98a 	bl	69bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    66a8:	4601      	mov	r1, r0
    66aa:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    66ac:	46ba      	mov	sl, r7
    66ae:	f008 fb4d 	bl	ed4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    66b2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    66b4:	4281      	cmp	r1, r0
    66b6:	d200      	bcs.n	66ba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    66b8:	4608      	mov	r0, r1
    66ba:	7228      	strb	r0, [r5, #8]
    66bc:	46a8      	mov	r8, r5
    66be:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    66c2:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    66c4:	7cf7      	ldrb	r7, [r6, #19]
    66c6:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    66c8:	2908      	cmp	r1, #8
    66ca:	d104      	bne.n	66d6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    66cc:	e002      	b.n	66d4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    66ce:	f44f 718a 	mov.w	r1, #276	; 0x114
    66d2:	e047      	b.n	6764 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    66d4:	2104      	movs	r1, #4
    66d6:	f008 fb39 	bl	ed4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    66da:	b90f      	cbnz	r7, 66e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    66dc:	1d00      	adds	r0, r0, #4
    66de:	b280      	uxth	r0, r0
    66e0:	4285      	cmp	r5, r0
    66e2:	d200      	bcs.n	66e6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    66e4:	4628      	mov	r0, r5
    66e6:	b2c5      	uxtb	r5, r0
    66e8:	f888 5009 	strb.w	r5, [r8, #9]
    66ec:	7cf1      	ldrb	r1, [r6, #19]
    66ee:	2900      	cmp	r1, #0
    66f0:	d002      	beq.n	66f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    66f2:	bf00      	nop
    66f4:	f04f 0104 	mov.w	r1, #4
    66f8:	4429      	add	r1, r5
    66fa:	f888 1007 	strb.w	r1, [r8, #7]
    66fe:	4657      	mov	r7, sl
    6700:	d016      	beq.n	6730 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    6702:	481c      	ldr	r0, [pc, #112]	; (6774 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    6704:	f04f 0101 	mov.w	r1, #1
    6708:	f100 0008 	add.w	r0, r0, #8
    670c:	7601      	strb	r1, [r0, #24]
    670e:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    6712:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6716:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    671a:	f008 fa1d 	bl	eb58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    671e:	4915      	ldr	r1, [pc, #84]	; (6774 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    6720:	4603      	mov	r3, r0
    6722:	462a      	mov	r2, r5
    6724:	3108      	adds	r1, #8
    6726:	2001      	movs	r0, #1
    6728:	f005 fc86 	bl	c038 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    672c:	f005 fcba 	bl	c0a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    6730:	2001      	movs	r0, #1
    6732:	f000 fb73 	bl	6e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    6736:	4810      	ldr	r0, [pc, #64]	; (6778 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    6738:	6800      	ldr	r0, [r0, #0]
    673a:	2803      	cmp	r0, #3
    673c:	d010      	beq.n	6760 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    673e:	280b      	cmp	r0, #11
    6740:	d00e      	beq.n	6760 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    6742:	4648      	mov	r0, r9
    6744:	f840 7f52 	str.w	r7, [r0, #82]!
    6748:	6047      	str	r7, [r0, #4]
    674a:	480a      	ldr	r0, [pc, #40]	; (6774 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    674c:	88b1      	ldrh	r1, [r6, #4]
    674e:	3052      	adds	r0, #82	; 0x52
    6750:	8041      	strh	r1, [r0, #2]
    6752:	8821      	ldrh	r1, [r4, #0]
    6754:	8001      	strh	r1, [r0, #0]
    6756:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    675a:	7101      	strb	r1, [r0, #4]
    675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6760:	f240 11c1 	movw	r1, #449	; 0x1c1
    6764:	2027      	movs	r0, #39	; 0x27
    6766:	f7fe ffaf 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    676a:	0000      	.short	0x0000
    676c:	200000b0 	.word	0x200000b0
    6770:	00007020 	.word	0x00007020
    6774:	20000dc8 	.word	0x20000dc8
    6778:	40001550 	.word	0x40001550

0000677c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6780:	4605      	mov	r5, r0
    6782:	f000 f8a9 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6786:	4e33      	ldr	r6, [pc, #204]	; (6854 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    6788:	4604      	mov	r4, r0
    678a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    678c:	7847      	ldrb	r7, [r0, #1]
    678e:	b10d      	cbz	r5, 6794 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    6790:	2d01      	cmp	r5, #1
    6792:	d103      	bne.n	679c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    6794:	6b71      	ldr	r1, [r6, #52]	; 0x34
    6796:	f007 f95f 	bl	da58 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    679a:	7070      	strb	r0, [r6, #1]
    679c:	7870      	ldrb	r0, [r6, #1]
    679e:	f04f 0800 	mov.w	r8, #0
    67a2:	f04f 0901 	mov.w	r9, #1
    67a6:	b150      	cbz	r0, 67be <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    67a8:	2801      	cmp	r0, #1
    67aa:	d01a      	beq.n	67e2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    67ac:	2802      	cmp	r0, #2
    67ae:	d034      	beq.n	681a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    67b0:	2803      	cmp	r0, #3
    67b2:	d048      	beq.n	6846 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    67b4:	f240 4115 	movw	r1, #1045	; 0x415
    67b8:	2027      	movs	r0, #39	; 0x27
    67ba:	f7fe ff85 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67be:	2d01      	cmp	r5, #1
    67c0:	d032      	beq.n	6828 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    67c2:	f000 f8e7 	bl	6994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    67c6:	4639      	mov	r1, r7
    67c8:	2201      	movs	r2, #1
    67ca:	6b70      	ldr	r0, [r6, #52]	; 0x34
    67cc:	f007 fd6b 	bl	e2a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    67d0:	e028      	b.n	6824 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    67d2:	bf00      	nop
    67d4:	f884 8008 	strb.w	r8, [r4, #8]
    67d8:	e031      	b.n	683e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    67da:	bf00      	nop
    67dc:	f884 9008 	strb.w	r9, [r4, #8]
    67e0:	e02d      	b.n	683e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    67e2:	2d01      	cmp	r5, #1
    67e4:	d008      	beq.n	67f8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    67e6:	f000 f8d5 	bl	6994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    67ea:	4639      	mov	r1, r7
    67ec:	2200      	movs	r2, #0
    67ee:	6b70      	ldr	r0, [r6, #52]	; 0x34
    67f0:	f007 fd59 	bl	e2a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    67f4:	2d02      	cmp	r5, #2
    67f6:	d00b      	beq.n	6810 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    67f8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    67fc:	1c40      	adds	r0, r0, #1
    67fe:	f141 0100 	adc.w	r1, r1, #0
    6802:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6806:	7a20      	ldrb	r0, [r4, #8]
    6808:	2801      	cmp	r0, #1
    680a:	d003      	beq.n	6814 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    680c:	f884 9008 	strb.w	r9, [r4, #8]
    6810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6814:	f884 8008 	strb.w	r8, [r4, #8]
    6818:	e7fa      	b.n	6810 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    681a:	2d01      	cmp	r5, #1
    681c:	d004      	beq.n	6828 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    681e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    6820:	f007 ff52 	bl	e6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6824:	2d02      	cmp	r5, #2
    6826:	d0f3      	beq.n	6810 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    6828:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    682c:	1c40      	adds	r0, r0, #1
    682e:	f141 0100 	adc.w	r1, r1, #0
    6832:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6836:	7a20      	ldrb	r0, [r4, #8]
    6838:	2801      	cmp	r0, #1
    683a:	d1cf      	bne.n	67dc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    683c:	e7ca      	b.n	67d4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    683e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6842:	f001 b8cd 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6846:	2d01      	cmp	r5, #1
    6848:	d0e2      	beq.n	6810 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    684a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    684c:	f007 ff3c 	bl	e6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    6850:	e7f5      	b.n	683e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    6852:	0000      	.short	0x0000
    6854:	200000b0 	.word	0x200000b0

00006858 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    6858:	4802      	ldr	r0, [pc, #8]	; (6864 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    685a:	89c0      	ldrh	r0, [r0, #14]
    685c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    6860:	4770      	bx	lr
    6862:	0000      	.short	0x0000
    6864:	200000b0 	.word	0x200000b0

00006868 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    6868:	4804      	ldr	r0, [pc, #16]	; (687c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    686a:	7800      	ldrb	r0, [r0, #0]
    686c:	b108      	cbz	r0, 6872 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    686e:	200c      	movs	r0, #12
    6870:	4770      	bx	lr
    6872:	4903      	ldr	r1, [pc, #12]	; (6880 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    6874:	2000      	movs	r0, #0
    6876:	7448      	strb	r0, [r1, #17]
    6878:	4770      	bx	lr
    687a:	0000      	.short	0x0000
    687c:	200000b0 	.word	0x200000b0
    6880:	20000e1a 	.word	0x20000e1a

00006884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    6884:	480c      	ldr	r0, [pc, #48]	; (68b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    6886:	b510      	push	{r4, lr}
    6888:	7801      	ldrb	r1, [r0, #0]
    688a:	b149      	cbz	r1, 68a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    688c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    6890:	7800      	ldrb	r0, [r0, #0]
    6892:	2802      	cmp	r0, #2
    6894:	d008      	beq.n	68a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    6896:	f240 11dd 	movw	r1, #477	; 0x1dd
    689a:	2027      	movs	r0, #39	; 0x27
    689c:	f7fe ff14 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68a4:	f000 b9d8 	b.w	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    68a8:	6848      	ldr	r0, [r1, #4]
    68aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    68ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68b2:	f005 bddf 	b.w	c474 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    68b6:	0000      	.short	0x0000
    68b8:	200000b0 	.word	0x200000b0
    68bc:	4a02      	ldr	r2, [pc, #8]	; (68c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    68be:	8993      	ldrh	r3, [r2, #12]
    68c0:	4303      	orrs	r3, r0
    68c2:	8193      	strh	r3, [r2, #12]
    68c4:	6952      	ldr	r2, [r2, #20]
    68c6:	4710      	bx	r2
    68c8:	200000b0 	.word	0x200000b0
    68cc:	4801      	ldr	r0, [pc, #4]	; (68d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    68ce:	6840      	ldr	r0, [r0, #4]
    68d0:	4770      	bx	lr
    68d2:	0000      	.short	0x0000
    68d4:	200000e8 	.word	0x200000e8
    68d8:	4801      	ldr	r0, [pc, #4]	; (68e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    68da:	6840      	ldr	r0, [r0, #4]
    68dc:	3070      	adds	r0, #112	; 0x70
    68de:	4770      	bx	lr
    68e0:	200000e8 	.word	0x200000e8
    68e4:	4a01      	ldr	r2, [pc, #4]	; (68ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    68e6:	2100      	movs	r1, #0
    68e8:	6952      	ldr	r2, [r2, #20]
    68ea:	4710      	bx	r2
    68ec:	200000b0 	.word	0x200000b0
    68f0:	b570      	push	{r4, r5, r6, lr}
    68f2:	f7ff fff1 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    68f6:	4604      	mov	r4, r0
    68f8:	f7ff ffe8 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    68fc:	4605      	mov	r5, r0
    68fe:	4621      	mov	r1, r4
    6900:	f008 faa7 	bl	ee52 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    6904:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    6908:	2901      	cmp	r1, #1
    690a:	d114      	bne.n	6936 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    690c:	2800      	cmp	r0, #0
    690e:	d012      	beq.n	6936 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    6910:	4809      	ldr	r0, [pc, #36]	; (6938 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    6912:	6842      	ldr	r2, [r0, #4]
    6914:	8828      	ldrh	r0, [r5, #0]
    6916:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    691a:	7a60      	ldrb	r0, [r4, #9]
    691c:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    6920:	7aa0      	ldrb	r0, [r4, #10]
    6922:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    6926:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    692a:	2001      	movs	r0, #1
    692c:	7010      	strb	r0, [r2, #0]
    692e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6932:	f001 b855 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6936:	bd70      	pop	{r4, r5, r6, pc}
    6938:	200000e8 	.word	0x200000e8
    693c:	b570      	push	{r4, r5, r6, lr}
    693e:	4605      	mov	r5, r0
    6940:	2901      	cmp	r1, #1
    6942:	d818      	bhi.n	6976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6944:	4c12      	ldr	r4, [pc, #72]	; (6990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    6946:	69a1      	ldr	r1, [r4, #24]
    6948:	4788      	blx	r1
    694a:	b1a0      	cbz	r0, 6976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    694c:	7960      	ldrb	r0, [r4, #5]
    694e:	b990      	cbnz	r0, 6976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    6950:	b9e5      	cbnz	r5, 698c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    6952:	f104 0010 	add.w	r0, r4, #16
    6956:	7801      	ldrb	r1, [r0, #0]
    6958:	06c8      	lsls	r0, r1, #27
    695a:	d405      	bmi.n	6968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    695c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    695e:	7800      	ldrb	r0, [r0, #0]
    6960:	06c0      	lsls	r0, r0, #27
    6962:	d401      	bmi.n	6968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    6964:	2001      	movs	r0, #1
    6966:	e000      	b.n	696a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    6968:	2000      	movs	r0, #0
    696a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    696c:	b92a      	cbnz	r2, 697a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    696e:	8962      	ldrh	r2, [r4, #10]
    6970:	b11a      	cbz	r2, 697a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6972:	06c9      	lsls	r1, r1, #27
    6974:	d401      	bmi.n	697a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    6976:	2001      	movs	r0, #1
    6978:	bd70      	pop	{r4, r5, r6, pc}
    697a:	89a1      	ldrh	r1, [r4, #12]
    697c:	078a      	lsls	r2, r1, #30
    697e:	d503      	bpl.n	6988 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    6980:	6a22      	ldr	r2, [r4, #32]
    6982:	78d2      	ldrb	r2, [r2, #3]
    6984:	2a02      	cmp	r2, #2
    6986:	d001      	beq.n	698c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    6988:	4308      	orrs	r0, r1
    698a:	d1f4      	bne.n	6976 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    698c:	2000      	movs	r0, #0
    698e:	bd70      	pop	{r4, r5, r6, pc}
    6990:	200000b0 	.word	0x200000b0
    6994:	b510      	push	{r4, lr}
    6996:	4c08      	ldr	r4, [pc, #32]	; (69b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    6998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    699a:	b138      	cbz	r0, 69ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    699c:	8962      	ldrh	r2, [r4, #10]
    699e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    69a0:	1cd2      	adds	r2, r2, #3
    69a2:	f006 ff00 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    69a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    69a8:	6260      	str	r0, [r4, #36]	; 0x24
    69aa:	bd10      	pop	{r4, pc}
    69ac:	f240 415b 	movw	r1, #1115	; 0x45b
    69b0:	2027      	movs	r0, #39	; 0x27
    69b2:	f7fe fe89 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69b6:	0000      	.short	0x0000
    69b8:	200000b0 	.word	0x200000b0
    69bc:	b510      	push	{r4, lr}
    69be:	f7ff ff85 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    69c2:	4604      	mov	r4, r0
    69c4:	f7ff ff88 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    69c8:	4601      	mov	r1, r0
    69ca:	7b42      	ldrb	r2, [r0, #13]
    69cc:	4815      	ldr	r0, [pc, #84]	; (6a24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    69ce:	2a24      	cmp	r2, #36	; 0x24
    69d0:	d00e      	beq.n	69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    69d2:	7b89      	ldrb	r1, [r1, #14]
    69d4:	2924      	cmp	r1, #36	; 0x24
    69d6:	d00b      	beq.n	69f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    69d8:	2a1f      	cmp	r2, #31
    69da:	d00d      	beq.n	69f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    69dc:	2a20      	cmp	r2, #32
    69de:	d00b      	beq.n	69f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    69e0:	2922      	cmp	r1, #34	; 0x22
    69e2:	d00f      	beq.n	6a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    69e4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    69e8:	2804      	cmp	r0, #4
    69ea:	d100      	bne.n	69ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    69ec:	2008      	movs	r0, #8
    69ee:	bd10      	pop	{r4, pc}
    69f0:	6840      	ldr	r0, [r0, #4]
    69f2:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    69f6:	e00e      	b.n	6a16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    69f8:	2922      	cmp	r1, #34	; 0x22
    69fa:	d003      	beq.n	6a04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    69fc:	6840      	ldr	r0, [r0, #4]
    69fe:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    6a02:	e005      	b.n	6a10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    6a04:	6841      	ldr	r1, [r0, #4]
    6a06:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    6a0a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6a0e:	4008      	ands	r0, r1
    6a10:	f008 f898 	bl	eb44 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6a14:	4601      	mov	r1, r0
    6a16:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    6a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a1e:	f008 b8a9 	b.w	eb74 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    6a22:	0000      	.short	0x0000
    6a24:	200000e8 	.word	0x200000e8
    6a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a2c:	4688      	mov	r8, r1
    6a2e:	4607      	mov	r7, r0
    6a30:	f7ff ff52 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6a34:	4c57      	ldr	r4, [pc, #348]	; (6b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    6a36:	2600      	movs	r6, #0
    6a38:	4605      	mov	r5, r0
    6a3a:	f88d 6000 	strb.w	r6, [sp]
    6a3e:	7820      	ldrb	r0, [r4, #0]
    6a40:	2802      	cmp	r0, #2
    6a42:	d004      	beq.n	6a4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    6a44:	f240 41ba 	movw	r1, #1210	; 0x4ba
    6a48:	2027      	movs	r0, #39	; 0x27
    6a4a:	f7fe fe3d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a4e:	7ba0      	ldrb	r0, [r4, #14]
    6a50:	0640      	lsls	r0, r0, #25
    6a52:	d406      	bmi.n	6a62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    6a54:	2040      	movs	r0, #64	; 0x40
    6a56:	f7ff ff45 	bl	68e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6a5a:	89e0      	ldrh	r0, [r4, #14]
    6a5c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6a60:	81e0      	strh	r0, [r4, #14]
    6a62:	7ce8      	ldrb	r0, [r5, #19]
    6a64:	b3c7      	cbz	r7, 6ad8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    6a66:	f005 fb4d 	bl	c104 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    6a6a:	f005 fb31 	bl	c0d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    6a6e:	b968      	cbnz	r0, 6a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6a70:	7ce8      	ldrb	r0, [r5, #19]
    6a72:	b158      	cbz	r0, 6a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6a74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a76:	7841      	ldrb	r1, [r0, #1]
    6a78:	b141      	cbz	r1, 6a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6a7a:	7800      	ldrb	r0, [r0, #0]
    6a7c:	7a29      	ldrb	r1, [r5, #8]
    6a7e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6a82:	4288      	cmp	r0, r1
    6a84:	d102      	bne.n	6a8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6a86:	2001      	movs	r0, #1
    6a88:	70a0      	strb	r0, [r4, #2]
    6a8a:	e063      	b.n	6b54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    6a8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a8e:	7841      	ldrb	r1, [r0, #1]
    6a90:	8161      	strh	r1, [r4, #10]
    6a92:	b121      	cbz	r1, 6a9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    6a94:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6a96:	f007 fde4 	bl	e662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6a9a:	62a0      	str	r0, [r4, #40]	; 0x28
    6a9c:	e000      	b.n	6aa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    6a9e:	62a6      	str	r6, [r4, #40]	; 0x28
    6aa0:	89e0      	ldrh	r0, [r4, #14]
    6aa2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6aa6:	81e0      	strh	r0, [r4, #14]
    6aa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6aaa:	79e9      	ldrb	r1, [r5, #7]
    6aac:	7800      	ldrb	r0, [r0, #0]
    6aae:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6ab2:	4288      	cmp	r0, r1
    6ab4:	d005      	beq.n	6ac2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    6ab6:	f000 f963 	bl	6d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    6aba:	89e0      	ldrh	r0, [r4, #14]
    6abc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6ac0:	81e0      	strh	r0, [r4, #14]
    6ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6ac4:	7a29      	ldrb	r1, [r5, #8]
    6ac6:	7800      	ldrb	r0, [r0, #0]
    6ac8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6acc:	4288      	cmp	r0, r1
    6ace:	d10e      	bne.n	6aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6ad0:	4668      	mov	r0, sp
    6ad2:	f000 f917 	bl	6d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6ad6:	e00a      	b.n	6aee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6ad8:	e7ff      	b.n	6ada <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    6ada:	b108      	cbz	r0, 6ae0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    6adc:	f005 fb0c 	bl	c0f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6ae0:	78e0      	ldrb	r0, [r4, #3]
    6ae2:	1c40      	adds	r0, r0, #1
    6ae4:	70e0      	strb	r0, [r4, #3]
    6ae6:	89e0      	ldrh	r0, [r4, #14]
    6ae8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6aec:	81e0      	strh	r0, [r4, #14]
    6aee:	7ca8      	ldrb	r0, [r5, #18]
    6af0:	b198      	cbz	r0, 6b1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    6af2:	f7ff feeb 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6af6:	4928      	ldr	r1, [pc, #160]	; (6b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    6af8:	760e      	strb	r6, [r1, #24]
    6afa:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    6afe:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6b02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6b06:	f008 f827 	bl	eb58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6b0a:	4603      	mov	r3, r0
    6b0c:	22fb      	movs	r2, #251	; 0xfb
    6b0e:	4922      	ldr	r1, [pc, #136]	; (6b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    6b10:	2000      	movs	r0, #0
    6b12:	f005 fa91 	bl	c038 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    6b16:	f005 fac5 	bl	c0a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    6b1a:	4d1f      	ldr	r5, [pc, #124]	; (6b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    6b1c:	354a      	adds	r5, #74	; 0x4a
    6b1e:	f1b8 0f00 	cmp.w	r8, #0
    6b22:	d104      	bne.n	6b2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    6b24:	78e1      	ldrb	r1, [r4, #3]
    6b26:	2001      	movs	r0, #1
    6b28:	f7ff ff08 	bl	693c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6b2c:	b1b0      	cbz	r0, 6b5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    6b2e:	f005 fed9 	bl	c8e4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6b32:	f89d 0000 	ldrb.w	r0, [sp]
    6b36:	b110      	cbz	r0, 6b3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6b38:	2000      	movs	r0, #0
    6b3a:	f7ff fe1f 	bl	677c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6b3e:	b137      	cbz	r7, 6b4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6b40:	70e6      	strb	r6, [r4, #3]
    6b42:	7968      	ldrb	r0, [r5, #5]
    6b44:	1c40      	adds	r0, r0, #1
    6b46:	7168      	strb	r0, [r5, #5]
    6b48:	f7ff fed2 	bl	68f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6b4c:	e002      	b.n	6b54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    6b4e:	79a8      	ldrb	r0, [r5, #6]
    6b50:	1c40      	adds	r0, r0, #1
    6b52:	71a8      	strb	r0, [r5, #6]
    6b54:	f000 f880 	bl	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b5c:	f89d 0000 	ldrb.w	r0, [sp]
    6b60:	b110      	cbz	r0, 6b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    6b62:	2001      	movs	r0, #1
    6b64:	f7ff fe0a 	bl	677c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6b68:	2000      	movs	r0, #0
    6b6a:	f000 f995 	bl	6e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    6b6e:	f89d 0000 	ldrb.w	r0, [sp]
    6b72:	b110      	cbz	r0, 6b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    6b74:	2002      	movs	r0, #2
    6b76:	f7ff fe01 	bl	677c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6b7a:	b137      	cbz	r7, 6b8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    6b7c:	70e6      	strb	r6, [r4, #3]
    6b7e:	7968      	ldrb	r0, [r5, #5]
    6b80:	1c40      	adds	r0, r0, #1
    6b82:	7168      	strb	r0, [r5, #5]
    6b84:	f7ff feb4 	bl	68f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6b88:	e7e6      	b.n	6b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    6b8a:	79a8      	ldrb	r0, [r5, #6]
    6b8c:	1c40      	adds	r0, r0, #1
    6b8e:	71a8      	strb	r0, [r5, #6]
    6b90:	e7e2      	b.n	6b58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    6b92:	0000      	.short	0x0000
    6b94:	200000b0 	.word	0x200000b0
    6b98:	20000dd0 	.word	0x20000dd0
    6b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ba0:	460f      	mov	r7, r1
    6ba2:	4680      	mov	r8, r0
    6ba4:	f7ff fe98 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6ba8:	4d29      	ldr	r5, [pc, #164]	; (6c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    6baa:	4604      	mov	r4, r0
    6bac:	7828      	ldrb	r0, [r5, #0]
    6bae:	2801      	cmp	r0, #1
    6bb0:	d004      	beq.n	6bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    6bb2:	f240 416a 	movw	r1, #1130	; 0x46a
    6bb6:	2027      	movs	r0, #39	; 0x27
    6bb8:	f7fe fd86 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bbc:	7861      	ldrb	r1, [r4, #1]
    6bbe:	2000      	movs	r0, #0
    6bc0:	2601      	movs	r6, #1
    6bc2:	b129      	cbz	r1, 6bd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6bc4:	7060      	strb	r0, [r4, #1]
    6bc6:	2100      	movs	r1, #0
    6bc8:	2004      	movs	r0, #4
    6bca:	f7ff fe77 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6bce:	70e6      	strb	r6, [r4, #3]
    6bd0:	6a29      	ldr	r1, [r5, #32]
    6bd2:	7808      	ldrb	r0, [r1, #0]
    6bd4:	43c0      	mvns	r0, r0
    6bd6:	0780      	lsls	r0, r0, #30
    6bd8:	d109      	bne.n	6bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    6bda:	79a0      	ldrb	r0, [r4, #6]
    6bdc:	bb88      	cbnz	r0, 6c42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    6bde:	2002      	movs	r0, #2
    6be0:	f7ff fe6c 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6be4:	6a28      	ldr	r0, [r5, #32]
    6be6:	7800      	ldrb	r0, [r0, #0]
    6be8:	43c0      	mvns	r0, r0
    6bea:	0780      	lsls	r0, r0, #30
    6bec:	d029      	beq.n	6c42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    6bee:	6a28      	ldr	r0, [r5, #32]
    6bf0:	7840      	ldrb	r0, [r0, #1]
    6bf2:	b110      	cbz	r0, 6bfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    6bf4:	2002      	movs	r0, #2
    6bf6:	71a0      	strb	r0, [r4, #6]
    6bf8:	e000      	b.n	6bfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    6bfa:	71a6      	strb	r6, [r4, #6]
    6bfc:	7ce0      	ldrb	r0, [r4, #19]
    6bfe:	b1a0      	cbz	r0, 6c2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    6c00:	f7ff fe64 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6c04:	4913      	ldr	r1, [pc, #76]	; (6c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    6c06:	7a6d      	ldrb	r5, [r5, #9]
    6c08:	760e      	strb	r6, [r1, #24]
    6c0a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    6c0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6c12:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6c16:	f007 ff9f 	bl	eb58 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6c1a:	4603      	mov	r3, r0
    6c1c:	462a      	mov	r2, r5
    6c1e:	490d      	ldr	r1, [pc, #52]	; (6c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    6c20:	2001      	movs	r0, #1
    6c22:	f005 fa09 	bl	c038 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    6c26:	f005 fa3d 	bl	c0a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    6c2a:	ea37 0708 	bics.w	r7, r7, r8
    6c2e:	d004      	beq.n	6c3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    6c30:	2100      	movs	r1, #0
    6c32:	4608      	mov	r0, r1
    6c34:	f7ff fe82 	bl	693c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6c38:	b128      	cbz	r0, 6c46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c3e:	f000 b80b 	b.w	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6c42:	2003      	movs	r0, #3
    6c44:	e7d7      	b.n	6bf6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    6c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c4a:	2000      	movs	r0, #0
    6c4c:	f000 b8e6 	b.w	6e1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    6c50:	200000b0 	.word	0x200000b0
    6c54:	20000dd0 	.word	0x20000dd0
    6c58:	b510      	push	{r4, lr}
    6c5a:	f005 faeb 	bl	c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6c5e:	f005 f9a1 	bl	bfa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6c62:	4c0d      	ldr	r4, [pc, #52]	; (6c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    6c64:	89e0      	ldrh	r0, [r4, #14]
    6c66:	f7ff fe3d 	bl	68e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6c6a:	69e2      	ldr	r2, [r4, #28]
    6c6c:	7961      	ldrb	r1, [r4, #5]
    6c6e:	78a0      	ldrb	r0, [r4, #2]
    6c70:	4790      	blx	r2
    6c72:	480a      	ldr	r0, [pc, #40]	; (6c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6c74:	7c40      	ldrb	r0, [r0, #17]
    6c76:	b158      	cbz	r0, 6c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    6c78:	4808      	ldr	r0, [pc, #32]	; (6c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6c7a:	3852      	subs	r0, #82	; 0x52
    6c7c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    6c80:	6081      	str	r1, [r0, #8]
    6c82:	6841      	ldr	r1, [r0, #4]
    6c84:	60c1      	str	r1, [r0, #12]
    6c86:	4805      	ldr	r0, [pc, #20]	; (6c9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6c88:	2101      	movs	r1, #1
    6c8a:	7401      	strb	r1, [r0, #16]
    6c8c:	f000 fea8 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6c90:	2000      	movs	r0, #0
    6c92:	7020      	strb	r0, [r4, #0]
    6c94:	bd10      	pop	{r4, pc}
    6c96:	0000      	.short	0x0000
    6c98:	200000b0 	.word	0x200000b0
    6c9c:	20000e1a 	.word	0x20000e1a
    6ca0:	4808      	ldr	r0, [pc, #32]	; (6cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    6ca2:	b510      	push	{r4, lr}
    6ca4:	7800      	ldrb	r0, [r0, #0]
    6ca6:	2802      	cmp	r0, #2
    6ca8:	d004      	beq.n	6cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    6caa:	f240 2111 	movw	r1, #529	; 0x211
    6cae:	2027      	movs	r0, #39	; 0x27
    6cb0:	f7fe fd0a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cb4:	4904      	ldr	r1, [pc, #16]	; (6cc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    6cb6:	2001      	movs	r0, #1
    6cb8:	71c8      	strb	r0, [r1, #7]
    6cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cbe:	f7ff bfcb 	b.w	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6cc2:	0000      	.short	0x0000
    6cc4:	200000b0 	.word	0x200000b0
    6cc8:	20000e1a 	.word	0x20000e1a
    6ccc:	b430      	push	{r4, r5}
    6cce:	4b0c      	ldr	r3, [pc, #48]	; (6d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    6cd0:	b942      	cbnz	r2, 6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6cd2:	79da      	ldrb	r2, [r3, #7]
    6cd4:	2aff      	cmp	r2, #255	; 0xff
    6cd6:	d105      	bne.n	6ce4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6cd8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    6cdc:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    6ce0:	42a2      	cmp	r2, r4
    6ce2:	d00b      	beq.n	6cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    6ce4:	b131      	cbz	r1, 6cf4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    6ce6:	79da      	ldrb	r2, [r3, #7]
    6ce8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    6cec:	bc30      	pop	{r4, r5}
    6cee:	4610      	mov	r0, r2
    6cf0:	f005 be30 	b.w	c954 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    6cf4:	22ff      	movs	r2, #255	; 0xff
    6cf6:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    6cfa:	e7f7      	b.n	6cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    6cfc:	bc30      	pop	{r4, r5}
    6cfe:	4770      	bx	lr
    6d00:	200000b0 	.word	0x200000b0
    6d04:	b570      	push	{r4, r5, r6, lr}
    6d06:	4606      	mov	r6, r0
    6d08:	f7ff fde6 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6d0c:	4a1b      	ldr	r2, [pc, #108]	; (6d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    6d0e:	4604      	mov	r4, r0
    6d10:	2501      	movs	r5, #1
    6d12:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6d14:	7808      	ldrb	r0, [r1, #0]
    6d16:	f000 0003 	and.w	r0, r0, #3
    6d1a:	2801      	cmp	r0, #1
    6d1c:	d00c      	beq.n	6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    6d1e:	2802      	cmp	r0, #2
    6d20:	d00a      	beq.n	6d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    6d22:	2803      	cmp	r0, #3
    6d24:	d121      	bne.n	6d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    6d26:	7065      	strb	r5, [r4, #1]
    6d28:	89d0      	ldrh	r0, [r2, #14]
    6d2a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6d2e:	81d0      	strh	r0, [r2, #14]
    6d30:	2001      	movs	r0, #1
    6d32:	f7ff fdc3 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6d36:	e018      	b.n	6d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    6d38:	7848      	ldrb	r0, [r1, #1]
    6d3a:	b1b0      	cbz	r0, 6d6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    6d3c:	89d1      	ldrh	r1, [r2, #14]
    6d3e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6d42:	81d1      	strh	r1, [r2, #14]
    6d44:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6d46:	2900      	cmp	r1, #0
    6d48:	d009      	beq.n	6d5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    6d4a:	28fb      	cmp	r0, #251	; 0xfb
    6d4c:	d808      	bhi.n	6d60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    6d4e:	7990      	ldrb	r0, [r2, #6]
    6d50:	b120      	cbz	r0, 6d5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    6d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d56:	2020      	movs	r0, #32
    6d58:	f7ff bdc4 	b.w	68e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6d5c:	7035      	strb	r5, [r6, #0]
    6d5e:	bd70      	pop	{r4, r5, r6, pc}
    6d60:	7950      	ldrb	r0, [r2, #5]
    6d62:	f040 0010 	orr.w	r0, r0, #16
    6d66:	7150      	strb	r0, [r2, #5]
    6d68:	bd70      	pop	{r4, r5, r6, pc}
    6d6a:	7a20      	ldrb	r0, [r4, #8]
    6d6c:	2801      	cmp	r0, #1
    6d6e:	d001      	beq.n	6d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    6d70:	7225      	strb	r5, [r4, #8]
    6d72:	bd70      	pop	{r4, r5, r6, pc}
    6d74:	2000      	movs	r0, #0
    6d76:	7220      	strb	r0, [r4, #8]
    6d78:	bd70      	pop	{r4, r5, r6, pc}
    6d7a:	0000      	.short	0x0000
    6d7c:	200000b0 	.word	0x200000b0
    6d80:	b570      	push	{r4, r5, r6, lr}
    6d82:	f7ff fda9 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6d86:	4604      	mov	r4, r0
    6d88:	7980      	ldrb	r0, [r0, #6]
    6d8a:	2800      	cmp	r0, #0
    6d8c:	d02e      	beq.n	6dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    6d8e:	2802      	cmp	r0, #2
    6d90:	d10d      	bne.n	6dae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6d92:	481c      	ldr	r0, [pc, #112]	; (6e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    6d94:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6d96:	f007 fa5f 	bl	e258 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6d9a:	b340      	cbz	r0, 6dee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    6d9c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6da0:	1c40      	adds	r0, r0, #1
    6da2:	f141 0100 	adc.w	r1, r1, #0
    6da6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    6daa:	f000 fe19 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6dae:	2500      	movs	r5, #0
    6db0:	71a5      	strb	r5, [r4, #6]
    6db2:	78e0      	ldrb	r0, [r4, #3]
    6db4:	b120      	cbz	r0, 6dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    6db6:	70e5      	strb	r5, [r4, #3]
    6db8:	2100      	movs	r1, #0
    6dba:	2010      	movs	r0, #16
    6dbc:	f7ff fd7e 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6dc0:	78a0      	ldrb	r0, [r4, #2]
    6dc2:	b170      	cbz	r0, 6de2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    6dc4:	70a5      	strb	r5, [r4, #2]
    6dc6:	f7ff fb07 	bl	63d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6dca:	b198      	cbz	r0, 6df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    6dcc:	2100      	movs	r1, #0
    6dce:	2008      	movs	r0, #8
    6dd0:	f7ff fd74 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6dd4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6dd8:	1c40      	adds	r0, r0, #1
    6dda:	f141 0100 	adc.w	r1, r1, #0
    6dde:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    6de2:	79e0      	ldrb	r0, [r4, #7]
    6de4:	2801      	cmp	r0, #1
    6de6:	d00a      	beq.n	6dfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    6de8:	2001      	movs	r0, #1
    6dea:	71e0      	strb	r0, [r4, #7]
    6dec:	bd70      	pop	{r4, r5, r6, pc}
    6dee:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    6df2:	e001      	b.n	6df8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    6df4:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    6df8:	2027      	movs	r0, #39	; 0x27
    6dfa:	f7fe fc65 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dfe:	71e5      	strb	r5, [r4, #7]
    6e00:	bd70      	pop	{r4, r5, r6, pc}
    6e02:	0000      	.short	0x0000
    6e04:	200000b0 	.word	0x200000b0
    6e08:	4803      	ldr	r0, [pc, #12]	; (6e18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    6e0a:	7800      	ldrb	r0, [r0, #0]
    6e0c:	2800      	cmp	r0, #0
    6e0e:	d001      	beq.n	6e14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    6e10:	f7ff bf22 	b.w	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6e14:	4770      	bx	lr
    6e16:	0000      	.short	0x0000
    6e18:	200000b0 	.word	0x200000b0
    6e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e20:	4606      	mov	r6, r0
    6e22:	f7ff fd53 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6e26:	4680      	mov	r8, r0
    6e28:	f7ff fd56 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6e2c:	4c17      	ldr	r4, [pc, #92]	; (6e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    6e2e:	4605      	mov	r5, r0
    6e30:	4632      	mov	r2, r6
    6e32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6e34:	6260      	str	r0, [r4, #36]	; 0x24
    6e36:	2101      	movs	r1, #1
    6e38:	4640      	mov	r0, r8
    6e3a:	f7ff ff47 	bl	6ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6e3e:	7ce8      	ldrb	r0, [r5, #19]
    6e40:	2700      	movs	r7, #0
    6e42:	b180      	cbz	r0, 6e66 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    6e44:	4812      	ldr	r0, [pc, #72]	; (6e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    6e46:	f005 fca3 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6e4a:	4812      	ldr	r0, [pc, #72]	; (6e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    6e4c:	2101      	movs	r1, #1
    6e4e:	7601      	strb	r1, [r0, #24]
    6e50:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6e54:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6e58:	490d      	ldr	r1, [pc, #52]	; (6e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    6e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6e5c:	f005 f874 	bl	bf48 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    6e60:	f005 f886 	bl	bf70 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    6e64:	e004      	b.n	6e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    6e66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6e68:	f005 fc92 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6e6c:	f005 f89a 	bl	bfa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6e70:	b916      	cbnz	r6, 6e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    6e72:	4638      	mov	r0, r7
    6e74:	f005 fb22 	bl	c4bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6e78:	2100      	movs	r1, #0
    6e7a:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6e7e:	4608      	mov	r0, r1
    6e80:	f005 fd12 	bl	c8a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6e84:	2002      	movs	r0, #2
    6e86:	7020      	strb	r0, [r4, #0]
    6e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e8c:	200000b0 	.word	0x200000b0
    6e90:	20000cc8 	.word	0x20000cc8
    6e94:	20000dd0 	.word	0x20000dd0
    6e98:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6e9c:	4604      	mov	r4, r0
    6e9e:	f7ff fd1b 	bl	68d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6ea2:	4605      	mov	r5, r0
    6ea4:	f7ff fd12 	bl	68cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6ea8:	4606      	mov	r6, r0
    6eaa:	f8df 9168 	ldr.w	r9, [pc, #360]	; 7014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    6eae:	4622      	mov	r2, r4
    6eb0:	2100      	movs	r1, #0
    6eb2:	f7ff ff0b 	bl	6ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6eb6:	79a8      	ldrb	r0, [r5, #6]
    6eb8:	2701      	movs	r7, #1
    6eba:	f04f 0800 	mov.w	r8, #0
    6ebe:	f1a9 0420 	sub.w	r4, r9, #32
    6ec2:	b140      	cbz	r0, 6ed6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    6ec4:	2801      	cmp	r0, #1
    6ec6:	d01f      	beq.n	6f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    6ec8:	2802      	cmp	r0, #2
    6eca:	d030      	beq.n	6f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    6ecc:	2803      	cmp	r0, #3
    6ece:	d03c      	beq.n	6f4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    6ed0:	f240 21ae 	movw	r1, #686	; 0x2ae
    6ed4:	e058      	b.n	6f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6ed6:	7a20      	ldrb	r0, [r4, #8]
    6ed8:	2150      	movs	r1, #80	; 0x50
    6eda:	f8ad 0004 	strh.w	r0, [sp, #4]
    6ede:	5388      	strh	r0, [r1, r6]
    6ee0:	4648      	mov	r0, r9
    6ee2:	f7ff faa3 	bl	642c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6ee6:	b128      	cbz	r0, 6ef4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    6ee8:	2080      	movs	r0, #128	; 0x80
    6eea:	6a21      	ldr	r1, [r4, #32]
    6eec:	f7ff fce6 	bl	68bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6ef0:	70af      	strb	r7, [r5, #2]
    6ef2:	e02e      	b.n	6f52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6ef4:	466a      	mov	r2, sp
    6ef6:	a901      	add	r1, sp, #4
    6ef8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6efa:	f007 fe45 	bl	eb88 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6efe:	6220      	str	r0, [r4, #32]
    6f00:	b110      	cbz	r0, 6f08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    6f02:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    6f06:	b111      	cbz	r1, 6f0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    6f08:	4843      	ldr	r0, [pc, #268]	; (7018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6f0a:	6220      	str	r0, [r4, #32]
    6f0c:	e021      	b.n	6f52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6f0e:	f89d 1000 	ldrb.w	r1, [sp]
    6f12:	b931      	cbnz	r1, 6f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6f14:	f8a0 8000 	strh.w	r8, [r0]
    6f18:	f880 8002 	strb.w	r8, [r0, #2]
    6f1c:	2101      	movs	r1, #1
    6f1e:	f008 f97d 	bl	f21c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6f22:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6f26:	6a20      	ldr	r0, [r4, #32]
    6f28:	f008 f93c 	bl	f1a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6f2c:	e011      	b.n	6f52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6f2e:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    6f32:	f8ad 0004 	strh.w	r0, [sp, #4]
    6f36:	466a      	mov	r2, sp
    6f38:	a901      	add	r1, sp, #4
    6f3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6f3c:	f007 fe24 	bl	eb88 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6f40:	6220      	str	r0, [r4, #32]
    6f42:	b930      	cbnz	r0, 6f52 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6f44:	f240 219f 	movw	r1, #671	; 0x29f
    6f48:	e01e      	b.n	6f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6f4a:	4648      	mov	r0, r9
    6f4c:	f7ff fa6e 	bl	642c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6f50:	b1c0      	cbz	r0, 6f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    6f52:	6a20      	ldr	r0, [r4, #32]
    6f54:	2308      	movs	r3, #8
    6f56:	7801      	ldrb	r1, [r0, #0]
    6f58:	f021 0108 	bic.w	r1, r1, #8
    6f5c:	7001      	strb	r1, [r0, #0]
    6f5e:	79ea      	ldrb	r2, [r5, #7]
    6f60:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6f64:	4311      	orrs	r1, r2
    6f66:	f021 0104 	bic.w	r1, r1, #4
    6f6a:	7001      	strb	r1, [r0, #0]
    6f6c:	7a2a      	ldrb	r2, [r5, #8]
    6f6e:	2304      	movs	r3, #4
    6f70:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6f74:	4311      	orrs	r1, r2
    6f76:	f021 0110 	bic.w	r1, r1, #16
    6f7a:	7001      	strb	r1, [r0, #0]
    6f7c:	43c9      	mvns	r1, r1
    6f7e:	0789      	lsls	r1, r1, #30
    6f80:	d005      	beq.n	6f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    6f82:	e007      	b.n	6f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    6f84:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    6f88:	2027      	movs	r0, #39	; 0x27
    6f8a:	f7fe fb9d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	78c0      	ldrb	r0, [r0, #3]
    6f90:	2802      	cmp	r0, #2
    6f92:	d00f      	beq.n	6fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6f94:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6f96:	f007 fa87 	bl	e4a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6f9a:	b108      	cbz	r0, 6fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6f9c:	2101      	movs	r1, #1
    6f9e:	e00a      	b.n	6fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6fa0:	6a20      	ldr	r0, [r4, #32]
    6fa2:	7800      	ldrb	r0, [r0, #0]
    6fa4:	43c0      	mvns	r0, r0
    6fa6:	0780      	lsls	r0, r0, #30
    6fa8:	d004      	beq.n	6fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6faa:	f7ff f9fd 	bl	63a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6fae:	f080 0101 	eor.w	r1, r0, #1
    6fb2:	e000      	b.n	6fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6fb4:	2100      	movs	r1, #0
    6fb6:	6a20      	ldr	r0, [r4, #32]
    6fb8:	7802      	ldrb	r2, [r0, #0]
    6fba:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6fbe:	7001      	strb	r1, [r0, #0]
    6fc0:	7ca9      	ldrb	r1, [r5, #18]
    6fc2:	b199      	cbz	r1, 6fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6fc4:	7841      	ldrb	r1, [r0, #1]
    6fc6:	b189      	cbz	r1, 6fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6fc8:	4814      	ldr	r0, [pc, #80]	; (701c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    6fca:	f005 fbe1 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6fce:	4812      	ldr	r0, [pc, #72]	; (7018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6fd0:	3828      	subs	r0, #40	; 0x28
    6fd2:	f880 8018 	strb.w	r8, [r0, #24]
    6fd6:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    6fda:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6fde:	480f      	ldr	r0, [pc, #60]	; (701c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    6fe0:	6a21      	ldr	r1, [r4, #32]
    6fe2:	f004 ffb1 	bl	bf48 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    6fe6:	f004 fffb 	bl	bfe0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    6fea:	e003      	b.n	6ff4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    6fec:	f005 fbd0 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ff0:	f004 ffd8 	bl	bfa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6ff4:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    6ff8:	2101      	movs	r1, #1
    6ffa:	2000      	movs	r0, #0
    6ffc:	f005 fc54 	bl	c8a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7000:	7127      	strb	r7, [r4, #4]
    7002:	6a20      	ldr	r0, [r4, #32]
    7004:	8801      	ldrh	r1, [r0, #0]
    7006:	8221      	strh	r1, [r4, #16]
    7008:	7880      	ldrb	r0, [r0, #2]
    700a:	74a0      	strb	r0, [r4, #18]
    700c:	7027      	strb	r7, [r4, #0]
    700e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    7012:	0000      	.short	0x0000
    7014:	200000d0 	.word	0x200000d0
    7018:	20000df8 	.word	0x20000df8
    701c:	20000cc8 	.word	0x20000cc8
    7020:	00006ca1 	.word	0x00006ca1
    7024:	00006a29 	.word	0x00006a29
    7028:	00006b9d 	.word	0x00006b9d
    702c:	00006e09 	.word	0x00006e09

00007030 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    7030:	4800      	ldr	r0, [pc, #0]	; (7034 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    7032:	4770      	bx	lr
    7034:	200016b9 	.word	0x200016b9

00007038 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    7038:	4904      	ldr	r1, [pc, #16]	; (704c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    703a:	788a      	ldrb	r2, [r1, #2]
    703c:	4282      	cmp	r2, r0
    703e:	d903      	bls.n	7048 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    7040:	4408      	add	r0, r1
    7042:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    7046:	4770      	bx	lr
    7048:	2000      	movs	r0, #0
    704a:	4770      	bx	lr
    704c:	200014e6 	.word	0x200014e6

00007050 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    7050:	4904      	ldr	r1, [pc, #16]	; (7064 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    7052:	788a      	ldrb	r2, [r1, #2]
    7054:	4282      	cmp	r2, r0
    7056:	d903      	bls.n	7060 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    7058:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    705c:	3083      	adds	r0, #131	; 0x83
    705e:	4770      	bx	lr
    7060:	2000      	movs	r0, #0
    7062:	4770      	bx	lr
    7064:	200014e6 	.word	0x200014e6

00007068 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    7068:	4a05      	ldr	r2, [pc, #20]	; (7080 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    706a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    706e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7072:	6802      	ldr	r2, [r0, #0]
    7074:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    7078:	8880      	ldrh	r0, [r0, #4]
    707a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    707e:	4770      	bx	lr
    7080:	200014e6 	.word	0x200014e6

00007084 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    7084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7088:	460e      	mov	r6, r1
    708a:	4607      	mov	r7, r0
    708c:	4615      	mov	r5, r2
    708e:	2106      	movs	r1, #6
    7090:	4630      	mov	r0, r6
    7092:	f007 ff68 	bl	ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7096:	4c0d      	ldr	r4, [pc, #52]	; (70cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    7098:	b160      	cbz	r0, 70b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    709a:	2000      	movs	r0, #0
    709c:	e004      	b.n	70a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    709e:	1821      	adds	r1, r4, r0
    70a0:	1c40      	adds	r0, r0, #1
    70a2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    70a6:	b2c0      	uxtb	r0, r0
    70a8:	78a1      	ldrb	r1, [r4, #2]
    70aa:	4281      	cmp	r1, r0
    70ac:	d8f7      	bhi.n	709e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    70ae:	2001      	movs	r0, #1
    70b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70b4:	4631      	mov	r1, r6
    70b6:	4638      	mov	r0, r7
    70b8:	f007 fd75 	bl	eba6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    70bc:	2808      	cmp	r0, #8
    70be:	d003      	beq.n	70c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    70c0:	4420      	add	r0, r4
    70c2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    70c6:	e7f2      	b.n	70ae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    70c8:	2000      	movs	r0, #0
    70ca:	e7f1      	b.n	70b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    70cc:	200014e6 	.word	0x200014e6

000070d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    70d0:	4904      	ldr	r1, [pc, #16]	; (70e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    70d2:	788a      	ldrb	r2, [r1, #2]
    70d4:	4282      	cmp	r2, r0
    70d6:	d903      	bls.n	70e0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    70d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    70dc:	1cc0      	adds	r0, r0, #3
    70de:	4770      	bx	lr
    70e0:	2000      	movs	r0, #0
    70e2:	4770      	bx	lr
    70e4:	200014e6 	.word	0x200014e6

000070e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    70e8:	b510      	push	{r4, lr}
    70ea:	f240 12d3 	movw	r2, #467	; 0x1d3
    70ee:	2100      	movs	r1, #0
    70f0:	4808      	ldr	r0, [pc, #32]	; (7114 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    70f2:	f006 fbd2 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70f6:	2208      	movs	r2, #8
    70f8:	21ff      	movs	r1, #255	; 0xff
    70fa:	4807      	ldr	r0, [pc, #28]	; (7118 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    70fc:	f006 fbcd 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7100:	4805      	ldr	r0, [pc, #20]	; (7118 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    7102:	2100      	movs	r1, #0
    7104:	1f00      	subs	r0, r0, #4
    7106:	7001      	strb	r1, [r0, #0]
    7108:	7041      	strb	r1, [r0, #1]
    710a:	f44f 7161 	mov.w	r1, #900	; 0x384
    710e:	8041      	strh	r1, [r0, #2]
    7110:	bd10      	pop	{r4, pc}
    7112:	0000      	.short	0x0000
    7114:	200014e6 	.word	0x200014e6
    7118:	20000284 	.word	0x20000284

0000711c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    711c:	4901      	ldr	r1, [pc, #4]	; (7124 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    711e:	7008      	strb	r0, [r1, #0]
    7120:	4770      	bx	lr
    7122:	0000      	.short	0x0000
    7124:	20000280 	.word	0x20000280

00007128 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    7128:	4801      	ldr	r0, [pc, #4]	; (7130 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    712a:	7800      	ldrb	r0, [r0, #0]
    712c:	4770      	bx	lr
    712e:	0000      	.short	0x0000
    7130:	20000280 	.word	0x20000280

00007134 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    7134:	4b0b      	ldr	r3, [pc, #44]	; (7164 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    7136:	b510      	push	{r4, lr}
    7138:	789c      	ldrb	r4, [r3, #2]
    713a:	4284      	cmp	r4, r0
    713c:	d90f      	bls.n	715e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    713e:	4418      	add	r0, r3
    7140:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    7144:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7148:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    714c:	700b      	strb	r3, [r1, #0]
    714e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    7152:	6011      	str	r1, [r2, #0]
    7154:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    7158:	8090      	strh	r0, [r2, #4]
    715a:	2001      	movs	r0, #1
    715c:	bd10      	pop	{r4, pc}
    715e:	2000      	movs	r0, #0
    7160:	bd10      	pop	{r4, pc}
    7162:	0000      	.short	0x0000
    7164:	200014e6 	.word	0x200014e6

00007168 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    7168:	4907      	ldr	r1, [pc, #28]	; (7188 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    716a:	788a      	ldrb	r2, [r1, #2]
    716c:	4282      	cmp	r2, r0
    716e:	d909      	bls.n	7184 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    7170:	4408      	add	r0, r1
    7172:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    7176:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    717a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    717e:	f000 0001 	and.w	r0, r0, #1
    7182:	4770      	bx	lr
    7184:	2000      	movs	r0, #0
    7186:	4770      	bx	lr
    7188:	200014e6 	.word	0x200014e6

0000718c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7190:	4698      	mov	r8, r3
    7192:	4691      	mov	r9, r2
    7194:	460c      	mov	r4, r1
    7196:	4605      	mov	r5, r0
    7198:	f000 f936 	bl	7408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    719c:	4606      	mov	r6, r0
    719e:	2810      	cmp	r0, #16
    71a0:	d006      	beq.n	71b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    71a2:	f000 f901 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    71a6:	2810      	cmp	r0, #16
    71a8:	d002      	beq.n	71b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    71aa:	2012      	movs	r0, #18
    71ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71b0:	4f18      	ldr	r7, [pc, #96]	; (7214 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    71b2:	78b8      	ldrb	r0, [r7, #2]
    71b4:	2808      	cmp	r0, #8
    71b6:	d22a      	bcs.n	720e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    71b8:	2e10      	cmp	r6, #16
    71ba:	d105      	bne.n	71c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    71bc:	2200      	movs	r2, #0
    71be:	4621      	mov	r1, r4
    71c0:	4628      	mov	r0, r5
    71c2:	f000 f905 	bl	73d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    71c6:	4606      	mov	r6, r0
    71c8:	78bc      	ldrb	r4, [r7, #2]
    71ca:	2210      	movs	r2, #16
    71cc:	1c60      	adds	r0, r4, #1
    71ce:	70b8      	strb	r0, [r7, #2]
    71d0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    71d4:	1ce8      	adds	r0, r5, #3
    71d6:	4649      	mov	r1, r9
    71d8:	f007 fe2e 	bl	ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    71dc:	f105 0083 	add.w	r0, r5, #131	; 0x83
    71e0:	2210      	movs	r2, #16
    71e2:	4641      	mov	r1, r8
    71e4:	f007 fe28 	bl	ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    71e8:	2110      	movs	r1, #16
    71ea:	4640      	mov	r0, r8
    71ec:	f007 febb 	bl	ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    71f0:	443c      	add	r4, r7
    71f2:	2110      	movs	r1, #16
    71f4:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    71f8:	4648      	mov	r0, r9
    71fa:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    71fe:	f007 feb2 	bl	ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7202:	77e0      	strb	r0, [r4, #31]
    7204:	f804 6c29 	strb.w	r6, [r4, #-41]
    7208:	2000      	movs	r0, #0
    720a:	73e0      	strb	r0, [r4, #15]
    720c:	e7ce      	b.n	71ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    720e:	2007      	movs	r0, #7
    7210:	e7cc      	b.n	71ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    7212:	0000      	.short	0x0000
    7214:	200014e6 	.word	0x200014e6

00007218 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    7218:	4806      	ldr	r0, [pc, #24]	; (7234 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    721a:	b510      	push	{r4, lr}
    721c:	7880      	ldrb	r0, [r0, #2]
    721e:	1e40      	subs	r0, r0, #1
    7220:	b244      	sxtb	r4, r0
    7222:	e004      	b.n	722e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    7224:	b2e0      	uxtb	r0, r4
    7226:	f000 f937 	bl	7498 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    722a:	1e64      	subs	r4, r4, #1
    722c:	b264      	sxtb	r4, r4
    722e:	2c00      	cmp	r4, #0
    7230:	daf8      	bge.n	7224 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    7232:	bd10      	pop	{r4, pc}
    7234:	200014e6 	.word	0x200014e6

00007238 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    7238:	4801      	ldr	r0, [pc, #4]	; (7240 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    723a:	8840      	ldrh	r0, [r0, #2]
    723c:	4770      	bx	lr
    723e:	0000      	.short	0x0000
    7240:	20000280 	.word	0x20000280

00007244 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    7244:	b138      	cbz	r0, 7256 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    7246:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    724a:	4288      	cmp	r0, r1
    724c:	d803      	bhi.n	7256 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    724e:	4903      	ldr	r1, [pc, #12]	; (725c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    7250:	8048      	strh	r0, [r1, #2]
    7252:	2001      	movs	r0, #1
    7254:	4770      	bx	lr
    7256:	2000      	movs	r0, #0
    7258:	4770      	bx	lr
    725a:	0000      	.short	0x0000
    725c:	20000280 	.word	0x20000280

00007260 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    7260:	4905      	ldr	r1, [pc, #20]	; (7278 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    7262:	788a      	ldrb	r2, [r1, #2]
    7264:	4282      	cmp	r2, r0
    7266:	d903      	bls.n	7270 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    7268:	4408      	add	r0, r1
    726a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    726e:	b108      	cbz	r0, 7274 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    7270:	2000      	movs	r0, #0
    7272:	4770      	bx	lr
    7274:	2001      	movs	r0, #1
    7276:	4770      	bx	lr
    7278:	200014e6 	.word	0x200014e6

0000727c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    727c:	b570      	push	{r4, r5, r6, lr}
    727e:	460d      	mov	r5, r1
    7280:	4606      	mov	r6, r0
    7282:	f000 f8c1 	bl	7408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    7286:	4c10      	ldr	r4, [pc, #64]	; (72c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    7288:	2810      	cmp	r0, #16
    728a:	d007      	beq.n	729c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    728c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    7290:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    7294:	07c9      	lsls	r1, r1, #31
    7296:	d001      	beq.n	729c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    7298:	2001      	movs	r0, #1
    729a:	bd70      	pop	{r4, r5, r6, pc}
    729c:	7861      	ldrb	r1, [r4, #1]
    729e:	2908      	cmp	r1, #8
    72a0:	d210      	bcs.n	72c4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    72a2:	2810      	cmp	r0, #16
    72a4:	d008      	beq.n	72b8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    72a6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    72aa:	2101      	movs	r1, #1
    72ac:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    72b0:	7860      	ldrb	r0, [r4, #1]
    72b2:	1c40      	adds	r0, r0, #1
    72b4:	7060      	strb	r0, [r4, #1]
    72b6:	e7ef      	b.n	7298 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    72b8:	2201      	movs	r2, #1
    72ba:	4629      	mov	r1, r5
    72bc:	4630      	mov	r0, r6
    72be:	f000 f887 	bl	73d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    72c2:	e7f5      	b.n	72b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    72c4:	2000      	movs	r0, #0
    72c6:	bd70      	pop	{r4, r5, r6, pc}
    72c8:	200014e6 	.word	0x200014e6

000072cc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    72cc:	b570      	push	{r4, r5, r6, lr}
    72ce:	4d0b      	ldr	r5, [pc, #44]	; (72fc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    72d0:	7828      	ldrb	r0, [r5, #0]
    72d2:	1e40      	subs	r0, r0, #1
    72d4:	b244      	sxtb	r4, r0
    72d6:	e00a      	b.n	72ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    72d8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    72dc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    72e0:	07c0      	lsls	r0, r0, #31
    72e2:	d002      	beq.n	72ea <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    72e4:	b2e0      	uxtb	r0, r4
    72e6:	f000 f91f 	bl	7528 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    72ea:	1e64      	subs	r4, r4, #1
    72ec:	b264      	sxtb	r4, r4
    72ee:	2c00      	cmp	r4, #0
    72f0:	daf2      	bge.n	72d8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    72f2:	4903      	ldr	r1, [pc, #12]	; (7300 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    72f4:	2000      	movs	r0, #0
    72f6:	7048      	strb	r0, [r1, #1]
    72f8:	bd70      	pop	{r4, r5, r6, pc}
    72fa:	0000      	.short	0x0000
    72fc:	200014e6 	.word	0x200014e6
    7300:	20000280 	.word	0x20000280

00007304 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    7304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7308:	2400      	movs	r4, #0
    730a:	4625      	mov	r5, r4
    730c:	4e18      	ldr	r6, [pc, #96]	; (7370 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    730e:	e029      	b.n	7364 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    7310:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    7314:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    7318:	07c0      	lsls	r0, r0, #31
    731a:	d021      	beq.n	7360 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    731c:	4628      	mov	r0, r5
    731e:	f000 f843 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7322:	4603      	mov	r3, r0
    7324:	f7ff fed4 	bl	70d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7328:	4601      	mov	r1, r0
    732a:	2000      	movs	r0, #0
    732c:	2b10      	cmp	r3, #16
    732e:	d009      	beq.n	7344 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    7330:	18f2      	adds	r2, r6, r3
    7332:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    7336:	f1bc 0f01 	cmp.w	ip, #1
    733a:	d002      	beq.n	7342 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    733c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    7340:	b102      	cbz	r2, 7344 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    7342:	2001      	movs	r0, #1
    7344:	1e40      	subs	r0, r0, #1
    7346:	4201      	tst	r1, r0
    7348:	d10a      	bne.n	7360 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    734a:	480a      	ldr	r0, [pc, #40]	; (7374 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    734c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    7350:	5503      	strb	r3, [r0, r4]
    7352:	4620      	mov	r0, r4
    7354:	1c64      	adds	r4, r4, #1
    7356:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    735a:	b2e4      	uxtb	r4, r4
    735c:	f005 fbcc 	bl	caf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    7360:	1c6d      	adds	r5, r5, #1
    7362:	b2ed      	uxtb	r5, r5
    7364:	7830      	ldrb	r0, [r6, #0]
    7366:	42a8      	cmp	r0, r5
    7368:	d8d2      	bhi.n	7310 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    736a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    736e:	0000      	.short	0x0000
    7370:	200014e6 	.word	0x200014e6
    7374:	20000284 	.word	0x20000284
    7378:	4602      	mov	r2, r0
    737a:	4809      	ldr	r0, [pc, #36]	; (73a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    737c:	b510      	push	{r4, lr}
    737e:	7800      	ldrb	r0, [r0, #0]
    7380:	460b      	mov	r3, r1
    7382:	b158      	cbz	r0, 739c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    7384:	4807      	ldr	r0, [pc, #28]	; (73a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    7386:	7881      	ldrb	r1, [r0, #2]
    7388:	b141      	cbz	r1, 739c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    738a:	b10b      	cbz	r3, 7390 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    738c:	1cc0      	adds	r0, r0, #3
    738e:	e001      	b.n	7394 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    7390:	4804      	ldr	r0, [pc, #16]	; (73a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    7392:	3083      	adds	r0, #131	; 0x83
    7394:	f004 fcfa 	bl	bd8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    7398:	2001      	movs	r0, #1
    739a:	bd10      	pop	{r4, pc}
    739c:	2000      	movs	r0, #0
    739e:	bd10      	pop	{r4, pc}
    73a0:	20000280 	.word	0x20000280
    73a4:	200014e6 	.word	0x200014e6
    73a8:	4908      	ldr	r1, [pc, #32]	; (73cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    73aa:	b510      	push	{r4, lr}
    73ac:	4603      	mov	r3, r0
    73ae:	2000      	movs	r0, #0
    73b0:	788a      	ldrb	r2, [r1, #2]
    73b2:	e006      	b.n	73c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    73b4:	180c      	adds	r4, r1, r0
    73b6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    73ba:	429c      	cmp	r4, r3
    73bc:	d004      	beq.n	73c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    73be:	1c40      	adds	r0, r0, #1
    73c0:	b2c0      	uxtb	r0, r0
    73c2:	4282      	cmp	r2, r0
    73c4:	d8f6      	bhi.n	73b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    73c6:	2010      	movs	r0, #16
    73c8:	bd10      	pop	{r4, pc}
    73ca:	0000      	.short	0x0000
    73cc:	200014e6 	.word	0x200014e6
    73d0:	b570      	push	{r4, r5, r6, lr}
    73d2:	4b0c      	ldr	r3, [pc, #48]	; (7404 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    73d4:	4604      	mov	r4, r0
    73d6:	7818      	ldrb	r0, [r3, #0]
    73d8:	1c45      	adds	r5, r0, #1
    73da:	701d      	strb	r5, [r3, #0]
    73dc:	2810      	cmp	r0, #16
    73de:	d303      	bcc.n	73e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    73e0:	2146      	movs	r1, #70	; 0x46
    73e2:	2028      	movs	r0, #40	; 0x28
    73e4:	f7fe f970 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    73ec:	680d      	ldr	r5, [r1, #0]
    73ee:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    73f2:	8889      	ldrh	r1, [r1, #4]
    73f4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    73f8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    73fc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    7400:	bd70      	pop	{r4, r5, r6, pc}
    7402:	0000      	.short	0x0000
    7404:	200014e6 	.word	0x200014e6
    7408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    740c:	460f      	mov	r7, r1
    740e:	4606      	mov	r6, r0
    7410:	2400      	movs	r4, #0
    7412:	4d0d      	ldr	r5, [pc, #52]	; (7448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    7414:	e00f      	b.n	7436 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    7416:	bf00      	nop
    7418:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    741c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    7420:	42b1      	cmp	r1, r6
    7422:	d106      	bne.n	7432 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    7424:	2206      	movs	r2, #6
    7426:	4639      	mov	r1, r7
    7428:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    742c:	f006 f9a9 	bl	d782 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7430:	b138      	cbz	r0, 7442 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    7432:	1c64      	adds	r4, r4, #1
    7434:	b2e4      	uxtb	r4, r4
    7436:	7828      	ldrb	r0, [r5, #0]
    7438:	42a0      	cmp	r0, r4
    743a:	d8ed      	bhi.n	7418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    743c:	2010      	movs	r0, #16
    743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7442:	4620      	mov	r0, r4
    7444:	e7fb      	b.n	743e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    7446:	0000      	.short	0x0000
    7448:	200014e6 	.word	0x200014e6
    744c:	b570      	push	{r4, r5, r6, lr}
    744e:	4605      	mov	r5, r0
    7450:	f7ff ffaa 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7454:	2810      	cmp	r0, #16
    7456:	d11c      	bne.n	7492 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    7458:	4c0e      	ldr	r4, [pc, #56]	; (7494 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    745a:	7820      	ldrb	r0, [r4, #0]
    745c:	1e40      	subs	r0, r0, #1
    745e:	b2c0      	uxtb	r0, r0
    7460:	7020      	strb	r0, [r4, #0]
    7462:	42a8      	cmp	r0, r5
    7464:	d015      	beq.n	7492 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    7466:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    746a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    746e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    7472:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    7476:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    747a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    747e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    7482:	7820      	ldrb	r0, [r4, #0]
    7484:	f7ff ff90 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    7488:	2810      	cmp	r0, #16
    748a:	d002      	beq.n	7492 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    748c:	4420      	add	r0, r4
    748e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    7492:	bd70      	pop	{r4, r5, r6, pc}
    7494:	200014e6 	.word	0x200014e6
    7498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    749c:	4c21      	ldr	r4, [pc, #132]	; (7524 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    749e:	4606      	mov	r6, r0
    74a0:	19a7      	adds	r7, r4, r6
    74a2:	78a0      	ldrb	r0, [r4, #2]
    74a4:	1e40      	subs	r0, r0, #1
    74a6:	b2c5      	uxtb	r5, r0
    74a8:	70a5      	strb	r5, [r4, #2]
    74aa:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    74ae:	42ae      	cmp	r6, r5
    74b0:	d02a      	beq.n	7508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    74b2:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    74b6:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    74ba:	f10a 0103 	add.w	r1, sl, #3
    74be:	f109 0003 	add.w	r0, r9, #3
    74c2:	2210      	movs	r2, #16
    74c4:	f006 f96f 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74c8:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    74cc:	f109 0083 	add.w	r0, r9, #131	; 0x83
    74d0:	2210      	movs	r2, #16
    74d2:	f006 f968 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74d6:	1960      	adds	r0, r4, r5
    74d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    74dc:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    74e0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    74e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    74e8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    74ec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    74f0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    74f4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    74f8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    74fc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    7500:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    7504:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    7508:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    750c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    7510:	07c0      	lsls	r0, r0, #31
    7512:	d104      	bne.n	751e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    7514:	4640      	mov	r0, r8
    7516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    751a:	f7ff bf97 	b.w	744c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7522:	0000      	.short	0x0000
    7524:	200014e6 	.word	0x200014e6
    7528:	4905      	ldr	r1, [pc, #20]	; (7540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    752a:	784a      	ldrb	r2, [r1, #1]
    752c:	1e52      	subs	r2, r2, #1
    752e:	704a      	strb	r2, [r1, #1]
    7530:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7534:	2200      	movs	r2, #0
    7536:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    753a:	f7ff bf87 	b.w	744c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    753e:	0000      	.short	0x0000
    7540:	200014e6 	.word	0x200014e6

00007544 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    7544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7548:	4604      	mov	r4, r0
    754a:	f100 0570 	add.w	r5, r0, #112	; 0x70
    754e:	f04f 0901 	mov.w	r9, #1
    7552:	b171      	cbz	r1, 7572 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    7554:	f104 0786 	add.w	r7, r4, #134	; 0x86
    7558:	1e7e      	subs	r6, r7, #1
    755a:	2901      	cmp	r1, #1
    755c:	d021      	beq.n	75a2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    755e:	2902      	cmp	r1, #2
    7560:	d046      	beq.n	75f0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    7562:	2903      	cmp	r1, #3
    7564:	d11b      	bne.n	759e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    7566:	4639      	mov	r1, r7
    7568:	4630      	mov	r0, r6
    756a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    756e:	f007 bd2a 	b.w	efc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    7572:	f44f 7206 	mov.w	r2, #536	; 0x218
    7576:	2100      	movs	r1, #0
    7578:	f006 f98f 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    757c:	f004 fbdc 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7580:	f644 112b 	movw	r1, #18731	; 0x492b
    7584:	4008      	ands	r0, r1
    7586:	f885 9015 	strb.w	r9, [r5, #21]
    758a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    758e:	0a00      	lsrs	r0, r0, #8
    7590:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    7594:	20fe      	movs	r0, #254	; 0xfe
    7596:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    759a:	207f      	movs	r0, #127	; 0x7f
    759c:	7268      	strb	r0, [r5, #9]
    759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75a2:	f04f 0800 	mov.w	r8, #0
    75a6:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    75aa:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    75ae:	68e1      	ldr	r1, [r4, #12]
    75b0:	4814      	ldr	r0, [pc, #80]	; (7604 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    75b2:	460a      	mov	r2, r1
    75b4:	4408      	add	r0, r1
    75b6:	fbb0 f0f1 	udiv	r0, r0, r1
    75ba:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    75be:	f640 30b8 	movw	r0, #3000	; 0xbb8
    75c2:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    75c6:	8ae3      	ldrh	r3, [r4, #22]
    75c8:	4628      	mov	r0, r5
    75ca:	f000 f81d 	bl	7608 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    75ce:	4639      	mov	r1, r7
    75d0:	4630      	mov	r0, r6
    75d2:	f007 fcf8 	bl	efc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    75d6:	f006 f8b0 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    75da:	b118      	cbz	r0, 75e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    75dc:	6920      	ldr	r0, [r4, #16]
    75de:	f000 fb65 	bl	7cac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    75e2:	b110      	cbz	r0, 75ea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    75e4:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    75e8:	e7d9      	b.n	759e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    75ea:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    75ee:	e7d6      	b.n	759e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    75f0:	68c1      	ldr	r1, [r0, #12]
    75f2:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    75f6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    75fa:	4628      	mov	r0, r5
    75fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7600:	f000 b802 	b.w	7608 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    7604:	01c9c37f 	.word	0x01c9c37f
    7608:	b530      	push	{r4, r5, lr}
    760a:	2400      	movs	r4, #0
    760c:	8684      	strh	r4, [r0, #52]	; 0x34
    760e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    7610:	4d13      	ldr	r5, [pc, #76]	; (7660 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    7612:	434c      	muls	r4, r1
    7614:	fbb4 f4f2 	udiv	r4, r4, r2
    7618:	8704      	strh	r4, [r0, #56]	; 0x38
    761a:	f242 7410 	movw	r4, #10000	; 0x2710
    761e:	4363      	muls	r3, r4
    7620:	fbb3 f3f2 	udiv	r3, r3, r2
    7624:	1c5b      	adds	r3, r3, #1
    7626:	b29b      	uxth	r3, r3
    7628:	fb03 f402 	mul.w	r4, r3, r2
    762c:	86c3      	strh	r3, [r0, #54]	; 0x36
    762e:	42ac      	cmp	r4, r5
    7630:	d901      	bls.n	7636 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    7632:	1e5b      	subs	r3, r3, #1
    7634:	86c3      	strh	r3, [r0, #54]	; 0x36
    7636:	4b0b      	ldr	r3, [pc, #44]	; (7664 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    7638:	f240 2471 	movw	r4, #625	; 0x271
    763c:	fbb3 f3f2 	udiv	r3, r3, r2
    7640:	1c5b      	adds	r3, r3, #1
    7642:	8783      	strh	r3, [r0, #60]	; 0x3c
    7644:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    7646:	4363      	muls	r3, r4
    7648:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    764c:	1e5b      	subs	r3, r3, #1
    764e:	fbb3 f3f2 	udiv	r3, r3, r2
    7652:	62c3      	str	r3, [r0, #44]	; 0x2c
    7654:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7656:	434b      	muls	r3, r1
    7658:	fbb3 f1f2 	udiv	r1, r3, r2
    765c:	6281      	str	r1, [r0, #40]	; 0x28
    765e:	bd30      	pop	{r4, r5, pc}
    7660:	01e84800 	.word	0x01e84800
    7664:	02625a00 	.word	0x02625a00

00007668 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    7668:	b570      	push	{r4, r5, r6, lr}
    766a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    766e:	b28b      	uxth	r3, r1
    7670:	7ac5      	ldrb	r5, [r0, #11]
    7672:	ea83 0102 	eor.w	r1, r3, r2
    7676:	2200      	movs	r2, #0
    7678:	b2cc      	uxtb	r4, r1
    767a:	0a09      	lsrs	r1, r1, #8
    767c:	fa94 f4a4 	rbit	r4, r4
    7680:	fa91 f1a1 	rbit	r1, r1
    7684:	0e24      	lsrs	r4, r4, #24
    7686:	0e09      	lsrs	r1, r1, #24
    7688:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    768c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    7690:	1c52      	adds	r2, r2, #1
    7692:	4419      	add	r1, r3
    7694:	b2d2      	uxtb	r2, r2
    7696:	b289      	uxth	r1, r1
    7698:	2a03      	cmp	r2, #3
    769a:	d3ed      	bcc.n	7678 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    769c:	4059      	eors	r1, r3
    769e:	2225      	movs	r2, #37	; 0x25
    76a0:	fbb1 f3f2 	udiv	r3, r1, r2
    76a4:	fb02 1213 	mls	r2, r2, r3, r1
    76a8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    76ac:	f002 0607 	and.w	r6, r2, #7
    76b0:	785b      	ldrb	r3, [r3, #1]
    76b2:	2401      	movs	r4, #1
    76b4:	fa04 f606 	lsl.w	r6, r4, r6
    76b8:	4233      	tst	r3, r6
    76ba:	d001      	beq.n	76c0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    76bc:	4610      	mov	r0, r2
    76be:	bd70      	pop	{r4, r5, r6, pc}
    76c0:	434d      	muls	r5, r1
    76c2:	0c29      	lsrs	r1, r5, #16
    76c4:	1c49      	adds	r1, r1, #1
    76c6:	b2c9      	uxtb	r1, r1
    76c8:	2200      	movs	r2, #0
    76ca:	1885      	adds	r5, r0, r2
    76cc:	79ab      	ldrb	r3, [r5, #6]
    76ce:	428b      	cmp	r3, r1
    76d0:	d312      	bcc.n	76f8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    76d2:	f895 5001 	ldrb.w	r5, [r5, #1]
    76d6:	2300      	movs	r3, #0
    76d8:	fa04 f603 	lsl.w	r6, r4, r3
    76dc:	4235      	tst	r5, r6
    76de:	d001      	beq.n	76e4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    76e0:	1e49      	subs	r1, r1, #1
    76e2:	b2c9      	uxtb	r1, r1
    76e4:	b121      	cbz	r1, 76f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    76e6:	1c5b      	adds	r3, r3, #1
    76e8:	b2db      	uxtb	r3, r3
    76ea:	2b08      	cmp	r3, #8
    76ec:	d3f4      	bcc.n	76d8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    76ee:	e005      	b.n	76fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    76f0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    76f4:	b2c0      	uxtb	r0, r0
    76f6:	bd70      	pop	{r4, r5, r6, pc}
    76f8:	1ac9      	subs	r1, r1, r3
    76fa:	b2c9      	uxtb	r1, r1
    76fc:	1c52      	adds	r2, r2, #1
    76fe:	b2d2      	uxtb	r2, r2
    7700:	2a05      	cmp	r2, #5
    7702:	d3e2      	bcc.n	76ca <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    7704:	f240 110d 	movw	r1, #269	; 0x10d
    7708:	2046      	movs	r0, #70	; 0x46
    770a:	f7fd ffdd 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    770e:	0000      	movs	r0, r0
    7710:	b570      	push	{r4, r5, r6, lr}
    7712:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    7716:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    771a:	2401      	movs	r4, #1
    771c:	fb03 2101 	mla	r1, r3, r1, r2
    7720:	2225      	movs	r2, #37	; 0x25
    7722:	fbb1 f3f2 	udiv	r3, r1, r2
    7726:	fb02 1113 	mls	r1, r2, r3, r1
    772a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    772e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    7732:	f001 0307 	and.w	r3, r1, #7
    7736:	7d92      	ldrb	r2, [r2, #22]
    7738:	fa04 f303 	lsl.w	r3, r4, r3
    773c:	421a      	tst	r2, r3
    773e:	d003      	beq.n	7748 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    7740:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    7744:	2000      	movs	r0, #0
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	f890 2020 	ldrb.w	r2, [r0, #32]
    774c:	fbb1 f3f2 	udiv	r3, r1, r2
    7750:	fb02 1113 	mls	r1, r2, r3, r1
    7754:	1c49      	adds	r1, r1, #1
    7756:	b2c9      	uxtb	r1, r1
    7758:	2300      	movs	r3, #0
    775a:	18c5      	adds	r5, r0, r3
    775c:	7eea      	ldrb	r2, [r5, #27]
    775e:	428a      	cmp	r2, r1
    7760:	d311      	bcc.n	7786 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    7762:	f895 5016 	ldrb.w	r5, [r5, #22]
    7766:	2200      	movs	r2, #0
    7768:	fa04 f602 	lsl.w	r6, r4, r2
    776c:	4235      	tst	r5, r6
    776e:	d001      	beq.n	7774 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    7770:	1e49      	subs	r1, r1, #1
    7772:	b2c9      	uxtb	r1, r1
    7774:	b121      	cbz	r1, 7780 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    7776:	1c52      	adds	r2, r2, #1
    7778:	b2d2      	uxtb	r2, r2
    777a:	2a08      	cmp	r2, #8
    777c:	d3f4      	bcc.n	7768 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    777e:	e004      	b.n	778a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    7780:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7784:	e7dc      	b.n	7740 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    7786:	1a89      	subs	r1, r1, r2
    7788:	b2c9      	uxtb	r1, r1
    778a:	1c5b      	adds	r3, r3, #1
    778c:	b2db      	uxtb	r3, r3
    778e:	2b05      	cmp	r3, #5
    7790:	d3e3      	bcc.n	775a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    7792:	201f      	movs	r0, #31
    7794:	bd70      	pop	{r4, r5, r6, pc}
	...

00007798 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    7798:	7841      	ldrb	r1, [r0, #1]
    779a:	b141      	cbz	r1, 77ae <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    779c:	78c0      	ldrb	r0, [r0, #3]
    779e:	2819      	cmp	r0, #25
    77a0:	d203      	bcs.n	77aa <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    77a2:	4a04      	ldr	r2, [pc, #16]	; (77b4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    77a4:	5c10      	ldrb	r0, [r2, r0]
    77a6:	4288      	cmp	r0, r1
    77a8:	d101      	bne.n	77ae <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    77aa:	2001      	movs	r0, #1
    77ac:	4770      	bx	lr
    77ae:	2000      	movs	r0, #0
    77b0:	4770      	bx	lr
    77b2:	0000      	.short	0x0000
    77b4:	0001167c 	.word	0x0001167c

000077b8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    77b8:	b50c      	push	{r2, r3, lr}
    77ba:	a20b      	add	r2, pc, #44	; (adr r2, 77e8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    77bc:	e9d2 1200 	ldrd	r1, r2, [r2]
    77c0:	e9cd 1200 	strd	r1, r2, [sp]
    77c4:	7901      	ldrb	r1, [r0, #4]
    77c6:	7940      	ldrb	r0, [r0, #5]
    77c8:	f001 0207 	and.w	r2, r1, #7
    77cc:	4669      	mov	r1, sp
    77ce:	f81d 2002 	ldrb.w	r2, [sp, r2]
    77d2:	2a01      	cmp	r2, #1
    77d4:	d804      	bhi.n	77e0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    77d6:	f000 0007 	and.w	r0, r0, #7
    77da:	5c08      	ldrb	r0, [r1, r0]
    77dc:	2801      	cmp	r0, #1
    77de:	d901      	bls.n	77e4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    77e0:	2000      	movs	r0, #0
    77e2:	bd0c      	pop	{r2, r3, pc}
    77e4:	2001      	movs	r0, #1
    77e6:	bd0c      	pop	{r2, r3, pc}
    77e8:	02010100 	.word	0x02010100
    77ec:	03020201 	.word	0x03020201

000077f0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    77f0:	b510      	push	{r4, lr}
    77f2:	2201      	movs	r2, #1
    77f4:	70c1      	strb	r1, [r0, #3]
    77f6:	2919      	cmp	r1, #25
    77f8:	d202      	bcs.n	7800 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    77fa:	4a06      	ldr	r2, [pc, #24]	; (7814 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    77fc:	5c52      	ldrb	r2, [r2, r1]
    77fe:	e006      	b.n	780e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7800:	29ff      	cmp	r1, #255	; 0xff
    7802:	d004      	beq.n	780e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    7804:	f240 31d5 	movw	r1, #981	; 0x3d5
    7808:	202a      	movs	r0, #42	; 0x2a
    780a:	f7fd ff5d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    780e:	7042      	strb	r2, [r0, #1]
    7810:	bd10      	pop	{r4, pc}
    7812:	0000      	.short	0x0000
    7814:	0001167c 	.word	0x0001167c

00007818 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    781c:	4c12      	ldr	r4, [pc, #72]	; (7868 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    781e:	4607      	mov	r7, r0
    7820:	460e      	mov	r6, r1
    7822:	7da0      	ldrb	r0, [r4, #22]
    7824:	b110      	cbz	r0, 782c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7826:	8b20      	ldrh	r0, [r4, #24]
    7828:	2800      	cmp	r0, #0
    782a:	d012      	beq.n	7852 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    782c:	480e      	ldr	r0, [pc, #56]	; (7868 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    782e:	3014      	adds	r0, #20
    7830:	4680      	mov	r8, r0
    7832:	f007 fd72 	bl	f31a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7836:	b9a8      	cbnz	r0, 7864 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7838:	8aa5      	ldrh	r5, [r4, #20]
    783a:	8aa0      	ldrh	r0, [r4, #20]
    783c:	4632      	mov	r2, r6
    783e:	4639      	mov	r1, r7
    7840:	f007 fdaf 	bl	f3a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    7844:	b138      	cbz	r0, 7856 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7846:	7da0      	ldrb	r0, [r4, #22]
    7848:	b110      	cbz	r0, 7850 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    784a:	8b20      	ldrh	r0, [r4, #24]
    784c:	1e40      	subs	r0, r0, #1
    784e:	8320      	strh	r0, [r4, #24]
    7850:	2001      	movs	r0, #1
    7852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7856:	4640      	mov	r0, r8
    7858:	f007 fd5f 	bl	f31a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    785c:	b910      	cbnz	r0, 7864 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    785e:	8aa0      	ldrh	r0, [r4, #20]
    7860:	42a8      	cmp	r0, r5
    7862:	d1ea      	bne.n	783a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7864:	2000      	movs	r0, #0
    7866:	e7f4      	b.n	7852 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7868:	20001240 	.word	0x20001240
    786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7870:	468a      	mov	sl, r1
    7872:	4699      	mov	r9, r3
    7874:	4615      	mov	r5, r2
    7876:	4604      	mov	r4, r0
    7878:	a901      	add	r1, sp, #4
    787a:	f007 f9d7 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    787e:	bbe0      	cbnz	r0, 78fa <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    7880:	9f02      	ldr	r7, [sp, #8]
    7882:	f04f 0800 	mov.w	r8, #0
    7886:	3770      	adds	r7, #112	; 0x70
    7888:	b18d      	cbz	r5, 78ae <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    788a:	4620      	mov	r0, r4
    788c:	f7fe fb4c 	bl	5f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7890:	0004      	movs	r4, r0
    7892:	d00f      	beq.n	78b4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    7894:	4629      	mov	r1, r5
    7896:	f006 fdd9 	bl	e44c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    789a:	0006      	movs	r6, r0
    789c:	d003      	beq.n	78a6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    789e:	481d      	ldr	r0, [pc, #116]	; (7914 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    78a0:	8840      	ldrh	r0, [r0, #2]
    78a2:	42a8      	cmp	r0, r5
    78a4:	d208      	bcs.n	78b8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    78a6:	2000      	movs	r0, #0
    78a8:	b004      	add	sp, #16
    78aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78ae:	2001      	movs	r0, #1
    78b0:	7538      	strb	r0, [r7, #20]
    78b2:	e029      	b.n	7908 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    78b4:	216e      	movs	r1, #110	; 0x6e
    78b6:	e02a      	b.n	790e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    78b8:	4620      	mov	r0, r4
    78ba:	4631      	mov	r1, r6
    78bc:	aa03      	add	r2, sp, #12
    78be:	f006 fdbe 	bl	e43e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    78c2:	9803      	ldr	r0, [sp, #12]
    78c4:	f8a0 8000 	strh.w	r8, [r0]
    78c8:	f880 8002 	strb.w	r8, [r0, #2]
    78cc:	7d39      	ldrb	r1, [r7, #20]
    78ce:	b109      	cbz	r1, 78d4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    78d0:	f04f 0a02 	mov.w	sl, #2
    78d4:	4651      	mov	r1, sl
    78d6:	f007 fca1 	bl	f21c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    78da:	4631      	mov	r1, r6
    78dc:	2603      	movs	r6, #3
    78de:	4620      	mov	r0, r4
    78e0:	464a      	mov	r2, r9
    78e2:	462b      	mov	r3, r5
    78e4:	9600      	str	r6, [sp, #0]
    78e6:	f006 fc90 	bl	e20a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    78ea:	4620      	mov	r0, r4
    78ec:	4629      	mov	r1, r5
    78ee:	f006 fd4a 	bl	e386 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    78f2:	b158      	cbz	r0, 790c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    78f4:	4644      	mov	r4, r8
    78f6:	a801      	add	r0, sp, #4
    78f8:	e000      	b.n	78fc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    78fa:	e005      	b.n	7908 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    78fc:	f007 fd2e 	bl	f35c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7900:	9802      	ldr	r0, [sp, #8]
    7902:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    7906:	753c      	strb	r4, [r7, #20]
    7908:	2001      	movs	r0, #1
    790a:	e7cd      	b.n	78a8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    790c:	2184      	movs	r1, #132	; 0x84
    790e:	202b      	movs	r0, #43	; 0x2b
    7910:	f7fd feda 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7914:	20001240 	.word	0x20001240

00007918 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    7918:	4901      	ldr	r1, [pc, #4]	; (7920 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    791a:	2001      	movs	r0, #1
    791c:	7008      	strb	r0, [r1, #0]
    791e:	4770      	bx	lr
    7920:	2000028d 	.word	0x2000028d

00007924 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7928:	0006      	movs	r6, r0
    792a:	d00a      	beq.n	7942 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    792c:	4825      	ldr	r0, [pc, #148]	; (79c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    792e:	7801      	ldrb	r1, [r0, #0]
    7930:	b151      	cbz	r1, 7948 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    7932:	2100      	movs	r1, #0
    7934:	7071      	strb	r1, [r6, #1]
    7936:	2203      	movs	r2, #3
    7938:	7032      	strb	r2, [r6, #0]
    793a:	2201      	movs	r2, #1
    793c:	7132      	strb	r2, [r6, #4]
    793e:	7001      	strb	r1, [r0, #0]
    7940:	e03a      	b.n	79b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    7942:	f240 21da 	movw	r1, #730	; 0x2da
    7946:	e009      	b.n	795c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    7948:	4c1e      	ldr	r4, [pc, #120]	; (79c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    794a:	1ce4      	adds	r4, r4, #3
    794c:	7820      	ldrb	r0, [r4, #0]
    794e:	b940      	cbnz	r0, 7962 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7950:	1ca0      	adds	r0, r4, #2
    7952:	f007 fd6f 	bl	f434 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    7956:	b120      	cbz	r0, 7962 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7958:	f240 21e9 	movw	r1, #745	; 0x2e9
    795c:	2010      	movs	r0, #16
    795e:	f7fd feb3 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7962:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    7966:	2000      	movs	r0, #0
    7968:	f7fe f898 	bl	5a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    796c:	4f16      	ldr	r7, [pc, #88]	; (79c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    796e:	4605      	mov	r5, r0
    7970:	6838      	ldr	r0, [r7, #0]
    7972:	b160      	cbz	r0, 798e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    7974:	8860      	ldrh	r0, [r4, #2]
    7976:	42a8      	cmp	r0, r5
    7978:	d309      	bcc.n	798e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    797a:	1b40      	subs	r0, r0, r5
    797c:	b2c0      	uxtb	r0, r0
    797e:	2101      	movs	r1, #1
    7980:	f006 ff0c 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7984:	b158      	cbz	r0, 799e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    7986:	4631      	mov	r1, r6
    7988:	f000 f84e 	bl	7a28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    798c:	e006      	b.n	799c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    798e:	480f      	ldr	r0, [pc, #60]	; (79cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    7990:	6800      	ldr	r0, [r0, #0]
    7992:	b120      	cbz	r0, 799e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    7994:	8860      	ldrh	r0, [r4, #2]
    7996:	4631      	mov	r1, r6
    7998:	f000 f8de 	bl	7b58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    799c:	b960      	cbnz	r0, 79b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    799e:	1ca0      	adds	r0, r4, #2
    79a0:	f007 fd48 	bl	f434 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    79a4:	b910      	cbnz	r0, 79ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    79a6:	8861      	ldrh	r1, [r4, #2]
    79a8:	4541      	cmp	r1, r8
    79aa:	d1e1      	bne.n	7970 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    79ac:	4808      	ldr	r0, [pc, #32]	; (79d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    79ae:	6801      	ldr	r1, [r0, #0]
    79b0:	b129      	cbz	r1, 79be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    79b2:	4630      	mov	r0, r6
    79b4:	4788      	blx	r1
    79b6:	b110      	cbz	r0, 79be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    79b8:	2001      	movs	r0, #1
    79ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79be:	2000      	movs	r0, #0
    79c0:	e7fb      	b.n	79ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    79c2:	0000      	.short	0x0000
    79c4:	2000028d 	.word	0x2000028d
    79c8:	200000f0 	.word	0x200000f0
    79cc:	200000f4 	.word	0x200000f4
    79d0:	200000f8 	.word	0x200000f8

000079d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    79d4:	4901      	ldr	r1, [pc, #4]	; (79dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    79d6:	7008      	strb	r0, [r1, #0]
    79d8:	f000 b95c 	b.w	7c94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    79dc:	2000028c 	.word	0x2000028c

000079e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    79e0:	4801      	ldr	r0, [pc, #4]	; (79e8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    79e2:	7800      	ldrb	r0, [r0, #0]
    79e4:	f7fd bc94 	b.w	5310 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    79e8:	2000028c 	.word	0x2000028c

000079ec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    79ec:	4902      	ldr	r1, [pc, #8]	; (79f8 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    79ee:	4801      	ldr	r0, [pc, #4]	; (79f4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    79f0:	6008      	str	r0, [r1, #0]
    79f2:	4770      	bx	lr
    79f4:	00007e01 	.word	0x00007e01
    79f8:	200000f0 	.word	0x200000f0

000079fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    79fc:	4905      	ldr	r1, [pc, #20]	; (7a14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    79fe:	4804      	ldr	r0, [pc, #16]	; (7a10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7a00:	6008      	str	r0, [r1, #0]
    7a02:	4906      	ldr	r1, [pc, #24]	; (7a1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    7a04:	4804      	ldr	r0, [pc, #16]	; (7a18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    7a06:	6008      	str	r0, [r1, #0]
    7a08:	4906      	ldr	r1, [pc, #24]	; (7a24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    7a0a:	4805      	ldr	r0, [pc, #20]	; (7a20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7a0c:	6008      	str	r0, [r1, #0]
    7a0e:	4770      	bx	lr
    7a10:	00007e01 	.word	0x00007e01
    7a14:	200000f0 	.word	0x200000f0
    7a18:	000094c5 	.word	0x000094c5
    7a1c:	200000f4 	.word	0x200000f4
    7a20:	00006561 	.word	0x00006561
    7a24:	200000f8 	.word	0x200000f8
    7a28:	b570      	push	{r4, r5, r6, lr}
    7a2a:	0005      	movs	r5, r0
    7a2c:	460c      	mov	r4, r1
    7a2e:	d02e      	beq.n	7a8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7a30:	4818      	ldr	r0, [pc, #96]	; (7a94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    7a32:	6802      	ldr	r2, [r0, #0]
    7a34:	b35a      	cbz	r2, 7a8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7a36:	4628      	mov	r0, r5
    7a38:	4790      	blx	r2
    7a3a:	b340      	cbz	r0, 7a8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7a3c:	7820      	ldrb	r0, [r4, #0]
    7a3e:	2811      	cmp	r0, #17
    7a40:	d002      	beq.n	7a48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    7a42:	2814      	cmp	r0, #20
    7a44:	d003      	beq.n	7a4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    7a46:	e020      	b.n	7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a48:	7920      	ldrb	r0, [r4, #4]
    7a4a:	b1f0      	cbz	r0, 7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a4c:	e00a      	b.n	7a64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7a4e:	7920      	ldrb	r0, [r4, #4]
    7a50:	b120      	cbz	r0, 7a5c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    7a52:	4628      	mov	r0, r5
    7a54:	f007 ff02 	bl	f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7a58:	b120      	cbz	r0, 7a64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7a5a:	e016      	b.n	7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a5c:	490e      	ldr	r1, [pc, #56]	; (7a98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    7a5e:	2000      	movs	r0, #0
    7a60:	7008      	strb	r0, [r1, #0]
    7a62:	e012      	b.n	7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a64:	88e4      	ldrh	r4, [r4, #6]
    7a66:	2100      	movs	r1, #0
    7a68:	4620      	mov	r0, r4
    7a6a:	f006 fe97 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7a6e:	b160      	cbz	r0, 7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a70:	8800      	ldrh	r0, [r0, #0]
    7a72:	f007 f81b 	bl	eaac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7a76:	2100      	movs	r1, #0
    7a78:	4620      	mov	r0, r4
    7a7a:	f7fe f8ad 	bl	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7a7e:	b120      	cbz	r0, 7a8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7a80:	f240 1171 	movw	r1, #369	; 0x171
    7a84:	2010      	movs	r0, #16
    7a86:	f7fd fe1f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a8a:	2001      	movs	r0, #1
    7a8c:	bd70      	pop	{r4, r5, r6, pc}
    7a8e:	2000      	movs	r0, #0
    7a90:	bd70      	pop	{r4, r5, r6, pc}
    7a92:	0000      	.short	0x0000
    7a94:	200000f0 	.word	0x200000f0
    7a98:	20000290 	.word	0x20000290
    7a9c:	b510      	push	{r4, lr}
    7a9e:	492d      	ldr	r1, [pc, #180]	; (7b54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    7aa0:	b086      	sub	sp, #24
    7aa2:	7c8a      	ldrb	r2, [r1, #18]
    7aa4:	7801      	ldrb	r1, [r0, #0]
    7aa6:	07d3      	lsls	r3, r2, #31
    7aa8:	d101      	bne.n	7aae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    7aaa:	2919      	cmp	r1, #25
    7aac:	d004      	beq.n	7ab8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    7aae:	2918      	cmp	r1, #24
    7ab0:	d01f      	beq.n	7af2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    7ab2:	2912      	cmp	r1, #18
    7ab4:	d046      	beq.n	7b44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    7ab6:	e04a      	b.n	7b4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7ab8:	8880      	ldrh	r0, [r0, #4]
    7aba:	f8ad 0000 	strh.w	r0, [sp]
    7abe:	a902      	add	r1, sp, #8
    7ac0:	f007 f8b4 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7ac4:	b110      	cbz	r0, 7acc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    7ac6:	f44f 71c4 	mov.w	r1, #392	; 0x188
    7aca:	e035      	b.n	7b38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7acc:	9803      	ldr	r0, [sp, #12]
    7ace:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7ad2:	f88d 1002 	strb.w	r1, [sp, #2]
    7ad6:	7841      	ldrb	r1, [r0, #1]
    7ad8:	f88d 1003 	strb.w	r1, [sp, #3]
    7adc:	8840      	ldrh	r0, [r0, #2]
    7ade:	f8ad 0004 	strh.w	r0, [sp, #4]
    7ae2:	2102      	movs	r1, #2
    7ae4:	4668      	mov	r0, sp
    7ae6:	f009 f994 	bl	10e12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7aea:	b340      	cbz	r0, 7b3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7aec:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    7af0:	e022      	b.n	7b38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7af2:	0791      	lsls	r1, r2, #30
    7af4:	d42b      	bmi.n	7b4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7af6:	8884      	ldrh	r4, [r0, #4]
    7af8:	a903      	add	r1, sp, #12
    7afa:	4620      	mov	r0, r4
    7afc:	f008 ffa8 	bl	10a50 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7b00:	b110      	cbz	r0, 7b08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    7b02:	f240 11a5 	movw	r1, #421	; 0x1a5
    7b06:	e017      	b.n	7b38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7b08:	f8ad 4000 	strh.w	r4, [sp]
    7b0c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7b10:	f8ad 0002 	strh.w	r0, [sp, #2]
    7b14:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7b18:	f8ad 0004 	strh.w	r0, [sp, #4]
    7b1c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7b20:	f8ad 0006 	strh.w	r0, [sp, #6]
    7b24:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7b28:	f8ad 0008 	strh.w	r0, [sp, #8]
    7b2c:	4668      	mov	r0, sp
    7b2e:	f009 f80d 	bl	10b4c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7b32:	b120      	cbz	r0, 7b3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7b34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    7b38:	2010      	movs	r0, #16
    7b3a:	f7fd fdc5 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b3e:	2001      	movs	r0, #1
    7b40:	b006      	add	sp, #24
    7b42:	bd10      	pop	{r4, pc}
    7b44:	0751      	lsls	r1, r2, #29
    7b46:	d402      	bmi.n	7b4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7b48:	7b80      	ldrb	r0, [r0, #14]
    7b4a:	07c0      	lsls	r0, r0, #31
    7b4c:	d0f7      	beq.n	7b3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7b4e:	2000      	movs	r0, #0
    7b50:	e7f6      	b.n	7b40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    7b52:	0000      	.short	0x0000
    7b54:	20001240 	.word	0x20001240
    7b58:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b5c:	b087      	sub	sp, #28
    7b5e:	460c      	mov	r4, r1
    7b60:	a902      	add	r1, sp, #8
    7b62:	9807      	ldr	r0, [sp, #28]
    7b64:	f007 f862 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7b68:	2800      	cmp	r0, #0
    7b6a:	d17d      	bne.n	7c68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    7b6c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 7c90 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    7b70:	f04f 0a01 	mov.w	sl, #1
    7b74:	4680      	mov	r8, r0
    7b76:	9803      	ldr	r0, [sp, #12]
    7b78:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7b7c:	2800      	cmp	r0, #0
    7b7e:	d00c      	beq.n	7b9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    7b80:	f8d9 2000 	ldr.w	r2, [r9]
    7b84:	b162      	cbz	r2, 7ba0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7b86:	4621      	mov	r1, r4
    7b88:	9807      	ldr	r0, [sp, #28]
    7b8a:	4790      	blx	r2
    7b8c:	b140      	cbz	r0, 7ba0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    7b8e:	4620      	mov	r0, r4
    7b90:	f7ff ff84 	bl	7a9c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    7b94:	2800      	cmp	r0, #0
    7b96:	d1ee      	bne.n	7b76 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    7b98:	2001      	movs	r0, #1
    7b9a:	b009      	add	sp, #36	; 0x24
    7b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ba0:	9d03      	ldr	r5, [sp, #12]
    7ba2:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    7ba6:	3570      	adds	r5, #112	; 0x70
    7ba8:	b950      	cbnz	r0, 7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    7baa:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    7bae:	f88d 0004 	strb.w	r0, [sp, #4]
    7bb2:	9801      	ldr	r0, [sp, #4]
    7bb4:	9001      	str	r0, [sp, #4]
    7bb6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7bba:	b108      	cbz	r0, 7bc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    7bbc:	2001      	movs	r0, #1
    7bbe:	e000      	b.n	7bc2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    7bc0:	2000      	movs	r0, #0
    7bc2:	4683      	mov	fp, r0
    7bc4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    7bc8:	b1c0      	cbz	r0, 7bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    7bca:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    7bce:	0780      	lsls	r0, r0, #30
    7bd0:	d514      	bpl.n	7bfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    7bd2:	f884 8001 	strb.w	r8, [r4, #1]
    7bd6:	f884 a000 	strb.w	sl, [r4]
    7bda:	f884 8004 	strb.w	r8, [r4, #4]
    7bde:	9907      	ldr	r1, [sp, #28]
    7be0:	f8a4 1005 	strh.w	r1, [r4, #5]
    7be4:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    7be8:	71e1      	strb	r1, [r4, #7]
    7bea:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    7bee:	8121      	strh	r1, [r4, #8]
    7bf0:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    7bf4:	8161      	strh	r1, [r4, #10]
    7bf6:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    7bfa:	e7c8      	b.n	7b8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    7bfc:	9807      	ldr	r0, [sp, #28]
    7bfe:	f7fe f993 	bl	5f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7c02:	0007      	movs	r7, r0
    7c04:	d00d      	beq.n	7c22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    7c06:	f006 fbe2 	bl	e3ce <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    7c0a:	0006      	movs	r6, r0
    7c0c:	d015      	beq.n	7c3a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    7c0e:	f884 8001 	strb.w	r8, [r4, #1]
    7c12:	200d      	movs	r0, #13
    7c14:	7020      	strb	r0, [r4, #0]
    7c16:	9807      	ldr	r0, [sp, #28]
    7c18:	80e0      	strh	r0, [r4, #6]
    7c1a:	8126      	strh	r6, [r4, #8]
    7c1c:	f884 a004 	strb.w	sl, [r4, #4]
    7c20:	e007      	b.n	7c32 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    7c22:	f240 2133 	movw	r1, #563	; 0x233
    7c26:	e02d      	b.n	7c84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    7c28:	2100      	movs	r1, #0
    7c2a:	4638      	mov	r0, r7
    7c2c:	460a      	mov	r2, r1
    7c2e:	f006 fce4 	bl	e5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7c32:	1e76      	subs	r6, r6, #1
    7c34:	b2b6      	uxth	r6, r6
    7c36:	d2f7      	bcs.n	7c28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    7c38:	e7a9      	b.n	7b8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    7c3a:	9807      	ldr	r0, [sp, #28]
    7c3c:	f7fe f95e 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7c40:	b1f0      	cbz	r0, 7c80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    7c42:	f1bb 0f00 	cmp.w	fp, #0
    7c46:	d020      	beq.n	7c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    7c48:	f006 faf6 	bl	e238 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7c4c:	b160      	cbz	r0, 7c68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    7c4e:	9807      	ldr	r0, [sp, #28]
    7c50:	f006 ff2c 	bl	eaac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7c54:	2100      	movs	r1, #0
    7c56:	9807      	ldr	r0, [sp, #28]
    7c58:	f7fd ffbe 	bl	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7c5c:	f884 8001 	strb.w	r8, [r4, #1]
    7c60:	210a      	movs	r1, #10
    7c62:	4640      	mov	r0, r8
    7c64:	7021      	strb	r1, [r4, #0]
    7c66:	e000      	b.n	7c6a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    7c68:	e00f      	b.n	7c8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    7c6a:	f884 8004 	strb.w	r8, [r4, #4]
    7c6e:	9907      	ldr	r1, [sp, #28]
    7c70:	f8a4 1005 	strh.w	r1, [r4, #5]
    7c74:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7c78:	71e1      	strb	r1, [r4, #7]
    7c7a:	3524      	adds	r5, #36	; 0x24
    7c7c:	7028      	strb	r0, [r5, #0]
    7c7e:	e786      	b.n	7b8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    7c80:	f240 2151 	movw	r1, #593	; 0x251
    7c84:	2010      	movs	r0, #16
    7c86:	f7fd fd1f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c8a:	2000      	movs	r0, #0
    7c8c:	e785      	b.n	7b9a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    7c8e:	0000      	.short	0x0000
    7c90:	200000f4 	.word	0x200000f4
    7c94:	4804      	ldr	r0, [pc, #16]	; (7ca8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    7c96:	2100      	movs	r1, #0
    7c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7c9c:	7001      	strb	r1, [r0, #0]
    7c9e:	8042      	strh	r2, [r0, #2]
    7ca0:	1f00      	subs	r0, r0, #4
    7ca2:	f8a0 1001 	strh.w	r1, [r0, #1]
    7ca6:	4770      	bx	lr
    7ca8:	20000290 	.word	0x20000290

00007cac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cae:	f06f 021f 	mvn.w	r2, #31
    7cb2:	0c01      	lsrs	r1, r0, #16
    7cb4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7cb8:	251f      	movs	r5, #31
    7cba:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7cbe:	3854      	subs	r0, #84	; 0x54
    7cc0:	d00d      	beq.n	7cde <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7cc2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7cc6:	3855      	subs	r0, #85	; 0x55
    7cc8:	d009      	beq.n	7cde <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7cca:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7cce:	38aa      	subs	r0, #170	; 0xaa
    7cd0:	d005      	beq.n	7cde <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7cd2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7cd6:	38aa      	subs	r0, #170	; 0xaa
    7cd8:	d001      	beq.n	7cde <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7cda:	2001      	movs	r0, #1
    7cdc:	e000      	b.n	7ce0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7cde:	2000      	movs	r0, #0
    7ce0:	2200      	movs	r2, #0
    7ce2:	4613      	mov	r3, r2
    7ce4:	ea4f 0402 	mov.w	r4, r2
    7ce8:	ea82 0701 	eor.w	r7, r2, r1
    7cec:	43ff      	mvns	r7, r7
    7cee:	431f      	orrs	r7, r3
    7cf0:	1c7f      	adds	r7, r7, #1
    7cf2:	d00f      	beq.n	7d14 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7cf4:	f006 0701 	and.w	r7, r6, #1
    7cf8:	0852      	lsrs	r2, r2, #1
    7cfa:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7cfe:	f005 0701 	and.w	r7, r5, #1
    7d02:	085b      	lsrs	r3, r3, #1
    7d04:	0876      	lsrs	r6, r6, #1
    7d06:	086d      	lsrs	r5, r5, #1
    7d08:	1c64      	adds	r4, r4, #1
    7d0a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7d0e:	2c16      	cmp	r4, #22
    7d10:	d3ea      	bcc.n	7ce8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d14:	2000      	movs	r0, #0
    7d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007d18 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    7d18:	b510      	push	{r4, lr}
    7d1a:	e9d0 2100 	ldrd	r2, r1, [r0]
    7d1e:	4b09      	ldr	r3, [pc, #36]	; (7d44 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    7d20:	4c09      	ldr	r4, [pc, #36]	; (7d48 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    7d22:	4353      	muls	r3, r2
    7d24:	4354      	muls	r4, r2
    7d26:	4051      	eors	r1, r2
    7d28:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7d2c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7d30:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7d34:	e9c0 2100 	strd	r2, r1, [r0]
    7d38:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7d3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7d40:	4618      	mov	r0, r3
    7d42:	bd10      	pop	{r4, pc}
    7d44:	c6ef3760 	.word	0xc6ef3760
    7d48:	9e3779bb 	.word	0x9e3779bb

00007d4c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7d4c:	b570      	push	{r4, r5, r6, lr}
    7d4e:	4604      	mov	r4, r0
    7d50:	7c00      	ldrb	r0, [r0, #16]
    7d52:	b300      	cbz	r0, 7d96 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7d54:	2802      	cmp	r0, #2
    7d56:	d01e      	beq.n	7d96 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7d58:	f05f 0001 	movs.w	r0, #1
    7d5c:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7d60:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7d64:	460d      	mov	r5, r1
    7d66:	b1c0      	cbz	r0, 7d9a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7d68:	7de0      	ldrb	r0, [r4, #23]
    7d6a:	b1f0      	cbz	r0, 7daa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7d6c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7d70:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    7d74:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7d78:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7d7c:	7c20      	ldrb	r0, [r4, #16]
    7d7e:	f007 fcd0 	bl	f722 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7d82:	7620      	strb	r0, [r4, #24]
    7d84:	2008      	movs	r0, #8
    7d86:	7660      	strb	r0, [r4, #25]
    7d88:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d8c:	4629      	mov	r1, r5
    7d8e:	f007 fcb4 	bl	f6fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7d92:	b9a8      	cbnz	r0, 7dc0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7d94:	e00e      	b.n	7db4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7d96:	2000      	movs	r0, #0
    7d98:	e7e0      	b.n	7d5c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7d9a:	2000      	movs	r0, #0
    7d9c:	f7fe fb92 	bl	64c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7da0:	2800      	cmp	r0, #0
    7da2:	d1eb      	bne.n	7d7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7da4:	f240 41aa 	movw	r1, #1194	; 0x4aa
    7da8:	e001      	b.n	7dae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7daa:	f240 41ae 	movw	r1, #1198	; 0x4ae
    7dae:	202d      	movs	r0, #45	; 0x2d
    7db0:	f7fd fc8a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7db4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7db8:	4629      	mov	r1, r5
    7dba:	f007 fca7 	bl	f70c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7dbe:	b100      	cbz	r0, 7dc2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7dc0:	2001      	movs	r0, #1
    7dc2:	76a0      	strb	r0, [r4, #26]
    7dc4:	7e20      	ldrb	r0, [r4, #24]
    7dc6:	b130      	cbz	r0, 7dd6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7dc8:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7dcc:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7dd0:	f006 fee9 	bl	eba6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7dd4:	7660      	strb	r0, [r4, #25]
    7dd6:	2500      	movs	r5, #0
    7dd8:	6425      	str	r5, [r4, #64]	; 0x40
    7dda:	f005 fb6f 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7dde:	6460      	str	r0, [r4, #68]	; 0x44
    7de0:	2100      	movs	r1, #0
    7de2:	4620      	mov	r0, r4
    7de4:	f007 fdbc 	bl	f960 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    7de8:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    7dec:	78a0      	ldrb	r0, [r4, #2]
    7dee:	0740      	lsls	r0, r0, #29
    7df0:	d505      	bpl.n	7dfe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    7df2:	4620      	mov	r0, r4
    7df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7df8:	2100      	movs	r1, #0
    7dfa:	f000 bdff 	b.w	89fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    7dfe:	bd70      	pop	{r4, r5, r6, pc}

00007e00 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7e00:	b508      	push	{r3, lr}
    7e02:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    7e06:	f88d 2000 	strb.w	r2, [sp]
    7e0a:	9a00      	ldr	r2, [sp, #0]
    7e0c:	9200      	str	r2, [sp, #0]
    7e0e:	f89d 3000 	ldrb.w	r3, [sp]
    7e12:	2200      	movs	r2, #0
    7e14:	b163      	cbz	r3, 7e30 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    7e16:	704a      	strb	r2, [r1, #1]
    7e18:	2317      	movs	r3, #23
    7e1a:	700b      	strb	r3, [r1, #0]
    7e1c:	f850 3f95 	ldr.w	r3, [r0, #149]!
    7e20:	604b      	str	r3, [r1, #4]
    7e22:	6843      	ldr	r3, [r0, #4]
    7e24:	608b      	str	r3, [r1, #8]
    7e26:	7a03      	ldrb	r3, [r0, #8]
    7e28:	730b      	strb	r3, [r1, #12]
    7e2a:	f800 2c01 	strb.w	r2, [r0, #-1]
    7e2e:	e03b      	b.n	7ea8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7e30:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    7e34:	f88d 3000 	strb.w	r3, [sp]
    7e38:	9b00      	ldr	r3, [sp, #0]
    7e3a:	9300      	str	r3, [sp, #0]
    7e3c:	f89d 3000 	ldrb.w	r3, [sp]
    7e40:	b143      	cbz	r3, 7e54 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    7e42:	704a      	strb	r2, [r1, #1]
    7e44:	2305      	movs	r3, #5
    7e46:	700b      	strb	r3, [r1, #0]
    7e48:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    7e4c:	604b      	str	r3, [r1, #4]
    7e4e:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    7e52:	e029      	b.n	7ea8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7e54:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7e58:	f88d 3000 	strb.w	r3, [sp]
    7e5c:	9b00      	ldr	r3, [sp, #0]
    7e5e:	9300      	str	r3, [sp, #0]
    7e60:	f89d 3000 	ldrb.w	r3, [sp]
    7e64:	b11b      	cbz	r3, 7e6e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    7e66:	bf00      	nop
    7e68:	f007 fd51 	bl	f90e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7e6c:	e01c      	b.n	7ea8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7e6e:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    7e72:	f88d 3000 	strb.w	r3, [sp]
    7e76:	9b00      	ldr	r3, [sp, #0]
    7e78:	9300      	str	r3, [sp, #0]
    7e7a:	f89d 3000 	ldrb.w	r3, [sp]
    7e7e:	b1ab      	cbz	r3, 7eac <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    7e80:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7e84:	f88d 3000 	strb.w	r3, [sp]
    7e88:	9b00      	ldr	r3, [sp, #0]
    7e8a:	9300      	str	r3, [sp, #0]
    7e8c:	f89d 3000 	ldrb.w	r3, [sp]
    7e90:	2b00      	cmp	r3, #0
    7e92:	d1e9      	bne.n	7e68 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    7e94:	704a      	strb	r2, [r1, #1]
    7e96:	2314      	movs	r3, #20
    7e98:	700b      	strb	r3, [r1, #0]
    7e9a:	f850 3f88 	ldr.w	r3, [r0, #136]!
    7e9e:	604b      	str	r3, [r1, #4]
    7ea0:	8883      	ldrh	r3, [r0, #4]
    7ea2:	810b      	strh	r3, [r1, #8]
    7ea4:	f800 2c02 	strb.w	r2, [r0, #-2]
    7ea8:	2001      	movs	r0, #1
    7eaa:	bd08      	pop	{r3, pc}
    7eac:	2000      	movs	r0, #0
    7eae:	bd08      	pop	{r3, pc}

00007eb0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7eb0:	b530      	push	{r4, r5, lr}
    7eb2:	460c      	mov	r4, r1
    7eb4:	b08d      	sub	sp, #52	; 0x34
    7eb6:	4605      	mov	r5, r0
    7eb8:	4601      	mov	r1, r0
    7eba:	2220      	movs	r2, #32
    7ebc:	a802      	add	r0, sp, #8
    7ebe:	f005 fc72 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7ec2:	a80a      	add	r0, sp, #40	; 0x28
    7ec4:	f007 fdf9 	bl	faba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7ec8:	7aa0      	ldrb	r0, [r4, #10]
    7eca:	f88d 0018 	strb.w	r0, [sp, #24]
    7ece:	7820      	ldrb	r0, [r4, #0]
    7ed0:	f88d 0008 	strb.w	r0, [sp, #8]
    7ed4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7ed8:	f8ad 0000 	strh.w	r0, [sp]
    7edc:	f89d 0000 	ldrb.w	r0, [sp]
    7ee0:	f000 0101 	and.w	r1, r0, #1
    7ee4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7ee8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7eec:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7ef0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7ef4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7ef8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7efc:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7f00:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7f04:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7f08:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7f0c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f10:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7f14:	f8ad 000a 	strh.w	r0, [sp, #10]
    7f18:	7d20      	ldrb	r0, [r4, #20]
    7f1a:	2801      	cmp	r0, #1
    7f1c:	d006      	beq.n	7f2c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7f1e:	2802      	cmp	r0, #2
    7f20:	d004      	beq.n	7f2c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7f22:	f240 2175 	movw	r1, #629	; 0x275
    7f26:	2006      	movs	r0, #6
    7f28:	f7fd fbce 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f2c:	f88d 000c 	strb.w	r0, [sp, #12]
    7f30:	7a61      	ldrb	r1, [r4, #9]
    7f32:	a80a      	add	r0, sp, #40	; 0x28
    7f34:	f007 fda8 	bl	fa88 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7f38:	7d20      	ldrb	r0, [r4, #20]
    7f3a:	2101      	movs	r1, #1
    7f3c:	2802      	cmp	r0, #2
    7f3e:	d102      	bne.n	7f46 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7f40:	7d60      	ldrb	r0, [r4, #21]
    7f42:	1c40      	adds	r0, r0, #1
    7f44:	b2c1      	uxtb	r1, r0
    7f46:	7ea0      	ldrb	r0, [r4, #26]
    7f48:	1c40      	adds	r0, r0, #1
    7f4a:	b2c2      	uxtb	r2, r0
    7f4c:	a80a      	add	r0, sp, #40	; 0x28
    7f4e:	f007 fd62 	bl	fa16 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7f52:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7f56:	0700      	lsls	r0, r0, #28
    7f58:	d501      	bpl.n	7f5e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7f5a:	2000      	movs	r0, #0
    7f5c:	e020      	b.n	7fa0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7f5e:	a80a      	add	r0, sp, #40	; 0x28
    7f60:	f007 fd6b 	bl	fa3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7f64:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7f68:	2228      	movs	r2, #40	; 0x28
    7f6a:	f000 fded 	bl	8b48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7f6e:	f240 2171 	movw	r1, #625	; 0x271
    7f72:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    7f76:	fbb0 f0f1 	udiv	r0, r0, r1
    7f7a:	4348      	muls	r0, r1
    7f7c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7f80:	f240 2371 	movw	r3, #625	; 0x271
    7f84:	0a0a      	lsrs	r2, r1, #8
    7f86:	f240 2171 	movw	r1, #625	; 0x271
    7f8a:	434a      	muls	r2, r1
    7f8c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7f90:	0a09      	lsrs	r1, r1, #8
    7f92:	4359      	muls	r1, r3
    7f94:	4290      	cmp	r0, r2
    7f96:	d801      	bhi.n	7f9c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7f98:	9204      	str	r2, [sp, #16]
    7f9a:	e004      	b.n	7fa6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7f9c:	4288      	cmp	r0, r1
    7f9e:	d801      	bhi.n	7fa4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7fa0:	9004      	str	r0, [sp, #16]
    7fa2:	e000      	b.n	7fa6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7fa4:	9104      	str	r1, [sp, #16]
    7fa6:	7ca0      	ldrb	r0, [r4, #18]
    7fa8:	f88d 0017 	strb.w	r0, [sp, #23]
    7fac:	7e20      	ldrb	r0, [r4, #24]
    7fae:	2801      	cmp	r0, #1
    7fb0:	d000      	beq.n	7fb4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7fb2:	2000      	movs	r0, #0
    7fb4:	f88d 0014 	strb.w	r0, [sp, #20]
    7fb8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7fba:	f006 fcad 	bl	e918 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7fbe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7fc0:	f006 fd4d 	bl	ea5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7fc4:	2220      	movs	r2, #32
    7fc6:	a902      	add	r1, sp, #8
    7fc8:	4628      	mov	r0, r5
    7fca:	f005 fbec 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7fce:	980a      	ldr	r0, [sp, #40]	; 0x28
    7fd0:	6228      	str	r0, [r5, #32]
    7fd2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7fd6:	84a8      	strh	r0, [r5, #36]	; 0x24
    7fd8:	7ae0      	ldrb	r0, [r4, #11]
    7fda:	b168      	cbz	r0, 7ff8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7fdc:	2802      	cmp	r0, #2
    7fde:	d00b      	beq.n	7ff8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7fe0:	f05f 0001 	movs.w	r0, #1
    7fe4:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7fe8:	68e0      	ldr	r0, [r4, #12]
    7fea:	6528      	str	r0, [r5, #80]	; 0x50
    7fec:	8a20      	ldrh	r0, [r4, #16]
    7fee:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7ff2:	b00d      	add	sp, #52	; 0x34
    7ff4:	2000      	movs	r0, #0
    7ff6:	bd30      	pop	{r4, r5, pc}
    7ff8:	2000      	movs	r0, #0
    7ffa:	e7f3      	b.n	7fe4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007ffc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7ffc:	4a0a      	ldr	r2, [pc, #40]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7ffe:	b510      	push	{r4, lr}
    8000:	2100      	movs	r1, #0
    8002:	7011      	strb	r1, [r2, #0]
    8004:	4c09      	ldr	r4, [pc, #36]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8006:	6060      	str	r0, [r4, #4]
    8008:	f000 f822 	bl	8050 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    800c:	b110      	cbz	r0, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    800e:	f240 312a 	movw	r1, #810	; 0x32a
    8012:	e004      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8014:	68a0      	ldr	r0, [r4, #8]
    8016:	2800      	cmp	r0, #0
    8018:	d104      	bne.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    801a:	f240 312d 	movw	r1, #813	; 0x32d
    801e:	202d      	movs	r0, #45	; 0x2d
    8020:	f7fd fb52 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8024:	bd10      	pop	{r4, pc}
    8026:	0000      	.short	0x0000
    8028:	2000125c 	.word	0x2000125c
    802c:	200000fc 	.word	0x200000fc

00008030 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    8030:	4902      	ldr	r1, [pc, #8]	; (803c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    8032:	4801      	ldr	r0, [pc, #4]	; (8038 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    8034:	6088      	str	r0, [r1, #8]
    8036:	4770      	bx	lr
    8038:	00008b30 	.word	0x00008b30
    803c:	200000fc 	.word	0x200000fc

00008040 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    8040:	4902      	ldr	r1, [pc, #8]	; (804c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    8042:	6008      	str	r0, [r1, #0]
    8044:	6889      	ldr	r1, [r1, #8]
    8046:	6809      	ldr	r1, [r1, #0]
    8048:	4708      	bx	r1
    804a:	0000      	.short	0x0000
    804c:	200000fc 	.word	0x200000fc

00008050 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    8050:	4808      	ldr	r0, [pc, #32]	; (8074 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    8052:	b510      	push	{r4, lr}
    8054:	7800      	ldrb	r0, [r0, #0]
    8056:	b110      	cbz	r0, 805e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    8058:	240c      	movs	r4, #12
    805a:	4620      	mov	r0, r4
    805c:	bd10      	pop	{r4, pc}
    805e:	2400      	movs	r4, #0
    8060:	2218      	movs	r2, #24
    8062:	4621      	mov	r1, r4
    8064:	4803      	ldr	r0, [pc, #12]	; (8074 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    8066:	f005 fc18 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    806a:	f004 f8c3 	bl	c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    806e:	f003 fea5 	bl	bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8072:	e7f2      	b.n	805a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    8074:	2000125c 	.word	0x2000125c

00008078 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    8078:	4904      	ldr	r1, [pc, #16]	; (808c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    807a:	b510      	push	{r4, lr}
    807c:	7809      	ldrb	r1, [r1, #0]
    807e:	2901      	cmp	r1, #1
    8080:	d101      	bne.n	8086 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    8082:	f000 fb81 	bl	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    8086:	2000      	movs	r0, #0
    8088:	bd10      	pop	{r4, pc}
    808a:	0000      	.short	0x0000
    808c:	2000125c 	.word	0x2000125c

00008090 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    8090:	4902      	ldr	r1, [pc, #8]	; (809c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    8092:	4801      	ldr	r0, [pc, #4]	; (8098 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    8094:	6008      	str	r0, [r1, #0]
    8096:	4770      	bx	lr
    8098:	000088d5 	.word	0x000088d5
    809c:	20000108 	.word	0x20000108
    80a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a4:	000f      	movs	r7, r1
    80a6:	4604      	mov	r4, r0
    80a8:	d023      	beq.n	80f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    80aa:	f104 0020 	add.w	r0, r4, #32
    80ae:	4605      	mov	r5, r0
    80b0:	f007 fcec 	bl	fa8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    80b4:	b9b0      	cbnz	r0, 80e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    80b6:	78a0      	ldrb	r0, [r4, #2]
    80b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    80bc:	b350      	cbz	r0, 8114 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    80be:	4628      	mov	r0, r5
    80c0:	f007 fcbb 	bl	fa3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    80c4:	4606      	mov	r6, r0
    80c6:	4628      	mov	r0, r5
    80c8:	f007 fce0 	bl	fa8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    80cc:	1a30      	subs	r0, r6, r0
    80ce:	b2c0      	uxtb	r0, r0
    80d0:	f007 fd31 	bl	fb36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    80d4:	4601      	mov	r1, r0
    80d6:	4835      	ldr	r0, [pc, #212]	; (81ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    80d8:	6842      	ldr	r2, [r0, #4]
    80da:	4411      	add	r1, r2
    80dc:	6041      	str	r1, [r0, #4]
    80de:	4628      	mov	r0, r5
    80e0:	f007 fcf2 	bl	fac8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    80e4:	4628      	mov	r0, r5
    80e6:	f007 fcb4 	bl	fa52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    80ea:	4601      	mov	r1, r0
    80ec:	4620      	mov	r0, r4
    80ee:	f007 fc73 	bl	f9d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    80f2:	4d2f      	ldr	r5, [pc, #188]	; (81b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    80f4:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    80f8:	2100      	movs	r1, #0
    80fa:	6868      	ldr	r0, [r5, #4]
    80fc:	8001      	strh	r1, [r0, #0]
    80fe:	f007 fc81 	bl	fa04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    8102:	8860      	ldrh	r0, [r4, #2]
    8104:	2813      	cmp	r0, #19
    8106:	d013      	beq.n	8130 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    8108:	dc09      	bgt.n	811e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    810a:	2810      	cmp	r0, #16
    810c:	d036      	beq.n	817c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    810e:	2812      	cmp	r0, #18
    8110:	d109      	bne.n	8126 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    8112:	e031      	b.n	8178 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    8114:	4620      	mov	r0, r4
    8116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    811a:	f000 bb35 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    811e:	2815      	cmp	r0, #21
    8120:	d00f      	beq.n	8142 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    8122:	281d      	cmp	r0, #29
    8124:	d00d      	beq.n	8142 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    8126:	f240 616c 	movw	r1, #1644	; 0x66c
    812a:	202d      	movs	r0, #45	; 0x2d
    812c:	f7fd facc 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8130:	2100      	movs	r1, #0
    8132:	6868      	ldr	r0, [r5, #4]
    8134:	f007 f8aa 	bl	f28c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8138:	2101      	movs	r1, #1
    813a:	6868      	ldr	r0, [r5, #4]
    813c:	f007 fc62 	bl	fa04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    8140:	e020      	b.n	8184 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    8142:	2101      	movs	r1, #1
    8144:	6868      	ldr	r0, [r5, #4]
    8146:	f007 f8a1 	bl	f28c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    814a:	2101      	movs	r1, #1
    814c:	6868      	ldr	r0, [r5, #4]
    814e:	f007 fc59 	bl	fa04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    8152:	b136      	cbz	r6, 8162 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    8154:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8158:	6868      	ldr	r0, [r5, #4]
    815a:	f007 f8b2 	bl	f2c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    815e:	2101      	movs	r1, #1
    8160:	e006      	b.n	8170 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    8162:	f104 0150 	add.w	r1, r4, #80	; 0x50
    8166:	6868      	ldr	r0, [r5, #4]
    8168:	f007 f8ab 	bl	f2c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    816c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    8170:	6868      	ldr	r0, [r5, #4]
    8172:	f007 f8ac 	bl	f2ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8176:	e005      	b.n	8184 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    8178:	2106      	movs	r1, #6
    817a:	e000      	b.n	817e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    817c:	2102      	movs	r1, #2
    817e:	6868      	ldr	r0, [r5, #4]
    8180:	f007 f884 	bl	f28c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8184:	4620      	mov	r0, r4
    8186:	f000 fcaf 	bl	8ae8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    818a:	8860      	ldrh	r0, [r4, #2]
    818c:	281d      	cmp	r0, #29
    818e:	d006      	beq.n	819e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    8190:	2815      	cmp	r0, #21
    8192:	d004      	beq.n	819e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    8194:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    8196:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8198:	6868      	ldr	r0, [r5, #4]
    819a:	f007 f867 	bl	f26c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    819e:	4639      	mov	r1, r7
    81a0:	4620      	mov	r0, r4
    81a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81a6:	f000 b9e5 	b.w	8574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    81aa:	0000      	.short	0x0000
    81ac:	2000125c 	.word	0x2000125c
    81b0:	200000fc 	.word	0x200000fc
    81b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81b8:	4d2e      	ldr	r5, [pc, #184]	; (8274 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    81ba:	4607      	mov	r7, r0
    81bc:	7828      	ldrb	r0, [r5, #0]
    81be:	2802      	cmp	r0, #2
    81c0:	d005      	beq.n	81ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    81c2:	7828      	ldrb	r0, [r5, #0]
    81c4:	2803      	cmp	r0, #3
    81c6:	d002      	beq.n	81ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    81c8:	f640 41f7 	movw	r1, #3319	; 0xcf7
    81cc:	e029      	b.n	8222 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    81ce:	4c2a      	ldr	r4, [pc, #168]	; (8278 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    81d0:	6820      	ldr	r0, [r4, #0]
    81d2:	7b01      	ldrb	r1, [r0, #12]
    81d4:	b109      	cbz	r1, 81da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    81d6:	f007 fc0a 	bl	f9ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    81da:	6860      	ldr	r0, [r4, #4]
    81dc:	f04f 0800 	mov.w	r8, #0
    81e0:	7802      	ldrb	r2, [r0, #0]
    81e2:	f002 060f 	and.w	r6, r2, #15
    81e6:	b357      	cbz	r7, 823e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    81e8:	6821      	ldr	r1, [r4, #0]
    81ea:	f101 0349 	add.w	r3, r1, #73	; 0x49
    81ee:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    81f2:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    81f6:	d122      	bne.n	823e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    81f8:	2206      	movs	r2, #6
    81fa:	4619      	mov	r1, r3
    81fc:	3009      	adds	r0, #9
    81fe:	f005 fac0 	bl	d782 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8202:	b9e0      	cbnz	r0, 823e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    8204:	4641      	mov	r1, r8
    8206:	6860      	ldr	r0, [r4, #4]
    8208:	f007 f820 	bl	f24c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    820c:	b1b8      	cbz	r0, 823e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    820e:	782a      	ldrb	r2, [r5, #0]
    8210:	6820      	ldr	r0, [r4, #0]
    8212:	4631      	mov	r1, r6
    8214:	2a02      	cmp	r2, #2
    8216:	d007      	beq.n	8228 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    8218:	782a      	ldrb	r2, [r5, #0]
    821a:	2a03      	cmp	r2, #3
    821c:	d004      	beq.n	8228 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    821e:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    8222:	202d      	movs	r0, #45	; 0x2d
    8224:	f7fd fa50 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8228:	68a2      	ldr	r2, [r4, #8]
    822a:	782b      	ldrb	r3, [r5, #0]
    822c:	6952      	ldr	r2, [r2, #20]
    822e:	f06f 0607 	mvn.w	r6, #7
    8232:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    8236:	58d2      	ldr	r2, [r2, r3]
    8238:	4790      	blx	r2
    823a:	4606      	mov	r6, r0
    823c:	e000      	b.n	8240 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    823e:	2601      	movs	r6, #1
    8240:	7ba8      	ldrb	r0, [r5, #14]
    8242:	b118      	cbz	r0, 824c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    8244:	f003 ffd6 	bl	c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8248:	f003 fdb8 	bl	bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    824c:	2e00      	cmp	r6, #0
    824e:	d00f      	beq.n	8270 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    8250:	6820      	ldr	r0, [r4, #0]
    8252:	f007 fc86 	bl	fb62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8256:	b130      	cbz	r0, 8266 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    8258:	f003 ffec 	bl	c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    825c:	68a0      	ldr	r0, [r4, #8]
    825e:	6880      	ldr	r0, [r0, #8]
    8260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8264:	4700      	bx	r0
    8266:	6820      	ldr	r0, [r4, #0]
    8268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    826c:	f000 ba8c 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    8270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8274:	2000125c 	.word	0x2000125c
    8278:	200000fc 	.word	0x200000fc
    827c:	b510      	push	{r4, lr}
    827e:	2903      	cmp	r1, #3
    8280:	d002      	beq.n	8288 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    8282:	2905      	cmp	r1, #5
    8284:	d10a      	bne.n	829c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    8286:	e002      	b.n	828e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    8288:	f000 fb7e 	bl	8988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    828c:	e003      	b.n	8296 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    828e:	4904      	ldr	r1, [pc, #16]	; (82a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    8290:	6809      	ldr	r1, [r1, #0]
    8292:	b109      	cbz	r1, 8298 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    8294:	4788      	blx	r1
    8296:	b108      	cbz	r0, 829c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    8298:	2000      	movs	r0, #0
    829a:	bd10      	pop	{r4, pc}
    829c:	2001      	movs	r0, #1
    829e:	bd10      	pop	{r4, pc}
    82a0:	20000108 	.word	0x20000108
    82a4:	4a09      	ldr	r2, [pc, #36]	; (82cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    82a6:	0003      	movs	r3, r0
    82a8:	6810      	ldr	r0, [r2, #0]
    82aa:	d001      	beq.n	82b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    82ac:	f000 ba6c 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    82b0:	2900      	cmp	r1, #0
    82b2:	d009      	beq.n	82c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    82b4:	6891      	ldr	r1, [r2, #8]
    82b6:	4a06      	ldr	r2, [pc, #24]	; (82d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    82b8:	6909      	ldr	r1, [r1, #16]
    82ba:	7812      	ldrb	r2, [r2, #0]
    82bc:	f06f 030f 	mvn.w	r3, #15
    82c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    82c4:	5889      	ldr	r1, [r1, r2]
    82c6:	4708      	bx	r1
    82c8:	4770      	bx	lr
    82ca:	0000      	.short	0x0000
    82cc:	200000fc 	.word	0x200000fc
    82d0:	2000125c 	.word	0x2000125c
    82d4:	b570      	push	{r4, r5, r6, lr}
    82d6:	4604      	mov	r4, r0
    82d8:	8840      	ldrh	r0, [r0, #2]
    82da:	2810      	cmp	r0, #16
    82dc:	d019      	beq.n	8312 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    82de:	4d10      	ldr	r5, [pc, #64]	; (8320 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    82e0:	7ba8      	ldrb	r0, [r5, #14]
    82e2:	b120      	cbz	r0, 82ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    82e4:	f003 fd8a 	bl	bdfc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    82e8:	2040      	movs	r0, #64	; 0x40
    82ea:	f003 ff91 	bl	c210 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    82ee:	480d      	ldr	r0, [pc, #52]	; (8324 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    82f0:	6840      	ldr	r0, [r0, #4]
    82f2:	f004 fa4d 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    82f6:	78a0      	ldrb	r0, [r4, #2]
    82f8:	0740      	lsls	r0, r0, #29
    82fa:	d404      	bmi.n	8306 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    82fc:	2100      	movs	r1, #0
    82fe:	7922      	ldrb	r2, [r4, #4]
    8300:	4608      	mov	r0, r1
    8302:	f004 fad1 	bl	c8a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8306:	2000      	movs	r0, #0
    8308:	f004 f8d8 	bl	c4bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    830c:	2002      	movs	r0, #2
    830e:	7028      	strb	r0, [r5, #0]
    8310:	bd70      	pop	{r4, r5, r6, pc}
    8312:	4620      	mov	r0, r4
    8314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8318:	2101      	movs	r1, #1
    831a:	f7ff bec1 	b.w	80a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    831e:	0000      	.short	0x0000
    8320:	2000125c 	.word	0x2000125c
    8324:	200000fc 	.word	0x200000fc
    8328:	b510      	push	{r4, lr}
    832a:	4c12      	ldr	r4, [pc, #72]	; (8374 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    832c:	6820      	ldr	r0, [r4, #0]
    832e:	f000 f825 	bl	837c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    8332:	6820      	ldr	r0, [r4, #0]
    8334:	f007 fc15 	bl	fb62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    8338:	2800      	cmp	r0, #0
    833a:	6820      	ldr	r0, [r4, #0]
    833c:	d00b      	beq.n	8356 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    833e:	490e      	ldr	r1, [pc, #56]	; (8378 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    8340:	780a      	ldrb	r2, [r1, #0]
    8342:	2a02      	cmp	r2, #2
    8344:	d00b      	beq.n	835e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    8346:	780a      	ldrb	r2, [r1, #0]
    8348:	2a03      	cmp	r2, #3
    834a:	d008      	beq.n	835e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    834c:	f640 31fe 	movw	r1, #3070	; 0xbfe
    8350:	202d      	movs	r0, #45	; 0x2d
    8352:	f7fd f9b9 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    835a:	f000 ba15 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    835e:	68a2      	ldr	r2, [r4, #8]
    8360:	7809      	ldrb	r1, [r1, #0]
    8362:	68d2      	ldr	r2, [r2, #12]
    8364:	f06f 0307 	mvn.w	r3, #7
    8368:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    836c:	5851      	ldr	r1, [r2, r1]
    836e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8372:	4708      	bx	r1
    8374:	200000fc 	.word	0x200000fc
    8378:	2000125c 	.word	0x2000125c
    837c:	b510      	push	{r4, lr}
    837e:	7b01      	ldrb	r1, [r0, #12]
    8380:	b109      	cbz	r1, 8386 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    8382:	f007 fb34 	bl	f9ee <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    8386:	4805      	ldr	r0, [pc, #20]	; (839c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    8388:	7b80      	ldrb	r0, [r0, #14]
    838a:	2800      	cmp	r0, #0
    838c:	d005      	beq.n	839a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    838e:	f003 ff31 	bl	c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8396:	f003 bd11 	b.w	bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    839a:	bd10      	pop	{r4, pc}
    839c:	2000125c 	.word	0x2000125c

000083a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    83a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83a4:	4d58      	ldr	r5, [pc, #352]	; (8508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    83a6:	4604      	mov	r4, r0
    83a8:	b088      	sub	sp, #32
    83aa:	7828      	ldrb	r0, [r5, #0]
    83ac:	bbf0      	cbnz	r0, 842c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    83ae:	7820      	ldrb	r0, [r4, #0]
    83b0:	28ff      	cmp	r0, #255	; 0xff
    83b2:	d03c      	beq.n	842e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    83b4:	2600      	movs	r6, #0
    83b6:	81ae      	strh	r6, [r5, #12]
    83b8:	606e      	str	r6, [r5, #4]
    83ba:	706e      	strb	r6, [r5, #1]
    83bc:	70ae      	strb	r6, [r5, #2]
    83be:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    83c2:	4b52      	ldr	r3, [pc, #328]	; (850c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    83c4:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8510 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    83c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    83ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    83ce:	f8d8 0008 	ldr.w	r0, [r8, #8]
    83d2:	6840      	ldr	r0, [r0, #4]
    83d4:	9003      	str	r0, [sp, #12]
    83d6:	4668      	mov	r0, sp
    83d8:	f004 f844 	bl	c464 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    83dc:	f004 f94c 	bl	c678 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    83e0:	f004 fbb8 	bl	cb54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    83e4:	f003 ff06 	bl	c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    83e8:	f003 fce8 	bl	bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    83ec:	4849      	ldr	r0, [pc, #292]	; (8514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    83ee:	f004 fa9d 	bl	c92c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    83f2:	4846      	ldr	r0, [pc, #280]	; (850c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    83f4:	1f00      	subs	r0, r0, #4
    83f6:	f004 faa3 	bl	c940 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    83fa:	f104 0020 	add.w	r0, r4, #32
    83fe:	4607      	mov	r7, r0
    8400:	f007 fb62 	bl	fac8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    8404:	4638      	mov	r0, r7
    8406:	f007 fb24 	bl	fa52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    840a:	4601      	mov	r1, r0
    840c:	4620      	mov	r0, r4
    840e:	f007 fae3 	bl	f9d8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    8412:	f994 000e 	ldrsb.w	r0, [r4, #14]
    8416:	f004 f9b5 	bl	c784 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    841a:	7921      	ldrb	r1, [r4, #4]
    841c:	2000      	movs	r0, #0
    841e:	f003 ffa5 	bl	c36c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    8422:	60a8      	str	r0, [r5, #8]
    8424:	b138      	cbz	r0, 8436 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    8426:	7ea0      	ldrb	r0, [r4, #26]
    8428:	b968      	cbnz	r0, 8446 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    842a:	e007      	b.n	843c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    842c:	e7ff      	b.n	842e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    842e:	200c      	movs	r0, #12
    8430:	b008      	add	sp, #32
    8432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8436:	2001      	movs	r0, #1
    8438:	7028      	strb	r0, [r5, #0]
    843a:	e062      	b.n	8502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    843c:	7e20      	ldrb	r0, [r4, #24]
    843e:	b910      	cbnz	r0, 8446 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    8440:	78a0      	ldrb	r0, [r4, #2]
    8442:	0740      	lsls	r0, r0, #29
    8444:	d529      	bpl.n	849a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    8446:	f005 f839 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    844a:	4682      	mov	sl, r0
    844c:	4651      	mov	r1, sl
    844e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    8450:	f7fa fd3c 	bl	2ecc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8454:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8518 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    8458:	4607      	mov	r7, r0
    845a:	fb90 f1f9 	sdiv	r1, r0, r9
    845e:	fb09 7011 	mls	r0, r9, r1, r7
    8462:	4241      	negs	r1, r0
    8464:	4650      	mov	r0, sl
    8466:	f7fa fcff 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    846a:	6460      	str	r0, [r4, #68]	; 0x44
    846c:	fb97 f0f9 	sdiv	r0, r7, r9
    8470:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8472:	4408      	add	r0, r1
    8474:	6420      	str	r0, [r4, #64]	; 0x40
    8476:	f7fe fedf 	bl	7238 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    847a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    847c:	4288      	cmp	r0, r1
    847e:	d80c      	bhi.n	849a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    8480:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    8484:	2101      	movs	r1, #1
    8486:	4620      	mov	r0, r4
    8488:	f007 fa6a 	bl	f960 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    848c:	78a0      	ldrb	r0, [r4, #2]
    848e:	0740      	lsls	r0, r0, #29
    8490:	d503      	bpl.n	849a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    8492:	2101      	movs	r1, #1
    8494:	4620      	mov	r0, r4
    8496:	f000 fab1 	bl	89fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    849a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    849e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    84a0:	f006 faac 	bl	e9fc <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    84a4:	f104 0138 	add.w	r1, r4, #56	; 0x38
    84a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    84aa:	f006 faaa 	bl	ea02 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    84ae:	f7fe ff29 	bl	7304 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    84b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
    84b6:	1cc0      	adds	r0, r0, #3
    84b8:	f006 fb68 	bl	eb8c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    84bc:	73a8      	strb	r0, [r5, #14]
    84be:	78a0      	ldrb	r0, [r4, #2]
    84c0:	07c0      	lsls	r0, r0, #31
    84c2:	d01e      	beq.n	8502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    84c4:	a904      	add	r1, sp, #16
    84c6:	2000      	movs	r0, #0
    84c8:	f006 f972 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    84cc:	b120      	cbz	r0, 84d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    84ce:	f640 11c9 	movw	r1, #2505	; 0x9c9
    84d2:	202d      	movs	r0, #45	; 0x2d
    84d4:	f7fd f8f8 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84d8:	20ff      	movs	r0, #255	; 0xff
    84da:	73e8      	strb	r0, [r5, #15]
    84dc:	e00c      	b.n	84f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    84de:	9806      	ldr	r0, [sp, #24]
    84e0:	69e1      	ldr	r1, [r4, #28]
    84e2:	4281      	cmp	r1, r0
    84e4:	d008      	beq.n	84f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    84e6:	7881      	ldrb	r1, [r0, #2]
    84e8:	73e9      	strb	r1, [r5, #15]
    84ea:	f8d0 1003 	ldr.w	r1, [r0, #3]
    84ee:	6129      	str	r1, [r5, #16]
    84f0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    84f4:	82a8      	strh	r0, [r5, #20]
    84f6:	e004      	b.n	8502 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    84f8:	a804      	add	r0, sp, #16
    84fa:	f7fd fb1d 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    84fe:	2800      	cmp	r0, #0
    8500:	d0ed      	beq.n	84de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    8502:	2000      	movs	r0, #0
    8504:	e794      	b.n	8430 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    8506:	0000      	.short	0x0000
    8508:	2000125c 	.word	0x2000125c
    850c:	00008b10 	.word	0x00008b10
    8510:	200000fc 	.word	0x200000fc
    8514:	8e89bed6 	.word	0x8e89bed6
    8518:	000f4240 	.word	0x000f4240
    851c:	b510      	push	{r4, lr}
    851e:	4604      	mov	r4, r0
    8520:	f7ff ff3e 	bl	83a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    8524:	2800      	cmp	r0, #0
    8526:	d108      	bne.n	853a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    8528:	4804      	ldr	r0, [pc, #16]	; (853c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    852a:	7800      	ldrb	r0, [r0, #0]
    852c:	2801      	cmp	r0, #1
    852e:	d003      	beq.n	8538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    8530:	2100      	movs	r1, #0
    8532:	4620      	mov	r0, r4
    8534:	f7ff fdb4 	bl	80a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8538:	2000      	movs	r0, #0
    853a:	bd10      	pop	{r4, pc}
    853c:	2000125c 	.word	0x2000125c
    8540:	480a      	ldr	r0, [pc, #40]	; (856c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    8542:	b510      	push	{r4, lr}
    8544:	490a      	ldr	r1, [pc, #40]	; (8570 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    8546:	6804      	ldr	r4, [r0, #0]
    8548:	7808      	ldrb	r0, [r1, #0]
    854a:	2800      	cmp	r0, #0
    854c:	d00d      	beq.n	856a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    854e:	7808      	ldrb	r0, [r1, #0]
    8550:	2802      	cmp	r0, #2
    8552:	d002      	beq.n	855a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    8554:	7808      	ldrb	r0, [r1, #0]
    8556:	2803      	cmp	r0, #3
    8558:	d102      	bne.n	8560 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    855a:	4620      	mov	r0, r4
    855c:	f7ff ff0e 	bl	837c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    8560:	4620      	mov	r0, r4
    8562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8566:	f000 b90f 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    856a:	bd10      	pop	{r4, pc}
    856c:	200000fc 	.word	0x200000fc
    8570:	2000125c 	.word	0x2000125c
    8574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8578:	4604      	mov	r4, r0
    857a:	4827      	ldr	r0, [pc, #156]	; (8618 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    857c:	460d      	mov	r5, r1
    857e:	6840      	ldr	r0, [r0, #4]
    8580:	f004 f906 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8584:	4e25      	ldr	r6, [pc, #148]	; (861c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    8586:	2004      	movs	r0, #4
    8588:	7030      	strb	r0, [r6, #0]
    858a:	b325      	cbz	r5, 85d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    858c:	8860      	ldrh	r0, [r4, #2]
    858e:	2810      	cmp	r0, #16
    8590:	d02a      	beq.n	85e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    8592:	f104 0020 	add.w	r0, r4, #32
    8596:	4680      	mov	r8, r0
    8598:	68b5      	ldr	r5, [r6, #8]
    859a:	f007 fa4e 	bl	fa3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    859e:	4607      	mov	r7, r0
    85a0:	4640      	mov	r0, r8
    85a2:	f007 fa73 	bl	fa8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    85a6:	1a38      	subs	r0, r7, r0
    85a8:	1e40      	subs	r0, r0, #1
    85aa:	b2c0      	uxtb	r0, r0
    85ac:	8861      	ldrh	r1, [r4, #2]
    85ae:	2228      	movs	r2, #40	; 0x28
    85b0:	f000 faea 	bl	8b88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    85b4:	4405      	add	r5, r0
    85b6:	78a0      	ldrb	r0, [r4, #2]
    85b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    85bc:	b130      	cbz	r0, 85cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    85be:	6870      	ldr	r0, [r6, #4]
    85c0:	4405      	add	r5, r0
    85c2:	f007 fabc 	bl	fb3e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    85c6:	4428      	add	r0, r5
    85c8:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    85cc:	7922      	ldrb	r2, [r4, #4]
    85ce:	4629      	mov	r1, r5
    85d0:	2000      	movs	r0, #0
    85d2:	f004 f8ed 	bl	c7b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    85d6:	8860      	ldrh	r0, [r4, #2]
    85d8:	2813      	cmp	r0, #19
    85da:	d013      	beq.n	8604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    85dc:	dc09      	bgt.n	85f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    85de:	2810      	cmp	r0, #16
    85e0:	d017      	beq.n	8612 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    85e2:	2812      	cmp	r0, #18
    85e4:	d109      	bne.n	85fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    85e6:	e00d      	b.n	8604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    85e8:	7921      	ldrb	r1, [r4, #4]
    85ea:	2000      	movs	r0, #0
    85ec:	f003 fe72 	bl	c2d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    85f0:	e7f1      	b.n	85d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    85f2:	2815      	cmp	r0, #21
    85f4:	d006      	beq.n	8604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    85f6:	281d      	cmp	r0, #29
    85f8:	d004      	beq.n	8604 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    85fa:	f640 5185 	movw	r1, #3461	; 0xd85
    85fe:	202d      	movs	r0, #45	; 0x2d
    8600:	f7fd f862 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8604:	7922      	ldrb	r2, [r4, #4]
    8606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    860a:	2101      	movs	r1, #1
    860c:	2000      	movs	r0, #0
    860e:	f004 b94b 	b.w	c8a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8616:	0000      	.short	0x0000
    8618:	200000fc 	.word	0x200000fc
    861c:	2000125c 	.word	0x2000125c
    8620:	b510      	push	{r4, lr}
    8622:	4604      	mov	r4, r0
    8624:	7800      	ldrb	r0, [r0, #0]
    8626:	460b      	mov	r3, r1
    8628:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    862c:	29ff      	cmp	r1, #255	; 0xff
    862e:	d010      	beq.n	8652 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    8630:	f104 0297 	add.w	r2, r4, #151	; 0x97
    8634:	1e51      	subs	r1, r2, #1
    8636:	4618      	mov	r0, r3
    8638:	f7fe fd7c 	bl	7134 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    863c:	b130      	cbz	r0, 864c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    863e:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    8642:	f040 0002 	orr.w	r0, r0, #2
    8646:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    864a:	e011      	b.n	8670 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    864c:	f640 71bc 	movw	r1, #4028	; 0xfbc
    8650:	e020      	b.n	8694 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    8652:	4812      	ldr	r0, [pc, #72]	; (869c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    8654:	6840      	ldr	r0, [r0, #4]
    8656:	7801      	ldrb	r1, [r0, #0]
    8658:	f3c1 1180 	ubfx	r1, r1, #6, #1
    865c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    8660:	f8d0 1003 	ldr.w	r1, [r0, #3]
    8664:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    8668:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    866c:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    8670:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    8674:	287f      	cmp	r0, #127	; 0x7f
    8676:	d00b      	beq.n	8690 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    8678:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    867c:	207f      	movs	r0, #127	; 0x7f
    867e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8682:	347e      	adds	r4, #126	; 0x7e
    8684:	2001      	movs	r0, #1
    8686:	75a0      	strb	r0, [r4, #22]
    8688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    868c:	f7ff b9a8 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8690:	f640 6137 	movw	r1, #3639	; 0xe37
    8694:	202d      	movs	r0, #45	; 0x2d
    8696:	f7fd f817 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    869a:	0000      	.short	0x0000
    869c:	200000fc 	.word	0x200000fc
    86a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86a4:	4690      	mov	r8, r2
    86a6:	460e      	mov	r6, r1
    86a8:	4604      	mov	r4, r0
    86aa:	2903      	cmp	r1, #3
    86ac:	d004      	beq.n	86b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    86ae:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    86b2:	b108      	cbz	r0, 86b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    86b4:	2001      	movs	r0, #1
    86b6:	e000      	b.n	86ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    86b8:	2000      	movs	r0, #0
    86ba:	4681      	mov	r9, r0
    86bc:	f003 fdb4 	bl	c228 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    86c0:	4605      	mov	r5, r0
    86c2:	2e03      	cmp	r6, #3
    86c4:	d003      	beq.n	86ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    86c6:	2701      	movs	r7, #1
    86c8:	2e05      	cmp	r6, #5
    86ca:	d005      	beq.n	86d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    86cc:	e008      	b.n	86e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    86ce:	78a0      	ldrb	r0, [r4, #2]
    86d0:	2702      	movs	r7, #2
    86d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    86d6:	e001      	b.n	86dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    86d8:	78a0      	ldrb	r0, [r4, #2]
    86da:	07c0      	lsls	r0, r0, #31
    86dc:	2800      	cmp	r0, #0
    86de:	d04a      	beq.n	8776 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    86e0:	f1b9 0f00 	cmp.w	r9, #0
    86e4:	d146      	bne.n	8774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    86e6:	4826      	ldr	r0, [pc, #152]	; (8780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    86e8:	7b80      	ldrb	r0, [r0, #14]
    86ea:	b140      	cbz	r0, 86fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    86ec:	f006 fa51 	bl	eb92 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    86f0:	f888 0000 	strb.w	r0, [r8]
    86f4:	28ff      	cmp	r0, #255	; 0xff
    86f6:	d002      	beq.n	86fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    86f8:	f7fe fd36 	bl	7168 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    86fc:	4305      	orrs	r5, r0
    86fe:	4e21      	ldr	r6, [pc, #132]	; (8784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    8700:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    8704:	6870      	ldr	r0, [r6, #4]
    8706:	7801      	ldrb	r1, [r0, #0]
    8708:	f3c1 1180 	ubfx	r1, r1, #6, #1
    870c:	4291      	cmp	r1, r2
    870e:	d106      	bne.n	871e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    8710:	2206      	movs	r2, #6
    8712:	f104 0150 	add.w	r1, r4, #80	; 0x50
    8716:	1cc0      	adds	r0, r0, #3
    8718:	f005 f833 	bl	d782 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    871c:	b130      	cbz	r0, 872c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    871e:	2000      	movs	r0, #0
    8720:	f898 1000 	ldrb.w	r1, [r8]
    8724:	29ff      	cmp	r1, #255	; 0xff
    8726:	d007      	beq.n	8738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    8728:	b9a8      	cbnz	r0, 8756 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    872a:	e001      	b.n	8730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    872c:	2001      	movs	r0, #1
    872e:	e7f7      	b.n	8720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    8730:	7e60      	ldrb	r0, [r4, #25]
    8732:	4288      	cmp	r0, r1
    8734:	d00f      	beq.n	8756 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    8736:	e008      	b.n	874a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    8738:	b138      	cbz	r0, 874a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    873a:	6871      	ldr	r1, [r6, #4]
    873c:	f811 0b03 	ldrb.w	r0, [r1], #3
    8740:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8744:	f007 f8ca 	bl	f8dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8748:	b128      	cbz	r0, 8756 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    874a:	2000      	movs	r0, #0
    874c:	78a1      	ldrb	r1, [r4, #2]
    874e:	0749      	lsls	r1, r1, #29
    8750:	d503      	bpl.n	875a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    8752:	b990      	cbnz	r0, 877a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    8754:	e00e      	b.n	8774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    8756:	2001      	movs	r0, #1
    8758:	e7f8      	b.n	874c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    875a:	b975      	cbnz	r5, 877a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    875c:	7be0      	ldrb	r0, [r4, #15]
    875e:	b108      	cbz	r0, 8764 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    8760:	42b8      	cmp	r0, r7
    8762:	d107      	bne.n	8774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    8764:	6871      	ldr	r1, [r6, #4]
    8766:	f811 0b03 	ldrb.w	r0, [r1], #3
    876a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    876e:	f007 f8b5 	bl	f8dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    8772:	b110      	cbz	r0, 877a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    8774:	2000      	movs	r0, #0
    8776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    877a:	2001      	movs	r0, #1
    877c:	e7fb      	b.n	8776 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    877e:	0000      	.short	0x0000
    8780:	2000125c 	.word	0x2000125c
    8784:	200000fc 	.word	0x200000fc
    8788:	b570      	push	{r4, r5, r6, lr}
    878a:	4604      	mov	r4, r0
    878c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    878e:	4d13      	ldr	r5, [pc, #76]	; (87dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    8790:	1c40      	adds	r0, r0, #1
    8792:	62a0      	str	r0, [r4, #40]	; 0x28
    8794:	7ba8      	ldrb	r0, [r5, #14]
    8796:	2600      	movs	r6, #0
    8798:	b120      	cbz	r0, 87a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    879a:	f003 fd2b 	bl	c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    879e:	f003 fb0d 	bl	bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    87a2:	73ae      	strb	r6, [r5, #14]
    87a4:	702e      	strb	r6, [r5, #0]
    87a6:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    87aa:	b108      	cbz	r0, 87b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    87ac:	2101      	movs	r1, #1
    87ae:	e00f      	b.n	87d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    87b0:	7b60      	ldrb	r0, [r4, #13]
    87b2:	b160      	cbz	r0, 87ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    87b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    87b6:	4288      	cmp	r0, r1
    87b8:	d809      	bhi.n	87ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    87ba:	2101      	movs	r1, #1
    87bc:	4620      	mov	r0, r4
    87be:	f007 f9e5 	bl	fb8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    87c2:	78a0      	ldrb	r0, [r4, #2]
    87c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87c8:	07c0      	lsls	r0, r0, #31
    87ca:	f7ff b909 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    87ce:	2100      	movs	r1, #0
    87d0:	4620      	mov	r0, r4
    87d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87d6:	f007 b9d9 	b.w	fb8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    87da:	0000      	.short	0x0000
    87dc:	2000125c 	.word	0x2000125c
    87e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    87e4:	4604      	mov	r4, r0
    87e6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    87ea:	4617      	mov	r7, r2
    87ec:	460d      	mov	r5, r1
    87ee:	f88d 0000 	strb.w	r0, [sp]
    87f2:	9800      	ldr	r0, [sp, #0]
    87f4:	9000      	str	r0, [sp, #0]
    87f6:	f89d 0000 	ldrb.w	r0, [sp]
    87fa:	b110      	cbz	r0, 8802 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    87fc:	f640 4132 	movw	r1, #3122	; 0xc32
    8800:	e054      	b.n	88ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    8802:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    8806:	8828      	ldrh	r0, [r5, #0]
    8808:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    880c:	2b00      	cmp	r3, #0
    880e:	d15d      	bne.n	88cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    8810:	68e8      	ldr	r0, [r5, #12]
    8812:	f006 fa1c 	bl	ec4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    8816:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    881a:	8aa8      	ldrh	r0, [r5, #20]
    881c:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    8820:	8ae8      	ldrh	r0, [r5, #22]
    8822:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    8826:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    882a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    882e:	7e21      	ldrb	r1, [r4, #24]
    8830:	f104 0849 	add.w	r8, r4, #73	; 0x49
    8834:	2600      	movs	r6, #0
    8836:	b129      	cbz	r1, 8844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    8838:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    883c:	4641      	mov	r1, r8
    883e:	f006 ff65 	bl	f70c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    8842:	b940      	cbnz	r0, 8856 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    8844:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    8848:	b170      	cbz	r0, 8868 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    884a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    884e:	4641      	mov	r1, r8
    8850:	f006 ff53 	bl	f6fa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    8854:	b140      	cbz	r0, 8868 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    8856:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    885a:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    885e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    8862:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    8866:	e003      	b.n	8870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    8868:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    886c:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    8870:	4817      	ldr	r0, [pc, #92]	; (88d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    8872:	2fff      	cmp	r7, #255	; 0xff
    8874:	6840      	ldr	r0, [r0, #4]
    8876:	7801      	ldrb	r1, [r0, #0]
    8878:	f3c1 1180 	ubfx	r1, r1, #6, #1
    887c:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    8880:	f850 1f03 	ldr.w	r1, [r0, #3]!
    8884:	d015      	beq.n	88b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    8886:	67a1      	str	r1, [r4, #120]	; 0x78
    8888:	8880      	ldrh	r0, [r0, #4]
    888a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    888e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    8892:	1e51      	subs	r1, r2, #1
    8894:	4638      	mov	r0, r7
    8896:	f7fe fc4d 	bl	7134 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    889a:	b128      	cbz	r0, 88a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    889c:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    88a0:	f040 0002 	orr.w	r0, r0, #2
    88a4:	7020      	strb	r0, [r4, #0]
    88a6:	e00a      	b.n	88be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    88a8:	f640 4153 	movw	r1, #3155	; 0xc53
    88ac:	202d      	movs	r0, #45	; 0x2d
    88ae:	f7fc ff0b 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88b2:	f844 1f6c 	str.w	r1, [r4, #108]!
    88b6:	8880      	ldrh	r0, [r0, #4]
    88b8:	80a0      	strh	r0, [r4, #4]
    88ba:	60e6      	str	r6, [r4, #12]
    88bc:	8226      	strh	r6, [r4, #16]
    88be:	8828      	ldrh	r0, [r5, #0]
    88c0:	f7fd fb1c 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88c8:	f005 be4f 	b.w	e56a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    88cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88d0:	200000fc 	.word	0x200000fc
    88d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88d8:	4604      	mov	r4, r0
    88da:	20ff      	movs	r0, #255	; 0xff
    88dc:	f88d 0000 	strb.w	r0, [sp]
    88e0:	2601      	movs	r6, #1
    88e2:	466a      	mov	r2, sp
    88e4:	2105      	movs	r1, #5
    88e6:	4620      	mov	r0, r4
    88e8:	f7ff feda 	bl	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    88ec:	b3e8      	cbz	r0, 896a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    88ee:	4d24      	ldr	r5, [pc, #144]	; (8980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    88f0:	4f24      	ldr	r7, [pc, #144]	; (8984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    88f2:	46b0      	mov	r8, r6
    88f4:	6868      	ldr	r0, [r5, #4]
    88f6:	7bfa      	ldrb	r2, [r7, #15]
    88f8:	f04f 0900 	mov.w	r9, #0
    88fc:	7801      	ldrb	r1, [r0, #0]
    88fe:	f3c1 1180 	ubfx	r1, r1, #6, #1
    8902:	4291      	cmp	r1, r2
    8904:	d106      	bne.n	8914 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    8906:	2206      	movs	r2, #6
    8908:	f107 0110 	add.w	r1, r7, #16
    890c:	1cc0      	adds	r0, r0, #3
    890e:	f004 ff38 	bl	d782 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8912:	b350      	cbz	r0, 896a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    8914:	686a      	ldr	r2, [r5, #4]
    8916:	69e0      	ldr	r0, [r4, #28]
    8918:	7812      	ldrb	r2, [r2, #0]
    891a:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    891e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    8922:	4011      	ands	r1, r2
    8924:	7001      	strb	r1, [r0, #0]
    8926:	2201      	movs	r2, #1
    8928:	4620      	mov	r0, r4
    892a:	69e1      	ldr	r1, [r4, #28]
    892c:	f000 f894 	bl	8a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    8930:	2300      	movs	r3, #0
    8932:	f89d 2000 	ldrb.w	r2, [sp]
    8936:	4620      	mov	r0, r4
    8938:	69e1      	ldr	r1, [r4, #28]
    893a:	f7ff ff51 	bl	87e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    893e:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    8942:	f7ff f84d 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8946:	f887 9000 	strb.w	r9, [r7]
    894a:	2200      	movs	r2, #0
    894c:	4621      	mov	r1, r4
    894e:	69e0      	ldr	r0, [r4, #28]
    8950:	f000 fa58 	bl	8e04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    8954:	6868      	ldr	r0, [r5, #4]
    8956:	69e1      	ldr	r1, [r4, #28]
    8958:	f8d0 2003 	ldr.w	r2, [r0, #3]
    895c:	f841 2f03 	str.w	r2, [r1, #3]!
    8960:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    8964:	808a      	strh	r2, [r1, #4]
    8966:	7800      	ldrb	r0, [r0, #0]
    8968:	e000      	b.n	896c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    896a:	e004      	b.n	8976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    896c:	69e1      	ldr	r1, [r4, #28]
    896e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    8972:	7088      	strb	r0, [r1, #2]
    8974:	e000      	b.n	8978 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    8976:	2600      	movs	r6, #0
    8978:	4630      	mov	r0, r6
    897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    897e:	0000      	.short	0x0000
    8980:	200000fc 	.word	0x200000fc
    8984:	2000125c 	.word	0x2000125c
    8988:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    898a:	4604      	mov	r4, r0
    898c:	20ff      	movs	r0, #255	; 0xff
    898e:	f88d 0000 	strb.w	r0, [sp]
    8992:	2501      	movs	r5, #1
    8994:	466a      	mov	r2, sp
    8996:	2103      	movs	r1, #3
    8998:	4620      	mov	r0, r4
    899a:	f7ff fe81 	bl	86a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    899e:	b328      	cbz	r0, 89ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    89a0:	7b20      	ldrb	r0, [r4, #12]
    89a2:	b168      	cbz	r0, 89c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    89a4:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    89a8:	f88d 0004 	strb.w	r0, [sp, #4]
    89ac:	9801      	ldr	r0, [sp, #4]
    89ae:	9001      	str	r0, [sp, #4]
    89b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    89b4:	b920      	cbnz	r0, 89c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    89b6:	f89d 1000 	ldrb.w	r1, [sp]
    89ba:	4620      	mov	r0, r4
    89bc:	f7ff fe30 	bl	8620 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    89c0:	4e0c      	ldr	r6, [pc, #48]	; (89f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    89c2:	2100      	movs	r1, #0
    89c4:	6870      	ldr	r0, [r6, #4]
    89c6:	8001      	strh	r1, [r0, #0]
    89c8:	2104      	movs	r1, #4
    89ca:	f006 fc5f 	bl	f28c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    89ce:	4620      	mov	r0, r4
    89d0:	f000 f88a 	bl	8ae8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    89d4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    89d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    89d8:	6870      	ldr	r0, [r6, #4]
    89da:	f006 fc8e 	bl	f2fa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    89de:	4906      	ldr	r1, [pc, #24]	; (89f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    89e0:	2005      	movs	r0, #5
    89e2:	7008      	strb	r0, [r1, #0]
    89e4:	6870      	ldr	r0, [r6, #4]
    89e6:	f003 fed3 	bl	c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    89ea:	e000      	b.n	89ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    89ec:	2500      	movs	r5, #0
    89ee:	4628      	mov	r0, r5
    89f0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    89f2:	0000      	.short	0x0000
    89f4:	200000fc 	.word	0x200000fc
    89f8:	2000125c 	.word	0x2000125c
    89fc:	b570      	push	{r4, r5, r6, lr}
    89fe:	4604      	mov	r4, r0
    8a00:	460e      	mov	r6, r1
    8a02:	7e40      	ldrb	r0, [r0, #25]
    8a04:	f7fe fb64 	bl	70d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8a08:	0005      	movs	r5, r0
    8a0a:	d019      	beq.n	8a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    8a0c:	2110      	movs	r1, #16
    8a0e:	f006 faaa 	bl	ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8a12:	2800      	cmp	r0, #0
    8a14:	d114      	bne.n	8a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    8a16:	2001      	movs	r0, #1
    8a18:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    8a1c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8a20:	4632      	mov	r2, r6
    8a22:	460c      	mov	r4, r1
    8a24:	4628      	mov	r0, r5
    8a26:	f006 f856 	bl	ead6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8a2a:	4621      	mov	r1, r4
    8a2c:	4c05      	ldr	r4, [pc, #20]	; (8a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    8a2e:	6860      	ldr	r0, [r4, #4]
    8a30:	f006 fc47 	bl	f2c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8a34:	6860      	ldr	r0, [r4, #4]
    8a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a3a:	2101      	movs	r1, #1
    8a3c:	f006 bc47 	b.w	f2ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8a40:	bd70      	pop	{r4, r5, r6, pc}
    8a42:	0000      	.short	0x0000
    8a44:	200000fc 	.word	0x200000fc
    8a48:	4802      	ldr	r0, [pc, #8]	; (8a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    8a4a:	2101      	movs	r1, #1
    8a4c:	6800      	ldr	r0, [r0, #0]
    8a4e:	f7ff bb27 	b.w	80a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    8a52:	0000      	.short	0x0000
    8a54:	200000fc 	.word	0x200000fc
    8a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a5c:	4e21      	ldr	r6, [pc, #132]	; (8ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    8a5e:	4680      	mov	r8, r0
    8a60:	460c      	mov	r4, r1
    8a62:	6870      	ldr	r0, [r6, #4]
    8a64:	4615      	mov	r5, r2
    8a66:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    8a6a:	6121      	str	r1, [r4, #16]
    8a6c:	8881      	ldrh	r1, [r0, #4]
    8a6e:	8321      	strh	r1, [r4, #24]
    8a70:	7981      	ldrb	r1, [r0, #6]
    8a72:	76a1      	strb	r1, [r4, #26]
    8a74:	8940      	ldrh	r0, [r0, #10]
    8a76:	f006 f8e6 	bl	ec46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8a7a:	4607      	mov	r7, r0
    8a7c:	60e0      	str	r0, [r4, #12]
    8a7e:	6870      	ldr	r0, [r6, #4]
    8a80:	4639      	mov	r1, r7
    8a82:	7d80      	ldrb	r0, [r0, #22]
    8a84:	f006 fa6a 	bl	ef5c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8a88:	83a0      	strh	r0, [r4, #28]
    8a8a:	6870      	ldr	r0, [r6, #4]
    8a8c:	4639      	mov	r1, r7
    8a8e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    8a92:	f006 fa5f 	bl	ef54 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8a96:	6220      	str	r0, [r4, #32]
    8a98:	6870      	ldr	r0, [r6, #4]
    8a9a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    8a9e:	82a1      	strh	r1, [r4, #20]
    8aa0:	8841      	ldrh	r1, [r0, #2]
    8aa2:	82e1      	strh	r1, [r4, #22]
    8aa4:	6841      	ldr	r1, [r0, #4]
    8aa6:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    8aaa:	7a01      	ldrb	r1, [r0, #8]
    8aac:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    8ab0:	7a41      	ldrb	r1, [r0, #9]
    8ab2:	f001 011f 	and.w	r1, r1, #31
    8ab6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    8aba:	7a40      	ldrb	r0, [r0, #9]
    8abc:	0940      	lsrs	r0, r0, #5
    8abe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    8ac2:	f104 0062 	add.w	r0, r4, #98	; 0x62
    8ac6:	7205      	strb	r5, [r0, #8]
    8ac8:	7245      	strb	r5, [r0, #9]
    8aca:	2101      	movs	r1, #1
    8acc:	7281      	strb	r1, [r0, #10]
    8ace:	2100      	movs	r1, #0
    8ad0:	3836      	subs	r0, #54	; 0x36
    8ad2:	f006 fd86 	bl	f5e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8ad6:	f898 000e 	ldrb.w	r0, [r8, #14]
    8ada:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    8ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ae2:	0000      	.short	0x0000
    8ae4:	200000fc 	.word	0x200000fc
    8ae8:	b570      	push	{r4, r5, r6, lr}
    8aea:	4d07      	ldr	r5, [pc, #28]	; (8b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    8aec:	4604      	mov	r4, r0
    8aee:	f100 0149 	add.w	r1, r0, #73	; 0x49
    8af2:	6868      	ldr	r0, [r5, #4]
    8af4:	f006 fbf2 	bl	f2dc <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8af8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8afc:	6868      	ldr	r0, [r5, #4]
    8afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8b02:	f006 bbf1 	b.w	f2e8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8b06:	0000      	.short	0x0000
    8b08:	200000fc 	.word	0x200000fc
    8b0c:	00555555 	.word	0x00555555
    8b10:	00008329 	.word	0x00008329
    8b14:	000081b5 	.word	0x000081b5
    8b18:	000082a5 	.word	0x000082a5
    8b1c:	00000000 	.word	0x00000000
    8b20:	0000827d 	.word	0x0000827d
    8b24:	000082d5 	.word	0x000082d5
    8b28:	0000f903 	.word	0x0000f903
    8b2c:	0000f909 	.word	0x0000f909
    8b30:	0000851d 	.word	0x0000851d
    8b34:	00008541 	.word	0x00008541
    8b38:	00008a49 	.word	0x00008a49
    8b3c:	00008b2c 	.word	0x00008b2c
    8b40:	00008b24 	.word	0x00008b24
    8b44:	00008b20 	.word	0x00008b20

00008b48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8b48:	b510      	push	{r4, lr}
    8b4a:	1e42      	subs	r2, r0, #1
    8b4c:	2a02      	cmp	r2, #2
    8b4e:	d901      	bls.n	8b54 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8b50:	21ca      	movs	r1, #202	; 0xca
    8b52:	e009      	b.n	8b68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8b54:	1e40      	subs	r0, r0, #1
    8b56:	2910      	cmp	r1, #16
    8b58:	d009      	beq.n	8b6e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8b5a:	2912      	cmp	r1, #18
    8b5c:	d00c      	beq.n	8b78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8b5e:	2913      	cmp	r1, #19
    8b60:	d00a      	beq.n	8b78 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8b62:	2915      	cmp	r1, #21
    8b64:	d005      	beq.n	8b72 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    8b66:	21d8      	movs	r1, #216	; 0xd8
    8b68:	202f      	movs	r0, #47	; 0x2f
    8b6a:	f7fc fdad 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b6e:	4905      	ldr	r1, [pc, #20]	; (8b84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8b70:	e004      	b.n	8b7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8b72:	4904      	ldr	r1, [pc, #16]	; (8b84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8b74:	1d89      	adds	r1, r1, #6
    8b76:	e001      	b.n	8b7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8b78:	4902      	ldr	r1, [pc, #8]	; (8b84 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8b7a:	1f89      	subs	r1, r1, #6
    8b7c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8b80:	bd10      	pop	{r4, pc}
    8b82:	0000      	.short	0x0000
    8b84:	0000fb56 	.word	0x0000fb56

00008b88 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8b88:	1e42      	subs	r2, r0, #1
    8b8a:	b510      	push	{r4, lr}
    8b8c:	b2d2      	uxtb	r2, r2
    8b8e:	2a01      	cmp	r2, #1
    8b90:	d903      	bls.n	8b9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8b92:	291d      	cmp	r1, #29
    8b94:	d001      	beq.n	8b9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    8b96:	21ee      	movs	r1, #238	; 0xee
    8b98:	e00d      	b.n	8bb6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8b9a:	2913      	cmp	r1, #19
    8b9c:	d013      	beq.n	8bc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8b9e:	dc04      	bgt.n	8baa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8ba0:	2910      	cmp	r1, #16
    8ba2:	d00b      	beq.n	8bbc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    8ba4:	2912      	cmp	r1, #18
    8ba6:	d104      	bne.n	8bb2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8ba8:	e00d      	b.n	8bc6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8baa:	2915      	cmp	r1, #21
    8bac:	d008      	beq.n	8bc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8bae:	291d      	cmp	r1, #29
    8bb0:	d00e      	beq.n	8bd0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    8bb2:	f44f 7181 	mov.w	r1, #258	; 0x102
    8bb6:	202f      	movs	r0, #47	; 0x2f
    8bb8:	f7fc fd86 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bbc:	4807      	ldr	r0, [pc, #28]	; (8bdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8bbe:	e004      	b.n	8bca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8bc0:	4806      	ldr	r0, [pc, #24]	; (8bdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8bc2:	3008      	adds	r0, #8
    8bc4:	e001      	b.n	8bca <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8bc6:	4805      	ldr	r0, [pc, #20]	; (8bdc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8bc8:	1d00      	adds	r0, r0, #4
    8bca:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8bce:	bd10      	pop	{r4, pc}
    8bd0:	f240 315a 	movw	r1, #858	; 0x35a
    8bd4:	fb10 f001 	smulbb	r0, r0, r1
    8bd8:	bd10      	pop	{r4, pc}
    8bda:	0000      	.short	0x0000
    8bdc:	0000fb44 	.word	0x0000fb44

00008be0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8be4:	4604      	mov	r4, r0
    8be6:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8bea:	4615      	mov	r5, r2
    8bec:	460f      	mov	r7, r1
    8bee:	2800      	cmp	r0, #0
    8bf0:	d157      	bne.n	8ca2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    8bf2:	4621      	mov	r1, r4
    8bf4:	4841      	ldr	r0, [pc, #260]	; (8cfc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    8bf6:	f7fb f83b 	bl	3c70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8bfa:	4606      	mov	r6, r0
    8bfc:	2820      	cmp	r0, #32
    8bfe:	d050      	beq.n	8ca2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    8c00:	2234      	movs	r2, #52	; 0x34
    8c02:	2100      	movs	r1, #0
    8c04:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    8c08:	f004 fe47 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c0c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    8c10:	2601      	movs	r6, #1
    8c12:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    8c16:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    8c1a:	b13f      	cbz	r7, 8c2c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    8c1c:	2000      	movs	r0, #0
    8c1e:	f000 fbf9 	bl	9414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8c22:	f000 0007 	and.w	r0, r0, #7
    8c26:	1c40      	adds	r0, r0, #1
    8c28:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    8c2c:	4620      	mov	r0, r4
    8c2e:	f007 f972 	bl	ff16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    8c32:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    8c36:	2003      	movs	r0, #3
    8c38:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    8c3c:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8c40:	2700      	movs	r7, #0
    8c42:	f804 7fb8 	strb.w	r7, [r4, #184]!
    8c46:	f7fa fa7f 	bl	3148 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8c4a:	8921      	ldrh	r1, [r4, #8]
    8c4c:	3cb8      	subs	r4, #184	; 0xb8
    8c4e:	4288      	cmp	r0, r1
    8c50:	d800      	bhi.n	8c54 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    8c52:	4608      	mov	r0, r1
    8c54:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8c58:	fa1f f880 	uxth.w	r8, r0
    8c5c:	4620      	mov	r0, r4
    8c5e:	f006 fdfd 	bl	f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8c62:	b308      	cbz	r0, 8ca8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    8c64:	f008 fbb9 	bl	113da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8c68:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8c6c:	b281      	uxth	r1, r0
    8c6e:	4628      	mov	r0, r5
    8c70:	f004 fc58 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8c74:	4428      	add	r0, r5
    8c76:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    8c7a:	34a4      	adds	r4, #164	; 0xa4
    8c7c:	f004 fc1e 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8c80:	4641      	mov	r1, r8
    8c82:	f7fa f8f1 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8c86:	6220      	str	r0, [r4, #32]
    8c88:	f804 7c03 	strb.w	r7, [r4, #-3]
    8c8c:	7126      	strb	r6, [r4, #4]
    8c8e:	2001      	movs	r0, #1
    8c90:	f006 ff51 	bl	fb36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8c94:	f200 1009 	addw	r0, r0, #265	; 0x109
    8c98:	1a28      	subs	r0, r5, r0
    8c9a:	62a7      	str	r7, [r4, #40]	; 0x28
    8c9c:	60a0      	str	r0, [r4, #8]
    8c9e:	3ca4      	subs	r4, #164	; 0xa4
    8ca0:	e017      	b.n	8cd2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    8ca2:	200c      	movs	r0, #12
    8ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ca8:	4620      	mov	r0, r4
    8caa:	f007 f887 	bl	fdbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    8cae:	f844 0fbc 	str.w	r0, [r4, #188]!
    8cb2:	f804 6c1b 	strb.w	r6, [r4, #-27]
    8cb6:	f004 fc01 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8cba:	4606      	mov	r6, r0
    8cbc:	2000      	movs	r0, #0
    8cbe:	f007 f9d6 	bl	1006e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    8cc2:	eb00 0108 	add.w	r1, r0, r8
    8cc6:	4630      	mov	r0, r6
    8cc8:	f7fa f8ce 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8ccc:	6125      	str	r5, [r4, #16]
    8cce:	60a0      	str	r0, [r4, #8]
    8cd0:	3cbc      	subs	r4, #188	; 0xbc
    8cd2:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    8cd6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8cda:	f007 f91a 	bl	ff12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    8cde:	b138      	cbz	r0, 8cf0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    8ce0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    8ce4:	2100      	movs	r1, #0
    8ce6:	4620      	mov	r0, r4
    8ce8:	f006 fdda 	bl	f8a0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8cec:	2000      	movs	r0, #0
    8cee:	e7d9      	b.n	8ca4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    8cf0:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    8cf4:	2030      	movs	r0, #48	; 0x30
    8cf6:	f7fc fce7 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cfa:	0000      	.short	0x0000
    8cfc:	00010083 	.word	0x00010083

00008d00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8d00:	4808      	ldr	r0, [pc, #32]	; (8d24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8d02:	b510      	push	{r4, lr}
    8d04:	2100      	movs	r1, #0
    8d06:	7001      	strb	r1, [r0, #0]
    8d08:	2201      	movs	r2, #1
    8d0a:	7082      	strb	r2, [r0, #2]
    8d0c:	7041      	strb	r1, [r0, #1]
    8d0e:	3018      	adds	r0, #24
    8d10:	f006 fce6 	bl	f6e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8d14:	4803      	ldr	r0, [pc, #12]	; (8d24 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8d16:	3020      	adds	r0, #32
    8d18:	f006 fce2 	bl	f6e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d20:	f006 bf74 	b.w	fc0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8d24:	2000010c 	.word	0x2000010c

00008d28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8d28:	4901      	ldr	r1, [pc, #4]	; (8d30 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    8d2a:	7008      	strb	r0, [r1, #0]
    8d2c:	4770      	bx	lr
    8d2e:	0000      	.short	0x0000
    8d30:	2000010c 	.word	0x2000010c

00008d34 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8d34:	4905      	ldr	r1, [pc, #20]	; (8d4c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    8d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8d3a:	fbb1 f1f2 	udiv	r1, r1, r2
    8d3e:	b510      	push	{r4, lr}
    8d40:	f201 2191 	addw	r1, r1, #657	; 0x291
    8d44:	f006 fc66 	bl	f614 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8d48:	b280      	uxth	r0, r0
    8d4a:	bd10      	pop	{r4, pc}
    8d4c:	0001527d 	.word	0x0001527d

00008d50 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d54:	4c10      	ldr	r4, [pc, #64]	; (8d98 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    8d56:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8d5a:	f003 fc17 	bl	c58c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8d5e:	4606      	mov	r6, r0
    8d60:	7820      	ldrb	r0, [r4, #0]
    8d62:	b128      	cbz	r0, 8d70 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8d64:	4632      	mov	r2, r6
    8d66:	4639      	mov	r1, r7
    8d68:	4628      	mov	r0, r5
    8d6a:	f005 ff76 	bl	ec5a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8d6e:	4605      	mov	r5, r0
    8d70:	6860      	ldr	r0, [r4, #4]
    8d72:	4285      	cmp	r5, r0
    8d74:	d005      	beq.n	8d82 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    8d76:	68e1      	ldr	r1, [r4, #12]
    8d78:	1a28      	subs	r0, r5, r0
    8d7a:	4408      	add	r0, r1
    8d7c:	60e0      	str	r0, [r4, #12]
    8d7e:	f7fb f881 	bl	3e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8d82:	6065      	str	r5, [r4, #4]
    8d84:	42ae      	cmp	r6, r5
    8d86:	d801      	bhi.n	8d8c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8d88:	7860      	ldrb	r0, [r4, #1]
    8d8a:	b110      	cbz	r0, 8d92 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8d8c:	2000      	movs	r0, #0
    8d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d92:	2001      	movs	r0, #1
    8d94:	e7fb      	b.n	8d8e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    8d96:	0000      	.short	0x0000
    8d98:	2000010c 	.word	0x2000010c

00008d9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8d9c:	b510      	push	{r4, lr}
    8d9e:	4604      	mov	r4, r0
    8da0:	2905      	cmp	r1, #5
    8da2:	d227      	bcs.n	8df4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    8da4:	e8df f001 	tbb	[pc, r1]
    8da8:	0e030b05 	.word	0x0e030b05
    8dac:	000f      	.short	0x000f
    8dae:	2100      	movs	r1, #0
    8db0:	e000      	b.n	8db4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    8db2:	2101      	movs	r1, #1
    8db4:	4620      	mov	r0, r4
    8db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8dba:	f000 b8f5 	b.w	8fa8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8dbe:	2003      	movs	r0, #3
    8dc0:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8dc4:	bd10      	pop	{r4, pc}
    8dc6:	f003 fc1d 	bl	c604 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8dca:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8dce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8dd2:	f008 fb9b 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8dd6:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    8dda:	1a09      	subs	r1, r1, r0
    8ddc:	4808      	ldr	r0, [pc, #32]	; (8e00 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    8dde:	6842      	ldr	r2, [r0, #4]
    8de0:	440a      	add	r2, r1
    8de2:	6042      	str	r2, [r0, #4]
    8de4:	6882      	ldr	r2, [r0, #8]
    8de6:	4411      	add	r1, r2
    8de8:	6081      	str	r1, [r0, #8]
    8dea:	4620      	mov	r0, r4
    8dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8df0:	f007 b822 	b.w	fe38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    8df4:	f240 7151 	movw	r1, #1873	; 0x751
    8df8:	2030      	movs	r0, #48	; 0x30
    8dfa:	f7fc fc65 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dfe:	0000      	.short	0x0000
    8e00:	2000010c 	.word	0x2000010c

00008e04 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8e04:	b570      	push	{r4, r5, r6, lr}
    8e06:	460c      	mov	r4, r1
    8e08:	4605      	mov	r5, r0
    8e0a:	b112      	cbz	r2, 8e12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8e0c:	f240 717b 	movw	r1, #1915	; 0x77b
    8e10:	e010      	b.n	8e34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8e12:	f003 fbbb 	bl	c58c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8e16:	4601      	mov	r1, r0
    8e18:	2200      	movs	r2, #0
    8e1a:	4620      	mov	r0, r4
    8e1c:	f007 f8dd 	bl	ffda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    8e20:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8e24:	462a      	mov	r2, r5
    8e26:	4905      	ldr	r1, [pc, #20]	; (8e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8e28:	f7fa fde4 	bl	39f4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d104      	bne.n	8e3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8e30:	f240 7164 	movw	r1, #1892	; 0x764
    8e34:	2030      	movs	r0, #48	; 0x30
    8e36:	f7fc fc47 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e3a:	bd70      	pop	{r4, r5, r6, pc}
    8e3c:	00010123 	.word	0x00010123
    8e40:	b510      	push	{r4, lr}
    8e42:	280c      	cmp	r0, #12
    8e44:	d304      	bcc.n	8e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8e46:	f240 3116 	movw	r1, #790	; 0x316
    8e4a:	2006      	movs	r0, #6
    8e4c:	f7fc fc3c 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e50:	4901      	ldr	r1, [pc, #4]	; (8e58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8e52:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8e56:	bd10      	pop	{r4, pc}
    8e58:	0001031c 	.word	0x0001031c
    8e5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8e5e:	4c18      	ldr	r4, [pc, #96]	; (8ec0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8e60:	2001      	movs	r0, #1
    8e62:	7060      	strb	r0, [r4, #1]
    8e64:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8e68:	e00b      	b.n	8e82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8e6a:	2100      	movs	r1, #0
    8e6c:	f005 fc96 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8e70:	0006      	movs	r6, r0
    8e72:	d010      	beq.n	8e96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8e74:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    8e78:	f7fa fdee 	bl	3a58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8e7c:	4630      	mov	r0, r6
    8e7e:	f007 f89f 	bl	ffc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    8e82:	4669      	mov	r1, sp
    8e84:	2000      	movs	r0, #0
    8e86:	f005 fc93 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8e8a:	b180      	cbz	r0, 8eae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8e8c:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8e90:	2030      	movs	r0, #48	; 0x30
    8e92:	f7fc fc19 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e96:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8e9a:	e7f9      	b.n	8e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8e9c:	9802      	ldr	r0, [sp, #8]
    8e9e:	b130      	cbz	r0, 8eae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8ea0:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8ea4:	b119      	cbz	r1, 8eae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8ea6:	8800      	ldrh	r0, [r0, #0]
    8ea8:	42a8      	cmp	r0, r5
    8eaa:	d1de      	bne.n	8e6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8eac:	e004      	b.n	8eb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8eae:	4668      	mov	r0, sp
    8eb0:	f7fc fe42 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8eb4:	2800      	cmp	r0, #0
    8eb6:	d0f1      	beq.n	8e9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8eb8:	2000      	movs	r0, #0
    8eba:	7060      	strb	r0, [r4, #1]
    8ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8ebe:	0000      	.short	0x0000
    8ec0:	2000010c 	.word	0x2000010c
    8ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ec8:	4604      	mov	r4, r0
    8eca:	4836      	ldr	r0, [pc, #216]	; (8fa4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    8ecc:	461e      	mov	r6, r3
    8ece:	4690      	mov	r8, r2
    8ed0:	7880      	ldrb	r0, [r0, #2]
    8ed2:	4689      	mov	r9, r1
    8ed4:	2500      	movs	r5, #0
    8ed6:	b368      	cbz	r0, 8f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8ed8:	f7fc f876 	bl	4fc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8edc:	b350      	cbz	r0, 8f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8ede:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    8ee2:	2802      	cmp	r0, #2
    8ee4:	d326      	bcc.n	8f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8ee6:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8eea:	2802      	cmp	r0, #2
    8eec:	d022      	beq.n	8f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8eee:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    8ef2:	b9f8      	cbnz	r0, 8f34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8ef4:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    8ef8:	f7ff ffa2 	bl	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8efc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8f00:	b281      	uxth	r1, r0
    8f02:	8031      	strh	r1, [r6, #0]
    8f04:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8f08:	2700      	movs	r7, #0
    8f0a:	2801      	cmp	r0, #1
    8f0c:	d015      	beq.n	8f3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    8f0e:	68e0      	ldr	r0, [r4, #12]
    8f10:	f004 fb08 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8f14:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    8f18:	b280      	uxth	r0, r0
    8f1a:	4442      	add	r2, r8
    8f1c:	eba2 0109 	sub.w	r1, r2, r9
    8f20:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    8f24:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8f28:	1a82      	subs	r2, r0, r2
    8f2a:	fb01 7502 	mla	r5, r1, r2, r7
    8f2e:	2001      	movs	r0, #1
    8f30:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    8f34:	4628      	mov	r0, r5
    8f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f3a:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    8f3e:	2803      	cmp	r0, #3
    8f40:	d02c      	beq.n	8f9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    8f42:	2101      	movs	r1, #1
    8f44:	2000      	movs	r0, #0
    8f46:	f005 ff42 	bl	edce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8f4a:	6a21      	ldr	r1, [r4, #32]
    8f4c:	1847      	adds	r7, r0, r1
    8f4e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8f52:	8831      	ldrh	r1, [r6, #0]
    8f54:	34d0      	adds	r4, #208	; 0xd0
    8f56:	f004 fae5 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8f5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8f5c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8f5e:	1a82      	subs	r2, r0, r2
    8f60:	fb01 5502 	mla	r5, r1, r2, r5
    8f64:	65a0      	str	r0, [r4, #88]	; 0x58
    8f66:	8831      	ldrh	r1, [r6, #0]
    8f68:	4638      	mov	r0, r7
    8f6a:	f004 fadb 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8f6e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8f70:	66a0      	str	r0, [r4, #104]	; 0x68
    8f72:	1a41      	subs	r1, r0, r1
    8f74:	440d      	add	r5, r1
    8f76:	8831      	ldrh	r1, [r6, #0]
    8f78:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    8f7c:	f004 fad2 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8f80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    8f82:	4442      	add	r2, r8
    8f84:	eba2 0109 	sub.w	r1, r2, r9
    8f88:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8f8a:	1a89      	subs	r1, r1, r2
    8f8c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8f8e:	1e49      	subs	r1, r1, #1
    8f90:	1a82      	subs	r2, r0, r2
    8f92:	fb01 5502 	mla	r5, r1, r2, r5
    8f96:	66e0      	str	r0, [r4, #108]	; 0x6c
    8f98:	3cd0      	subs	r4, #208	; 0xd0
    8f9a:	e7c8      	b.n	8f2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    8f9c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8fa0:	e7d3      	b.n	8f4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    8fa2:	0000      	.short	0x0000
    8fa4:	2000010c 	.word	0x2000010c
    8fa8:	b538      	push	{r3, r4, r5, lr}
    8faa:	2500      	movs	r5, #0
    8fac:	4604      	mov	r4, r0
    8fae:	2901      	cmp	r1, #1
    8fb0:	d102      	bne.n	8fb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    8fb2:	4811      	ldr	r0, [pc, #68]	; (8ff8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    8fb4:	7840      	ldrb	r0, [r0, #1]
    8fb6:	b178      	cbz	r0, 8fd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    8fb8:	2004      	movs	r0, #4
    8fba:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8fbe:	bf00      	nop
    8fc0:	f006 ff33 	bl	fe2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    8fc4:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    8fc8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    8fcc:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    8fd0:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    8fd4:	77e5      	strb	r5, [r4, #31]
    8fd6:	bd38      	pop	{r3, r4, r5, pc}
    8fd8:	9500      	str	r5, [sp, #0]
    8fda:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    8fde:	2301      	movs	r3, #1
    8fe0:	2200      	movs	r2, #0
    8fe2:	4620      	mov	r0, r4
    8fe4:	f000 f80a 	bl	8ffc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8fe8:	2800      	cmp	r0, #0
    8fea:	d0e9      	beq.n	8fc0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    8fec:	f240 61c9 	movw	r1, #1737	; 0x6c9
    8ff0:	2030      	movs	r0, #48	; 0x30
    8ff2:	f7fc fb69 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ff6:	0000      	.short	0x0000
    8ff8:	2000010c 	.word	0x2000010c
    8ffc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9000:	4604      	mov	r4, r0
    9002:	b085      	sub	sp, #20
    9004:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9008:	469a      	mov	sl, r3
    900a:	e9cd 3000 	strd	r3, r0, [sp]
    900e:	460f      	mov	r7, r1
    9010:	f008 f9e3 	bl	113da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    9014:	4605      	mov	r5, r0
    9016:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    901a:	f7ff ff11 	bl	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    901e:	4428      	add	r0, r5
    9020:	f8ad 0008 	strh.w	r0, [sp, #8]
    9024:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    9028:	280d      	cmp	r0, #13
    902a:	d004      	beq.n	9036 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    902c:	2000      	movs	r0, #0
    902e:	9003      	str	r0, [sp, #12]
    9030:	9807      	ldr	r0, [sp, #28]
    9032:	b110      	cbz	r0, 903a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    9034:	e02e      	b.n	9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    9036:	2001      	movs	r0, #1
    9038:	e7f9      	b.n	902e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    903a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    903e:	2803      	cmp	r0, #3
    9040:	d128      	bne.n	9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    9042:	9803      	ldr	r0, [sp, #12]
    9044:	b330      	cbz	r0, 9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    9046:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    904a:	42b8      	cmp	r0, r7
    904c:	d122      	bne.n	9094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    904e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    9052:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    9056:	68e0      	ldr	r0, [r4, #12]
    9058:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    905c:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    9060:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    9064:	4408      	add	r0, r1
    9066:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    906a:	4620      	mov	r0, r4
    906c:	f007 f96c 	bl	10348 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    9070:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    9074:	6220      	str	r0, [r4, #32]
    9076:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    907a:	83a0      	strh	r0, [r4, #28]
    907c:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    9080:	60e0      	str	r0, [r4, #12]
    9082:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    9086:	82a0      	strh	r0, [r4, #20]
    9088:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    908c:	82e0      	strh	r0, [r4, #22]
    908e:	2002      	movs	r0, #2
    9090:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    9094:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    9098:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    909c:	1a38      	subs	r0, r7, r0
    909e:	fa0f f980 	sxth.w	r9, r0
    90a2:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    90a6:	1a38      	subs	r0, r7, r0
    90a8:	fa0f f880 	sxth.w	r8, r0
    90ac:	f1b8 0f00 	cmp.w	r8, #0
    90b0:	da06      	bge.n	90c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    90b2:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    90b6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    90ba:	2001      	movs	r0, #1
    90bc:	46c8      	mov	r8, r9
    90be:	9000      	str	r0, [sp, #0]
    90c0:	ab02      	add	r3, sp, #8
    90c2:	464a      	mov	r2, r9
    90c4:	4641      	mov	r1, r8
    90c6:	4620      	mov	r0, r4
    90c8:	f7ff fefc 	bl	8ec4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    90cc:	9004      	str	r0, [sp, #16]
    90ce:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    90d2:	f8df b33c 	ldr.w	fp, [pc, #828]	; 9410 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    90d6:	b140      	cbz	r0, 90ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    90d8:	2801      	cmp	r0, #1
    90da:	d07d      	beq.n	91d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    90dc:	2802      	cmp	r0, #2
    90de:	d052      	beq.n	9186 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    90e0:	2803      	cmp	r0, #3
    90e2:	d07a      	beq.n	91da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    90e4:	f240 514d 	movw	r1, #1357	; 0x54d
    90e8:	e18e      	b.n	9408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    90ea:	2101      	movs	r1, #1
    90ec:	2000      	movs	r0, #0
    90ee:	f005 fe6e 	bl	edce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    90f2:	4606      	mov	r6, r0
    90f4:	6a20      	ldr	r0, [r4, #32]
    90f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    90fa:	4430      	add	r0, r6
    90fc:	f004 fa12 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9100:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    9104:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9108:	68e0      	ldr	r0, [r4, #12]
    910a:	f004 fa0b 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    910e:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    9112:	a901      	add	r1, sp, #4
    9114:	4668      	mov	r0, sp
    9116:	f003 f99d 	bl	c454 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    911a:	e9dd 1200 	ldrd	r1, r2, [sp]
    911e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    9122:	f7fa ff65 	bl	3ff0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    9126:	4681      	mov	r9, r0
    9128:	4620      	mov	r0, r4
    912a:	f006 fe70 	bl	fe0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    912e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9132:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    9136:	f008 f9f7 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    913a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    913e:	4401      	add	r1, r0
    9140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9144:	fbb1 f0f0 	udiv	r0, r1, r0
    9148:	6a21      	ldr	r1, [r4, #32]
    914a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    914e:	4431      	add	r1, r6
    9150:	1a08      	subs	r0, r1, r0
    9152:	1a81      	subs	r1, r0, r2
    9154:	4441      	add	r1, r8
    9156:	3920      	subs	r1, #32
    9158:	eba1 0609 	sub.w	r6, r1, r9
    915c:	0050      	lsls	r0, r2, #1
    915e:	8ba1      	ldrh	r1, [r4, #28]
    9160:	3060      	adds	r0, #96	; 0x60
    9162:	4401      	add	r1, r0
    9164:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9168:	f006 fec1 	bl	feee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    916c:	3022      	adds	r0, #34	; 0x22
    916e:	f8cb 0010 	str.w	r0, [fp, #16]
    9172:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    9176:	4659      	mov	r1, fp
    9178:	1a30      	subs	r0, r6, r0
    917a:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    917e:	d859      	bhi.n	9234 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    9180:	f240 41e6 	movw	r1, #1254	; 0x4e6
    9184:	e140      	b.n	9408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    9186:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    918a:	6a20      	ldr	r0, [r4, #32]
    918c:	4408      	add	r0, r1
    918e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9192:	f004 f9c7 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    9196:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    919a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    919e:	68e0      	ldr	r0, [r4, #12]
    91a0:	f004 f9c0 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    91a4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    91a8:	4620      	mov	r0, r4
    91aa:	f006 fe30 	bl	fe0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    91ae:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    91b2:	bb10      	cbnz	r0, 91fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    91b4:	f1ba 0f00 	cmp.w	sl, #0
    91b8:	d01f      	beq.n	91fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    91ba:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    91be:	4640      	mov	r0, r8
    91c0:	f008 f9b2 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    91c4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    91c8:	4401      	add	r1, r0
    91ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    91ce:	fbb1 f0f0 	udiv	r0, r1, r0
    91d2:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    91d6:	e001      	b.n	91dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    91d8:	e02d      	b.n	9236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    91da:	e049      	b.n	9270 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    91dc:	4408      	add	r0, r1
    91de:	6a22      	ldr	r2, [r4, #32]
    91e0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    91e4:	4411      	add	r1, r2
    91e6:	1a0e      	subs	r6, r1, r0
    91e8:	4640      	mov	r0, r8
    91ea:	f008 f98f 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    91ee:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    91f2:	1a08      	subs	r0, r1, r0
    91f4:	4406      	add	r6, r0
    91f6:	3e20      	subs	r6, #32
    91f8:	e006      	b.n	9208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    91fa:	6a21      	ldr	r1, [r4, #32]
    91fc:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    9200:	4408      	add	r0, r1
    9202:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    9206:	1a46      	subs	r6, r0, r1
    9208:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    920c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    9210:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    9214:	fb01 0002 	mla	r0, r1, r2, r0
    9218:	0040      	lsls	r0, r0, #1
    921a:	8ba1      	ldrh	r1, [r4, #28]
    921c:	3060      	adds	r0, #96	; 0x60
    921e:	4401      	add	r1, r0
    9220:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9224:	f006 fe63 	bl	feee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    9228:	f8cb 0010 	str.w	r0, [fp, #16]
    922c:	2001      	movs	r0, #1
    922e:	4659      	mov	r1, fp
    9230:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    9234:	e062      	b.n	92fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    9236:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    923a:	68e0      	ldr	r0, [r4, #12]
    923c:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    9240:	1a86      	subs	r6, r0, r2
    9242:	eb01 0009 	add.w	r0, r1, r9
    9246:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    924a:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    924e:	1a40      	subs	r0, r0, r1
    9250:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    9254:	1e40      	subs	r0, r0, #1
    9256:	fb0c 3101 	mla	r1, ip, r1, r3
    925a:	fb00 1002 	mla	r0, r0, r2, r1
    925e:	0040      	lsls	r0, r0, #1
    9260:	8ba1      	ldrh	r1, [r4, #28]
    9262:	3060      	adds	r0, #96	; 0x60
    9264:	4401      	add	r1, r0
    9266:	fb06 f608 	mul.w	r6, r6, r8
    926a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    926e:	e040      	b.n	92f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    9270:	68e0      	ldr	r0, [r4, #12]
    9272:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    9276:	fb00 f008 	mul.w	r0, r0, r8
    927a:	fb08 0611 	mls	r6, r8, r1, r0
    927e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    9282:	2824      	cmp	r0, #36	; 0x24
    9284:	d003      	beq.n	928e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    9286:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    928a:	2824      	cmp	r0, #36	; 0x24
    928c:	d109      	bne.n	92a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    928e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    9292:	1a38      	subs	r0, r7, r0
    9294:	b200      	sxth	r0, r0
    9296:	2800      	cmp	r0, #0
    9298:	db03      	blt.n	92a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    929a:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    929e:	b100      	cbz	r0, 92a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    92a0:	9001      	str	r0, [sp, #4]
    92a2:	9800      	ldr	r0, [sp, #0]
    92a4:	b1d8      	cbz	r0, 92de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    92a6:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    92aa:	b9c0      	cbnz	r0, 92de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    92ac:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    92b0:	2800      	cmp	r0, #0
    92b2:	d07d      	beq.n	93b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    92b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    92b8:	f008 f936 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    92bc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    92c0:	4401      	add	r1, r0
    92c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    92c6:	fbb1 f0f0 	udiv	r0, r1, r0
    92ca:	1a36      	subs	r6, r6, r0
    92cc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    92d0:	f008 f91c 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    92d4:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    92d8:	1a08      	subs	r0, r1, r0
    92da:	4406      	add	r6, r0
    92dc:	3e20      	subs	r6, #32
    92de:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    92e2:	eb01 0009 	add.w	r0, r1, r9
    92e6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    92ea:	4348      	muls	r0, r1
    92ec:	0041      	lsls	r1, r0, #1
    92ee:	3160      	adds	r1, #96	; 0x60
    92f0:	9801      	ldr	r0, [sp, #4]
    92f2:	f006 fdfc 	bl	feee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    92f6:	4659      	mov	r1, fp
    92f8:	f8cb 0010 	str.w	r0, [fp, #16]
    92fc:	9804      	ldr	r0, [sp, #16]
    92fe:	6909      	ldr	r1, [r1, #16]
    9300:	1a33      	subs	r3, r6, r0
    9302:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    9306:	68e0      	ldr	r0, [r4, #12]
    9308:	1b80      	subs	r0, r0, r6
    930a:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    930e:	f8cb 0014 	str.w	r0, [fp, #20]
    9312:	4281      	cmp	r1, r0
    9314:	d800      	bhi.n	9318 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    9316:	4608      	mov	r0, r1
    9318:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    931c:	2000      	movs	r0, #0
    931e:	7028      	strb	r0, [r5, #0]
    9320:	2064      	movs	r0, #100	; 0x64
    9322:	8128      	strh	r0, [r5, #8]
    9324:	4619      	mov	r1, r3
    9326:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    932a:	f7f9 fd9d 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    932e:	60e8      	str	r0, [r5, #12]
    9330:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9334:	f006 f93f 	bl	f5b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9338:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    933c:	4408      	add	r0, r1
    933e:	6068      	str	r0, [r5, #4]
    9340:	68e8      	ldr	r0, [r5, #12]
    9342:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    9346:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    934a:	2001      	movs	r0, #1
    934c:	72a8      	strb	r0, [r5, #10]
    934e:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    9352:	1bc9      	subs	r1, r1, r7
    9354:	b209      	sxth	r1, r1
    9356:	2900      	cmp	r1, #0
    9358:	dd01      	ble.n	935e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    935a:	2103      	movs	r1, #3
    935c:	72a9      	strb	r1, [r5, #10]
    935e:	9903      	ldr	r1, [sp, #12]
    9360:	b339      	cbz	r1, 93b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    9362:	f1ba 0f00 	cmp.w	sl, #0
    9366:	d01f      	beq.n	93a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    9368:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    936c:	b38a      	cbz	r2, 93d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    936e:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    9372:	bf00      	nop
    9374:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    9378:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    937c:	1c49      	adds	r1, r1, #1
    937e:	434b      	muls	r3, r1
    9380:	4293      	cmp	r3, r2
    9382:	d211      	bcs.n	93a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    9384:	7aa9      	ldrb	r1, [r5, #10]
    9386:	1e49      	subs	r1, r1, #1
    9388:	2900      	cmp	r1, #0
    938a:	dd0d      	ble.n	93a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    938c:	72a8      	strb	r0, [r5, #10]
    938e:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    9392:	1c40      	adds	r0, r0, #1
    9394:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    9398:	2001      	movs	r0, #1
    939a:	f000 f83b 	bl	9414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    939e:	f000 0007 	and.w	r0, r0, #7
    93a2:	1c40      	adds	r0, r0, #1
    93a4:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    93a8:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    93ac:	4629      	mov	r1, r5
    93ae:	e001      	b.n	93b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    93b0:	e00c      	b.n	93cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    93b2:	e00f      	b.n	93d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    93b4:	f006 fdad 	bl	ff12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    93b8:	b320      	cbz	r0, 9404 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    93ba:	9807      	ldr	r0, [sp, #28]
    93bc:	f080 0001 	eor.w	r0, r0, #1
    93c0:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    93c4:	2000      	movs	r0, #0
    93c6:	b009      	add	sp, #36	; 0x24
    93c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93cc:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    93d0:	e01a      	b.n	9408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    93d2:	e015      	b.n	9400 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    93d4:	f1ba 0f00 	cmp.w	sl, #0
    93d8:	d1c6      	bne.n	9368 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    93da:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    93de:	2800      	cmp	r0, #0
    93e0:	d0e2      	beq.n	93a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    93e2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    93e6:	68e0      	ldr	r0, [r4, #12]
    93e8:	1a41      	subs	r1, r0, r1
    93ea:	4628      	mov	r0, r5
    93ec:	f005 fd01 	bl	edf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    93f0:	0400      	lsls	r0, r0, #16
    93f2:	0c00      	lsrs	r0, r0, #16
    93f4:	d0d8      	beq.n	93a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    93f6:	9912      	ldr	r1, [sp, #72]	; 0x48
    93f8:	b101      	cbz	r1, 93fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    93fa:	8008      	strh	r0, [r1, #0]
    93fc:	2001      	movs	r0, #1
    93fe:	e7e2      	b.n	93c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    9400:	2100      	movs	r1, #0
    9402:	e7b7      	b.n	9374 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    9404:	f240 5197 	movw	r1, #1431	; 0x597
    9408:	2030      	movs	r0, #48	; 0x30
    940a:	f7fc f95d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    940e:	0000      	.short	0x0000
    9410:	2000010c 	.word	0x2000010c
    9414:	b108      	cbz	r0, 941a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    9416:	4803      	ldr	r0, [pc, #12]	; (9424 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    9418:	e001      	b.n	941e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    941a:	4802      	ldr	r0, [pc, #8]	; (9424 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    941c:	3008      	adds	r0, #8
    941e:	f7fe bc7b 	b.w	7d18 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    9422:	0000      	.short	0x0000
    9424:	20000124 	.word	0x20000124
    9428:	b570      	push	{r4, r5, r6, lr}
    942a:	4604      	mov	r4, r0
    942c:	f7f9 fe8c 	bl	3148 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    9430:	2864      	cmp	r0, #100	; 0x64
    9432:	d901      	bls.n	9438 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    9434:	4605      	mov	r5, r0
    9436:	e000      	b.n	943a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    9438:	2564      	movs	r5, #100	; 0x64
    943a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    943e:	2128      	movs	r1, #40	; 0x28
    9440:	f006 fc56 	bl	fcf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    9444:	4428      	add	r0, r5
    9446:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    944a:	f200 203d 	addw	r0, r0, #573	; 0x23d
    944e:	180e      	adds	r6, r1, r0
    9450:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9454:	2128      	movs	r1, #40	; 0x28
    9456:	f006 fc4b 	bl	fcf0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    945a:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    945e:	4620      	mov	r0, r4
    9460:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9462:	f006 f847 	bl	f4f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9466:	4605      	mov	r5, r0
    9468:	4632      	mov	r2, r6
    946a:	4620      	mov	r0, r4
    946c:	68e1      	ldr	r1, [r4, #12]
    946e:	f006 f841 	bl	f4f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    9472:	4907      	ldr	r1, [pc, #28]	; (9490 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    9474:	4285      	cmp	r5, r0
    9476:	6088      	str	r0, [r1, #8]
    9478:	d200      	bcs.n	947c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    947a:	4628      	mov	r0, r5
    947c:	6048      	str	r0, [r1, #4]
    947e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    9482:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    9486:	60c8      	str	r0, [r1, #12]
    9488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    948c:	f7fa bcfa 	b.w	3e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9490:	2000010c 	.word	0x2000010c

00009494 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    9494:	4806      	ldr	r0, [pc, #24]	; (94b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    9496:	4905      	ldr	r1, [pc, #20]	; (94ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    9498:	6501      	str	r1, [r0, #80]	; 0x50
    949a:	4906      	ldr	r1, [pc, #24]	; (94b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    949c:	6541      	str	r1, [r0, #84]	; 0x54
    949e:	4807      	ldr	r0, [pc, #28]	; (94bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    94a0:	4905      	ldr	r1, [pc, #20]	; (94b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    94a2:	6501      	str	r1, [r0, #80]	; 0x50
    94a4:	4906      	ldr	r1, [pc, #24]	; (94c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    94a6:	6541      	str	r1, [r0, #84]	; 0x54
    94a8:	4770      	bx	lr
    94aa:	0000      	.short	0x0000
    94ac:	0000a9f5 	.word	0x0000a9f5
    94b0:	20000148 	.word	0x20000148
    94b4:	0000aad1 	.word	0x0000aad1
    94b8:	0000b14d 	.word	0x0000b14d
    94bc:	200001ac 	.word	0x200001ac
    94c0:	0000b17d 	.word	0x0000b17d

000094c4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    94c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94c6:	460d      	mov	r5, r1
    94c8:	4607      	mov	r7, r0
    94ca:	2100      	movs	r1, #0
    94cc:	f005 f966 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    94d0:	1e04      	subs	r4, r0, #0
    94d2:	d04f      	beq.n	9574 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    94d4:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    94d8:	2800      	cmp	r0, #0
    94da:	d04b      	beq.n	9574 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    94dc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    94e0:	f88d 0000 	strb.w	r0, [sp]
    94e4:	9800      	ldr	r0, [sp, #0]
    94e6:	9000      	str	r0, [sp, #0]
    94e8:	f89d 0000 	ldrb.w	r0, [sp]
    94ec:	2600      	movs	r6, #0
    94ee:	b1d8      	cbz	r0, 9528 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    94f0:	706e      	strb	r6, [r5, #1]
    94f2:	2007      	movs	r0, #7
    94f4:	7028      	strb	r0, [r5, #0]
    94f6:	e00b      	b.n	9510 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    94f8:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    94fc:	84a6      	strh	r6, [r4, #36]	; 0x24
    94fe:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    9502:	6068      	str	r0, [r5, #4]
    9504:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    9508:	60a8      	str	r0, [r5, #8]
    950a:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    950e:	81a8      	strh	r0, [r5, #12]
    9510:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    9514:	f88d 0000 	strb.w	r0, [sp]
    9518:	9800      	ldr	r0, [sp, #0]
    951a:	9000      	str	r0, [sp, #0]
    951c:	f89d 0000 	ldrb.w	r0, [sp]
    9520:	2800      	cmp	r0, #0
    9522:	d1e9      	bne.n	94f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    9524:	712e      	strb	r6, [r5, #4]
    9526:	e10b      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    9528:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    952c:	b3a0      	cbz	r0, 9598 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    952e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    9532:	280b      	cmp	r0, #11
    9534:	d016      	beq.n	9564 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    9536:	280c      	cmp	r0, #12
    9538:	d004      	beq.n	9544 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    953a:	f640 21ee 	movw	r1, #2798	; 0xaee
    953e:	2031      	movs	r0, #49	; 0x31
    9540:	f7fc f8c2 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9544:	8820      	ldrh	r0, [r4, #0]
    9546:	f7fc fcd9 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    954a:	4607      	mov	r7, r0
    954c:	f004 ffec 	bl	e528 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9550:	b978      	cbnz	r0, 9572 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    9552:	706e      	strb	r6, [r5, #1]
    9554:	200c      	movs	r0, #12
    9556:	7028      	strb	r0, [r5, #0]
    9558:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    955c:	7128      	strb	r0, [r5, #4]
    955e:	8820      	ldrh	r0, [r4, #0]
    9560:	80e8      	strh	r0, [r5, #6]
    9562:	e013      	b.n	958c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    9564:	8820      	ldrh	r0, [r4, #0]
    9566:	f7fc fcc9 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    956a:	4607      	mov	r7, r0
    956c:	f004 ffdc 	bl	e528 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9570:	b108      	cbz	r0, 9576 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    9572:	2000      	movs	r0, #0
    9574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9576:	706e      	strb	r6, [r5, #1]
    9578:	200b      	movs	r0, #11
    957a:	7028      	strb	r0, [r5, #0]
    957c:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    9580:	7128      	strb	r0, [r5, #4]
    9582:	8820      	ldrh	r0, [r4, #0]
    9584:	80e8      	strh	r0, [r5, #6]
    9586:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    958a:	7228      	strb	r0, [r5, #8]
    958c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    9590:	4638      	mov	r0, r7
    9592:	f004 ffe4 	bl	e55e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    9596:	e0d3      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    9598:	e7ff      	b.n	959a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    959a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    959e:	f88d 0000 	strb.w	r0, [sp]
    95a2:	9800      	ldr	r0, [sp, #0]
    95a4:	9000      	str	r0, [sp, #0]
    95a6:	f89d 0000 	ldrb.w	r0, [sp]
    95aa:	b130      	cbz	r0, 95ba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    95ac:	706e      	strb	r6, [r5, #1]
    95ae:	200e      	movs	r0, #14
    95b0:	7028      	strb	r0, [r5, #0]
    95b2:	80af      	strh	r7, [r5, #4]
    95b4:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    95b8:	e0c2      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    95ba:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    95be:	f88d 0000 	strb.w	r0, [sp]
    95c2:	9800      	ldr	r0, [sp, #0]
    95c4:	9000      	str	r0, [sp, #0]
    95c6:	f89d 0000 	ldrb.w	r0, [sp]
    95ca:	b198      	cbz	r0, 95f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    95cc:	706e      	strb	r6, [r5, #1]
    95ce:	2008      	movs	r0, #8
    95d0:	7028      	strb	r0, [r5, #0]
    95d2:	8820      	ldrh	r0, [r4, #0]
    95d4:	80a8      	strh	r0, [r5, #4]
    95d6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    95da:	f8c5 1006 	str.w	r1, [r5, #6]
    95de:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    95e2:	f8c5 100a 	str.w	r1, [r5, #10]
    95e6:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    95ea:	81e8      	strh	r0, [r5, #14]
    95ec:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    95f0:	7026      	strb	r6, [r4, #0]
    95f2:	e0a5      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    95f4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    95f8:	f88d 0000 	strb.w	r0, [sp]
    95fc:	9800      	ldr	r0, [sp, #0]
    95fe:	9000      	str	r0, [sp, #0]
    9600:	f89d 0000 	ldrb.w	r0, [sp]
    9604:	b1a0      	cbz	r0, 9630 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    9606:	706e      	strb	r6, [r5, #1]
    9608:	2016      	movs	r0, #22
    960a:	7028      	strb	r0, [r5, #0]
    960c:	e005      	b.n	961a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    960e:	bf00      	nop
    9610:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    9614:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    9618:	6068      	str	r0, [r5, #4]
    961a:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    961e:	f88d 0000 	strb.w	r0, [sp]
    9622:	9800      	ldr	r0, [sp, #0]
    9624:	9000      	str	r0, [sp, #0]
    9626:	f89d 0000 	ldrb.w	r0, [sp]
    962a:	2800      	cmp	r0, #0
    962c:	d1f0      	bne.n	9610 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    962e:	e087      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    9630:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    9634:	f88d 0000 	strb.w	r0, [sp]
    9638:	9800      	ldr	r0, [sp, #0]
    963a:	9000      	str	r0, [sp, #0]
    963c:	f89d 0000 	ldrb.w	r0, [sp]
    9640:	b170      	cbz	r0, 9660 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    9642:	706e      	strb	r6, [r5, #1]
    9644:	2006      	movs	r0, #6
    9646:	7028      	strb	r0, [r5, #0]
    9648:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    964c:	6068      	str	r0, [r5, #4]
    964e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    9652:	60a8      	str	r0, [r5, #8]
    9654:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    9658:	60e8      	str	r0, [r5, #12]
    965a:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    965e:	e03a      	b.n	96d6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    9660:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    9664:	f88d 0000 	strb.w	r0, [sp]
    9668:	9800      	ldr	r0, [sp, #0]
    966a:	9000      	str	r0, [sp, #0]
    966c:	f89d 0000 	ldrb.w	r0, [sp]
    9670:	b1d0      	cbz	r0, 96a8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    9672:	706e      	strb	r6, [r5, #1]
    9674:	2012      	movs	r0, #18
    9676:	7028      	strb	r0, [r5, #0]
    9678:	e00b      	b.n	9692 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    967a:	bf00      	nop
    967c:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    9680:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    9684:	6068      	str	r0, [r5, #4]
    9686:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    968a:	60a8      	str	r0, [r5, #8]
    968c:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    9690:	60e8      	str	r0, [r5, #12]
    9692:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    9696:	f88d 0000 	strb.w	r0, [sp]
    969a:	9800      	ldr	r0, [sp, #0]
    969c:	9000      	str	r0, [sp, #0]
    969e:	f89d 0000 	ldrb.w	r0, [sp]
    96a2:	2800      	cmp	r0, #0
    96a4:	d1ea      	bne.n	967c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    96a6:	e04b      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    96a8:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    96ac:	f88d 0000 	strb.w	r0, [sp]
    96b0:	9800      	ldr	r0, [sp, #0]
    96b2:	9000      	str	r0, [sp, #0]
    96b4:	f89d 0000 	ldrb.w	r0, [sp]
    96b8:	b180      	cbz	r0, 96dc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    96ba:	706e      	strb	r6, [r5, #1]
    96bc:	2018      	movs	r0, #24
    96be:	7028      	strb	r0, [r5, #0]
    96c0:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    96c4:	6068      	str	r0, [r5, #4]
    96c6:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    96ca:	60a8      	str	r0, [r5, #8]
    96cc:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    96d0:	81a8      	strh	r0, [r5, #12]
    96d2:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    96d6:	f804 6c02 	strb.w	r6, [r4, #-2]
    96da:	e031      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    96dc:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    96e0:	f88d 0000 	strb.w	r0, [sp]
    96e4:	9800      	ldr	r0, [sp, #0]
    96e6:	9000      	str	r0, [sp, #0]
    96e8:	f89d 0000 	ldrb.w	r0, [sp]
    96ec:	b138      	cbz	r0, 96fe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    96ee:	2019      	movs	r0, #25
    96f0:	7028      	strb	r0, [r5, #0]
    96f2:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    96f6:	6068      	str	r0, [r5, #4]
    96f8:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    96fc:	e020      	b.n	9740 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    96fe:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    9702:	f88d 0000 	strb.w	r0, [sp]
    9706:	9800      	ldr	r0, [sp, #0]
    9708:	9000      	str	r0, [sp, #0]
    970a:	f89d 0000 	ldrb.w	r0, [sp]
    970e:	2800      	cmp	r0, #0
    9710:	f43f af30 	beq.w	9574 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    9714:	706e      	strb	r6, [r5, #1]
    9716:	2013      	movs	r0, #19
    9718:	7028      	strb	r0, [r5, #0]
    971a:	e007      	b.n	972c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    971c:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    9720:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    9724:	6068      	str	r0, [r5, #4]
    9726:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    972a:	8128      	strh	r0, [r5, #8]
    972c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    9730:	f88d 0000 	strb.w	r0, [sp]
    9734:	9800      	ldr	r0, [sp, #0]
    9736:	9000      	str	r0, [sp, #0]
    9738:	f89d 0000 	ldrb.w	r0, [sp]
    973c:	2800      	cmp	r0, #0
    973e:	d1ed      	bne.n	971c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    9740:	2001      	movs	r0, #1
    9742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009744 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    9744:	481b      	ldr	r0, [pc, #108]	; (97b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    9746:	491a      	ldr	r1, [pc, #104]	; (97b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    9748:	6081      	str	r1, [r0, #8]
    974a:	491b      	ldr	r1, [pc, #108]	; (97b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    974c:	6041      	str	r1, [r0, #4]
    974e:	491b      	ldr	r1, [pc, #108]	; (97bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    9750:	6001      	str	r1, [r0, #0]
    9752:	491b      	ldr	r1, [pc, #108]	; (97c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    9754:	6281      	str	r1, [r0, #40]	; 0x28
    9756:	491b      	ldr	r1, [pc, #108]	; (97c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    9758:	62c1      	str	r1, [r0, #44]	; 0x2c
    975a:	491b      	ldr	r1, [pc, #108]	; (97c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    975c:	60c1      	str	r1, [r0, #12]
    975e:	491b      	ldr	r1, [pc, #108]	; (97cc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    9760:	6181      	str	r1, [r0, #24]
    9762:	491b      	ldr	r1, [pc, #108]	; (97d0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    9764:	6301      	str	r1, [r0, #48]	; 0x30
    9766:	491b      	ldr	r1, [pc, #108]	; (97d4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    9768:	6201      	str	r1, [r0, #32]
    976a:	491b      	ldr	r1, [pc, #108]	; (97d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    976c:	64c1      	str	r1, [r0, #76]	; 0x4c
    976e:	491b      	ldr	r1, [pc, #108]	; (97dc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    9770:	6481      	str	r1, [r0, #72]	; 0x48
    9772:	491b      	ldr	r1, [pc, #108]	; (97e0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    9774:	6441      	str	r1, [r0, #68]	; 0x44
    9776:	491b      	ldr	r1, [pc, #108]	; (97e4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    9778:	6341      	str	r1, [r0, #52]	; 0x34
    977a:	491b      	ldr	r1, [pc, #108]	; (97e8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    977c:	61c1      	str	r1, [r0, #28]
    977e:	481c      	ldr	r0, [pc, #112]	; (97f0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    9780:	491a      	ldr	r1, [pc, #104]	; (97ec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    9782:	6081      	str	r1, [r0, #8]
    9784:	491b      	ldr	r1, [pc, #108]	; (97f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    9786:	61c1      	str	r1, [r0, #28]
    9788:	491b      	ldr	r1, [pc, #108]	; (97f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    978a:	6241      	str	r1, [r0, #36]	; 0x24
    978c:	491b      	ldr	r1, [pc, #108]	; (97fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    978e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9790:	491b      	ldr	r1, [pc, #108]	; (9800 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    9792:	6101      	str	r1, [r0, #16]
    9794:	491b      	ldr	r1, [pc, #108]	; (9804 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    9796:	6141      	str	r1, [r0, #20]
    9798:	491b      	ldr	r1, [pc, #108]	; (9808 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    979a:	6441      	str	r1, [r0, #68]	; 0x44
    979c:	6341      	str	r1, [r0, #52]	; 0x34
    979e:	491b      	ldr	r1, [pc, #108]	; (980c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    97a0:	6181      	str	r1, [r0, #24]
    97a2:	491b      	ldr	r1, [pc, #108]	; (9810 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    97a4:	6301      	str	r1, [r0, #48]	; 0x30
    97a6:	491b      	ldr	r1, [pc, #108]	; (9814 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    97a8:	6481      	str	r1, [r0, #72]	; 0x48
    97aa:	491b      	ldr	r1, [pc, #108]	; (9818 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    97ac:	64c1      	str	r1, [r0, #76]	; 0x4c
    97ae:	4770      	bx	lr
    97b0:	0000ae81 	.word	0x0000ae81
    97b4:	20000148 	.word	0x20000148
    97b8:	0000a7bd 	.word	0x0000a7bd
    97bc:	0000a819 	.word	0x0000a819
    97c0:	0000ab99 	.word	0x0000ab99
    97c4:	0000abdd 	.word	0x0000abdd
    97c8:	0000a8c5 	.word	0x0000a8c5
    97cc:	0000ae59 	.word	0x0000ae59
    97d0:	0000af9d 	.word	0x0000af9d
    97d4:	0000a971 	.word	0x0000a971
    97d8:	0000ab6d 	.word	0x0000ab6d
    97dc:	0000ab41 	.word	0x0000ab41
    97e0:	0000ae19 	.word	0x0000ae19
    97e4:	0000ae49 	.word	0x0000ae49
    97e8:	0000aeb5 	.word	0x0000aeb5
    97ec:	0000b335 	.word	0x0000b335
    97f0:	200001ac 	.word	0x200001ac
    97f4:	0000b35d 	.word	0x0000b35d
    97f8:	0000b11d 	.word	0x0000b11d
    97fc:	0000b1f5 	.word	0x0000b1f5
    9800:	0000b0f1 	.word	0x0000b0f1
    9804:	0000b29d 	.word	0x0000b29d
    9808:	0000b279 	.word	0x0000b279
    980c:	0000b2c1 	.word	0x0000b2c1
    9810:	0000b3b5 	.word	0x0000b3b5
    9814:	0000b1ad 	.word	0x0000b1ad
    9818:	0000b1dd 	.word	0x0000b1dd

0000981c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    981c:	4806      	ldr	r0, [pc, #24]	; (9838 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    981e:	4905      	ldr	r1, [pc, #20]	; (9834 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    9820:	6581      	str	r1, [r0, #88]	; 0x58
    9822:	4906      	ldr	r1, [pc, #24]	; (983c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    9824:	6601      	str	r1, [r0, #96]	; 0x60
    9826:	4807      	ldr	r0, [pc, #28]	; (9844 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    9828:	4905      	ldr	r1, [pc, #20]	; (9840 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    982a:	6581      	str	r1, [r0, #88]	; 0x58
    982c:	4906      	ldr	r1, [pc, #24]	; (9848 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    982e:	65c1      	str	r1, [r0, #92]	; 0x5c
    9830:	4770      	bx	lr
    9832:	0000      	.short	0x0000
    9834:	0000abfd 	.word	0x0000abfd
    9838:	20000148 	.word	0x20000148
    983c:	0000acd5 	.word	0x0000acd5
    9840:	0000b221 	.word	0x0000b221
    9844:	200001ac 	.word	0x200001ac
    9848:	0000b251 	.word	0x0000b251

0000984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9850:	2601      	movs	r6, #1
    9852:	4c7c      	ldr	r4, [pc, #496]	; (9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    9854:	2500      	movs	r5, #0
    9856:	f366 0107 	bfi	r1, r6, #0, #8
    985a:	8065      	strh	r5, [r4, #2]
    985c:	7065      	strb	r5, [r4, #1]
    985e:	7025      	strb	r5, [r4, #0]
    9860:	60a0      	str	r0, [r4, #8]
    9862:	4689      	mov	r9, r1
    9864:	4680      	mov	r8, r0
    9866:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    986a:	8800      	ldrh	r0, [r0, #0]
    986c:	f7fc fb5c 	bl	5f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9870:	b180      	cbz	r0, 9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    9872:	68a0      	ldr	r0, [r4, #8]
    9874:	8800      	ldrh	r0, [r0, #0]
    9876:	f7fc fe01 	bl	647c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    987a:	68a0      	ldr	r0, [r4, #8]
    987c:	8800      	ldrh	r0, [r0, #0]
    987e:	f7fc fda5 	bl	63cc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9882:	68a0      	ldr	r0, [r4, #8]
    9884:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    9888:	b1c9      	cbz	r1, 98be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    988a:	3070      	adds	r0, #112	; 0x70
    988c:	f006 fda0 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9890:	b118      	cbz	r0, 989a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    9892:	e014      	b.n	98be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    9894:	f640 31c9 	movw	r1, #3017	; 0xbc9
    9898:	e06b      	b.n	9972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    989a:	68a0      	ldr	r0, [r4, #8]
    989c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    98a0:	f88d 1000 	strb.w	r1, [sp]
    98a4:	9900      	ldr	r1, [sp, #0]
    98a6:	9100      	str	r1, [sp, #0]
    98a8:	f89d 1000 	ldrb.w	r1, [sp]
    98ac:	b139      	cbz	r1, 98be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    98ae:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    98b2:	2301      	movs	r3, #1
    98b4:	4619      	mov	r1, r3
    98b6:	3070      	adds	r0, #112	; 0x70
    98b8:	f005 f9e2 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98bc:	b180      	cbz	r0, 98e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    98be:	68a0      	ldr	r0, [r4, #8]
    98c0:	3070      	adds	r0, #112	; 0x70
    98c2:	f006 fd85 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    98c6:	b128      	cbz	r0, 98d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    98c8:	68a0      	ldr	r0, [r4, #8]
    98ca:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    98ce:	bf00      	nop
    98d0:	f000 fbb0 	bl	a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    98d4:	68a0      	ldr	r0, [r4, #8]
    98d6:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    98da:	b189      	cbz	r1, 9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    98dc:	80a5      	strh	r5, [r4, #4]
    98de:	e01e      	b.n	991e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    98e0:	68a0      	ldr	r0, [r4, #8]
    98e2:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    98e6:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    98ea:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    98ee:	2100      	movs	r1, #0
    98f0:	2002      	movs	r0, #2
    98f2:	f000 fe41 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    98f6:	68a0      	ldr	r0, [r4, #8]
    98f8:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    98fc:	2002      	movs	r0, #2
    98fe:	e7e7      	b.n	98d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    9900:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    9904:	f88d 1000 	strb.w	r1, [sp]
    9908:	9900      	ldr	r1, [sp, #0]
    990a:	9100      	str	r1, [sp, #0]
    990c:	f89d 1000 	ldrb.w	r1, [sp]
    9910:	b919      	cbnz	r1, 991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    9912:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    9914:	8a82      	ldrh	r2, [r0, #20]
    9916:	4291      	cmp	r1, r2
    9918:	d800      	bhi.n	991c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    991a:	8a81      	ldrh	r1, [r0, #20]
    991c:	80a1      	strh	r1, [r4, #4]
    991e:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    9922:	1e49      	subs	r1, r1, #1
    9924:	b28f      	uxth	r7, r1
    9926:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    992a:	4439      	add	r1, r7
    992c:	f820 195c 	strh.w	r1, [r0], #-92
    9930:	8801      	ldrh	r1, [r0, #0]
    9932:	4439      	add	r1, r7
    9934:	8001      	strh	r1, [r0, #0]
    9936:	f001 fd6b 	bl	b410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    993a:	b120      	cbz	r0, 9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    993c:	68a0      	ldr	r0, [r4, #8]
    993e:	f850 1f98 	ldr.w	r1, [r0, #152]!
    9942:	4439      	add	r1, r7
    9944:	6001      	str	r1, [r0, #0]
    9946:	68a1      	ldr	r1, [r4, #8]
    9948:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    994c:	2801      	cmp	r0, #1
    994e:	d802      	bhi.n	9956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    9950:	1c40      	adds	r0, r0, #1
    9952:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    9956:	b10f      	cbz	r7, 995c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    9958:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    995c:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    9960:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    9964:	f101 0070 	add.w	r0, r1, #112	; 0x70
    9968:	f005 fb0c 	bl	ef84 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    996c:	b120      	cbz	r0, 9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    996e:	f640 410d 	movw	r1, #3085	; 0xc0d
    9972:	2031      	movs	r0, #49	; 0x31
    9974:	f7fb fea8 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9978:	68a0      	ldr	r0, [r4, #8]
    997a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    997e:	290b      	cmp	r1, #11
    9980:	d001      	beq.n	9986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    9982:	290c      	cmp	r1, #12
    9984:	d118      	bne.n	99b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9986:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    998a:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    998e:	1ad2      	subs	r2, r2, r3
    9990:	b212      	sxth	r2, r2
    9992:	2a00      	cmp	r2, #0
    9994:	db10      	blt.n	99b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    9996:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    999a:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    999e:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    99a2:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    99a6:	2103      	movs	r1, #3
    99a8:	f7fd fdcc 	bl	7544 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    99ac:	68a0      	ldr	r0, [r4, #8]
    99ae:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    99b2:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    99b6:	e026      	b.n	9a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    99b8:	2924      	cmp	r1, #36	; 0x24
    99ba:	d111      	bne.n	99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    99bc:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    99c0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    99c4:	1a89      	subs	r1, r1, r2
    99c6:	b209      	sxth	r1, r1
    99c8:	2900      	cmp	r1, #0
    99ca:	db09      	blt.n	99e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    99cc:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    99d0:	f000 fe82 	bl	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    99d4:	2800      	cmp	r0, #0
    99d6:	68a0      	ldr	r0, [r4, #8]
    99d8:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    99dc:	d029      	beq.n	9a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    99de:	e012      	b.n	9a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    99e0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    99e4:	2924      	cmp	r1, #36	; 0x24
    99e6:	d001      	beq.n	99ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    99e8:	2925      	cmp	r1, #37	; 0x25
    99ea:	d10c      	bne.n	9a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    99ec:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    99f0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    99f4:	1a89      	subs	r1, r1, r2
    99f6:	b209      	sxth	r1, r1
    99f8:	2900      	cmp	r1, #0
    99fa:	db04      	blt.n	9a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    99fc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    9a00:	f000 fe6a 	bl	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    9a04:	b1a8      	cbz	r0, 9a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    9a06:	4810      	ldr	r0, [pc, #64]	; (9a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    9a08:	9000      	str	r0, [sp, #0]
    9a0a:	4b10      	ldr	r3, [pc, #64]	; (9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9a0c:	4a10      	ldr	r2, [pc, #64]	; (9a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    9a0e:	4641      	mov	r1, r8
    9a10:	4648      	mov	r0, r9
    9a12:	f7fc fde9 	bl	65e8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9a16:	68a0      	ldr	r0, [r4, #8]
    9a18:	2301      	movs	r3, #1
    9a1a:	2105      	movs	r1, #5
    9a1c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9a20:	3070      	adds	r0, #112	; 0x70
    9a22:	f005 f92d 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a26:	2800      	cmp	r0, #0
    9a28:	d009      	beq.n	9a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    9a2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a2e:	f7fc bdd5 	b.w	65dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9a32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a36:	2100      	movs	r1, #0
    9a38:	4608      	mov	r0, r1
    9a3a:	f000 bbd5 	b.w	a1e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9a42:	0000      	.short	0x0000
    9a44:	20000134 	.word	0x20000134
    9a48:	0000a1e9 	.word	0x0000a1e9
    9a4c:	00009ced 	.word	0x00009ced
    9a50:	0000a625 	.word	0x0000a625
    9a54:	b570      	push	{r4, r5, r6, lr}
    9a56:	4c0f      	ldr	r4, [pc, #60]	; (9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    9a58:	68a5      	ldr	r5, [r4, #8]
    9a5a:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    9a5e:	2920      	cmp	r1, #32
    9a60:	d002      	beq.n	9a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a62:	2926      	cmp	r1, #38	; 0x26
    9a64:	d003      	beq.n	9a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    9a66:	e011      	b.n	9a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9a68:	f000 fe84 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9a6c:	e008      	b.n	9a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
    9a6e:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    9a72:	2301      	movs	r3, #1
    9a74:	210b      	movs	r1, #11
    9a76:	f105 0070 	add.w	r0, r5, #112	; 0x70
    9a7a:	f005 f901 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a7e:	b138      	cbz	r0, 9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    9a80:	68a1      	ldr	r1, [r4, #8]
    9a82:	2000      	movs	r0, #0
    9a84:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9a88:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9a8c:	2000      	movs	r0, #0
    9a8e:	bd70      	pop	{r4, r5, r6, pc}
    9a90:	202a      	movs	r0, #42	; 0x2a
    9a92:	e7e9      	b.n	9a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9a94:	20000134 	.word	0x20000134
    9a98:	4804      	ldr	r0, [pc, #16]	; (9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    9a9a:	2100      	movs	r1, #0
    9a9c:	6880      	ldr	r0, [r0, #8]
    9a9e:	f820 1fb0 	strh.w	r1, [r0, #176]!
    9aa2:	7881      	ldrb	r1, [r0, #2]
    9aa4:	1c49      	adds	r1, r1, #1
    9aa6:	7081      	strb	r1, [r0, #2]
    9aa8:	4770      	bx	lr
    9aaa:	0000      	.short	0x0000
    9aac:	20000134 	.word	0x20000134
    9ab0:	4807      	ldr	r0, [pc, #28]	; (9ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
    9ab2:	b510      	push	{r4, lr}
    9ab4:	6881      	ldr	r1, [r0, #8]
    9ab6:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    9aba:	1e40      	subs	r0, r0, #1
    9abc:	b240      	sxtb	r0, r0
    9abe:	7008      	strb	r0, [r1, #0]
    9ac0:	2800      	cmp	r0, #0
    9ac2:	da04      	bge.n	9ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    9ac4:	f44f 71c9 	mov.w	r1, #402	; 0x192
    9ac8:	2031      	movs	r0, #49	; 0x31
    9aca:	f7fb fdfd 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ace:	bd10      	pop	{r4, pc}
    9ad0:	20000134 	.word	0x20000134
    9ad4:	491a      	ldr	r1, [pc, #104]	; (9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
    9ad6:	b508      	push	{r3, lr}
    9ad8:	6889      	ldr	r1, [r1, #8]
    9ada:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    9ade:	b1b8      	cbz	r0, 9b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9ae0:	2a10      	cmp	r2, #16
    9ae2:	d006      	beq.n	9af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
    9ae4:	2a14      	cmp	r2, #20
    9ae6:	d007      	beq.n	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    9ae8:	2a15      	cmp	r2, #21
    9aea:	d008      	beq.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    9aec:	2a1b      	cmp	r2, #27
    9aee:	d122      	bne.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    9af0:	e008      	b.n	9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    9af2:	2101      	movs	r1, #1
    9af4:	200b      	movs	r0, #11
    9af6:	e007      	b.n	9b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9af8:	f001 faac 	bl	b054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
    9afc:	e006      	b.n	9b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9afe:	f000 fd59 	bl	a5b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    9b02:	e003      	b.n	9b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9b04:	2101      	movs	r1, #1
    9b06:	2006      	movs	r0, #6
    9b08:	f000 fd36 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9b0c:	2001      	movs	r0, #1
    9b0e:	bd08      	pop	{r3, pc}
    9b10:	2a21      	cmp	r2, #33	; 0x21
    9b12:	d110      	bne.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    9b14:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    9b18:	2802      	cmp	r0, #2
    9b1a:	d00e      	beq.n	9b3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9b1c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    9b20:	2801      	cmp	r0, #1
    9b22:	d108      	bne.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    9b24:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    9b28:	f88d 0000 	strb.w	r0, [sp]
    9b2c:	9800      	ldr	r0, [sp, #0]
    9b2e:	9000      	str	r0, [sp, #0]
    9b30:	f89d 0000 	ldrb.w	r0, [sp]
    9b34:	b108      	cbz	r0, 9b3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9b36:	2000      	movs	r0, #0
    9b38:	bd08      	pop	{r3, pc}
    9b3a:	2101      	movs	r1, #1
    9b3c:	2017      	movs	r0, #23
    9b3e:	e7e3      	b.n	9b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9b40:	20000134 	.word	0x20000134
    9b44:	b538      	push	{r3, r4, r5, lr}
    9b46:	2800      	cmp	r0, #0
    9b48:	d16b      	bne.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9b4a:	4c37      	ldr	r4, [pc, #220]	; (9c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
    9b4c:	68a0      	ldr	r0, [r4, #8]
    9b4e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9b52:	07ca      	lsls	r2, r1, #31
    9b54:	d002      	beq.n	9b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
    9b56:	2101      	movs	r1, #1
    9b58:	2009      	movs	r0, #9
    9b5a:	e05b      	b.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9b5c:	078a      	lsls	r2, r1, #30
    9b5e:	d50a      	bpl.n	9b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
    9b60:	2101      	movs	r1, #1
    9b62:	200c      	movs	r0, #12
    9b64:	f000 fd08 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9b68:	68a0      	ldr	r0, [r4, #8]
    9b6a:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    9b6e:	f041 0101 	orr.w	r1, r1, #1
    9b72:	7001      	strb	r1, [r0, #0]
    9b74:	e050      	b.n	9c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    9b76:	074a      	lsls	r2, r1, #29
    9b78:	d502      	bpl.n	9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    9b7a:	2101      	movs	r1, #1
    9b7c:	2013      	movs	r0, #19
    9b7e:	e049      	b.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9b80:	070a      	lsls	r2, r1, #28
    9b82:	d505      	bpl.n	9b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    9b84:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    9b88:	7141      	strb	r1, [r0, #5]
    9b8a:	2101      	movs	r1, #1
    9b8c:	2007      	movs	r0, #7
    9b8e:	e041      	b.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9b90:	f011 0f30 	tst.w	r1, #48	; 0x30
    9b94:	d045      	beq.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9b96:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    9b9a:	f88d 1000 	strb.w	r1, [sp]
    9b9e:	9900      	ldr	r1, [sp, #0]
    9ba0:	9100      	str	r1, [sp, #0]
    9ba2:	f89d 1000 	ldrb.w	r1, [sp]
    9ba6:	bbc9      	cbnz	r1, 9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9ba8:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    9bac:	f88d 1000 	strb.w	r1, [sp]
    9bb0:	9900      	ldr	r1, [sp, #0]
    9bb2:	9100      	str	r1, [sp, #0]
    9bb4:	f89d 1000 	ldrb.w	r1, [sp]
    9bb8:	b1c9      	cbz	r1, 9bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
    9bba:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9bbe:	2924      	cmp	r1, #36	; 0x24
    9bc0:	d02d      	beq.n	9c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    9bc2:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9bc6:	2924      	cmp	r1, #36	; 0x24
    9bc8:	d029      	beq.n	9c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    9bca:	2300      	movs	r3, #0
    9bcc:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9bd0:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9bd4:	f005 fc80 	bl	f4d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9bd8:	68a0      	ldr	r0, [r4, #8]
    9bda:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9bde:	f021 0120 	bic.w	r1, r1, #32
    9be2:	f041 0110 	orr.w	r1, r1, #16
    9be6:	7001      	strb	r1, [r0, #0]
    9be8:	2100      	movs	r1, #0
    9bea:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    9bee:	68a0      	ldr	r0, [r4, #8]
    9bf0:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9bf4:	06c9      	lsls	r1, r1, #27
    9bf6:	d514      	bpl.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9bf8:	f005 fc89 	bl	f50e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9bfc:	f000 f910 	bl	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9c00:	68a1      	ldr	r1, [r4, #8]
    9c02:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9c06:	8bc2      	ldrh	r2, [r0, #30]
    9c08:	f821 2fee 	strh.w	r2, [r1, #238]!
    9c0c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9c0e:	8048      	strh	r0, [r1, #2]
    9c10:	2101      	movs	r1, #1
    9c12:	2015      	movs	r0, #21
    9c14:	f000 fcb0 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9c18:	2001      	movs	r0, #1
    9c1a:	bd38      	pop	{r3, r4, r5, pc}
    9c1c:	e001      	b.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9c1e:	2301      	movs	r3, #1
    9c20:	e7d4      	b.n	9bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    9c22:	2000      	movs	r0, #0
    9c24:	e7f9      	b.n	9c1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
    9c26:	0000      	.short	0x0000
    9c28:	20000134 	.word	0x20000134
    9c2c:	b570      	push	{r4, r5, r6, lr}
    9c2e:	460d      	mov	r5, r1
    9c30:	4606      	mov	r6, r0
    9c32:	f005 fa93 	bl	f15c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    9c36:	4604      	mov	r4, r0
    9c38:	4630      	mov	r0, r6
    9c3a:	f005 fa9b 	bl	f174 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9c3e:	4629      	mov	r1, r5
    9c40:	f000 f81e 	bl	9c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
    9c44:	b1b8      	cbz	r0, 9c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    9c46:	4620      	mov	r0, r4
    9c48:	f005 f8b3 	bl	edb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9c4c:	0001      	movs	r1, r0
    9c4e:	d00d      	beq.n	9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9c50:	480a      	ldr	r0, [pc, #40]	; (9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
    9c52:	6880      	ldr	r0, [r0, #8]
    9c54:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9c58:	428a      	cmp	r2, r1
    9c5a:	d007      	beq.n	9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9c5c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9c60:	2901      	cmp	r1, #1
    9c62:	d005      	beq.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    9c64:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    9c68:	4220      	tst	r0, r4
    9c6a:	d004      	beq.n	9c76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    9c6c:	2001      	movs	r0, #1
    9c6e:	bd70      	pop	{r4, r5, r6, pc}
    9c70:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    9c74:	e7f8      	b.n	9c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    9c76:	2000      	movs	r0, #0
    9c78:	bd70      	pop	{r4, r5, r6, pc}
    9c7a:	0000      	.short	0x0000
    9c7c:	20000134 	.word	0x20000134
    9c80:	b570      	push	{r4, r5, r6, lr}
    9c82:	460d      	mov	r5, r1
    9c84:	4604      	mov	r4, r0
    9c86:	f005 f894 	bl	edb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9c8a:	b350      	cbz	r0, 9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9c8c:	4916      	ldr	r1, [pc, #88]	; (9ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
    9c8e:	6889      	ldr	r1, [r1, #8]
    9c90:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    9c94:	4282      	cmp	r2, r0
    9c96:	d024      	beq.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9c98:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    9c9c:	2b01      	cmp	r3, #1
    9c9e:	d005      	beq.n	9cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    9ca0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    9ca4:	4223      	tst	r3, r4
    9ca6:	d013      	beq.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    9ca8:	b11d      	cbz	r5, 9cb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    9caa:	e01a      	b.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9cac:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    9cb0:	e7f8      	b.n	9ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    9cb2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    9cb6:	4221      	tst	r1, r4
    9cb8:	d113      	bne.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9cba:	b15a      	cbz	r2, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9cbc:	2a04      	cmp	r2, #4
    9cbe:	d00e      	beq.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9cc0:	2804      	cmp	r0, #4
    9cc2:	d00c      	beq.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9cc4:	2a08      	cmp	r2, #8
    9cc6:	d00a      	beq.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9cc8:	2808      	cmp	r0, #8
    9cca:	d008      	beq.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9ccc:	4282      	cmp	r2, r0
    9cce:	d908      	bls.n	9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9cd0:	2000      	movs	r0, #0
    9cd2:	bd70      	pop	{r4, r5, r6, pc}
    9cd4:	f240 1155 	movw	r1, #341	; 0x155
    9cd8:	2006      	movs	r0, #6
    9cda:	f7fb fcf5 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cde:	4282      	cmp	r2, r0
    9ce0:	d3f6      	bcc.n	9cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    9ce2:	2001      	movs	r0, #1
    9ce4:	bd70      	pop	{r4, r5, r6, pc}
    9ce6:	0000      	.short	0x0000
    9ce8:	20000134 	.word	0x20000134
    9cec:	490c      	ldr	r1, [pc, #48]	; (9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
    9cee:	4602      	mov	r2, r0
    9cf0:	7848      	ldrb	r0, [r1, #1]
    9cf2:	b998      	cbnz	r0, 9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    9cf4:	4608      	mov	r0, r1
    9cf6:	6880      	ldr	r0, [r0, #8]
    9cf8:	b142      	cbz	r2, 9d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
    9cfa:	7889      	ldrb	r1, [r1, #2]
    9cfc:	0709      	lsls	r1, r1, #28
    9cfe:	d503      	bpl.n	9d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    9d00:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    9d04:	2808      	cmp	r0, #8
    9d06:	d009      	beq.n	9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    9d08:	2001      	movs	r0, #1
    9d0a:	4770      	bx	lr
    9d0c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    9d10:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9d12:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    9d14:	428a      	cmp	r2, r1
    9d16:	d801      	bhi.n	9d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    9d18:	f7ff b81a 	b.w	8d50 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9d1c:	2000      	movs	r0, #0
    9d1e:	4770      	bx	lr
    9d20:	20000134 	.word	0x20000134
    9d24:	b538      	push	{r3, r4, r5, lr}
    9d26:	4c3d      	ldr	r4, [pc, #244]	; (9e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
    9d28:	4605      	mov	r5, r0
    9d2a:	68a0      	ldr	r0, [r4, #8]
    9d2c:	3070      	adds	r0, #112	; 0x70
    9d2e:	f006 fb4f 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9d32:	2800      	cmp	r0, #0
    9d34:	d170      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9d36:	2d00      	cmp	r5, #0
    9d38:	d16e      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9d3a:	68a0      	ldr	r0, [r4, #8]
    9d3c:	2301      	movs	r3, #1
    9d3e:	4619      	mov	r1, r3
    9d40:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9d44:	3070      	adds	r0, #112	; 0x70
    9d46:	f004 ff9b 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d4a:	2800      	cmp	r0, #0
    9d4c:	d164      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9d4e:	68a0      	ldr	r0, [r4, #8]
    9d50:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9d54:	f88d 1000 	strb.w	r1, [sp]
    9d58:	9900      	ldr	r1, [sp, #0]
    9d5a:	9100      	str	r1, [sp, #0]
    9d5c:	f89d 1000 	ldrb.w	r1, [sp]
    9d60:	b149      	cbz	r1, 9d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    9d62:	2100      	movs	r1, #0
    9d64:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9d68:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    9d6c:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    9d70:	2100      	movs	r1, #0
    9d72:	2002      	movs	r0, #2
    9d74:	e045      	b.n	9e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    9d76:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d7a:	2301      	movs	r3, #1
    9d7c:	2104      	movs	r1, #4
    9d7e:	3070      	adds	r0, #112	; 0x70
    9d80:	f004 ff7e 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d84:	4605      	mov	r5, r0
    9d86:	f7ff fedd 	bl	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    9d8a:	2800      	cmp	r0, #0
    9d8c:	d144      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9d8e:	4628      	mov	r0, r5
    9d90:	f7ff fea0 	bl	9ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    9d94:	2800      	cmp	r0, #0
    9d96:	d13f      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9d98:	68a0      	ldr	r0, [r4, #8]
    9d9a:	2301      	movs	r3, #1
    9d9c:	2100      	movs	r1, #0
    9d9e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9da2:	3070      	adds	r0, #112	; 0x70
    9da4:	f004 ff6c 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da8:	b178      	cbz	r0, 9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9daa:	68a0      	ldr	r0, [r4, #8]
    9dac:	2301      	movs	r3, #1
    9dae:	2104      	movs	r1, #4
    9db0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9db4:	3070      	adds	r0, #112	; 0x70
    9db6:	f004 ff63 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dba:	b930      	cbnz	r0, 9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9dbc:	68a0      	ldr	r0, [r4, #8]
    9dbe:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    9dc2:	b110      	cbz	r0, 9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9dc4:	2100      	movs	r1, #0
    9dc6:	2012      	movs	r0, #18
    9dc8:	e01b      	b.n	9e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    9dca:	68a0      	ldr	r0, [r4, #8]
    9dcc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9dd0:	290a      	cmp	r1, #10
    9dd2:	d01a      	beq.n	9e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9dd4:	2d00      	cmp	r5, #0
    9dd6:	d11f      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9dd8:	f000 fb1a 	bl	a410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    9ddc:	2800      	cmp	r0, #0
    9dde:	d11b      	bne.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9de0:	68a0      	ldr	r0, [r4, #8]
    9de2:	2301      	movs	r3, #1
    9de4:	2100      	movs	r1, #0
    9de6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9dea:	3070      	adds	r0, #112	; 0x70
    9dec:	f004 ff48 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9df0:	2800      	cmp	r0, #0
    9df2:	d011      	beq.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9df4:	68a0      	ldr	r0, [r4, #8]
    9df6:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    9dfa:	2800      	cmp	r0, #0
    9dfc:	d00c      	beq.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9dfe:	2100      	movs	r1, #0
    9e00:	20ff      	movs	r0, #255	; 0xff
    9e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e06:	f000 bbb7 	b.w	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9e0a:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    9e0e:	7101      	strb	r1, [r0, #4]
    9e10:	2100      	movs	r1, #0
    9e12:	2007      	movs	r0, #7
    9e14:	e7f5      	b.n	9e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    9e16:	e7ff      	b.n	9e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9e18:	bd38      	pop	{r3, r4, r5, pc}
    9e1a:	0000      	.short	0x0000
    9e1c:	20000134 	.word	0x20000134
    9e20:	480a      	ldr	r0, [pc, #40]	; (9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
    9e22:	b510      	push	{r4, lr}
    9e24:	6881      	ldr	r1, [r0, #8]
    9e26:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9e2a:	2801      	cmp	r0, #1
    9e2c:	d009      	beq.n	9e42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    9e2e:	8808      	ldrh	r0, [r1, #0]
    9e30:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    9e34:	312c      	adds	r1, #44	; 0x2c
    9e36:	f005 fb2b 	bl	f490 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e3e:	f7fd bdcf 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e42:	2002      	movs	r0, #2
    9e44:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9e48:	bd10      	pop	{r4, pc}
    9e4a:	0000      	.short	0x0000
    9e4c:	20000134 	.word	0x20000134
    9e50:	b570      	push	{r4, r5, r6, lr}
    9e52:	4c25      	ldr	r4, [pc, #148]	; (9ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    9e54:	0005      	movs	r5, r0
    9e56:	d12f      	bne.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9e58:	f000 f8a4 	bl	9fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    9e5c:	f000 f848 	bl	9ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    9e60:	0005      	movs	r5, r0
    9e62:	d129      	bne.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9e64:	8860      	ldrh	r0, [r4, #2]
    9e66:	0741      	lsls	r1, r0, #29
    9e68:	d506      	bpl.n	9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9e6a:	68a1      	ldr	r1, [r4, #8]
    9e6c:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    9e70:	2907      	cmp	r1, #7
    9e72:	d101      	bne.n	9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9e74:	2101      	movs	r1, #1
    9e76:	7021      	strb	r1, [r4, #0]
    9e78:	0780      	lsls	r0, r0, #30
    9e7a:	d512      	bpl.n	9ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9e7c:	68e0      	ldr	r0, [r4, #12]
    9e7e:	78c0      	ldrb	r0, [r0, #3]
    9e80:	2819      	cmp	r0, #25
    9e82:	d205      	bcs.n	9e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9e84:	4919      	ldr	r1, [pc, #100]	; (9eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    9e86:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    9e8a:	b109      	cbz	r1, 9e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9e8c:	4788      	blx	r1
    9e8e:	e008      	b.n	9ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9e90:	28ff      	cmp	r0, #255	; 0xff
    9e92:	d004      	beq.n	9e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9e94:	f240 714d 	movw	r1, #1869	; 0x74d
    9e98:	2031      	movs	r0, #49	; 0x31
    9e9a:	f7fb fc15 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e9e:	f001 f91b 	bl	b0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    9ea2:	78a0      	ldrb	r0, [r4, #2]
    9ea4:	06c0      	lsls	r0, r0, #27
    9ea6:	d507      	bpl.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9ea8:	68a0      	ldr	r0, [r4, #8]
    9eaa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9eae:	290b      	cmp	r1, #11
    9eb0:	d102      	bne.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9eb2:	210c      	movs	r1, #12
    9eb4:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9eb8:	7860      	ldrb	r0, [r4, #1]
    9eba:	0700      	lsls	r0, r0, #28
    9ebc:	d511      	bpl.n	9ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    9ebe:	68a0      	ldr	r0, [r4, #8]
    9ec0:	2301      	movs	r3, #1
    9ec2:	2105      	movs	r1, #5
    9ec4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9ec8:	3070      	adds	r0, #112	; 0x70
    9eca:	f004 fed9 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ece:	b128      	cbz	r0, 9edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
    9ed0:	68a1      	ldr	r1, [r4, #8]
    9ed2:	2508      	movs	r5, #8
    9ed4:	2000      	movs	r0, #0
    9ed6:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    9eda:	e002      	b.n	9ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    9edc:	2000      	movs	r0, #0
    9ede:	f7fc fc4d 	bl	677c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9ee2:	4628      	mov	r0, r5
    9ee4:	bd70      	pop	{r4, r5, r6, pc}
    9ee6:	0000      	.short	0x0000
    9ee8:	20000134 	.word	0x20000134
    9eec:	200001ac 	.word	0x200001ac
    9ef0:	b570      	push	{r4, r5, r6, lr}
    9ef2:	4c2a      	ldr	r4, [pc, #168]	; (9f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9ef4:	2000      	movs	r0, #0
    9ef6:	78a1      	ldrb	r1, [r4, #2]
    9ef8:	07c9      	lsls	r1, r1, #31
    9efa:	d015      	beq.n	9f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
    9efc:	6920      	ldr	r0, [r4, #16]
    9efe:	2301      	movs	r3, #1
    9f00:	2105      	movs	r1, #5
    9f02:	78c5      	ldrb	r5, [r0, #3]
    9f04:	68a0      	ldr	r0, [r4, #8]
    9f06:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9f0a:	3070      	adds	r0, #112	; 0x70
    9f0c:	f004 feb8 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f10:	b158      	cbz	r0, 9f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    9f12:	1ead      	subs	r5, r5, #2
    9f14:	2d0a      	cmp	r5, #10
    9f16:	d206      	bcs.n	9f26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    9f18:	e8df f005 	tbb	[pc, r5]
    9f1c:	05050707 	.word	0x05050707
    9f20:	05050707 	.word	0x05050707
    9f24:	0707      	.short	0x0707
    9f26:	2008      	movs	r0, #8
    9f28:	bd70      	pop	{r4, r5, r6, pc}
    9f2a:	6920      	ldr	r0, [r4, #16]
    9f2c:	f7fd fc34 	bl	7798 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9f30:	b138      	cbz	r0, 9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
    9f32:	6920      	ldr	r0, [r4, #16]
    9f34:	78c5      	ldrb	r5, [r0, #3]
    9f36:	b145      	cbz	r5, 9f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9f38:	2d01      	cmp	r5, #1
    9f3a:	d006      	beq.n	9f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9f3c:	2d16      	cmp	r5, #22
    9f3e:	d118      	bne.n	9f72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9f40:	e003      	b.n	9f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f46:	f000 bd3d 	b.w	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9f4a:	68a0      	ldr	r0, [r4, #8]
    9f4c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9f50:	f004 fee4 	bl	ed1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9f54:	b168      	cbz	r0, 9f72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9f56:	68a1      	ldr	r1, [r4, #8]
    9f58:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    9f5c:	281f      	cmp	r0, #31
    9f5e:	d008      	beq.n	9f72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9f60:	2820      	cmp	r0, #32
    9f62:	d003      	beq.n	9f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
    9f64:	2d16      	cmp	r5, #22
    9f66:	d00c      	beq.n	9f82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9f68:	2002      	movs	r0, #2
    9f6a:	bd70      	pop	{r4, r5, r6, pc}
    9f6c:	2026      	movs	r0, #38	; 0x26
    9f6e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9f72:	2d19      	cmp	r5, #25
    9f74:	d207      	bcs.n	9f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9f76:	480a      	ldr	r0, [pc, #40]	; (9fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    9f78:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9f7c:	b118      	cbz	r0, 9f86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9f7e:	4780      	blx	r0
    9f80:	e003      	b.n	9f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9f82:	2020      	movs	r0, #32
    9f84:	bd70      	pop	{r4, r5, r6, pc}
    9f86:	f000 fd1d 	bl	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9f8a:	68a2      	ldr	r2, [r4, #8]
    9f8c:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    9f90:	1c49      	adds	r1, r1, #1
    9f92:	f143 0300 	adc.w	r3, r3, #0
    9f96:	e9c2 1300 	strd	r1, r3, [r2]
    9f9a:	bd70      	pop	{r4, r5, r6, pc}
    9f9c:	20000134 	.word	0x20000134
    9fa0:	20000148 	.word	0x20000148
    9fa4:	b570      	push	{r4, r5, r6, lr}
    9fa6:	4c22      	ldr	r4, [pc, #136]	; (a030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9fa8:	78a0      	ldrb	r0, [r4, #2]
    9faa:	0700      	lsls	r0, r0, #28
    9fac:	d53e      	bpl.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9fae:	68a0      	ldr	r0, [r4, #8]
    9fb0:	3070      	adds	r0, #112	; 0x70
    9fb2:	f006 fa0d 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9fb6:	b148      	cbz	r0, 9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9fb8:	68a0      	ldr	r0, [r4, #8]
    9fba:	21fe      	movs	r1, #254	; 0xfe
    9fbc:	2500      	movs	r5, #0
    9fbe:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    9fc2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9fc6:	2919      	cmp	r1, #25
    9fc8:	d10c      	bne.n	9fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    9fca:	e004      	b.n	9fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9fcc:	f240 7157 	movw	r1, #1879	; 0x757
    9fd0:	2031      	movs	r0, #49	; 0x31
    9fd2:	f7fb fb79 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fd6:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    9fda:	f7ff fd69 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9fde:	68a0      	ldr	r0, [r4, #8]
    9fe0:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    9fe4:	68a0      	ldr	r0, [r4, #8]
    9fe6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9fea:	291f      	cmp	r1, #31
    9fec:	d002      	beq.n	9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9fee:	2927      	cmp	r1, #39	; 0x27
    9ff0:	d113      	bne.n	a01a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9ff2:	e00b      	b.n	a00c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9ff4:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9ff8:	f004 fe90 	bl	ed1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9ffc:	b108      	cbz	r0, a002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9ffe:	2026      	movs	r0, #38	; 0x26
    a000:	e000      	b.n	a004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    a002:	2020      	movs	r0, #32
    a004:	68a1      	ldr	r1, [r4, #8]
    a006:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a00a:	e006      	b.n	a01a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    a00c:	2101      	movs	r1, #1
    a00e:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    a012:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a016:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a01a:	68a0      	ldr	r0, [r4, #8]
    a01c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    a020:	2908      	cmp	r1, #8
    a022:	d103      	bne.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    a024:	2102      	movs	r1, #2
    a026:	7021      	strb	r1, [r4, #0]
    a028:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    a02c:	bd70      	pop	{r4, r5, r6, pc}
    a02e:	0000      	.short	0x0000
    a030:	20000134 	.word	0x20000134
    a034:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    a036:	4605      	mov	r5, r0
    a038:	4668      	mov	r0, sp
    a03a:	f7fc fa09 	bl	6450 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a03e:	b318      	cbz	r0, a088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    a040:	2222      	movs	r2, #34	; 0x22
    a042:	2100      	movs	r1, #0
    a044:	9800      	ldr	r0, [sp, #0]
    a046:	f003 fc28 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a04a:	2103      	movs	r1, #3
    a04c:	9800      	ldr	r0, [sp, #0]
    a04e:	f005 f8e5 	bl	f21c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a052:	9800      	ldr	r0, [sp, #0]
    a054:	7801      	ldrb	r1, [r0, #0]
    a056:	f021 0110 	bic.w	r1, r1, #16
    a05a:	7001      	strb	r1, [r0, #0]
    a05c:	4629      	mov	r1, r5
    a05e:	f7fd fbc7 	bl	77f0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a062:	2100      	movs	r1, #0
    a064:	4c5f      	ldr	r4, [pc, #380]	; (a1e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    a066:	f644 162f 	movw	r6, #18735	; 0x492f
    a06a:	2d0e      	cmp	r5, #14
    a06c:	d07e      	beq.n	a16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    a06e:	dc0e      	bgt.n	a08e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    a070:	f1a5 0502 	sub.w	r5, r5, #2
    a074:	2d0c      	cmp	r5, #12
    a076:	d21c      	bcs.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    a078:	e8df f005 	tbb	[pc, r5]
    a07c:	aa491b1e 	.word	0xaa491b1e
    a080:	551b1eaa 	.word	0x551b1eaa
    a084:	3034aa1b 	.word	0x3034aa1b
    a088:	f640 1187 	movw	r1, #2439	; 0x987
    a08c:	e0a6      	b.n	a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    a08e:	2d15      	cmp	r5, #21
    a090:	d05c      	beq.n	a14c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    a092:	dc08      	bgt.n	a0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    a094:	2d11      	cmp	r5, #17
    a096:	d014      	beq.n	a0c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
    a098:	2d12      	cmp	r5, #18
    a09a:	d01e      	beq.n	a0da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    a09c:	2d13      	cmp	r5, #19
    a09e:	d01c      	beq.n	a0da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    a0a0:	2d14      	cmp	r5, #20
    a0a2:	d106      	bne.n	a0b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    a0a4:	e052      	b.n	a14c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    a0a6:	2d16      	cmp	r5, #22
    a0a8:	d027      	beq.n	a0fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
    a0aa:	2d17      	cmp	r5, #23
    a0ac:	d069      	beq.n	a182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
    a0ae:	2dff      	cmp	r5, #255	; 0xff
    a0b0:	d072      	beq.n	a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    a0b2:	f640 11fd 	movw	r1, #2557	; 0x9fd
    a0b6:	e091      	b.n	a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    a0b8:	68a1      	ldr	r1, [r4, #8]
    a0ba:	9800      	ldr	r0, [sp, #0]
    a0bc:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    a0c0:	e00e      	b.n	a0e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    a0c2:	68a0      	ldr	r0, [r4, #8]
    a0c4:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    a0c8:	9800      	ldr	r0, [sp, #0]
    a0ca:	f005 f883 	bl	f1d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a0ce:	68a0      	ldr	r0, [r4, #8]
    a0d0:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    a0d4:	9800      	ldr	r0, [sp, #0]
    a0d6:	f005 f87f 	bl	f1d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a0da:	e079      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a0dc:	9800      	ldr	r0, [sp, #0]
    a0de:	2106      	movs	r1, #6
    a0e0:	7101      	strb	r1, [r0, #4]
    a0e2:	e075      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a0e4:	9800      	ldr	r0, [sp, #0]
    a0e6:	220b      	movs	r2, #11
    a0e8:	7102      	strb	r2, [r0, #4]
    a0ea:	2259      	movs	r2, #89	; 0x59
    a0ec:	7142      	strb	r2, [r0, #5]
    a0ee:	7181      	strb	r1, [r0, #6]
    a0f0:	21fe      	movs	r1, #254	; 0xfe
    a0f2:	71c1      	strb	r1, [r0, #7]
    a0f4:	2112      	movs	r1, #18
    a0f6:	7201      	strb	r1, [r0, #8]
    a0f8:	e06a      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a0fa:	9800      	ldr	r0, [sp, #0]
    a0fc:	f8d4 1008 	ldr.w	r1, [r4, #8]
    a100:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    a104:	7102      	strb	r2, [r0, #4]
    a106:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    a10a:	7141      	strb	r1, [r0, #5]
    a10c:	e060      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a10e:	68a1      	ldr	r1, [r4, #8]
    a110:	9800      	ldr	r0, [sp, #0]
    a112:	f501 718c 	add.w	r1, r1, #280	; 0x118
    a116:	f005 f872 	bl	f1fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    a11a:	68a1      	ldr	r1, [r4, #8]
    a11c:	9800      	ldr	r0, [sp, #0]
    a11e:	31e4      	adds	r1, #228	; 0xe4
    a120:	f005 f86a 	bl	f1f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    a124:	e054      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a126:	9101      	str	r1, [sp, #4]
    a128:	9102      	str	r1, [sp, #8]
    a12a:	f001 fe05 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a12e:	68a1      	ldr	r1, [r4, #8]
    a130:	4030      	ands	r0, r6
    a132:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    a136:	4001      	ands	r1, r0
    a138:	f88d 1004 	strb.w	r1, [sp, #4]
    a13c:	0a00      	lsrs	r0, r0, #8
    a13e:	f88d 0005 	strb.w	r0, [sp, #5]
    a142:	a901      	add	r1, sp, #4
    a144:	9800      	ldr	r0, [sp, #0]
    a146:	f005 f864 	bl	f212 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    a14a:	e041      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a14c:	68a0      	ldr	r0, [r4, #8]
    a14e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    a152:	9800      	ldr	r0, [sp, #0]
    a154:	f005 f86a 	bl	f22c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a158:	68a0      	ldr	r0, [r4, #8]
    a15a:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    a15e:	9800      	ldr	r0, [sp, #0]
    a160:	f005 f868 	bl	f234 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a164:	68a0      	ldr	r0, [r4, #8]
    a166:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a16a:	e000      	b.n	a16e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    a16c:	e015      	b.n	a19a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    a16e:	9800      	ldr	r0, [sp, #0]
    a170:	f005 f864 	bl	f23c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a174:	68a0      	ldr	r0, [r4, #8]
    a176:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    a17a:	9800      	ldr	r0, [sp, #0]
    a17c:	f005 f862 	bl	f244 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a180:	e026      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a182:	68a1      	ldr	r1, [r4, #8]
    a184:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    a188:	2801      	cmp	r0, #1
    a18a:	9800      	ldr	r0, [sp, #0]
    a18c:	d0b8      	beq.n	a100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
    a18e:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    a192:	7102      	strb	r2, [r0, #4]
    a194:	7849      	ldrb	r1, [r1, #1]
    a196:	e7b8      	b.n	a10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    a198:	e012      	b.n	a1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
    a19a:	9101      	str	r1, [sp, #4]
    a19c:	9102      	str	r1, [sp, #8]
    a19e:	f001 fdcb 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a1a2:	68a1      	ldr	r1, [r4, #8]
    a1a4:	4030      	ands	r0, r6
    a1a6:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    a1aa:	4001      	ands	r1, r0
    a1ac:	f88d 1004 	strb.w	r1, [sp, #4]
    a1b0:	0a00      	lsrs	r0, r0, #8
    a1b2:	f88d 0005 	strb.w	r0, [sp, #5]
    a1b6:	a901      	add	r1, sp, #4
    a1b8:	9800      	ldr	r0, [sp, #0]
    a1ba:	f005 f825 	bl	f208 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a1be:	e007      	b.n	a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    a1c0:	68a0      	ldr	r0, [r4, #8]
    a1c2:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    a1c6:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    a1ca:	9800      	ldr	r0, [sp, #0]
    a1cc:	f005 f806 	bl	f1dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    a1d0:	f7fc f918 	bl	6404 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d104      	bne.n	a1e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    a1d8:	f640 2101 	movw	r1, #2561	; 0xa01
    a1dc:	2031      	movs	r0, #49	; 0x31
    a1de:	f7fb fa73 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a1e4:	20000134 	.word	0x20000134
    a1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1ec:	4c87      	ldr	r4, [pc, #540]	; (a40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    a1ee:	4682      	mov	sl, r0
    a1f0:	4689      	mov	r9, r1
    a1f2:	68a0      	ldr	r0, [r4, #8]
    a1f4:	8800      	ldrh	r0, [r0, #0]
    a1f6:	f7fb fe97 	bl	5f28 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    a1fa:	0006      	movs	r6, r0
    a1fc:	d00a      	beq.n	a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    a1fe:	8860      	ldrh	r0, [r4, #2]
    a200:	f04f 0500 	mov.w	r5, #0
    a204:	05c0      	lsls	r0, r0, #23
    a206:	68a0      	ldr	r0, [r4, #8]
    a208:	d509      	bpl.n	a21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    a20a:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    a20e:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    a212:	e008      	b.n	a226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    a214:	f640 51a7 	movw	r1, #3495	; 0xda7
    a218:	2031      	movs	r0, #49	; 0x31
    a21a:	f7fb fa55 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a21e:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    a222:	1c49      	adds	r1, r1, #1
    a224:	8001      	strh	r1, [r0, #0]
    a226:	f001 f8f3 	bl	b410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    a22a:	f04f 0801 	mov.w	r8, #1
    a22e:	b320      	cbz	r0, a27a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    a230:	8860      	ldrh	r0, [r4, #2]
    a232:	0500      	lsls	r0, r0, #20
    a234:	d506      	bpl.n	a244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    a236:	68a0      	ldr	r0, [r4, #8]
    a238:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a23c:	b111      	cbz	r1, a244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    a23e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    a242:	e01a      	b.n	a27a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    a244:	68a0      	ldr	r0, [r4, #8]
    a246:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    a24a:	1c49      	adds	r1, r1, #1
    a24c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    a250:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    a254:	428b      	cmp	r3, r1
    a256:	d301      	bcc.n	a25c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    a258:	1a5a      	subs	r2, r3, r1
    a25a:	e000      	b.n	a25e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    a25c:	2200      	movs	r2, #0
    a25e:	88a7      	ldrh	r7, [r4, #4]
    a260:	1d7f      	adds	r7, r7, #5
    a262:	42ba      	cmp	r2, r7
    a264:	d801      	bhi.n	a26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    a266:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    a26a:	4299      	cmp	r1, r3
    a26c:	d305      	bcc.n	a27a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    a26e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    a272:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    a276:	f7fd fbb3 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a27a:	8860      	ldrh	r0, [r4, #2]
    a27c:	f04f 0702 	mov.w	r7, #2
    a280:	f410 7f40 	tst.w	r0, #768	; 0x300
    a284:	d00e      	beq.n	a2a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    a286:	68a0      	ldr	r0, [r4, #8]
    a288:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a28c:	b111      	cbz	r1, a294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
    a28e:	2903      	cmp	r1, #3
    a290:	d108      	bne.n	a2a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    a292:	e002      	b.n	a29a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
    a294:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    a298:	e001      	b.n	a29e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
    a29a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    a29e:	2101      	movs	r1, #1
    a2a0:	f7fe fd7c 	bl	8d9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a2a4:	68a0      	ldr	r0, [r4, #8]
    a2a6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a2aa:	2901      	cmp	r1, #1
    a2ac:	d104      	bne.n	a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    a2ae:	8861      	ldrh	r1, [r4, #2]
    a2b0:	0549      	lsls	r1, r1, #21
    a2b2:	d501      	bpl.n	a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    a2b4:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    a2b8:	f1ba 0f00 	cmp.w	sl, #0
    a2bc:	d176      	bne.n	a3ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    a2be:	78a1      	ldrb	r1, [r4, #2]
    a2c0:	0649      	lsls	r1, r1, #25
    a2c2:	d502      	bpl.n	a2ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    a2c4:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    a2c8:	e004      	b.n	a2d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
    a2ca:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    a2ce:	1c49      	adds	r1, r1, #1
    a2d0:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    a2d4:	4648      	mov	r0, r9
    a2d6:	f7ff fdbb 	bl	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
    a2da:	ea40 0009 	orr.w	r0, r0, r9
    a2de:	4681      	mov	r9, r0
    a2e0:	f7ff fd20 	bl	9d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    a2e4:	68a7      	ldr	r7, [r4, #8]
    a2e6:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    a2ea:	1c40      	adds	r0, r0, #1
    a2ec:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    a2f0:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    a2f4:	b128      	cbz	r0, a302 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
    a2f6:	f7fc faaf 	bl	6858 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    a2fa:	b1b0      	cbz	r0, a32a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    a2fc:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    a300:	e013      	b.n	a32a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    a302:	f7fc f927 	bl	6554 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    a306:	b108      	cbz	r0, a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
    a308:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    a30c:	f7fc f91c 	bl	6548 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    a310:	b158      	cbz	r0, a32a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    a312:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    a316:	1c40      	adds	r0, r0, #1
    a318:	b2c0      	uxtb	r0, r0
    a31a:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    a31e:	2802      	cmp	r0, #2
    a320:	d903      	bls.n	a32a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    a322:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    a326:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    a32a:	68a0      	ldr	r0, [r4, #8]
    a32c:	2301      	movs	r3, #1
    a32e:	2100      	movs	r1, #0
    a330:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a334:	3070      	adds	r0, #112	; 0x70
    a336:	f004 fca3 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a33a:	b920      	cbnz	r0, a346 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    a33c:	68a0      	ldr	r0, [r4, #8]
    a33e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    a342:	280c      	cmp	r0, #12
    a344:	d15e      	bne.n	a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    a346:	68a0      	ldr	r0, [r4, #8]
    a348:	2301      	movs	r3, #1
    a34a:	2100      	movs	r1, #0
    a34c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a350:	3070      	adds	r0, #112	; 0x70
    a352:	f004 fc95 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a356:	b350      	cbz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    a358:	68a0      	ldr	r0, [r4, #8]
    a35a:	2301      	movs	r3, #1
    a35c:	2100      	movs	r1, #0
    a35e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a362:	3070      	adds	r0, #112	; 0x70
    a364:	f004 fc8c 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a368:	b308      	cbz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    a36a:	68a0      	ldr	r0, [r4, #8]
    a36c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a370:	2902      	cmp	r1, #2
    a372:	d147      	bne.n	a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    a374:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    a378:	b9c8      	cbnz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    a37a:	4630      	mov	r0, r6
    a37c:	f003 ff5c 	bl	e238 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    a380:	b1a8      	cbz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    a382:	68a0      	ldr	r0, [r4, #8]
    a384:	3070      	adds	r0, #112	; 0x70
    a386:	f006 f823 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a38a:	b980      	cbnz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    a38c:	68a1      	ldr	r1, [r4, #8]
    a38e:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    a392:	2801      	cmp	r0, #1
    a394:	d936      	bls.n	a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    a396:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    a39a:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    a39e:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    a3a2:	1e93      	subs	r3, r2, #2
    a3a4:	4298      	cmp	r0, r3
    a3a6:	db03      	blt.n	a3b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    a3a8:	2001      	movs	r0, #1
    a3aa:	e004      	b.n	a3b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    a3ac:	e01c      	b.n	a3e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    a3ae:	e029      	b.n	a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    a3b0:	1a10      	subs	r0, r2, r0
    a3b2:	1e40      	subs	r0, r0, #1
    a3b4:	b280      	uxth	r0, r0
    a3b6:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    a3ba:	88a3      	ldrh	r3, [r4, #4]
    a3bc:	429a      	cmp	r2, r3
    a3be:	d301      	bcc.n	a3c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
    a3c0:	2201      	movs	r2, #1
    a3c2:	e002      	b.n	a3ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    a3c4:	1a9a      	subs	r2, r3, r2
    a3c6:	1c52      	adds	r2, r2, #1
    a3c8:	b292      	uxth	r2, r2
    a3ca:	4290      	cmp	r0, r2
    a3cc:	d900      	bls.n	a3d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    a3ce:	4610      	mov	r0, r2
    a3d0:	2801      	cmp	r0, #1
    a3d2:	d101      	bne.n	a3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    a3d4:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    a3d8:	68a1      	ldr	r1, [r4, #8]
    a3da:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    a3de:	4410      	add	r0, r2
    a3e0:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    a3e4:	f001 f8de 	bl	b5a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    a3e8:	78a0      	ldrb	r0, [r4, #2]
    a3ea:	464a      	mov	r2, r9
    a3ec:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a3f0:	4650      	mov	r0, sl
    a3f2:	f001 f821 	bl	b438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    a3f6:	68a0      	ldr	r0, [r4, #8]
    a3f8:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    a3fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a400:	f7fb bfea 	b.w	63d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a404:	2001      	movs	r0, #1
    a406:	68a1      	ldr	r1, [r4, #8]
    a408:	e7e4      	b.n	a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    a40a:	0000      	.short	0x0000
    a40c:	20000134 	.word	0x20000134
    a410:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a412:	4c58      	ldr	r4, [pc, #352]	; (a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
    a414:	2301      	movs	r3, #1
    a416:	2100      	movs	r1, #0
    a418:	68a0      	ldr	r0, [r4, #8]
    a41a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a41e:	3070      	adds	r0, #112	; 0x70
    a420:	f004 fc2e 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a424:	2800      	cmp	r0, #0
    a426:	d07d      	beq.n	a524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    a428:	68a0      	ldr	r0, [r4, #8]
    a42a:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    a42e:	2500      	movs	r5, #0
    a430:	b139      	cbz	r1, a442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    a432:	2100      	movs	r1, #0
    a434:	200e      	movs	r0, #14
    a436:	f000 f89f 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a43a:	68a0      	ldr	r0, [r4, #8]
    a43c:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    a440:	e095      	b.n	a56e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    a442:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a446:	b119      	cbz	r1, a450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    a448:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a44c:	0789      	lsls	r1, r1, #30
    a44e:	d016      	beq.n	a47e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    a450:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    a454:	f88d 1004 	strb.w	r1, [sp, #4]
    a458:	9901      	ldr	r1, [sp, #4]
    a45a:	9101      	str	r1, [sp, #4]
    a45c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a460:	b141      	cbz	r1, a474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    a462:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    a466:	f88d 1000 	strb.w	r1, [sp]
    a46a:	9900      	ldr	r1, [sp, #0]
    a46c:	9100      	str	r1, [sp, #0]
    a46e:	f89d 1000 	ldrb.w	r1, [sp]
    a472:	b189      	cbz	r1, a498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    a474:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a478:	2901      	cmp	r1, #1
    a47a:	d02f      	beq.n	a4dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    a47c:	e071      	b.n	a562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    a47e:	2100      	movs	r1, #0
    a480:	200c      	movs	r0, #12
    a482:	f000 f879 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a486:	68a0      	ldr	r0, [r4, #8]
    a488:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    a48c:	f041 0101 	orr.w	r1, r1, #1
    a490:	7001      	strb	r1, [r0, #0]
    a492:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    a496:	e06a      	b.n	a56e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    a498:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a49c:	2924      	cmp	r1, #36	; 0x24
    a49e:	d01b      	beq.n	a4d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    a4a0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a4a4:	2924      	cmp	r1, #36	; 0x24
    a4a6:	d017      	beq.n	a4d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    a4a8:	f05f 0300 	movs.w	r3, #0
    a4ac:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    a4b0:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    a4b4:	f005 f810 	bl	f4d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a4b8:	68a0      	ldr	r0, [r4, #8]
    a4ba:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    a4be:	2100      	movs	r1, #0
    a4c0:	2014      	movs	r0, #20
    a4c2:	f000 f859 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a4c6:	68a1      	ldr	r1, [r4, #8]
    a4c8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    a4cc:	8bc2      	ldrh	r2, [r0, #30]
    a4ce:	f821 2fee 	strh.w	r2, [r1, #238]!
    a4d2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    a4d4:	8048      	strh	r0, [r1, #2]
    a4d6:	e04a      	b.n	a56e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    a4d8:	2301      	movs	r3, #1
    a4da:	e7e7      	b.n	a4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    a4dc:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    a4e0:	f88d 1000 	strb.w	r1, [sp]
    a4e4:	9900      	ldr	r1, [sp, #0]
    a4e6:	9100      	str	r1, [sp, #0]
    a4e8:	f89d 1000 	ldrb.w	r1, [sp]
    a4ec:	bb31      	cbnz	r1, a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    a4ee:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a4f2:	2301      	movs	r3, #1
    a4f4:	210b      	movs	r1, #11
    a4f6:	3070      	adds	r0, #112	; 0x70
    a4f8:	f004 fbc2 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4fc:	b9f0      	cbnz	r0, a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    a4fe:	68a0      	ldr	r0, [r4, #8]
    a500:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    a504:	f005 ff6c 	bl	103e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a508:	4605      	mov	r5, r0
    a50a:	68a0      	ldr	r0, [r4, #8]
    a50c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    a510:	f005 ff66 	bl	103e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a514:	4606      	mov	r6, r0
    a516:	68a0      	ldr	r0, [r4, #8]
    a518:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    a51c:	4628      	mov	r0, r5
    a51e:	f005 ff6a 	bl	103f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a522:	e000      	b.n	a526 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
    a524:	e01e      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    a526:	b150      	cbz	r0, a53e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    a528:	68a0      	ldr	r0, [r4, #8]
    a52a:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    a52e:	4630      	mov	r0, r6
    a530:	f005 ff61 	bl	103f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    a534:	b118      	cbz	r0, a53e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    a536:	2000      	movs	r0, #0
    a538:	f000 f91c 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a53c:	e011      	b.n	a562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    a53e:	68a0      	ldr	r0, [r4, #8]
    a540:	2301      	movs	r3, #1
    a542:	2103      	movs	r1, #3
    a544:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a548:	3070      	adds	r0, #112	; 0x70
    a54a:	f004 fb99 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a54e:	b940      	cbnz	r0, a562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    a550:	68a0      	ldr	r0, [r4, #8]
    a552:	2301      	movs	r3, #1
    a554:	2102      	movs	r1, #2
    a556:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a55a:	3070      	adds	r0, #112	; 0x70
    a55c:	f004 fb90 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a560:	b108      	cbz	r0, a566 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    a562:	2000      	movs	r0, #0
    a564:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a566:	2100      	movs	r1, #0
    a568:	2016      	movs	r0, #22
    a56a:	f000 f805 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a56e:	2001      	movs	r0, #1
    a570:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a572:	0000      	.short	0x0000
    a574:	20000134 	.word	0x20000134
    a578:	b570      	push	{r4, r5, r6, lr}
    a57a:	4c0d      	ldr	r4, [pc, #52]	; (a5b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
    a57c:	4606      	mov	r6, r0
    a57e:	460d      	mov	r5, r1
    a580:	68a0      	ldr	r0, [r4, #8]
    a582:	3070      	adds	r0, #112	; 0x70
    a584:	f005 ff24 	bl	103d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    a588:	b120      	cbz	r0, a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
    a58a:	f640 2114 	movw	r1, #2580	; 0xa14
    a58e:	2031      	movs	r0, #49	; 0x31
    a590:	f7fb f89a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a594:	68a2      	ldr	r2, [r4, #8]
    a596:	2000      	movs	r0, #0
    a598:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    a59c:	b115      	cbz	r5, a5a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
    a59e:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    a5a2:	bd70      	pop	{r4, r5, r6, pc}
    a5a4:	f822 0faa 	strh.w	r0, [r2, #170]!
    a5a8:	2001      	movs	r0, #1
    a5aa:	7110      	strb	r0, [r2, #4]
    a5ac:	bd70      	pop	{r4, r5, r6, pc}
    a5ae:	0000      	.short	0x0000
    a5b0:	20000134 	.word	0x20000134
    a5b4:	b570      	push	{r4, r5, r6, lr}
    a5b6:	4d1a      	ldr	r5, [pc, #104]	; (a620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    a5b8:	2600      	movs	r6, #0
    a5ba:	68ac      	ldr	r4, [r5, #8]
    a5bc:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    a5c0:	2801      	cmp	r0, #1
    a5c2:	d00a      	beq.n	a5da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
    a5c4:	2802      	cmp	r0, #2
    a5c6:	d129      	bne.n	a61c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    a5c8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    a5cc:	2106      	movs	r1, #6
    a5ce:	b1a0      	cbz	r0, a5fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    a5d0:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    a5d4:	2101      	movs	r1, #1
    a5d6:	2002      	movs	r0, #2
    a5d8:	e01b      	b.n	a612 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    a5da:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    a5de:	2800      	cmp	r0, #0
    a5e0:	d11c      	bne.n	a61c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    a5e2:	2200      	movs	r2, #0
    a5e4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    a5e8:	f504 7188 	add.w	r1, r4, #272	; 0x110
    a5ec:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    a5f0:	f004 fafe 	bl	ebf0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    a5f4:	2101      	movs	r1, #1
    a5f6:	2005      	movs	r0, #5
    a5f8:	e00b      	b.n	a612 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    a5fa:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    a5fe:	0740      	lsls	r0, r0, #29
    a600:	d505      	bpl.n	a60e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    a602:	2011      	movs	r0, #17
    a604:	2203      	movs	r2, #3
    a606:	f804 2fee 	strb.w	r2, [r4, #238]!
    a60a:	7061      	strb	r1, [r4, #1]
    a60c:	e000      	b.n	a610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    a60e:	200d      	movs	r0, #13
    a610:	2101      	movs	r1, #1
    a612:	f7ff ffb1 	bl	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a616:	68a8      	ldr	r0, [r5, #8]
    a618:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    a61c:	bd70      	pop	{r4, r5, r6, pc}
    a61e:	0000      	.short	0x0000
    a620:	20000134 	.word	0x20000134
    a624:	b570      	push	{r4, r5, r6, lr}
    a626:	4a2b      	ldr	r2, [pc, #172]	; (a6d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    a628:	4603      	mov	r3, r0
    a62a:	8850      	ldrh	r0, [r2, #2]
    a62c:	4318      	orrs	r0, r3
    a62e:	8050      	strh	r0, [r2, #2]
    a630:	4610      	mov	r0, r2
    a632:	2b40      	cmp	r3, #64	; 0x40
    a634:	6880      	ldr	r0, [r0, #8]
    a636:	d00d      	beq.n	a654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
    a638:	079e      	lsls	r6, r3, #30
    a63a:	f04f 0500 	mov.w	r5, #0
    a63e:	f04f 0401 	mov.w	r4, #1
    a642:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    a646:	d50c      	bpl.n	a662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    a648:	b14e      	cbz	r6, a65e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    a64a:	f640 5114 	movw	r1, #3348	; 0xd14
    a64e:	2031      	movs	r0, #49	; 0x31
    a650:	f7fb f83a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a658:	2104      	movs	r1, #4
    a65a:	f7fe bb9f 	b.w	8d9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a65e:	60d1      	str	r1, [r2, #12]
    a660:	e01c      	b.n	a69c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
    a662:	b1c6      	cbz	r6, a696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    a664:	6111      	str	r1, [r2, #16]
    a666:	78c9      	ldrb	r1, [r1, #3]
    a668:	2906      	cmp	r1, #6
    a66a:	d002      	beq.n	a672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    a66c:	290b      	cmp	r1, #11
    a66e:	d112      	bne.n	a696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    a670:	e009      	b.n	a686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
    a672:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a676:	2917      	cmp	r1, #23
    a678:	d10d      	bne.n	a696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    a67a:	2100      	movs	r1, #0
    a67c:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    a680:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    a684:	e007      	b.n	a696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    a686:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a68a:	2911      	cmp	r1, #17
    a68c:	d103      	bne.n	a696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    a68e:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    a692:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    a696:	0799      	lsls	r1, r3, #30
    a698:	d516      	bpl.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    a69a:	68d1      	ldr	r1, [r2, #12]
    a69c:	78c9      	ldrb	r1, [r1, #3]
    a69e:	2905      	cmp	r1, #5
    a6a0:	d002      	beq.n	a6a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    a6a2:	290b      	cmp	r1, #11
    a6a4:	d110      	bne.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    a6a6:	e009      	b.n	a6bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    a6a8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a6ac:	2915      	cmp	r1, #21
    a6ae:	d10b      	bne.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    a6b0:	2100      	movs	r1, #0
    a6b2:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    a6b6:	f800 4c45 	strb.w	r4, [r0, #-69]
    a6ba:	e005      	b.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    a6bc:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a6c0:	2910      	cmp	r1, #16
    a6c2:	d101      	bne.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    a6c4:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    a6c8:	0698      	lsls	r0, r3, #26
    a6ca:	d501      	bpl.n	a6d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    a6cc:	2008      	movs	r0, #8
    a6ce:	7050      	strb	r0, [r2, #1]
    a6d0:	bd70      	pop	{r4, r5, r6, pc}
    a6d2:	0000      	.short	0x0000
    a6d4:	20000134 	.word	0x20000134
    a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6dc:	4c24      	ldr	r4, [pc, #144]	; (a770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
    a6de:	2501      	movs	r5, #1
    a6e0:	68a2      	ldr	r2, [r4, #8]
    a6e2:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    a6e6:	b108      	cbz	r0, a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    a6e8:	2701      	movs	r7, #1
    a6ea:	e000      	b.n	a6ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    a6ec:	2700      	movs	r7, #0
    a6ee:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    a6f2:	b109      	cbz	r1, a6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    a6f4:	2601      	movs	r6, #1
    a6f6:	e000      	b.n	a6fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    a6f8:	2600      	movs	r6, #0
    a6fa:	b90f      	cbnz	r7, a700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    a6fc:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    a700:	b90e      	cbnz	r6, a706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    a702:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    a706:	f102 0362 	add.w	r3, r2, #98	; 0x62
    a70a:	7218      	strb	r0, [r3, #8]
    a70c:	7259      	strb	r1, [r3, #9]
    a70e:	2001      	movs	r0, #1
    a710:	7298      	strb	r0, [r3, #10]
    a712:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    a716:	2801      	cmp	r0, #1
    a718:	d001      	beq.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    a71a:	b907      	cbnz	r7, a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    a71c:	b116      	cbz	r6, a724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
    a71e:	2000      	movs	r0, #0
    a720:	f000 f828 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a724:	68a0      	ldr	r0, [r4, #8]
    a726:	302c      	adds	r0, #44	; 0x2c
    a728:	f004 ff45 	bl	f5b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a72c:	4606      	mov	r6, r0
    a72e:	68a0      	ldr	r0, [r4, #8]
    a730:	f004 feed 	bl	f50e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a734:	b1c0      	cbz	r0, a768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    a736:	68a0      	ldr	r0, [r4, #8]
    a738:	302c      	adds	r0, #44	; 0x2c
    a73a:	f004 ff3c 	bl	f5b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a73e:	68a1      	ldr	r1, [r4, #8]
    a740:	4607      	mov	r7, r0
    a742:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    a746:	8808      	ldrh	r0, [r1, #0]
    a748:	312c      	adds	r1, #44	; 0x2c
    a74a:	f004 fea1 	bl	f490 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a74e:	42be      	cmp	r6, r7
    a750:	d20a      	bcs.n	a768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    a752:	f7f8 fb79 	bl	2e48 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a756:	4601      	mov	r1, r0
    a758:	1bb8      	subs	r0, r7, r6
    a75a:	2865      	cmp	r0, #101	; 0x65
    a75c:	d200      	bcs.n	a760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    a75e:	2065      	movs	r0, #101	; 0x65
    a760:	f7f8 fab0 	bl	2cc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a764:	b100      	cbz	r0, a768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    a766:	2500      	movs	r5, #0
    a768:	4628      	mov	r0, r5
    a76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a76e:	0000      	.short	0x0000
    a770:	20000134 	.word	0x20000134
    a774:	b510      	push	{r4, lr}
    a776:	4c10      	ldr	r4, [pc, #64]	; (a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
    a778:	68a1      	ldr	r1, [r4, #8]
    a77a:	880a      	ldrh	r2, [r1, #0]
    a77c:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    a780:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    a784:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    a788:	f005 fe2a 	bl	103e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a78c:	68a1      	ldr	r1, [r4, #8]
    a78e:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    a792:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    a796:	f005 fe23 	bl	103e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    a79a:	68a2      	ldr	r2, [r4, #8]
    a79c:	f202 2102 	addw	r1, r2, #514	; 0x202
    a7a0:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    a7a4:	2001      	movs	r0, #1
    a7a6:	7008      	strb	r0, [r1, #0]
    a7a8:	2000      	movs	r0, #0
    a7aa:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    a7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7b2:	f7fd b915 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7b6:	0000      	.short	0x0000
    a7b8:	20000134 	.word	0x20000134
    a7bc:	b510      	push	{r4, lr}
    a7be:	4c15      	ldr	r4, [pc, #84]	; (a814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
    a7c0:	2301      	movs	r3, #1
    a7c2:	2100      	movs	r1, #0
    a7c4:	68a0      	ldr	r0, [r4, #8]
    a7c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a7ca:	3070      	adds	r0, #112	; 0x70
    a7cc:	f004 fa58 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7d0:	b190      	cbz	r0, a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
    a7d2:	6920      	ldr	r0, [r4, #16]
    a7d4:	f004 fc9b 	bl	f10e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    a7d8:	68a1      	ldr	r1, [r4, #8]
    a7da:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    a7de:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    a7e2:	f005 fe16 	bl	10412 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a7e6:	b148      	cbz	r0, a7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    a7e8:	68a0      	ldr	r0, [r4, #8]
    a7ea:	2128      	movs	r1, #40	; 0x28
    a7ec:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a7f0:	3076      	adds	r0, #118	; 0x76
    a7f2:	2101      	movs	r1, #1
    a7f4:	7781      	strb	r1, [r0, #30]
    a7f6:	e00b      	b.n	a810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    a7f8:	2001      	movs	r0, #1
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	68a1      	ldr	r1, [r4, #8]
    a7fe:	6920      	ldr	r0, [r4, #16]
    a800:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    a804:	f004 fc7e 	bl	f104 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    a808:	68a1      	ldr	r1, [r4, #8]
    a80a:	200b      	movs	r0, #11
    a80c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a810:	2000      	movs	r0, #0
    a812:	bd10      	pop	{r4, pc}
    a814:	20000134 	.word	0x20000134
    a818:	b570      	push	{r4, r5, r6, lr}
    a81a:	4c29      	ldr	r4, [pc, #164]	; (a8c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
    a81c:	2301      	movs	r3, #1
    a81e:	2100      	movs	r1, #0
    a820:	68a0      	ldr	r0, [r4, #8]
    a822:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a826:	3070      	adds	r0, #112	; 0x70
    a828:	f004 fa2a 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a82c:	b1b8      	cbz	r0, a85e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
    a82e:	2100      	movs	r1, #0
    a830:	6920      	ldr	r0, [r4, #16]
    a832:	f004 fc3f 	bl	f0b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    a836:	b1a0      	cbz	r0, a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
    a838:	6920      	ldr	r0, [r4, #16]
    a83a:	68a1      	ldr	r1, [r4, #8]
    a83c:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    a840:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    a844:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    a848:	f005 fde3 	bl	10412 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a84c:	b168      	cbz	r0, a86a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
    a84e:	68a0      	ldr	r0, [r4, #8]
    a850:	2128      	movs	r1, #40	; 0x28
    a852:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a856:	3076      	adds	r0, #118	; 0x76
    a858:	2101      	movs	r1, #1
    a85a:	7781      	strb	r1, [r0, #30]
    a85c:	e02e      	b.n	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
    a85e:	2001      	movs	r0, #1
    a860:	bd70      	pop	{r4, r5, r6, pc}
    a862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a866:	f000 b8ad 	b.w	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a86a:	6920      	ldr	r0, [r4, #16]
    a86c:	f004 fc52 	bl	f114 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    a870:	f004 f9e9 	bl	ec46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a874:	4605      	mov	r5, r0
    a876:	68a0      	ldr	r0, [r4, #8]
    a878:	4629      	mov	r1, r5
    a87a:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    a87e:	6920      	ldr	r0, [r4, #16]
    a880:	7900      	ldrb	r0, [r0, #4]
    a882:	f004 fb6b 	bl	ef5c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a886:	68a1      	ldr	r1, [r4, #8]
    a888:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    a88c:	6920      	ldr	r0, [r4, #16]
    a88e:	4629      	mov	r1, r5
    a890:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a894:	f004 fb5e 	bl	ef54 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a898:	68a1      	ldr	r1, [r4, #8]
    a89a:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    a89e:	6920      	ldr	r0, [r4, #16]
    a8a0:	f004 fc3b 	bl	f11a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a8a4:	68a1      	ldr	r1, [r4, #8]
    a8a6:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    a8aa:	6920      	ldr	r0, [r4, #16]
    a8ac:	f004 fc38 	bl	f120 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a8b0:	68a1      	ldr	r1, [r4, #8]
    a8b2:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    a8b6:	200d      	movs	r0, #13
    a8b8:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a8bc:	2000      	movs	r0, #0
    a8be:	bd70      	pop	{r4, r5, r6, pc}
    a8c0:	20000134 	.word	0x20000134
    a8c4:	b538      	push	{r3, r4, r5, lr}
    a8c6:	4c29      	ldr	r4, [pc, #164]	; (a96c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
    a8c8:	2301      	movs	r3, #1
    a8ca:	2100      	movs	r1, #0
    a8cc:	68a0      	ldr	r0, [r4, #8]
    a8ce:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a8d2:	3070      	adds	r0, #112	; 0x70
    a8d4:	f004 f9d4 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8d8:	b970      	cbnz	r0, a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    a8da:	68a0      	ldr	r0, [r4, #8]
    a8dc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a8e0:	2a12      	cmp	r2, #18
    a8e2:	d009      	beq.n	a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    a8e4:	2301      	movs	r3, #1
    a8e6:	2105      	movs	r1, #5
    a8e8:	3070      	adds	r0, #112	; 0x70
    a8ea:	f004 f9c9 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8ee:	b108      	cbz	r0, a8f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
    a8f0:	2008      	movs	r0, #8
    a8f2:	bd38      	pop	{r3, r4, r5, pc}
    a8f4:	2001      	movs	r0, #1
    a8f6:	bd38      	pop	{r3, r4, r5, pc}
    a8f8:	68a0      	ldr	r0, [r4, #8]
    a8fa:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    a8fe:	b908      	cbnz	r0, a904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    a900:	f7ff f8ca 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a904:	68a1      	ldr	r1, [r4, #8]
    a906:	6920      	ldr	r0, [r4, #16]
    a908:	f501 7188 	add.w	r1, r1, #272	; 0x110
    a90c:	f004 fc17 	bl	f13e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a910:	68a1      	ldr	r1, [r4, #8]
    a912:	6920      	ldr	r0, [r4, #16]
    a914:	31e0      	adds	r1, #224	; 0xe0
    a916:	f004 fc09 	bl	f12c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a91a:	68a1      	ldr	r1, [r4, #8]
    a91c:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    a920:	f88d 0000 	strb.w	r0, [sp]
    a924:	9800      	ldr	r0, [sp, #0]
    a926:	9000      	str	r0, [sp, #0]
    a928:	f89d 0000 	ldrb.w	r0, [sp]
    a92c:	b120      	cbz	r0, a938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    a92e:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    a932:	2031      	movs	r0, #49	; 0x31
    a934:	f7fa fec8 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a938:	8808      	ldrh	r0, [r1, #0]
    a93a:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    a93e:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    a942:	6920      	ldr	r0, [r4, #16]
    a944:	f004 fbf6 	bl	f134 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a948:	68a1      	ldr	r1, [r4, #8]
    a94a:	6920      	ldr	r0, [r4, #16]
    a94c:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    a950:	f004 fbe9 	bl	f126 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a954:	68a0      	ldr	r0, [r4, #8]
    a956:	4601      	mov	r1, r0
    a958:	2201      	movs	r2, #1
    a95a:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    a95e:	2014      	movs	r0, #20
    a960:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a964:	f7fd f83c 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a968:	2000      	movs	r0, #0
    a96a:	bd38      	pop	{r3, r4, r5, pc}
    a96c:	20000134 	.word	0x20000134
    a970:	b51c      	push	{r2, r3, r4, lr}
    a972:	4c13      	ldr	r4, [pc, #76]	; (a9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
    a974:	68a0      	ldr	r0, [r4, #8]
    a976:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a97a:	07c0      	lsls	r0, r0, #31
    a97c:	d001      	beq.n	a982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
    a97e:	2001      	movs	r0, #1
    a980:	bd1c      	pop	{r2, r3, r4, pc}
    a982:	4669      	mov	r1, sp
    a984:	6920      	ldr	r0, [r4, #16]
    a986:	f004 fbe0 	bl	f14a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a98a:	f001 f9d5 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a98e:	f644 112f 	movw	r1, #18735	; 0x492f
    a992:	4008      	ands	r0, r1
    a994:	f89d 2000 	ldrb.w	r2, [sp]
    a998:	68a1      	ldr	r1, [r4, #8]
    a99a:	4002      	ands	r2, r0
    a99c:	f801 2fbc 	strb.w	r2, [r1, #188]!
    a9a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a9a4:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    a9a8:	7048      	strb	r0, [r1, #1]
    a9aa:	f7ff f875 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a9ae:	68a0      	ldr	r0, [r4, #8]
    a9b0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a9b4:	f041 0101 	orr.w	r1, r1, #1
    a9b8:	7001      	strb	r1, [r0, #0]
    a9ba:	2000      	movs	r0, #0
    a9bc:	bd1c      	pop	{r2, r3, r4, pc}
    a9be:	0000      	.short	0x0000
    a9c0:	20000134 	.word	0x20000134
    a9c4:	4a0a      	ldr	r2, [pc, #40]	; (a9f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    a9c6:	b510      	push	{r4, lr}
    a9c8:	6890      	ldr	r0, [r2, #8]
    a9ca:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a9ce:	070b      	lsls	r3, r1, #28
    a9d0:	d501      	bpl.n	a9d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
    a9d2:	2001      	movs	r0, #1
    a9d4:	bd10      	pop	{r4, pc}
    a9d6:	f041 0108 	orr.w	r1, r1, #8
    a9da:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a9de:	6911      	ldr	r1, [r2, #16]
    a9e0:	78c9      	ldrb	r1, [r1, #3]
    a9e2:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    a9e6:	f7ff f857 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a9ea:	2000      	movs	r0, #0
    a9ec:	bd10      	pop	{r4, pc}
    a9ee:	0000      	.short	0x0000
    a9f0:	20000134 	.word	0x20000134
    a9f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a9f8:	4c34      	ldr	r4, [pc, #208]	; (aacc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
    a9fa:	68a0      	ldr	r0, [r4, #8]
    a9fc:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    aa00:	f010 0f30 	tst.w	r0, #48	; 0x30
    aa04:	d002      	beq.n	aa0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    aa06:	2001      	movs	r0, #1
    aa08:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    aa0c:	6920      	ldr	r0, [r4, #16]
    aa0e:	f004 fbb7 	bl	f180 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    aa12:	b318      	cbz	r0, aa5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    aa14:	6920      	ldr	r0, [r4, #16]
    aa16:	f004 fba5 	bl	f164 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    aa1a:	4607      	mov	r7, r0
    aa1c:	6920      	ldr	r0, [r4, #16]
    aa1e:	f004 fba5 	bl	f16c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    aa22:	4606      	mov	r6, r0
    aa24:	6920      	ldr	r0, [r4, #16]
    aa26:	f004 fb9b 	bl	f160 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    aa2a:	4605      	mov	r5, r0
    aa2c:	6920      	ldr	r0, [r4, #16]
    aa2e:	f004 fb9b 	bl	f168 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    aa32:	4601      	mov	r1, r0
    aa34:	9700      	str	r7, [sp, #0]
    aa36:	68a0      	ldr	r0, [r4, #8]
    aa38:	4633      	mov	r3, r6
    aa3a:	462a      	mov	r2, r5
    aa3c:	302c      	adds	r0, #44	; 0x2c
    aa3e:	f004 fdf4 	bl	f62a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    aa42:	78a0      	ldrb	r0, [r4, #2]
    aa44:	0780      	lsls	r0, r0, #30
    aa46:	d503      	bpl.n	aa50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
    aa48:	68e0      	ldr	r0, [r4, #12]
    aa4a:	78c0      	ldrb	r0, [r0, #3]
    aa4c:	2814      	cmp	r0, #20
    aa4e:	d009      	beq.n	aa64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    aa50:	68a0      	ldr	r0, [r4, #8]
    aa52:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    aa56:	281c      	cmp	r0, #28
    aa58:	d004      	beq.n	aa64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    aa5a:	e007      	b.n	aa6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
    aa5c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    aa60:	f7ff bfb0 	b.w	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    aa64:	68a1      	ldr	r1, [r4, #8]
    aa66:	2001      	movs	r0, #1
    aa68:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    aa6c:	68a1      	ldr	r1, [r4, #8]
    aa6e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    aa72:	2801      	cmp	r0, #1
    aa74:	d011      	beq.n	aa9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    aa76:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    aa7a:	f88d 0004 	strb.w	r0, [sp, #4]
    aa7e:	9801      	ldr	r0, [sp, #4]
    aa80:	9001      	str	r0, [sp, #4]
    aa82:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aa86:	b940      	cbnz	r0, aa9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    aa88:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    aa8c:	f88d 0000 	strb.w	r0, [sp]
    aa90:	9800      	ldr	r0, [sp, #0]
    aa92:	9000      	str	r0, [sp, #0]
    aa94:	f89d 0000 	ldrb.w	r0, [sp]
    aa98:	b128      	cbz	r0, aaa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
    aa9a:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    aa9e:	f040 0010 	orr.w	r0, r0, #16
    aaa2:	7008      	strb	r0, [r1, #0]
    aaa4:	e00d      	b.n	aac2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    aaa6:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    aaaa:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    aaae:	f040 0020 	orr.w	r0, r0, #32
    aab2:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    aab6:	f831 0b2c 	ldrh.w	r0, [r1], #44
    aaba:	f004 fdbd 	bl	f638 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    aabe:	f7fc ff8f 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aac2:	f7fe ffe9 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    aac6:	2000      	movs	r0, #0
    aac8:	e79e      	b.n	aa08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    aaca:	0000      	.short	0x0000
    aacc:	20000134 	.word	0x20000134
    aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aad2:	4c1a      	ldr	r4, [pc, #104]	; (ab3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
    aad4:	2301      	movs	r3, #1
    aad6:	210a      	movs	r1, #10
    aad8:	68a0      	ldr	r0, [r4, #8]
    aada:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    aade:	3070      	adds	r0, #112	; 0x70
    aae0:	f004 f8ce 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aae4:	b338      	cbz	r0, ab36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
    aae6:	6920      	ldr	r0, [r4, #16]
    aae8:	f004 fb4a 	bl	f180 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    aaec:	b1c8      	cbz	r0, ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
    aaee:	6920      	ldr	r0, [r4, #16]
    aaf0:	f004 fb38 	bl	f164 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    aaf4:	4607      	mov	r7, r0
    aaf6:	6920      	ldr	r0, [r4, #16]
    aaf8:	f004 fb38 	bl	f16c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    aafc:	4606      	mov	r6, r0
    aafe:	6920      	ldr	r0, [r4, #16]
    ab00:	f004 fb2e 	bl	f160 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    ab04:	4605      	mov	r5, r0
    ab06:	6920      	ldr	r0, [r4, #16]
    ab08:	f004 fb2e 	bl	f168 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    ab0c:	4601      	mov	r1, r0
    ab0e:	9700      	str	r7, [sp, #0]
    ab10:	68a0      	ldr	r0, [r4, #8]
    ab12:	4633      	mov	r3, r6
    ab14:	462a      	mov	r2, r5
    ab16:	302c      	adds	r0, #44	; 0x2c
    ab18:	f004 fd87 	bl	f62a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    ab1c:	68a0      	ldr	r0, [r4, #8]
    ab1e:	f004 fcf6 	bl	f50e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    ab22:	68a1      	ldr	r1, [r4, #8]
    ab24:	2000      	movs	r0, #0
    ab26:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    ab2a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    ab2e:	f7ff f977 	bl	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    ab32:	2000      	movs	r0, #0
    ab34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab36:	2001      	movs	r0, #1
    ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab3a:	0000      	.short	0x0000
    ab3c:	20000134 	.word	0x20000134
    ab40:	b510      	push	{r4, lr}
    ab42:	4c09      	ldr	r4, [pc, #36]	; (ab68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
    ab44:	68a0      	ldr	r0, [r4, #8]
    ab46:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    ab4a:	0740      	lsls	r0, r0, #29
    ab4c:	d501      	bpl.n	ab52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
    ab4e:	2001      	movs	r0, #1
    ab50:	bd10      	pop	{r4, pc}
    ab52:	f7fe ffa1 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    ab56:	68a0      	ldr	r0, [r4, #8]
    ab58:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    ab5c:	f041 0104 	orr.w	r1, r1, #4
    ab60:	7001      	strb	r1, [r0, #0]
    ab62:	2000      	movs	r0, #0
    ab64:	bd10      	pop	{r4, pc}
    ab66:	0000      	.short	0x0000
    ab68:	20000134 	.word	0x20000134
    ab6c:	b510      	push	{r4, lr}
    ab6e:	4c09      	ldr	r4, [pc, #36]	; (ab94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
    ab70:	2301      	movs	r3, #1
    ab72:	2109      	movs	r1, #9
    ab74:	68a0      	ldr	r0, [r4, #8]
    ab76:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    ab7a:	3070      	adds	r0, #112	; 0x70
    ab7c:	f004 f880 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab80:	2800      	cmp	r0, #0
    ab82:	d006      	beq.n	ab92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    ab84:	68a1      	ldr	r1, [r4, #8]
    ab86:	2000      	movs	r0, #0
    ab88:	f801 0fa2 	strb.w	r0, [r1, #162]!
    ab8c:	7308      	strb	r0, [r1, #12]
    ab8e:	f801 0c25 	strb.w	r0, [r1, #-37]
    ab92:	bd10      	pop	{r4, pc}
    ab94:	20000134 	.word	0x20000134
    ab98:	b510      	push	{r4, lr}
    ab9a:	4c0f      	ldr	r4, [pc, #60]	; (abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
    ab9c:	2301      	movs	r3, #1
    ab9e:	2100      	movs	r1, #0
    aba0:	68a0      	ldr	r0, [r4, #8]
    aba2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    aba6:	3070      	adds	r0, #112	; 0x70
    aba8:	f004 f86a 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abac:	b138      	cbz	r0, abbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    abae:	f7fe ff73 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    abb2:	68a1      	ldr	r1, [r4, #8]
    abb4:	2010      	movs	r0, #16
    abb6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    abba:	2000      	movs	r0, #0
    abbc:	bd10      	pop	{r4, pc}
    abbe:	68a0      	ldr	r0, [r4, #8]
    abc0:	2301      	movs	r3, #1
    abc2:	2105      	movs	r1, #5
    abc4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    abc8:	3070      	adds	r0, #112	; 0x70
    abca:	f004 f859 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abce:	b108      	cbz	r0, abd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    abd0:	2008      	movs	r0, #8
    abd2:	bd10      	pop	{r4, pc}
    abd4:	2001      	movs	r0, #1
    abd6:	bd10      	pop	{r4, pc}
    abd8:	20000134 	.word	0x20000134
    abdc:	4806      	ldr	r0, [pc, #24]	; (abf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
    abde:	6880      	ldr	r0, [r0, #8]
    abe0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    abe4:	2911      	cmp	r1, #17
    abe6:	d001      	beq.n	abec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
    abe8:	2002      	movs	r0, #2
    abea:	4770      	bx	lr
    abec:	2112      	movs	r1, #18
    abee:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    abf2:	2000      	movs	r0, #0
    abf4:	4770      	bx	lr
    abf6:	0000      	.short	0x0000
    abf8:	20000134 	.word	0x20000134
    abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfe:	4c34      	ldr	r4, [pc, #208]	; (acd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    ac00:	2301      	movs	r3, #1
    ac02:	210b      	movs	r1, #11
    ac04:	68a0      	ldr	r0, [r4, #8]
    ac06:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    ac0a:	3070      	adds	r0, #112	; 0x70
    ac0c:	f004 f838 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac10:	bb78      	cbnz	r0, ac72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
    ac12:	68a0      	ldr	r0, [r4, #8]
    ac14:	2301      	movs	r3, #1
    ac16:	2100      	movs	r1, #0
    ac18:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    ac1c:	3070      	adds	r0, #112	; 0x70
    ac1e:	f004 f82f 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac22:	b320      	cbz	r0, ac6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    ac24:	68a0      	ldr	r0, [r4, #8]
    ac26:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    ac2a:	2824      	cmp	r0, #36	; 0x24
    ac2c:	d022      	beq.n	ac74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    ac2e:	6920      	ldr	r0, [r4, #16]
    ac30:	f004 fac2 	bl	f1b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    ac34:	b300      	cbz	r0, ac78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    ac36:	68a0      	ldr	r0, [r4, #8]
    ac38:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    ac3c:	f041 0104 	orr.w	r1, r1, #4
    ac40:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    ac44:	6921      	ldr	r1, [r4, #16]
    ac46:	794a      	ldrb	r2, [r1, #5]
    ac48:	f002 0207 	and.w	r2, r2, #7
    ac4c:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    ac50:	7909      	ldrb	r1, [r1, #4]
    ac52:	f001 0107 	and.w	r1, r1, #7
    ac56:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    ac5a:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    ac5e:	f88d 3000 	strb.w	r3, [sp]
    ac62:	9b00      	ldr	r3, [sp, #0]
    ac64:	9300      	str	r3, [sp, #0]
    ac66:	f89d 3000 	ldrb.w	r3, [sp]
    ac6a:	bb43      	cbnz	r3, acbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    ac6c:	e008      	b.n	ac80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    ac6e:	2001      	movs	r0, #1
    ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac72:	e7ff      	b.n	ac74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    ac74:	2020      	movs	r0, #32
    ac76:	e7fb      	b.n	ac70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    ac78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ac7c:	f7ff bea2 	b.w	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    ac80:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    ac84:	2b01      	cmp	r3, #1
    ac86:	d01a      	beq.n	acbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    ac88:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    ac8c:	2501      	movs	r5, #1
    ac8e:	785e      	ldrb	r6, [r3, #1]
    ac90:	428e      	cmp	r6, r1
    ac92:	d106      	bne.n	aca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    ac94:	7819      	ldrb	r1, [r3, #0]
    ac96:	4291      	cmp	r1, r2
    ac98:	d103      	bne.n	aca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    ac9a:	2102      	movs	r1, #2
    ac9c:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    aca0:	e00d      	b.n	acbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    aca2:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    aca6:	8802      	ldrh	r2, [r0, #0]
    aca8:	f821 2902 	strh.w	r2, [r1], #-2
    acac:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    acb0:	710a      	strb	r2, [r1, #4]
    acb2:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    acb6:	7148      	strb	r0, [r1, #5]
    acb8:	700d      	strb	r5, [r1, #0]
    acba:	f7fc fe91 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    acbe:	68a1      	ldr	r1, [r4, #8]
    acc0:	2021      	movs	r0, #33	; 0x21
    acc2:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    acc6:	f7fe fee7 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    acca:	2000      	movs	r0, #0
    accc:	e7d0      	b.n	ac70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    acce:	0000      	.short	0x0000
    acd0:	20000134 	.word	0x20000134
    acd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    acd8:	4c4e      	ldr	r4, [pc, #312]	; (ae14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    acda:	68a0      	ldr	r0, [r4, #8]
    acdc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    ace0:	2920      	cmp	r1, #32
    ace2:	d009      	beq.n	acf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
    ace4:	f05f 0700 	movs.w	r7, #0
    ace8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    acec:	2922      	cmp	r1, #34	; 0x22
    acee:	d005      	beq.n	acfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
    acf0:	b387      	cbz	r7, ad54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
    acf2:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    acf6:	e003      	b.n	ad00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    acf8:	2701      	movs	r7, #1
    acfa:	e7f5      	b.n	ace8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    acfc:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    ad00:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    ad04:	f041 0104 	orr.w	r1, r1, #4
    ad08:	7001      	strb	r1, [r0, #0]
    ad0a:	6920      	ldr	r0, [r4, #16]
    ad0c:	f7fc fd54 	bl	77b8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    ad10:	f04f 0801 	mov.w	r8, #1
    ad14:	2600      	movs	r6, #0
    ad16:	b308      	cbz	r0, ad5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    ad18:	4639      	mov	r1, r7
    ad1a:	6920      	ldr	r0, [r4, #16]
    ad1c:	f7fe ff86 	bl	9c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
    ad20:	b1e0      	cbz	r0, ad5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    ad22:	466a      	mov	r2, sp
    ad24:	6921      	ldr	r1, [r4, #16]
    ad26:	68a0      	ldr	r0, [r4, #8]
    ad28:	f004 f8ce 	bl	eec8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    ad2c:	b388      	cbz	r0, ad92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    ad2e:	6920      	ldr	r0, [r4, #16]
    ad30:	f004 fa1e 	bl	f170 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    ad34:	68a1      	ldr	r1, [r4, #8]
    ad36:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    ad3a:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    ad3e:	f005 fb68 	bl	10412 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    ad42:	b338      	cbz	r0, ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
    ad44:	68a0      	ldr	r0, [r4, #8]
    ad46:	2128      	movs	r1, #40	; 0x28
    ad48:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    ad4c:	3076      	adds	r0, #118	; 0x76
    ad4e:	f880 801e 	strb.w	r8, [r0, #30]
    ad52:	e053      	b.n	adfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    ad54:	e7ff      	b.n	ad56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    ad56:	2002      	movs	r0, #2
    ad58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ad5c:	68a0      	ldr	r0, [r4, #8]
    ad5e:	f04f 0900 	mov.w	r9, #0
    ad62:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    ad66:	2901      	cmp	r1, #1
    ad68:	d015      	beq.n	ad96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    ad6a:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    ad6e:	b1f7      	cbz	r7, adae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    ad70:	6920      	ldr	r0, [r4, #16]
    ad72:	68a1      	ldr	r1, [r4, #8]
    ad74:	78c0      	ldrb	r0, [r0, #3]
    ad76:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    ad7a:	fa08 f200 	lsl.w	r2, r8, r0
    ad7e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    ad82:	b160      	cbz	r0, ad9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
    ad84:	200a      	movs	r0, #10
    ad86:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    ad8a:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    ad8e:	b9a0      	cbnz	r0, adba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    ad90:	e008      	b.n	ada4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    ad92:	e014      	b.n	adbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    ad94:	e027      	b.n	ade6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
    ad96:	201e      	movs	r0, #30
    ad98:	f7ff fcec 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    ad9c:	e7e7      	b.n	ad6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
    ad9e:	f240 31cb 	movw	r1, #971	; 0x3cb
    ada2:	e001      	b.n	ada8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
    ada4:	f240 31d3 	movw	r1, #979	; 0x3d3
    ada8:	2031      	movs	r0, #49	; 0x31
    adaa:	f7fa fc8d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adae:	702e      	strb	r6, [r5, #0]
    adb0:	f7fe fe7e 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    adb4:	f7ff fe06 	bl	a9c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    adb8:	4681      	mov	r9, r0
    adba:	4648      	mov	r0, r9
    adbc:	e7cc      	b.n	ad58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    adbe:	68a0      	ldr	r0, [r4, #8]
    adc0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    adc4:	2901      	cmp	r1, #1
    adc6:	d009      	beq.n	addc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
    adc8:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    adcc:	68a0      	ldr	r0, [r4, #8]
    adce:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    add2:	428d      	cmp	r5, r1
    add4:	d112      	bne.n	adfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    add6:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    adda:	e00f      	b.n	adfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    addc:	2000      	movs	r0, #0
    adde:	f7ff fcc9 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    ade2:	702e      	strb	r6, [r5, #0]
    ade4:	e7f2      	b.n	adcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
    ade6:	68a0      	ldr	r0, [r4, #8]
    ade8:	f89d 1000 	ldrb.w	r1, [sp]
    adec:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    adf0:	f89d 1001 	ldrb.w	r1, [sp, #1]
    adf4:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    adf8:	2024      	movs	r0, #36	; 0x24
    adfa:	7028      	strb	r0, [r5, #0]
    adfc:	68a0      	ldr	r0, [r4, #8]
    adfe:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    ae02:	428d      	cmp	r5, r1
    ae04:	d102      	bne.n	ae0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    ae06:	f7fe fe53 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    ae0a:	e001      	b.n	ae10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    ae0c:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    ae10:	2000      	movs	r0, #0
    ae12:	e7a1      	b.n	ad58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    ae14:	20000134 	.word	0x20000134
    ae18:	b510      	push	{r4, lr}
    ae1a:	4c0a      	ldr	r4, [pc, #40]	; (ae44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    ae1c:	68a0      	ldr	r0, [r4, #8]
    ae1e:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    ae22:	f041 0104 	orr.w	r1, r1, #4
    ae26:	7001      	strb	r1, [r0, #0]
    ae28:	6920      	ldr	r0, [r4, #16]
    ae2a:	f004 f9cf 	bl	f1cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ae2e:	2816      	cmp	r0, #22
    ae30:	d001      	beq.n	ae36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    ae32:	2000      	movs	r0, #0
    ae34:	bd10      	pop	{r4, pc}
    ae36:	6920      	ldr	r0, [r4, #16]
    ae38:	f004 f9ca 	bl	f1d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ae3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae40:	f7fe be08 	b.w	9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    ae44:	20000134 	.word	0x20000134
    ae48:	4802      	ldr	r0, [pc, #8]	; (ae54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
    ae4a:	6900      	ldr	r0, [r0, #16]
    ae4c:	7900      	ldrb	r0, [r0, #4]
    ae4e:	f7fe be01 	b.w	9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    ae52:	0000      	.short	0x0000
    ae54:	20000134 	.word	0x20000134
    ae58:	b510      	push	{r4, lr}
    ae5a:	4c08      	ldr	r4, [pc, #32]	; (ae7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
    ae5c:	68a0      	ldr	r0, [r4, #8]
    ae5e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    ae62:	2817      	cmp	r0, #23
    ae64:	d001      	beq.n	ae6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
    ae66:	2002      	movs	r0, #2
    ae68:	bd10      	pop	{r4, pc}
    ae6a:	f7fe fe21 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    ae6e:	68a1      	ldr	r1, [r4, #8]
    ae70:	201b      	movs	r0, #27
    ae72:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    ae76:	2000      	movs	r0, #0
    ae78:	bd10      	pop	{r4, pc}
    ae7a:	0000      	.short	0x0000
    ae7c:	20000134 	.word	0x20000134
    ae80:	b510      	push	{r4, lr}
    ae82:	4c0b      	ldr	r4, [pc, #44]	; (aeb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    ae84:	2301      	movs	r3, #1
    ae86:	4619      	mov	r1, r3
    ae88:	68a0      	ldr	r0, [r4, #8]
    ae8a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    ae8e:	3070      	adds	r0, #112	; 0x70
    ae90:	f003 fef6 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae94:	b108      	cbz	r0, ae9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
    ae96:	2000      	movs	r0, #0
    ae98:	bd10      	pop	{r4, pc}
    ae9a:	6920      	ldr	r0, [r4, #16]
    ae9c:	f004 f96c 	bl	f178 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    aea0:	68a1      	ldr	r1, [r4, #8]
    aea2:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    aea6:	2007      	movs	r0, #7
    aea8:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    aeac:	e7f3      	b.n	ae96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
    aeae:	0000      	.short	0x0000
    aeb0:	20000134 	.word	0x20000134
    aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aeb8:	4d37      	ldr	r5, [pc, #220]	; (af98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    aeba:	2600      	movs	r6, #0
    aebc:	4628      	mov	r0, r5
    aebe:	68a9      	ldr	r1, [r5, #8]
    aec0:	6900      	ldr	r0, [r0, #16]
    aec2:	2701      	movs	r7, #1
    aec4:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    aec8:	7900      	ldrb	r0, [r0, #4]
    aeca:	2b0e      	cmp	r3, #14
    aecc:	d101      	bne.n	aed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    aece:	2812      	cmp	r0, #18
    aed0:	d006      	beq.n	aee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    aed2:	4a31      	ldr	r2, [pc, #196]	; (af98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    aed4:	2400      	movs	r4, #0
    aed6:	6892      	ldr	r2, [r2, #8]
    aed8:	32bc      	adds	r2, #188	; 0xbc
    aeda:	2b1c      	cmp	r3, #28
    aedc:	d004      	beq.n	aee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
    aede:	e005      	b.n	aeec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
    aee0:	f7ff fe44 	bl	ab6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
    aee4:	4606      	mov	r6, r0
    aee6:	e053      	b.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    aee8:	2814      	cmp	r0, #20
    aeea:	d002      	beq.n	aef2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
    aeec:	2b04      	cmp	r3, #4
    aeee:	d00b      	beq.n	af08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    aef0:	e00c      	b.n	af0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    aef2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    aef6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    aefa:	2105      	movs	r1, #5
    aefc:	4610      	mov	r0, r2
    aefe:	f005 fa19 	bl	10334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    af02:	f7fe ff8d 	bl	9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    af06:	e043      	b.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af08:	280e      	cmp	r0, #14
    af0a:	d002      	beq.n	af12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    af0c:	2b20      	cmp	r3, #32
    af0e:	d00f      	beq.n	af30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    af10:	e010      	b.n	af34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
    af12:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    af16:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    af1a:	8808      	ldrh	r0, [r1, #0]
    af1c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    af20:	201a      	movs	r0, #26
    af22:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    af26:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    af2a:	f7fc fd59 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    af2e:	e02f      	b.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af30:	2816      	cmp	r0, #22
    af32:	d006      	beq.n	af42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    af34:	2b26      	cmp	r3, #38	; 0x26
    af36:	d101      	bne.n	af3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    af38:	2816      	cmp	r0, #22
    af3a:	d002      	beq.n	af42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    af3c:	2817      	cmp	r0, #23
    af3e:	d014      	beq.n	af6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
    af40:	e026      	b.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af42:	f801 4f7d 	strb.w	r4, [r1, #125]!
    af46:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    af4a:	7848      	ldrb	r0, [r1, #1]
    af4c:	2821      	cmp	r0, #33	; 0x21
    af4e:	d01f      	beq.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af50:	2108      	movs	r1, #8
    af52:	4610      	mov	r0, r2
    af54:	f005 f9ee 	bl	10334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    af58:	68a8      	ldr	r0, [r5, #8]
    af5a:	210b      	movs	r1, #11
    af5c:	30bc      	adds	r0, #188	; 0xbc
    af5e:	f005 f9e9 	bl	10334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    af62:	201a      	movs	r0, #26
    af64:	f7ff fc06 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    af68:	e012      	b.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af6a:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    af6e:	2822      	cmp	r0, #34	; 0x22
    af70:	d10e      	bne.n	af90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    af72:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    af76:	f7fe fd9b 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    af7a:	68a8      	ldr	r0, [r5, #8]
    af7c:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    af80:	2801      	cmp	r0, #1
    af82:	d102      	bne.n	af8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
    af84:	2000      	movs	r0, #0
    af86:	f7ff fbf5 	bl	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    af8a:	68a8      	ldr	r0, [r5, #8]
    af8c:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    af90:	4630      	mov	r0, r6
    af92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af96:	0000      	.short	0x0000
    af98:	20000134 	.word	0x20000134
    af9c:	b570      	push	{r4, r5, r6, lr}
    af9e:	4c2c      	ldr	r4, [pc, #176]	; (b050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    afa0:	68a0      	ldr	r0, [r4, #8]
    afa2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    afa6:	0789      	lsls	r1, r1, #30
    afa8:	d507      	bpl.n	afba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
    afaa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    afae:	2301      	movs	r3, #1
    afb0:	2108      	movs	r1, #8
    afb2:	3070      	adds	r0, #112	; 0x70
    afb4:	f003 fe64 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afb8:	b1e8      	cbz	r0, aff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
    afba:	68a0      	ldr	r0, [r4, #8]
    afbc:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    afc0:	0780      	lsls	r0, r0, #30
    afc2:	d412      	bmi.n	afea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
    afc4:	6920      	ldr	r0, [r4, #16]
    afc6:	f004 f8d9 	bl	f17c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    afca:	68a1      	ldr	r1, [r4, #8]
    afcc:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    afd0:	6920      	ldr	r0, [r4, #16]
    afd2:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    afd6:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    afda:	8840      	ldrh	r0, [r0, #2]
    afdc:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    afe0:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    afe4:	f040 0002 	orr.w	r0, r0, #2
    afe8:	7008      	strb	r0, [r1, #0]
    afea:	68a0      	ldr	r0, [r4, #8]
    afec:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    aff0:	07c9      	lsls	r1, r1, #31
    aff2:	d002      	beq.n	affa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    aff4:	e010      	b.n	b018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
    aff6:	2001      	movs	r0, #1
    aff8:	bd70      	pop	{r4, r5, r6, pc}
    affa:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    affe:	078a      	lsls	r2, r1, #30
    b000:	d504      	bpl.n	b00c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    b002:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    b006:	2031      	movs	r0, #49	; 0x31
    b008:	f7fa fb5e 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b00c:	f041 0102 	orr.w	r1, r1, #2
    b010:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    b014:	f7fe fd40 	bl	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    b018:	68a0      	ldr	r0, [r4, #8]
    b01a:	2500      	movs	r5, #0
    b01c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    b020:	2906      	cmp	r1, #6
    b022:	d105      	bne.n	b030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
    b024:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    b028:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    b02c:	f7fc fcd8 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b030:	68a0      	ldr	r0, [r4, #8]
    b032:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    b036:	b149      	cbz	r1, b04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    b038:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    b03c:	f7fc fcd0 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b040:	68a0      	ldr	r0, [r4, #8]
    b042:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    b046:	b909      	cbnz	r1, b04c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    b048:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    b04c:	2000      	movs	r0, #0
    b04e:	bd70      	pop	{r4, r5, r6, pc}
    b050:	20000134 	.word	0x20000134
    b054:	b510      	push	{r4, lr}
    b056:	4c1f      	ldr	r4, [pc, #124]	; (b0d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
    b058:	68a3      	ldr	r3, [r4, #8]
    b05a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    b05e:	2808      	cmp	r0, #8
    b060:	d20e      	bcs.n	b080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    b062:	f100 0208 	add.w	r2, r0, #8
    b066:	f1c0 0008 	rsb	r0, r0, #8
    b06a:	b2c1      	uxtb	r1, r0
    b06c:	1898      	adds	r0, r3, r2
    b06e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    b072:	f7fa fbb5 	bl	57e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    b076:	68a1      	ldr	r1, [r4, #8]
    b078:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    b07c:	4410      	add	r0, r2
    b07e:	7008      	strb	r0, [r1, #0]
    b080:	68a3      	ldr	r3, [r4, #8]
    b082:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    b086:	3808      	subs	r0, #8
    b088:	2804      	cmp	r0, #4
    b08a:	d20c      	bcs.n	b0a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
    b08c:	1d02      	adds	r2, r0, #4
    b08e:	f1c0 0004 	rsb	r0, r0, #4
    b092:	b2c1      	uxtb	r1, r0
    b094:	1898      	adds	r0, r3, r2
    b096:	30e0      	adds	r0, #224	; 0xe0
    b098:	f7fa fba2 	bl	57e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    b09c:	68a1      	ldr	r1, [r4, #8]
    b09e:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    b0a2:	4410      	add	r0, r2
    b0a4:	7008      	strb	r0, [r1, #0]
    b0a6:	68a0      	ldr	r0, [r4, #8]
    b0a8:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    b0ac:	290c      	cmp	r1, #12
    b0ae:	d30f      	bcc.n	b0d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
    b0b0:	d005      	beq.n	b0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
    b0b2:	f240 71bf 	movw	r1, #1983	; 0x7bf
    b0b6:	f04f 0031 	mov.w	r0, #49	; 0x31
    b0ba:	f7fa fb05 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0be:	2100      	movs	r1, #0
    b0c0:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    b0c4:	2101      	movs	r1, #1
    b0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0ca:	2004      	movs	r0, #4
    b0cc:	f7ff ba54 	b.w	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    b0d0:	bd10      	pop	{r4, pc}
    b0d2:	0000      	.short	0x0000
    b0d4:	20000134 	.word	0x20000134
    b0d8:	4804      	ldr	r0, [pc, #16]	; (b0ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
    b0da:	2127      	movs	r1, #39	; 0x27
    b0dc:	6880      	ldr	r0, [r0, #8]
    b0de:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    b0e2:	2100      	movs	r1, #0
    b0e4:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    b0e8:	4770      	bx	lr
    b0ea:	0000      	.short	0x0000
    b0ec:	20000134 	.word	0x20000134
    b0f0:	4809      	ldr	r0, [pc, #36]	; (b118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
    b0f2:	b510      	push	{r4, lr}
    b0f4:	6880      	ldr	r0, [r0, #8]
    b0f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b0fa:	2914      	cmp	r1, #20
    b0fc:	d004      	beq.n	b108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    b0fe:	f240 619a 	movw	r1, #1690	; 0x69a
    b102:	2031      	movs	r0, #49	; 0x31
    b104:	f7fa fae0 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b108:	2101      	movs	r1, #1
    b10a:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    b10e:	2115      	movs	r1, #21
    b110:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    b114:	bd10      	pop	{r4, pc}
    b116:	0000      	.short	0x0000
    b118:	20000134 	.word	0x20000134
    b11c:	b510      	push	{r4, lr}
    b11e:	4c0a      	ldr	r4, [pc, #40]	; (b148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
    b120:	68a0      	ldr	r0, [r4, #8]
    b122:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    b126:	07c0      	lsls	r0, r0, #31
    b128:	d008      	beq.n	b13c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    b12a:	f7fe fcc1 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    b12e:	68a0      	ldr	r0, [r4, #8]
    b130:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    b134:	f021 0101 	bic.w	r1, r1, #1
    b138:	7001      	strb	r1, [r0, #0]
    b13a:	bd10      	pop	{r4, pc}
    b13c:	f240 6183 	movw	r1, #1667	; 0x683
    b140:	2031      	movs	r0, #49	; 0x31
    b142:	f7fa fac1 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b146:	0000      	.short	0x0000
    b148:	20000134 	.word	0x20000134
    b14c:	b510      	push	{r4, lr}
    b14e:	4c0a      	ldr	r4, [pc, #40]	; (b178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
    b150:	2301      	movs	r3, #1
    b152:	2100      	movs	r1, #0
    b154:	68a0      	ldr	r0, [r4, #8]
    b156:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b15a:	3070      	adds	r0, #112	; 0x70
    b15c:	f003 fd90 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b160:	b120      	cbz	r0, b16c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    b162:	68a1      	ldr	r1, [r4, #8]
    b164:	201c      	movs	r0, #28
    b166:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    b16a:	bd10      	pop	{r4, pc}
    b16c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    b170:	2031      	movs	r0, #49	; 0x31
    b172:	f7fa faa9 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b176:	0000      	.short	0x0000
    b178:	20000134 	.word	0x20000134
    b17c:	480a      	ldr	r0, [pc, #40]	; (b1a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
    b17e:	b510      	push	{r4, lr}
    b180:	6880      	ldr	r0, [r0, #8]
    b182:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    b186:	f3c1 1201 	ubfx	r2, r1, #4, #2
    b18a:	2a01      	cmp	r2, #1
    b18c:	d004      	beq.n	b198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    b18e:	f240 710f 	movw	r1, #1807	; 0x70f
    b192:	2031      	movs	r0, #49	; 0x31
    b194:	f7fa fa98 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b198:	f021 0110 	bic.w	r1, r1, #16
    b19c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1a4:	f7fe bc84 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    b1a8:	20000134 	.word	0x20000134
    b1ac:	b510      	push	{r4, lr}
    b1ae:	4c0a      	ldr	r4, [pc, #40]	; (b1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
    b1b0:	2301      	movs	r3, #1
    b1b2:	2100      	movs	r1, #0
    b1b4:	68a0      	ldr	r0, [r4, #8]
    b1b6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b1ba:	3070      	adds	r0, #112	; 0x70
    b1bc:	f003 fd60 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1c0:	b120      	cbz	r0, b1cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    b1c2:	68a1      	ldr	r1, [r4, #8]
    b1c4:	200e      	movs	r0, #14
    b1c6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    b1ca:	bd10      	pop	{r4, pc}
    b1cc:	f240 61fb 	movw	r1, #1787	; 0x6fb
    b1d0:	2031      	movs	r0, #49	; 0x31
    b1d2:	f7fa fa79 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1d6:	0000      	.short	0x0000
    b1d8:	20000134 	.word	0x20000134
    b1dc:	4804      	ldr	r0, [pc, #16]	; (b1f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
    b1de:	6880      	ldr	r0, [r0, #8]
    b1e0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    b1e4:	f021 0104 	bic.w	r1, r1, #4
    b1e8:	7001      	strb	r1, [r0, #0]
    b1ea:	f7fe bc61 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    b1ee:	0000      	.short	0x0000
    b1f0:	20000134 	.word	0x20000134
    b1f4:	4809      	ldr	r0, [pc, #36]	; (b21c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
    b1f6:	b510      	push	{r4, lr}
    b1f8:	6880      	ldr	r0, [r0, #8]
    b1fa:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b1fe:	2910      	cmp	r1, #16
    b200:	d004      	beq.n	b20c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    b202:	f240 6192 	movw	r1, #1682	; 0x692
    b206:	2031      	movs	r0, #49	; 0x31
    b208:	f7fa fa5e 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b20c:	2101      	movs	r1, #1
    b20e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    b212:	2111      	movs	r1, #17
    b214:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    b218:	bd10      	pop	{r4, pc}
    b21a:	0000      	.short	0x0000
    b21c:	20000134 	.word	0x20000134
    b220:	b510      	push	{r4, lr}
    b222:	4c0a      	ldr	r4, [pc, #40]	; (b24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
    b224:	2301      	movs	r3, #1
    b226:	2100      	movs	r1, #0
    b228:	68a0      	ldr	r0, [r4, #8]
    b22a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b22e:	3070      	adds	r0, #112	; 0x70
    b230:	f003 fd26 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b234:	b120      	cbz	r0, b240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    b236:	68a1      	ldr	r1, [r4, #8]
    b238:	201f      	movs	r0, #31
    b23a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    b23e:	bd10      	pop	{r4, pc}
    b240:	f240 711b 	movw	r1, #1819	; 0x71b
    b244:	2031      	movs	r0, #49	; 0x31
    b246:	f7fa fa3f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b24a:	0000      	.short	0x0000
    b24c:	20000134 	.word	0x20000134
    b250:	4808      	ldr	r0, [pc, #32]	; (b274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
    b252:	b510      	push	{r4, lr}
    b254:	6880      	ldr	r0, [r0, #8]
    b256:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b25a:	2921      	cmp	r1, #33	; 0x21
    b25c:	d005      	beq.n	b26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    b25e:	b121      	cbz	r1, b26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    b260:	f240 7122 	movw	r1, #1826	; 0x722
    b264:	2031      	movs	r0, #49	; 0x31
    b266:	f7fa fa2f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b26a:	2122      	movs	r1, #34	; 0x22
    b26c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    b270:	bd10      	pop	{r4, pc}
    b272:	0000      	.short	0x0000
    b274:	20000134 	.word	0x20000134
    b278:	4807      	ldr	r0, [pc, #28]	; (b298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
    b27a:	b510      	push	{r4, lr}
    b27c:	6880      	ldr	r0, [r0, #8]
    b27e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b282:	2915      	cmp	r1, #21
    b284:	d004      	beq.n	b290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
    b286:	f240 61a7 	movw	r1, #1703	; 0x6a7
    b28a:	2031      	movs	r0, #49	; 0x31
    b28c:	f7fa fa1c 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b290:	2119      	movs	r1, #25
    b292:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    b296:	bd10      	pop	{r4, pc}
    b298:	20000134 	.word	0x20000134
    b29c:	4807      	ldr	r0, [pc, #28]	; (b2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
    b29e:	b510      	push	{r4, lr}
    b2a0:	6880      	ldr	r0, [r0, #8]
    b2a2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b2a6:	2915      	cmp	r1, #21
    b2a8:	d004      	beq.n	b2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
    b2aa:	f240 61a1 	movw	r1, #1697	; 0x6a1
    b2ae:	2031      	movs	r0, #49	; 0x31
    b2b0:	f7fa fa0a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2b4:	2117      	movs	r1, #23
    b2b6:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    b2ba:	bd10      	pop	{r4, pc}
    b2bc:	20000134 	.word	0x20000134
    b2c0:	b570      	push	{r4, r5, r6, lr}
    b2c2:	4d1b      	ldr	r5, [pc, #108]	; (b330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
    b2c4:	68a8      	ldr	r0, [r5, #8]
    b2c6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    b2ca:	291b      	cmp	r1, #27
    b2cc:	d002      	beq.n	b2d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    b2ce:	f240 61c1 	movw	r1, #1729	; 0x6c1
    b2d2:	e007      	b.n	b2e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    b2d4:	2400      	movs	r4, #0
    b2d6:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    b2da:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    b2de:	b121      	cbz	r1, b2ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    b2e0:	f240 61c5 	movw	r1, #1733	; 0x6c5
    b2e4:	2031      	movs	r0, #49	; 0x31
    b2e6:	f7fa f9ef 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ea:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    b2ee:	b141      	cbz	r1, b302 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    b2f0:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    b2f4:	8801      	ldrh	r1, [r0, #0]
    b2f6:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b2fa:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    b2fe:	210c      	movs	r1, #12
    b300:	e008      	b.n	b314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
    b302:	8801      	ldrh	r1, [r0, #0]
    b304:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    b308:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    b30c:	2101      	movs	r1, #1
    b30e:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    b312:	210b      	movs	r1, #11
    b314:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    b318:	8800      	ldrh	r0, [r0, #0]
    b31a:	f7fa fdef 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b31e:	f003 f924 	bl	e56a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b322:	f7fc fb5d 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b326:	68a8      	ldr	r0, [r5, #8]
    b328:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    b32c:	bd70      	pop	{r4, r5, r6, pc}
    b32e:	0000      	.short	0x0000
    b330:	20000134 	.word	0x20000134
    b334:	b510      	push	{r4, lr}
    b336:	4c08      	ldr	r4, [pc, #32]	; (b358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    b338:	2301      	movs	r3, #1
    b33a:	4619      	mov	r1, r3
    b33c:	68a0      	ldr	r0, [r4, #8]
    b33e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    b342:	3070      	adds	r0, #112	; 0x70
    b344:	f003 fc9c 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b348:	2800      	cmp	r0, #0
    b34a:	d103      	bne.n	b354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    b34c:	68a1      	ldr	r1, [r4, #8]
    b34e:	2008      	movs	r0, #8
    b350:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    b354:	bd10      	pop	{r4, pc}
    b356:	0000      	.short	0x0000
    b358:	20000134 	.word	0x20000134
    b35c:	4814      	ldr	r0, [pc, #80]	; (b3b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
    b35e:	b510      	push	{r4, lr}
    b360:	68c1      	ldr	r1, [r0, #12]
    b362:	6880      	ldr	r0, [r0, #8]
    b364:	7909      	ldrb	r1, [r1, #4]
    b366:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b36a:	2a0a      	cmp	r2, #10
    b36c:	d109      	bne.n	b382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    b36e:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    b372:	428a      	cmp	r2, r1
    b374:	d105      	bne.n	b382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    b376:	2100      	movs	r1, #0
    b378:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    b37c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    b380:	bd10      	pop	{r4, pc}
    b382:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    b386:	0713      	lsls	r3, r2, #28
    b388:	d507      	bpl.n	b39a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
    b38a:	f022 0108 	bic.w	r1, r2, #8
    b38e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    b392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b396:	f7fe bb8b 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    b39a:	29ff      	cmp	r1, #255	; 0xff
    b39c:	d004      	beq.n	b3a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
    b39e:	f240 617d 	movw	r1, #1661	; 0x67d
    b3a2:	2031      	movs	r0, #49	; 0x31
    b3a4:	f7fa f990 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3ac:	f7ff be94 	b.w	b0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    b3b0:	20000134 	.word	0x20000134
    b3b4:	b510      	push	{r4, lr}
    b3b6:	4c15      	ldr	r4, [pc, #84]	; (b40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
    b3b8:	68a0      	ldr	r0, [r4, #8]
    b3ba:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    b3be:	0789      	lsls	r1, r1, #30
    b3c0:	d411      	bmi.n	b3e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
    b3c2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b3c6:	2301      	movs	r3, #1
    b3c8:	2100      	movs	r1, #0
    b3ca:	3070      	adds	r0, #112	; 0x70
    b3cc:	f003 fc58 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3d0:	b120      	cbz	r0, b3dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
    b3d2:	68a1      	ldr	r1, [r4, #8]
    b3d4:	2006      	movs	r0, #6
    b3d6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    b3da:	e009      	b.n	b3f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    b3dc:	f240 61e7 	movw	r1, #1767	; 0x6e7
    b3e0:	2031      	movs	r0, #49	; 0x31
    b3e2:	f7fa f971 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3e6:	2100      	movs	r1, #0
    b3e8:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    b3ec:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    b3f0:	68a0      	ldr	r0, [r4, #8]
    b3f2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    b3f6:	0780      	lsls	r0, r0, #30
    b3f8:	d507      	bpl.n	b40a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    b3fa:	f7fe fb59 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    b3fe:	68a0      	ldr	r0, [r4, #8]
    b400:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    b404:	f021 0102 	bic.w	r1, r1, #2
    b408:	7001      	strb	r1, [r0, #0]
    b40a:	bd10      	pop	{r4, pc}
    b40c:	20000134 	.word	0x20000134
    b410:	4808      	ldr	r0, [pc, #32]	; (b434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    b412:	b510      	push	{r4, lr}
    b414:	6880      	ldr	r0, [r0, #8]
    b416:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    b41a:	b941      	cbnz	r1, b42e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
    b41c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    b420:	2301      	movs	r3, #1
    b422:	2106      	movs	r1, #6
    b424:	3070      	adds	r0, #112	; 0x70
    b426:	f003 fc2b 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b42a:	2800      	cmp	r0, #0
    b42c:	d000      	beq.n	b430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
    b42e:	2001      	movs	r0, #1
    b430:	bd10      	pop	{r4, pc}
    b432:	0000      	.short	0x0000
    b434:	20000134 	.word	0x20000134
    b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b43a:	4c59      	ldr	r4, [pc, #356]	; (b5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
    b43c:	4606      	mov	r6, r0
    b43e:	4615      	mov	r5, r2
    b440:	68a0      	ldr	r0, [r4, #8]
    b442:	b109      	cbz	r1, b448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    b444:	2100      	movs	r1, #0
    b446:	e004      	b.n	b452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    b448:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    b44c:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    b450:	4411      	add	r1, r2
    b452:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    b456:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    b45a:	f88d 1000 	strb.w	r1, [sp]
    b45e:	9900      	ldr	r1, [sp, #0]
    b460:	9100      	str	r1, [sp, #0]
    b462:	f89d 1000 	ldrb.w	r1, [sp]
    b466:	b939      	cbnz	r1, b478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    b468:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    b46c:	2301      	movs	r3, #1
    b46e:	4619      	mov	r1, r3
    b470:	3070      	adds	r0, #112	; 0x70
    b472:	f003 fc05 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b476:	b130      	cbz	r0, b486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    b478:	68a0      	ldr	r0, [r4, #8]
    b47a:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    b47e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    b482:	4411      	add	r1, r2
    b484:	8001      	strh	r1, [r0, #0]
    b486:	68a0      	ldr	r0, [r4, #8]
    b488:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    b48c:	b132      	cbz	r2, b49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
    b48e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    b492:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    b496:	4419      	add	r1, r3
    b498:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    b49c:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	dd06      	ble.n	b4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    b4a4:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    b4a8:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    b4ac:	4439      	add	r1, r7
    b4ae:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    b4b2:	2101      	movs	r1, #1
    b4b4:	273d      	movs	r7, #61	; 0x3d
    b4b6:	b116      	cbz	r6, b4be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    b4b8:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    b4bc:	e012      	b.n	b4e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    b4be:	7824      	ldrb	r4, [r4, #0]
    b4c0:	2c02      	cmp	r4, #2
    b4c2:	d009      	beq.n	b4d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
    b4c4:	2c01      	cmp	r4, #1
    b4c6:	d011      	beq.n	b4ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    b4c8:	b33d      	cbz	r5, b51a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
    b4ca:	f100 0294 	add.w	r2, r0, #148	; 0x94
    b4ce:	7011      	strb	r1, [r2, #0]
    b4d0:	06e9      	lsls	r1, r5, #27
    b4d2:	d50e      	bpl.n	b4f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
    b4d4:	211e      	movs	r1, #30
    b4d6:	e018      	b.n	b50a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    b4d8:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    b4dc:	2a06      	cmp	r2, #6
    b4de:	d044      	beq.n	b56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    b4e0:	2216      	movs	r2, #22
    b4e2:	e042      	b.n	b56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    b4e4:	f100 0294 	add.w	r2, r0, #148	; 0x94
    b4e8:	7011      	strb	r1, [r2, #0]
    b4ea:	e047      	b.n	b57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    b4ec:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    b4f0:	e03b      	b.n	b56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    b4f2:	0729      	lsls	r1, r5, #28
    b4f4:	d502      	bpl.n	b4fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    b4f6:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    b4fa:	e03f      	b.n	b57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    b4fc:	06a9      	lsls	r1, r5, #26
    b4fe:	d501      	bpl.n	b504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
    b500:	2123      	movs	r1, #35	; 0x23
    b502:	e002      	b.n	b50a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    b504:	07a9      	lsls	r1, r5, #30
    b506:	d003      	beq.n	b510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
    b508:	212a      	movs	r1, #42	; 0x2a
    b50a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    b50e:	e035      	b.n	b57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    b510:	f640 41c1 	movw	r1, #3265	; 0xcc1
    b514:	2031      	movs	r0, #49	; 0x31
    b516:	f7fa f8d7 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b51a:	b12a      	cbz	r2, b528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
    b51c:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    b520:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    b524:	42a2      	cmp	r2, r4
    b526:	d216      	bcs.n	b556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    b528:	2b00      	cmp	r3, #0
    b52a:	dd05      	ble.n	b538 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
    b52c:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    b530:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    b534:	429a      	cmp	r2, r3
    b536:	d20e      	bcs.n	b556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    b538:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    b53c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    b540:	4293      	cmp	r3, r2
    b542:	d30a      	bcc.n	b55a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    b544:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b548:	f88d 3000 	strb.w	r3, [sp]
    b54c:	9b00      	ldr	r3, [sp, #0]
    b54e:	9300      	str	r3, [sp, #0]
    b550:	f89d 3000 	ldrb.w	r3, [sp]
    b554:	b10b      	cbz	r3, b55a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    b556:	2222      	movs	r2, #34	; 0x22
    b558:	e007      	b.n	b56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    b55a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    b55e:	b13b      	cbz	r3, b570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
    b560:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    b564:	4293      	cmp	r3, r2
    b566:	d309      	bcc.n	b57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    b568:	2208      	movs	r2, #8
    b56a:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    b56e:	e7b9      	b.n	b4e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    b570:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    b574:	2a06      	cmp	r2, #6
    b576:	d301      	bcc.n	b57c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    b578:	223e      	movs	r2, #62	; 0x3e
    b57a:	e7f6      	b.n	b56a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    b57c:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    b580:	f88d 1000 	strb.w	r1, [sp]
    b584:	9900      	ldr	r1, [sp, #0]
    b586:	9100      	str	r1, [sp, #0]
    b588:	f89d 1000 	ldrb.w	r1, [sp]
    b58c:	b119      	cbz	r1, b596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
    b58e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b592:	f004 bf0e 	b.w	103b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    b596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b59a:	2100      	movs	r1, #0
    b59c:	f7fd bbfe 	b.w	8d9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    b5a0:	20000134 	.word	0x20000134
    b5a4:	b570      	push	{r4, r5, r6, lr}
    b5a6:	4d2d      	ldr	r5, [pc, #180]	; (b65c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
    b5a8:	68a8      	ldr	r0, [r5, #8]
    b5aa:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    b5ae:	b151      	cbz	r1, b5c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    b5b0:	2901      	cmp	r1, #1
    b5b2:	d008      	beq.n	b5c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    b5b4:	2902      	cmp	r1, #2
    b5b6:	d009      	beq.n	b5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    b5b8:	2903      	cmp	r1, #3
    b5ba:	d007      	beq.n	b5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    b5bc:	f640 217f 	movw	r1, #2687	; 0xa7f
    b5c0:	2031      	movs	r0, #49	; 0x31
    b5c2:	f7fa f881 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5c6:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    b5ca:	e035      	b.n	b638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
    b5cc:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    b5d0:	2908      	cmp	r1, #8
    b5d2:	d034      	beq.n	b63e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    b5d4:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    b5d8:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    b5dc:	2400      	movs	r4, #0
    b5de:	1c8b      	adds	r3, r1, #2
    b5e0:	429a      	cmp	r2, r3
    b5e2:	d306      	bcc.n	b5f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    b5e4:	1a51      	subs	r1, r2, r1
    b5e6:	1e89      	subs	r1, r1, #2
    b5e8:	040c      	lsls	r4, r1, #16
    b5ea:	0c24      	lsrs	r4, r4, #16
    b5ec:	d001      	beq.n	b5f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    b5ee:	1e64      	subs	r4, r4, #1
    b5f0:	b2a4      	uxth	r4, r4
    b5f2:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    b5f6:	b139      	cbz	r1, b608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
    b5f8:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    b5fc:	2301      	movs	r3, #1
    b5fe:	2109      	movs	r1, #9
    b600:	3070      	adds	r0, #112	; 0x70
    b602:	f003 fb3d 	bl	ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b606:	b330      	cbz	r0, b656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
    b608:	f7ff ff02 	bl	b410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    b60c:	b168      	cbz	r0, b62a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    b60e:	68a9      	ldr	r1, [r5, #8]
    b610:	2000      	movs	r0, #0
    b612:	3198      	adds	r1, #152	; 0x98
    b614:	c906      	ldmia	r1, {r1, r2}
    b616:	1c8b      	adds	r3, r1, #2
    b618:	429a      	cmp	r2, r3
    b61a:	d303      	bcc.n	b624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    b61c:	1a50      	subs	r0, r2, r1
    b61e:	1e80      	subs	r0, r0, #2
    b620:	d000      	beq.n	b624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    b622:	1e40      	subs	r0, r0, #1
    b624:	42a0      	cmp	r0, r4
    b626:	d200      	bcs.n	b62a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    b628:	b284      	uxth	r4, r0
    b62a:	b10c      	cbz	r4, b630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b62c:	1e64      	subs	r4, r4, #1
    b62e:	b2a4      	uxth	r4, r4
    b630:	68a8      	ldr	r0, [r5, #8]
    b632:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    b636:	4421      	add	r1, r4
    b638:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    b63c:	bd70      	pop	{r4, r5, r6, pc}
    b63e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    b642:	2903      	cmp	r1, #3
    b644:	d3bf      	bcc.n	b5c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    b646:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    b64a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    b64c:	4411      	add	r1, r2
    b64e:	1c49      	adds	r1, r1, #1
    b650:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    b654:	bd70      	pop	{r4, r5, r6, pc}
    b656:	2400      	movs	r4, #0
    b658:	e7ea      	b.n	b630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    b65a:	0000      	.short	0x0000
    b65c:	20000134 	.word	0x20000134

0000b660 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b660:	4903      	ldr	r1, [pc, #12]	; (b670 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b662:	884a      	ldrh	r2, [r1, #2]
    b664:	8002      	strh	r2, [r0, #0]
    b666:	7809      	ldrb	r1, [r1, #0]
    b668:	7081      	strb	r1, [r0, #2]
    b66a:	2000      	movs	r0, #0
    b66c:	4770      	bx	lr
    b66e:	0000      	.short	0x0000
    b670:	20001240 	.word	0x20001240

0000b674 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b674:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b676:	460c      	mov	r4, r1
    b678:	4605      	mov	r5, r0
    b67a:	8800      	ldrh	r0, [r0, #0]
    b67c:	4669      	mov	r1, sp
    b67e:	f003 fad5 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b682:	0001      	movs	r1, r0
    b684:	f04f 0000 	mov.w	r0, #0
    b688:	d005      	beq.n	b696 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    b68a:	f8c4 0002 	str.w	r0, [r4, #2]
    b68e:	71a0      	strb	r0, [r4, #6]
    b690:	8020      	strh	r0, [r4, #0]
    b692:	2002      	movs	r0, #2
    b694:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b696:	9901      	ldr	r1, [sp, #4]
    b698:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    b69c:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    b6a0:	f8d1 2016 	ldr.w	r2, [r1, #22]
    b6a4:	f8c4 2002 	str.w	r2, [r4, #2]
    b6a8:	7e8a      	ldrb	r2, [r1, #26]
    b6aa:	71a2      	strb	r2, [r4, #6]
    b6ac:	882a      	ldrh	r2, [r5, #0]
    b6ae:	8022      	strh	r2, [r4, #0]
    b6b0:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    b6b4:	f88d 2008 	strb.w	r2, [sp, #8]
    b6b8:	9a02      	ldr	r2, [sp, #8]
    b6ba:	9202      	str	r2, [sp, #8]
    b6bc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    b6c0:	2a00      	cmp	r2, #0
    b6c2:	d1eb      	bne.n	b69c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    b6c4:	2000      	movs	r0, #0
    b6c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000b6c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    b6c8:	b51c      	push	{r2, r3, r4, lr}
    b6ca:	8800      	ldrh	r0, [r0, #0]
    b6cc:	4669      	mov	r1, sp
    b6ce:	f003 faad 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b6d2:	2800      	cmp	r0, #0
    b6d4:	d10b      	bne.n	b6ee <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    b6d6:	480b      	ldr	r0, [pc, #44]	; (b704 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    b6d8:	7800      	ldrb	r0, [r0, #0]
    b6da:	b188      	cbz	r0, b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    b6dc:	9801      	ldr	r0, [sp, #4]
    b6de:	f005 fd86 	bl	111ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    b6e2:	b128      	cbz	r0, b6f0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    b6e4:	9801      	ldr	r0, [sp, #4]
    b6e6:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    b6ea:	b118      	cbz	r0, b6f4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    b6ec:	203a      	movs	r0, #58	; 0x3a
    b6ee:	bd1c      	pop	{r2, r3, r4, pc}
    b6f0:	2002      	movs	r0, #2
    b6f2:	bd1c      	pop	{r2, r3, r4, pc}
    b6f4:	9901      	ldr	r1, [sp, #4]
    b6f6:	2001      	movs	r0, #1
    b6f8:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    b6fc:	2000      	movs	r0, #0
    b6fe:	bd1c      	pop	{r2, r3, r4, pc}
    b700:	2011      	movs	r0, #17
    b702:	bd1c      	pop	{r2, r3, r4, pc}
    b704:	20000210 	.word	0x20000210

0000b708 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b708:	b510      	push	{r4, lr}
    b70a:	4604      	mov	r4, r0
    b70c:	f005 fd66 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b710:	b130      	cbz	r0, b720 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b712:	4804      	ldr	r0, [pc, #16]	; (b724 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b714:	8881      	ldrh	r1, [r0, #4]
    b716:	8021      	strh	r1, [r4, #0]
    b718:	88c0      	ldrh	r0, [r0, #6]
    b71a:	8060      	strh	r0, [r4, #2]
    b71c:	2000      	movs	r0, #0
    b71e:	bd10      	pop	{r4, pc}
    b720:	2001      	movs	r0, #1
    b722:	bd10      	pop	{r4, pc}
    b724:	20000218 	.word	0x20000218

0000b728 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b728:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b72a:	4605      	mov	r5, r0
    b72c:	f000 fb04 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b730:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b734:	b310      	cbz	r0, b77c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b736:	2400      	movs	r4, #0
    b738:	a802      	add	r0, sp, #8
    b73a:	f88d 4004 	strb.w	r4, [sp, #4]
    b73e:	f88d 4008 	strb.w	r4, [sp, #8]
    b742:	9000      	str	r0, [sp, #0]
    b744:	78aa      	ldrb	r2, [r5, #2]
    b746:	7869      	ldrb	r1, [r5, #1]
    b748:	7828      	ldrb	r0, [r5, #0]
    b74a:	ab01      	add	r3, sp, #4
    b74c:	f005 fda7 	bl	1129e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    b750:	2800      	cmp	r0, #0
    b752:	d112      	bne.n	b77a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b754:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b758:	f005 fca8 	bl	110ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b75c:	b180      	cbz	r0, b780 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b75e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b762:	f005 fca3 	bl	110ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    b766:	b158      	cbz	r0, b780 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b768:	4806      	ldr	r0, [pc, #24]	; (b784 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b76a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b76e:	7381      	strb	r1, [r0, #14]
    b770:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b774:	73c1      	strb	r1, [r0, #15]
    b776:	8204      	strh	r4, [r0, #16]
    b778:	2000      	movs	r0, #0
    b77a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b77c:	2001      	movs	r0, #1
    b77e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b780:	2011      	movs	r0, #17
    b782:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b784:	20001240 	.word	0x20001240

0000b788 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    b788:	7801      	ldrb	r1, [r0, #0]
    b78a:	b171      	cbz	r1, b7aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b78c:	7841      	ldrb	r1, [r0, #1]
    b78e:	b161      	cbz	r1, b7aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b790:	8841      	ldrh	r1, [r0, #2]
    b792:	291b      	cmp	r1, #27
    b794:	d309      	bcc.n	b7aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b796:	8881      	ldrh	r1, [r0, #4]
    b798:	291b      	cmp	r1, #27
    b79a:	d306      	bcc.n	b7aa <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    b79c:	4904      	ldr	r1, [pc, #16]	; (b7b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    b79e:	6802      	ldr	r2, [r0, #0]
    b7a0:	600a      	str	r2, [r1, #0]
    b7a2:	8880      	ldrh	r0, [r0, #4]
    b7a4:	8088      	strh	r0, [r1, #4]
    b7a6:	2000      	movs	r0, #0
    b7a8:	4770      	bx	lr
    b7aa:	2012      	movs	r0, #18
    b7ac:	4770      	bx	lr
    b7ae:	0000      	.short	0x0000
    b7b0:	20001240 	.word	0x20001240

0000b7b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    b7b4:	6800      	ldr	r0, [r0, #0]
    b7b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b7ba:	4288      	cmp	r0, r1
    b7bc:	d303      	bcc.n	b7c6 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    b7be:	4903      	ldr	r1, [pc, #12]	; (b7cc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    b7c0:	6088      	str	r0, [r1, #8]
    b7c2:	2000      	movs	r0, #0
    b7c4:	4770      	bx	lr
    b7c6:	2012      	movs	r0, #18
    b7c8:	4770      	bx	lr
    b7ca:	0000      	.short	0x0000
    b7cc:	20001240 	.word	0x20001240

0000b7d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    b7d0:	4a03      	ldr	r2, [pc, #12]	; (b7e0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    b7d2:	e9d2 1200 	ldrd	r1, r2, [r2]
    b7d6:	6001      	str	r1, [r0, #0]
    b7d8:	6042      	str	r2, [r0, #4]
    b7da:	2000      	movs	r0, #0
    b7dc:	4770      	bx	lr
    b7de:	0000      	.short	0x0000
    b7e0:	0000bc14 	.word	0x0000bc14

0000b7e4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    b7e4:	b510      	push	{r4, lr}
    b7e6:	2005      	movs	r0, #5
    b7e8:	f000 fa9c 	bl	bd24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    b7ec:	f7fd fe52 	bl	9494 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    b7f0:	4902      	ldr	r1, [pc, #8]	; (b7fc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    b7f2:	4801      	ldr	r0, [pc, #4]	; (b7f8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    b7f4:	6048      	str	r0, [r1, #4]
    b7f6:	bd10      	pop	{r4, pc}
    b7f8:	0000b855 	.word	0x0000b855
    b7fc:	20000210 	.word	0x20000210

0000b800 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    b800:	b510      	push	{r4, lr}
    b802:	f003 f967 	bl	ead4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b806:	f7fb fc6f 	bl	70e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b80a:	f000 faa5 	bl	bd58 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    b80e:	f003 fe0f 	bl	f430 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    b812:	480e      	ldr	r0, [pc, #56]	; (b84c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    b814:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b818:	4b0d      	ldr	r3, [pc, #52]	; (b850 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    b81a:	8281      	strh	r1, [r0, #20]
    b81c:	2100      	movs	r1, #0
    b81e:	7581      	strb	r1, [r0, #22]
    b820:	8301      	strh	r1, [r0, #24]
    b822:	221b      	movs	r2, #27
    b824:	801a      	strh	r2, [r3, #0]
    b826:	f44f 74a4 	mov.w	r4, #328	; 0x148
    b82a:	805c      	strh	r4, [r3, #2]
    b82c:	809a      	strh	r2, [r3, #4]
    b82e:	80dc      	strh	r4, [r3, #6]
    b830:	7381      	strb	r1, [r0, #14]
    b832:	73c1      	strb	r1, [r0, #15]
    b834:	2303      	movs	r3, #3
    b836:	7003      	strb	r3, [r0, #0]
    b838:	2302      	movs	r3, #2
    b83a:	7043      	strb	r3, [r0, #1]
    b83c:	8042      	strh	r2, [r0, #2]
    b83e:	8082      	strh	r2, [r0, #4]
    b840:	f640 62a6 	movw	r2, #3750	; 0xea6
    b844:	6082      	str	r2, [r0, #8]
    b846:	7481      	strb	r1, [r0, #18]
    b848:	7301      	strb	r1, [r0, #12]
    b84a:	bd10      	pop	{r4, pc}
    b84c:	20001240 	.word	0x20001240
    b850:	20000218 	.word	0x20000218
    b854:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b858:	4692      	mov	sl, r2
    b85a:	460f      	mov	r7, r1
    b85c:	4681      	mov	r9, r0
    b85e:	f005 fcbd 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b862:	2800      	cmp	r0, #0
    b864:	d063      	beq.n	b92e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b866:	4933      	ldr	r1, [pc, #204]	; (b934 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    b868:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    b86c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    b870:	8808      	ldrh	r0, [r1, #0]
    b872:	4290      	cmp	r0, r2
    b874:	d300      	bcc.n	b878 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    b876:	4610      	mov	r0, r2
    b878:	4680      	mov	r8, r0
    b87a:	8888      	ldrh	r0, [r1, #4]
    b87c:	42b0      	cmp	r0, r6
    b87e:	d200      	bcs.n	b882 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    b880:	4606      	mov	r6, r0
    b882:	884c      	ldrh	r4, [r1, #2]
    b884:	f640 0048 	movw	r0, #2120	; 0x848
    b888:	4284      	cmp	r4, r0
    b88a:	d300      	bcc.n	b88e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    b88c:	4604      	mov	r4, r0
    b88e:	88cd      	ldrh	r5, [r1, #6]
    b890:	4285      	cmp	r5, r0
    b892:	d300      	bcc.n	b896 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b894:	4605      	mov	r5, r0
    b896:	4284      	cmp	r4, r0
    b898:	d300      	bcc.n	b89c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b89a:	4604      	mov	r4, r0
    b89c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b8a0:	2e1b      	cmp	r6, #27
    b8a2:	d001      	beq.n	b8a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    b8a4:	428d      	cmp	r5, r1
    b8a6:	d104      	bne.n	b8b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    b8a8:	f1b8 0f1b 	cmp.w	r8, #27
    b8ac:	d03f      	beq.n	b92e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b8ae:	428c      	cmp	r4, r1
    b8b0:	d03d      	beq.n	b92e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b8b2:	466a      	mov	r2, sp
    b8b4:	4651      	mov	r1, sl
    b8b6:	4648      	mov	r0, r9
    b8b8:	f005 fc1b 	bl	110f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b8bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b8c0:	4641      	mov	r1, r8
    b8c2:	4540      	cmp	r0, r8
    b8c4:	d900      	bls.n	b8c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    b8c6:	4608      	mov	r0, r1
    b8c8:	80f8      	strh	r0, [r7, #6]
    b8ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b8ce:	42a1      	cmp	r1, r4
    b8d0:	d800      	bhi.n	b8d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    b8d2:	460c      	mov	r4, r1
    b8d4:	813c      	strh	r4, [r7, #8]
    b8d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b8da:	42b1      	cmp	r1, r6
    b8dc:	d800      	bhi.n	b8e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    b8de:	460e      	mov	r6, r1
    b8e0:	807e      	strh	r6, [r7, #2]
    b8e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b8e6:	42a9      	cmp	r1, r5
    b8e8:	d900      	bls.n	b8ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    b8ea:	4629      	mov	r1, r5
    b8ec:	80b9      	strh	r1, [r7, #4]
    b8ee:	2201      	movs	r2, #1
    b8f0:	703a      	strb	r2, [r7, #0]
    b8f2:	381b      	subs	r0, #27
    b8f4:	28e0      	cmp	r0, #224	; 0xe0
    b8f6:	d902      	bls.n	b8fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    b8f8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    b8fc:	e014      	b.n	b928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b8fe:	3e1b      	subs	r6, #27
    b900:	2ee0      	cmp	r6, #224	; 0xe0
    b902:	d902      	bls.n	b90a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    b904:	f640 4182 	movw	r1, #3202	; 0xc82
    b908:	e00e      	b.n	b928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b90a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b90e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b912:	4284      	cmp	r4, r0
    b914:	d902      	bls.n	b91c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    b916:	f640 4184 	movw	r1, #3204	; 0xc84
    b91a:	e005      	b.n	b928 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b91c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b920:	4281      	cmp	r1, r0
    b922:	d904      	bls.n	b92e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b924:	f640 4186 	movw	r1, #3206	; 0xc86
    b928:	2039      	movs	r0, #57	; 0x39
    b92a:	f7f9 fecd 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b92e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b932:	0000      	.short	0x0000
    b934:	20000218 	.word	0x20000218

0000b938 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b93c:	b088      	sub	sp, #32
    b93e:	460c      	mov	r4, r1
    b940:	4606      	mov	r6, r0
    b942:	f003 ff98 	bl	f876 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b946:	b198      	cbz	r0, b970 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b948:	4630      	mov	r0, r6
    b94a:	f003 ff87 	bl	f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b94e:	b130      	cbz	r0, b95e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b950:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b954:	2012      	movs	r0, #18
    b956:	2900      	cmp	r1, #0
    b958:	d00b      	beq.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b95a:	2980      	cmp	r1, #128	; 0x80
    b95c:	d809      	bhi.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b95e:	4630      	mov	r0, r6
    b960:	f003 ff6b 	bl	f83a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b964:	b140      	cbz	r0, b978 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b966:	4630      	mov	r0, r6
    b968:	f003 fee3 	bl	f732 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b96c:	b130      	cbz	r0, b97c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b96e:	e009      	b.n	b984 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b970:	2042      	movs	r0, #66	; 0x42
    b972:	b008      	add	sp, #32
    b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b978:	200c      	movs	r0, #12
    b97a:	e7fa      	b.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b97c:	4630      	mov	r0, r6
    b97e:	f003 ff67 	bl	f850 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b982:	b3a8      	cbz	r0, b9f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    b984:	4630      	mov	r0, r6
    b986:	f004 f93e 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b98a:	2800      	cmp	r0, #0
    b98c:	d1f4      	bne.n	b978 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b98e:	4630      	mov	r0, r6
    b990:	f003 feea 	bl	f768 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b994:	2800      	cmp	r0, #0
    b996:	d1ef      	bne.n	b978 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b998:	4630      	mov	r0, r6
    b99a:	f7fc f9d7 	bl	7d4c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b99e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b9a2:	f242 7110 	movw	r1, #10000	; 0x2710
    b9a6:	fb00 f801 	mul.w	r8, r0, r1
    b9aa:	78e1      	ldrb	r1, [r4, #3]
    b9ac:	4630      	mov	r0, r6
    b9ae:	f003 ff3b 	bl	f828 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b9b2:	4630      	mov	r0, r6
    b9b4:	f003 ff4e 	bl	f854 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b9b8:	b1e8      	cbz	r0, b9f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b9ba:	2200      	movs	r2, #0
    b9bc:	4611      	mov	r1, r2
    b9be:	a801      	add	r0, sp, #4
    b9c0:	f7fa f8e0 	bl	5b84 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b9c4:	0004      	movs	r4, r0
    b9c6:	d06a      	beq.n	ba9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b9c8:	2100      	movs	r1, #0
    b9ca:	f7fb fdbb 	bl	7544 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b9ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b9d2:	8020      	strh	r0, [r4, #0]
    b9d4:	4621      	mov	r1, r4
    b9d6:	4630      	mov	r0, r6
    b9d8:	f003 ff60 	bl	f89c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b9dc:	f005 fbfe 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b9e0:	4d3a      	ldr	r5, [pc, #232]	; (bacc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    b9e2:	2800      	cmp	r0, #0
    b9e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b9e8:	d00f      	beq.n	ba0a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    b9ea:	886a      	ldrh	r2, [r5, #2]
    b9ec:	88a9      	ldrh	r1, [r5, #4]
    b9ee:	e00e      	b.n	ba0e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    b9f0:	e7ff      	b.n	b9f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    b9f2:	2012      	movs	r0, #18
    b9f4:	e7bd      	b.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b9f6:	4642      	mov	r2, r8
    b9f8:	2100      	movs	r1, #0
    b9fa:	4630      	mov	r0, r6
    b9fc:	f7fd f8f0 	bl	8be0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    ba00:	2800      	cmp	r0, #0
    ba02:	d0b6      	beq.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ba04:	f241 414c 	movw	r1, #5196	; 0x144c
    ba08:	e053      	b.n	bab2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ba0a:	221b      	movs	r2, #27
    ba0c:	4611      	mov	r1, r2
    ba0e:	84c2      	strh	r2, [r0, #38]	; 0x26
    ba10:	8501      	strh	r1, [r0, #40]	; 0x28
    ba12:	68a8      	ldr	r0, [r5, #8]
    ba14:	62e0      	str	r0, [r4, #44]	; 0x2c
    ba16:	f641 574c 	movw	r7, #7500	; 0x1d4c
    ba1a:	4630      	mov	r0, r6
    ba1c:	f003 ff22 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ba20:	b910      	cbnz	r0, ba28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    ba22:	4630      	mov	r0, r6
    ba24:	f003 ff38 	bl	f898 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    ba28:	60e7      	str	r7, [r4, #12]
    ba2a:	8821      	ldrh	r1, [r4, #0]
    ba2c:	f8ad 1008 	strh.w	r1, [sp, #8]
    ba30:	7ba9      	ldrb	r1, [r5, #14]
    ba32:	f88d 100a 	strb.w	r1, [sp, #10]
    ba36:	7be9      	ldrb	r1, [r5, #15]
    ba38:	f88d 100b 	strb.w	r1, [sp, #11]
    ba3c:	8a29      	ldrh	r1, [r5, #16]
    ba3e:	f8ad 100c 	strh.w	r1, [sp, #12]
    ba42:	a905      	add	r1, sp, #20
    ba44:	9100      	str	r1, [sp, #0]
    ba46:	2001      	movs	r0, #1
    ba48:	ab04      	add	r3, sp, #16
    ba4a:	aa02      	add	r2, sp, #8
    ba4c:	4621      	mov	r1, r4
    ba4e:	f005 fb86 	bl	1115e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    ba52:	b140      	cbz	r0, ba66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    ba54:	2100      	movs	r1, #0
    ba56:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ba5a:	f7fa f8bd 	bl	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ba5e:	b1f0      	cbz	r0, ba9e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ba60:	f241 4198 	movw	r1, #5272	; 0x1498
    ba64:	e025      	b.n	bab2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ba66:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ba6a:	f88d 0018 	strb.w	r0, [sp, #24]
    ba6e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ba72:	f88d 0019 	strb.w	r0, [sp, #25]
    ba76:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ba7a:	f8ad 001a 	strh.w	r0, [sp, #26]
    ba7e:	a906      	add	r1, sp, #24
    ba80:	4620      	mov	r0, r4
    ba82:	f003 f992 	bl	edaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ba86:	7868      	ldrb	r0, [r5, #1]
    ba88:	9000      	str	r0, [sp, #0]
    ba8a:	782b      	ldrb	r3, [r5, #0]
    ba8c:	88aa      	ldrh	r2, [r5, #4]
    ba8e:	8869      	ldrh	r1, [r5, #2]
    ba90:	8820      	ldrh	r0, [r4, #0]
    ba92:	f7fa f96d 	bl	5d70 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ba96:	b120      	cbz	r0, baa2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ba98:	f241 41a3 	movw	r1, #5283	; 0x14a3
    ba9c:	e009      	b.n	bab2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ba9e:	2009      	movs	r0, #9
    baa0:	e767      	b.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    baa2:	4642      	mov	r2, r8
    baa4:	4621      	mov	r1, r4
    baa6:	4630      	mov	r0, r6
    baa8:	f7fd f89a 	bl	8be0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    baac:	b120      	cbz	r0, bab8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    baae:	f241 41a5 	movw	r1, #5285	; 0x14a5
    bab2:	2039      	movs	r0, #57	; 0x39
    bab4:	f7f9 fe08 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bab8:	4805      	ldr	r0, [pc, #20]	; (bad0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    baba:	6843      	ldr	r3, [r0, #4]
    babc:	b123      	cbz	r3, bac8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    babe:	2200      	movs	r2, #0
    bac0:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    bac4:	4620      	mov	r0, r4
    bac6:	4798      	blx	r3
    bac8:	2000      	movs	r0, #0
    baca:	e752      	b.n	b972 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    bacc:	20001240 	.word	0x20001240
    bad0:	20000210 	.word	0x20000210
    bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bad8:	b088      	sub	sp, #32
    bada:	4604      	mov	r4, r0
    badc:	8800      	ldrh	r0, [r0, #0]
    bade:	a906      	add	r1, sp, #24
    bae0:	f003 f8a4 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    bae4:	2800      	cmp	r0, #0
    bae6:	d147      	bne.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bae8:	9807      	ldr	r0, [sp, #28]
    baea:	2700      	movs	r7, #0
    baec:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    baf0:	f88d 1008 	strb.w	r1, [sp, #8]
    baf4:	9902      	ldr	r1, [sp, #8]
    baf6:	9102      	str	r1, [sp, #8]
    baf8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    bafc:	f88d 100c 	strb.w	r1, [sp, #12]
    bb00:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    bb04:	3070      	adds	r0, #112	; 0x70
    bb06:	0689      	lsls	r1, r1, #26
    bb08:	d502      	bpl.n	bb10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    bb0a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    bb0e:	b149      	cbz	r1, bb24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    bb10:	f05f 0100 	movs.w	r1, #0
    bb14:	f88d 1004 	strb.w	r1, [sp, #4]
    bb18:	2105      	movs	r1, #5
    bb1a:	304c      	adds	r0, #76	; 0x4c
    bb1c:	f004 fc85 	bl	1042a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    bb20:	b110      	cbz	r0, bb28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    bb22:	e004      	b.n	bb2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    bb24:	2101      	movs	r1, #1
    bb26:	e7f5      	b.n	bb14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    bb28:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bb2c:	b318      	cbz	r0, bb76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    bb2e:	8921      	ldrh	r1, [r4, #8]
    bb30:	88e0      	ldrh	r0, [r4, #6]
    bb32:	f005 fad0 	bl	110d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    bb36:	2800      	cmp	r0, #0
    bb38:	d11e      	bne.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bb3a:	88a1      	ldrh	r1, [r4, #4]
    bb3c:	8860      	ldrh	r0, [r4, #2]
    bb3e:	f005 faca 	bl	110d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    bb42:	2800      	cmp	r0, #0
    bb44:	d118      	bne.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bb46:	8921      	ldrh	r1, [r4, #8]
    bb48:	88e0      	ldrh	r0, [r4, #6]
    bb4a:	f005 faba 	bl	110c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    bb4e:	2800      	cmp	r0, #0
    bb50:	d112      	bne.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bb52:	88a1      	ldrh	r1, [r4, #4]
    bb54:	8860      	ldrh	r0, [r4, #2]
    bb56:	f005 fab4 	bl	110c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    bb5a:	0006      	movs	r6, r0
    bb5c:	d10c      	bne.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bb5e:	9807      	ldr	r0, [sp, #28]
    bb60:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    bb64:	f04f 0801 	mov.w	r8, #1
    bb68:	f885 8001 	strb.w	r8, [r5, #1]
    bb6c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    bb70:	b129      	cbz	r1, bb7e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    bb72:	263a      	movs	r6, #58	; 0x3a
    bb74:	e02f      	b.n	bbd6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    bb76:	201a      	movs	r0, #26
    bb78:	b008      	add	sp, #32
    bb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb7e:	4639      	mov	r1, r7
    bb80:	aa03      	add	r2, sp, #12
    bb82:	f005 fab6 	bl	110f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    bb86:	8861      	ldrh	r1, [r4, #2]
    bb88:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    bb8c:	4281      	cmp	r1, r0
    bb8e:	d200      	bcs.n	bb92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    bb90:	4608      	mov	r0, r1
    bb92:	80e8      	strh	r0, [r5, #6]
    bb94:	88a1      	ldrh	r1, [r4, #4]
    bb96:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    bb9a:	4281      	cmp	r1, r0
    bb9c:	d200      	bcs.n	bba0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    bb9e:	4608      	mov	r0, r1
    bba0:	8128      	strh	r0, [r5, #8]
    bba2:	88e2      	ldrh	r2, [r4, #6]
    bba4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    bba8:	428a      	cmp	r2, r1
    bbaa:	d200      	bcs.n	bbae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    bbac:	4611      	mov	r1, r2
    bbae:	8069      	strh	r1, [r5, #2]
    bbb0:	8922      	ldrh	r2, [r4, #8]
    bbb2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    bbb6:	428a      	cmp	r2, r1
    bbb8:	d200      	bcs.n	bbbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    bbba:	4611      	mov	r1, r2
    bbbc:	f640 0248 	movw	r2, #2120	; 0x848
    bbc0:	80a9      	strh	r1, [r5, #4]
    bbc2:	4291      	cmp	r1, r2
    bbc4:	d300      	bcc.n	bbc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    bbc6:	4611      	mov	r1, r2
    bbc8:	80a9      	strh	r1, [r5, #4]
    bbca:	4290      	cmp	r0, r2
    bbcc:	d200      	bcs.n	bbd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    bbce:	4602      	mov	r2, r0
    bbd0:	812a      	strh	r2, [r5, #8]
    bbd2:	f885 8000 	strb.w	r8, [r5]
    bbd6:	706f      	strb	r7, [r5, #1]
    bbd8:	4630      	mov	r0, r6
    bbda:	e7cd      	b.n	bb78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    bbdc:	b510      	push	{r4, lr}
    bbde:	4604      	mov	r4, r0
    bbe0:	88c1      	ldrh	r1, [r0, #6]
    bbe2:	8880      	ldrh	r0, [r0, #4]
    bbe4:	f005 fa77 	bl	110d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    bbe8:	2800      	cmp	r0, #0
    bbea:	d10f      	bne.n	bc0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    bbec:	8861      	ldrh	r1, [r4, #2]
    bbee:	8820      	ldrh	r0, [r4, #0]
    bbf0:	f005 fa71 	bl	110d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    bbf4:	2800      	cmp	r0, #0
    bbf6:	d109      	bne.n	bc0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    bbf8:	4805      	ldr	r0, [pc, #20]	; (bc10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    bbfa:	88a1      	ldrh	r1, [r4, #4]
    bbfc:	8081      	strh	r1, [r0, #4]
    bbfe:	8821      	ldrh	r1, [r4, #0]
    bc00:	8001      	strh	r1, [r0, #0]
    bc02:	88e1      	ldrh	r1, [r4, #6]
    bc04:	80c1      	strh	r1, [r0, #6]
    bc06:	8861      	ldrh	r1, [r4, #2]
    bc08:	8041      	strh	r1, [r0, #2]
    bc0a:	2000      	movs	r0, #0
    bc0c:	bd10      	pop	{r4, pc}
    bc0e:	0000      	.short	0x0000
    bc10:	20000218 	.word	0x20000218
    bc14:	0b12fe0b 	.word	0x0b12fe0b
    bc18:	12fe0059 	.word	0x12fe0059
    bc1c:	05060708 	.word	0x05060708
    bc20:	00020304 	.word	0x00020304
    bc24:	f0f4f8fc 	.word	0xf0f4f8fc
    bc28:	0304d8ec 	.word	0x0304d8ec
    bc2c:	f4f8fc00 	.word	0xf4f8fc00
    bc30:	00d8ecf0 	.word	0x00d8ecf0

0000bc34 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    bc34:	b510      	push	{r4, lr}
    bc36:	f7fb fecd 	bl	79d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    bc3a:	4804      	ldr	r0, [pc, #16]	; (bc4c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    bc3c:	6840      	ldr	r0, [r0, #4]
    bc3e:	f005 fba6 	bl	1138e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    bc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc46:	f005 b8e2 	b.w	10e0e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    bc4a:	0000      	.short	0x0000
    bc4c:	20000220 	.word	0x20000220

0000bc50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    bc50:	b510      	push	{r4, lr}
    bc52:	4c07      	ldr	r4, [pc, #28]	; (bc70 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    bc54:	68a0      	ldr	r0, [r4, #8]
    bc56:	f005 fb9a 	bl	1138e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    bc5a:	68e0      	ldr	r0, [r4, #12]
    bc5c:	f005 fb97 	bl	1138e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    bc60:	f002 ff38 	bl	ead4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bc64:	f7fb fa40 	bl	70e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    bc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc6c:	f7ff bdc8 	b.w	b800 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    bc70:	20000220 	.word	0x20000220

0000bc74 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    bc74:	b500      	push	{lr}
    bc76:	4905      	ldr	r1, [pc, #20]	; (bc8c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    bc78:	4805      	ldr	r0, [pc, #20]	; (bc90 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    bc7a:	f005 fb69 	bl	11350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bc7e:	4804      	ldr	r0, [pc, #16]	; (bc90 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    bc80:	4904      	ldr	r1, [pc, #16]	; (bc94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    bc82:	1d00      	adds	r0, r0, #4
    bc84:	f85d eb04 	ldr.w	lr, [sp], #4
    bc88:	f005 bb62 	b.w	11350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bc8c:	20000230 	.word	0x20000230
    bc90:	20000224 	.word	0x20000224
    bc94:	20000238 	.word	0x20000238

0000bc98 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    bc98:	b500      	push	{lr}
    bc9a:	4908      	ldr	r1, [pc, #32]	; (bcbc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    bc9c:	4808      	ldr	r0, [pc, #32]	; (bcc0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bc9e:	f005 fb57 	bl	11350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bca2:	4807      	ldr	r0, [pc, #28]	; (bcc0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bca4:	4907      	ldr	r1, [pc, #28]	; (bcc4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    bca6:	1d00      	adds	r0, r0, #4
    bca8:	f005 fb52 	bl	11350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bcac:	4804      	ldr	r0, [pc, #16]	; (bcc0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    bcae:	4906      	ldr	r1, [pc, #24]	; (bcc8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    bcb0:	3008      	adds	r0, #8
    bcb2:	f85d eb04 	ldr.w	lr, [sp], #4
    bcb6:	f005 bb4b 	b.w	11350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bcba:	0000      	.short	0x0000
    bcbc:	20000248 	.word	0x20000248
    bcc0:	20000224 	.word	0x20000224
    bcc4:	20000250 	.word	0x20000250
    bcc8:	20000240 	.word	0x20000240

0000bccc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    bccc:	4801      	ldr	r0, [pc, #4]	; (bcd4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    bcce:	7800      	ldrb	r0, [r0, #0]
    bcd0:	4770      	bx	lr
    bcd2:	0000      	.short	0x0000
    bcd4:	20000220 	.word	0x20000220
    bcd8:	b510      	push	{r4, lr}
    bcda:	f7fc f9a9 	bl	8030 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    bcde:	f7fd f80f 	bl	8d00 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    bce2:	4803      	ldr	r0, [pc, #12]	; (bcf0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    bce4:	f7fc f98a 	bl	7ffc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    bce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcec:	f7fb be7e 	b.w	79ec <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    bcf0:	200016c9 	.word	0x200016c9
    bcf4:	4909      	ldr	r1, [pc, #36]	; (bd1c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    bcf6:	b510      	push	{r4, lr}
    bcf8:	2001      	movs	r0, #1
    bcfa:	7008      	strb	r0, [r1, #0]
    bcfc:	f7fc f9c8 	bl	8090 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    bd00:	f7fd fd20 	bl	9744 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    bd04:	f002 fed4 	bl	eab0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    bd08:	4805      	ldr	r0, [pc, #20]	; (bd20 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    bd0a:	f7fa fc53 	bl	65b4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    bd0e:	2000      	movs	r0, #0
    bd10:	f7f9 fea8 	bl	5a64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd18:	f7fb be70 	b.w	79fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    bd1c:	20000220 	.word	0x20000220
    bd20:	200016c9 	.word	0x200016c9

0000bd24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    bd24:	2101      	movs	r1, #1
    bd26:	4081      	lsls	r1, r0
    bd28:	4802      	ldr	r0, [pc, #8]	; (bd34 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    bd2a:	6802      	ldr	r2, [r0, #0]
    bd2c:	4311      	orrs	r1, r2
    bd2e:	6001      	str	r1, [r0, #0]
    bd30:	4770      	bx	lr
    bd32:	0000      	.short	0x0000
    bd34:	20000258 	.word	0x20000258

0000bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    bd38:	4801      	ldr	r0, [pc, #4]	; (bd40 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    bd3a:	6800      	ldr	r0, [r0, #0]
    bd3c:	4770      	bx	lr
    bd3e:	0000      	.short	0x0000
    bd40:	20000258 	.word	0x20000258

0000bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    bd44:	4803      	ldr	r0, [pc, #12]	; (bd54 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    bd46:	8800      	ldrh	r0, [r0, #0]
    bd48:	f3c0 2000 	ubfx	r0, r0, #8, #1
    bd4c:	0040      	lsls	r0, r0, #1
    bd4e:	1c40      	adds	r0, r0, #1
    bd50:	4770      	bx	lr
    bd52:	0000      	.short	0x0000
    bd54:	20000258 	.word	0x20000258

0000bd58 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    bd58:	b510      	push	{r4, lr}
    bd5a:	f7f9 f911 	bl	4f80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bd5e:	2200      	movs	r2, #0
    bd60:	4b08      	ldr	r3, [pc, #32]	; (bd84 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    bd62:	4611      	mov	r1, r2
    bd64:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    bd68:	4284      	cmp	r4, r0
    bd6a:	d303      	bcc.n	bd74 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    bd6c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    bd70:	7882      	ldrb	r2, [r0, #2]
    bd72:	e003      	b.n	bd7c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    bd74:	1c49      	adds	r1, r1, #1
    bd76:	b2c9      	uxtb	r1, r1
    bd78:	290c      	cmp	r1, #12
    bd7a:	d3f3      	bcc.n	bd64 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    bd7c:	4802      	ldr	r0, [pc, #8]	; (bd88 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    bd7e:	7002      	strb	r2, [r0, #0]
    bd80:	bd10      	pop	{r4, pc}
    bd82:	0000      	.short	0x0000
    bd84:	000113de 	.word	0x000113de
    bd88:	200002a7 	.word	0x200002a7

0000bd8c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    bd8c:	b570      	push	{r4, r5, r6, lr}
    bd8e:	4605      	mov	r5, r0
    bd90:	4616      	mov	r6, r2
    bd92:	460c      	mov	r4, r1
    bd94:	2002      	movs	r0, #2
    bd96:	f000 f9f9 	bl	c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bd9a:	4906      	ldr	r1, [pc, #24]	; (bdb4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    bd9c:	2001      	movs	r0, #1
    bd9e:	1ef6      	subs	r6, r6, #3
    bda0:	7008      	strb	r0, [r1, #0]
    bda2:	4805      	ldr	r0, [pc, #20]	; (bdb8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    bda4:	6006      	str	r6, [r0, #0]
    bda6:	4804      	ldr	r0, [pc, #16]	; (bdb8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    bda8:	3808      	subs	r0, #8
    bdaa:	6005      	str	r5, [r0, #0]
    bdac:	1f00      	subs	r0, r0, #4
    bdae:	6004      	str	r4, [r0, #0]
    bdb0:	bd70      	pop	{r4, r5, r6, pc}
    bdb2:	0000      	.short	0x0000
    bdb4:	200002a8 	.word	0x200002a8
    bdb8:	4000f510 	.word	0x4000f510

0000bdbc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    bdbc:	b510      	push	{r4, lr}
    bdbe:	4c0c      	ldr	r4, [pc, #48]	; (bdf0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    bdc0:	7820      	ldrb	r0, [r4, #0]
    bdc2:	b180      	cbz	r0, bde6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    bdc4:	490b      	ldr	r1, [pc, #44]	; (bdf4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    bdc6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    bdca:	6008      	str	r0, [r1, #0]
    bdcc:	f000 f86a 	bl	bea4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    bdd0:	2100      	movs	r1, #0
    bdd2:	b120      	cbz	r0, bdde <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    bdd4:	2001      	movs	r0, #1
    bdd6:	7060      	strb	r0, [r4, #1]
    bdd8:	4807      	ldr	r0, [pc, #28]	; (bdf8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    bdda:	6800      	ldr	r0, [r0, #0]
    bddc:	e001      	b.n	bde2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    bdde:	7061      	strb	r1, [r4, #1]
    bde0:	2010      	movs	r0, #16
    bde2:	70a0      	strb	r0, [r4, #2]
    bde4:	7021      	strb	r1, [r4, #0]
    bde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bdea:	2000      	movs	r0, #0
    bdec:	f000 b9ce 	b.w	c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bdf0:	200002a8 	.word	0x200002a8
    bdf4:	4001f508 	.word	0x4001f508
    bdf8:	4000f400 	.word	0x4000f400

0000bdfc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    bdfc:	b510      	push	{r4, lr}
    bdfe:	2002      	movs	r0, #2
    be00:	f000 f9c4 	bl	c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    be04:	4904      	ldr	r1, [pc, #16]	; (be18 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    be06:	2001      	movs	r0, #1
    be08:	7008      	strb	r0, [r1, #0]
    be0a:	f000 f859 	bl	bec0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    be0e:	4903      	ldr	r1, [pc, #12]	; (be1c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    be10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    be14:	6008      	str	r0, [r1, #0]
    be16:	bd10      	pop	{r4, pc}
    be18:	200002a8 	.word	0x200002a8
    be1c:	4001f504 	.word	0x4001f504

0000be20 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    be20:	4803      	ldr	r0, [pc, #12]	; (be30 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    be22:	2100      	movs	r1, #0
    be24:	7001      	strb	r1, [r0, #0]
    be26:	7041      	strb	r1, [r0, #1]
    be28:	2110      	movs	r1, #16
    be2a:	7081      	strb	r1, [r0, #2]
    be2c:	4770      	bx	lr
    be2e:	0000      	.short	0x0000
    be30:	200002a8 	.word	0x200002a8

0000be34 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    be34:	4807      	ldr	r0, [pc, #28]	; (be54 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    be36:	b510      	push	{r4, lr}
    be38:	7801      	ldrb	r1, [r0, #0]
    be3a:	b141      	cbz	r1, be4e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    be3c:	f000 f832 	bl	bea4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    be40:	b118      	cbz	r0, be4a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    be42:	4805      	ldr	r0, [pc, #20]	; (be58 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    be44:	6800      	ldr	r0, [r0, #0]
    be46:	b2c0      	uxtb	r0, r0
    be48:	bd10      	pop	{r4, pc}
    be4a:	2010      	movs	r0, #16
    be4c:	bd10      	pop	{r4, pc}
    be4e:	7880      	ldrb	r0, [r0, #2]
    be50:	bd10      	pop	{r4, pc}
    be52:	0000      	.short	0x0000
    be54:	200002a8 	.word	0x200002a8
    be58:	4000f400 	.word	0x4000f400

0000be5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    be5c:	4808      	ldr	r0, [pc, #32]	; (be80 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    be5e:	b510      	push	{r4, lr}
    be60:	7801      	ldrb	r1, [r0, #0]
    be62:	b159      	cbz	r1, be7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    be64:	4807      	ldr	r0, [pc, #28]	; (be84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    be66:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    be6a:	b128      	cbz	r0, be78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    be6c:	f000 f80c 	bl	be88 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    be70:	2800      	cmp	r0, #0
    be72:	d000      	beq.n	be76 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    be74:	2001      	movs	r0, #1
    be76:	bd10      	pop	{r4, pc}
    be78:	2002      	movs	r0, #2
    be7a:	bd10      	pop	{r4, pc}
    be7c:	7840      	ldrb	r0, [r0, #1]
    be7e:	bd10      	pop	{r4, pc}
    be80:	200002a8 	.word	0x200002a8
    be84:	4000f000 	.word	0x4000f000
    be88:	4805      	ldr	r0, [pc, #20]	; (bea0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    be8a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    be8e:	b111      	cbz	r1, be96 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    be90:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    be94:	b108      	cbz	r0, be9a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    be96:	2000      	movs	r0, #0
    be98:	4770      	bx	lr
    be9a:	2001      	movs	r0, #1
    be9c:	4770      	bx	lr
    be9e:	0000      	.short	0x0000
    bea0:	4000f000 	.word	0x4000f000
    bea4:	4805      	ldr	r0, [pc, #20]	; (bebc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    bea6:	b510      	push	{r4, lr}
    bea8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    beac:	b120      	cbz	r0, beb8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    beae:	f7ff ffeb 	bl	be88 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    beb2:	b108      	cbz	r0, beb8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    beb4:	2001      	movs	r0, #1
    beb6:	bd10      	pop	{r4, pc}
    beb8:	2000      	movs	r0, #0
    beba:	bd10      	pop	{r4, pc}
    bebc:	4000f000 	.word	0x4000f000
    bec0:	4804      	ldr	r0, [pc, #16]	; (bed4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    bec2:	2100      	movs	r1, #0
    bec4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bec8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    becc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    bed0:	4770      	bx	lr
    bed2:	0000      	.short	0x0000
    bed4:	4000f000 	.word	0x4000f000

0000bed8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    bed8:	4a08      	ldr	r2, [pc, #32]	; (befc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    beda:	b510      	push	{r4, lr}
    bedc:	e9c2 0102 	strd	r0, r1, [r2, #8]
    bee0:	4907      	ldr	r1, [pc, #28]	; (bf00 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    bee2:	4610      	mov	r0, r2
    bee4:	f7f9 fac0 	bl	5468 <mpsl_fem_lna_configuration_set>
    bee8:	2800      	cmp	r0, #0
    beea:	d005      	beq.n	bef8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    beec:	1c40      	adds	r0, r0, #1
    beee:	d003      	beq.n	bef8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    bef0:	217d      	movs	r1, #125	; 0x7d
    bef2:	2040      	movs	r0, #64	; 0x40
    bef4:	f7f9 fbe8 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bef8:	bd10      	pop	{r4, pc}
    befa:	0000      	.short	0x0000
    befc:	2000025c 	.word	0x2000025c
    bf00:	0000bf30 	.word	0x0000bf30

0000bf04 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    bf04:	4a08      	ldr	r2, [pc, #32]	; (bf28 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    bf06:	b510      	push	{r4, lr}
    bf08:	e9c2 0102 	strd	r0, r1, [r2, #8]
    bf0c:	4907      	ldr	r1, [pc, #28]	; (bf2c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    bf0e:	4610      	mov	r0, r2
    bf10:	f7f9 fab6 	bl	5480 <mpsl_fem_pa_configuration_set>
    bf14:	2800      	cmp	r0, #0
    bf16:	d005      	beq.n	bf24 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    bf18:	1c40      	adds	r0, r0, #1
    bf1a:	d003      	beq.n	bf24 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    bf1c:	2172      	movs	r1, #114	; 0x72
    bf1e:	2040      	movs	r0, #64	; 0x40
    bf20:	f7f9 fbd2 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf24:	bd10      	pop	{r4, pc}
    bf26:	0000      	.short	0x0000
    bf28:	2000025c 	.word	0x2000025c
    bf2c:	0000bf30 	.word	0x0000bf30
    bf30:	00000001 	.word	0x00000001
    bf34:	40001110 	.word	0x40001110
	...

0000bf48 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    bf48:	4a07      	ldr	r2, [pc, #28]	; (bf68 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    bf4a:	b510      	push	{r4, lr}
    bf4c:	7853      	ldrb	r3, [r2, #1]
    bf4e:	b133      	cbz	r3, bf5e <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    bf50:	4b06      	ldr	r3, [pc, #24]	; (bf6c <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    bf52:	6019      	str	r1, [r3, #0]
    bf54:	1d19      	adds	r1, r3, #4
    bf56:	6008      	str	r0, [r1, #0]
    bf58:	2001      	movs	r0, #1
    bf5a:	7090      	strb	r0, [r2, #2]
    bf5c:	bd10      	pop	{r4, pc}
    bf5e:	21ba      	movs	r1, #186	; 0xba
    bf60:	203c      	movs	r0, #60	; 0x3c
    bf62:	f7f9 fbb1 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf66:	0000      	.short	0x0000
    bf68:	200002ab 	.word	0x200002ab
    bf6c:	4000f50c 	.word	0x4000f50c

0000bf70 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    bf70:	4809      	ldr	r0, [pc, #36]	; (bf98 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    bf72:	b510      	push	{r4, lr}
    bf74:	7801      	ldrb	r1, [r0, #0]
    bf76:	b151      	cbz	r1, bf8e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    bf78:	7880      	ldrb	r0, [r0, #2]
    bf7a:	b140      	cbz	r0, bf8e <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    bf7c:	4907      	ldr	r1, [pc, #28]	; (bf9c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    bf7e:	2000      	movs	r0, #0
    bf80:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    bf84:	4906      	ldr	r1, [pc, #24]	; (bfa0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    bf86:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    bf8a:	6008      	str	r0, [r1, #0]
    bf8c:	bd10      	pop	{r4, pc}
    bf8e:	21e1      	movs	r1, #225	; 0xe1
    bf90:	203c      	movs	r0, #60	; 0x3c
    bf92:	f7f9 fb99 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf96:	0000      	.short	0x0000
    bf98:	200002ab 	.word	0x200002ab
    bf9c:	4000f000 	.word	0x4000f000
    bfa0:	4001f504 	.word	0x4001f504

0000bfa4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    bfa4:	b570      	push	{r4, r5, r6, lr}
    bfa6:	4c0b      	ldr	r4, [pc, #44]	; (bfd4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    bfa8:	2500      	movs	r5, #0
    bfaa:	7820      	ldrb	r0, [r4, #0]
    bfac:	b158      	cbz	r0, bfc6 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    bfae:	f000 f8e5 	bl	c17c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    bfb2:	4809      	ldr	r0, [pc, #36]	; (bfd8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    bfb4:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    bfb8:	b118      	cbz	r0, bfc2 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    bfba:	4808      	ldr	r0, [pc, #32]	; (bfdc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    bfbc:	6800      	ldr	r0, [r0, #0]
    bfbe:	70e0      	strb	r0, [r4, #3]
    bfc0:	e000      	b.n	bfc4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    bfc2:	70e5      	strb	r5, [r4, #3]
    bfc4:	7025      	strb	r5, [r4, #0]
    bfc6:	2000      	movs	r0, #0
    bfc8:	f000 f8e0 	bl	c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    bfcc:	7065      	strb	r5, [r4, #1]
    bfce:	70a5      	strb	r5, [r4, #2]
    bfd0:	bd70      	pop	{r4, r5, r6, pc}
    bfd2:	0000      	.short	0x0000
    bfd4:	200002ab 	.word	0x200002ab
    bfd8:	4000f000 	.word	0x4000f000
    bfdc:	4000f400 	.word	0x4000f400

0000bfe0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    bfe0:	480d      	ldr	r0, [pc, #52]	; (c018 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    bfe2:	b510      	push	{r4, lr}
    bfe4:	7801      	ldrb	r1, [r0, #0]
    bfe6:	b191      	cbz	r1, c00e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    bfe8:	7880      	ldrb	r0, [r0, #2]
    bfea:	b180      	cbz	r0, c00e <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    bfec:	490b      	ldr	r1, [pc, #44]	; (c01c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    bfee:	2000      	movs	r0, #0
    bff0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    bff4:	4a0a      	ldr	r2, [pc, #40]	; (c020 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    bff6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    bffa:	6010      	str	r0, [r2, #0]
    bffc:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    c000:	2a01      	cmp	r2, #1
    c002:	d103      	bne.n	c00c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    c004:	604a      	str	r2, [r1, #4]
    c006:	4906      	ldr	r1, [pc, #24]	; (c020 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c008:	1d09      	adds	r1, r1, #4
    c00a:	6008      	str	r0, [r1, #0]
    c00c:	bd10      	pop	{r4, pc}
    c00e:	21d1      	movs	r1, #209	; 0xd1
    c010:	203c      	movs	r0, #60	; 0x3c
    c012:	f7f9 fb59 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c016:	0000      	.short	0x0000
    c018:	200002ab 	.word	0x200002ab
    c01c:	4000f000 	.word	0x4000f000
    c020:	4001f504 	.word	0x4001f504

0000c024 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    c024:	4803      	ldr	r0, [pc, #12]	; (c034 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    c026:	2100      	movs	r1, #0
    c028:	7001      	strb	r1, [r0, #0]
    c02a:	7041      	strb	r1, [r0, #1]
    c02c:	7081      	strb	r1, [r0, #2]
    c02e:	70c1      	strb	r1, [r0, #3]
    c030:	4770      	bx	lr
    c032:	0000      	.short	0x0000
    c034:	200002ab 	.word	0x200002ab

0000c038 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    c038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c03c:	4605      	mov	r5, r0
    c03e:	461c      	mov	r4, r3
    c040:	4690      	mov	r8, r2
    c042:	460f      	mov	r7, r1
    c044:	2001      	movs	r0, #1
    c046:	f000 f8a1 	bl	c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c04a:	4e12      	ldr	r6, [pc, #72]	; (c094 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    c04c:	4812      	ldr	r0, [pc, #72]	; (c098 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c04e:	7134      	strb	r4, [r6, #4]
    c050:	6007      	str	r7, [r0, #0]
    c052:	4911      	ldr	r1, [pc, #68]	; (c098 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c054:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    c058:	1f09      	subs	r1, r1, #4
    c05a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    c05e:	6008      	str	r0, [r1, #0]
    c060:	f001 fb4f 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c064:	b938      	cbnz	r0, c076 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    c066:	480c      	ldr	r0, [pc, #48]	; (c098 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c068:	3010      	adds	r0, #16
    c06a:	6801      	ldr	r1, [r0, #0]
    c06c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    c070:	ea41 0108 	orr.w	r1, r1, r8
    c074:	6001      	str	r1, [r0, #0]
    c076:	f000 f881 	bl	c17c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c07a:	b93d      	cbnz	r5, c08c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    c07c:	4808      	ldr	r0, [pc, #32]	; (c0a0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    c07e:	4a07      	ldr	r2, [pc, #28]	; (c09c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c080:	4906      	ldr	r1, [pc, #24]	; (c09c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c082:	3afc      	subs	r2, #252	; 0xfc
    c084:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c088:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    c08c:	2001      	movs	r0, #1
    c08e:	7070      	strb	r0, [r6, #1]
    c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c094:	200002ab 	.word	0x200002ab
    c098:	4000f508 	.word	0x4000f508
    c09c:	4000f100 	.word	0x4000f100
    c0a0:	4001f088 	.word	0x4001f088

0000c0a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    c0a4:	4808      	ldr	r0, [pc, #32]	; (c0c8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    c0a6:	b510      	push	{r4, lr}
    c0a8:	7841      	ldrb	r1, [r0, #1]
    c0aa:	b149      	cbz	r1, c0c0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    c0ac:	2101      	movs	r1, #1
    c0ae:	7001      	strb	r1, [r0, #0]
    c0b0:	4806      	ldr	r0, [pc, #24]	; (c0cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    c0b2:	2200      	movs	r2, #0
    c0b4:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    c0b8:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    c0bc:	6001      	str	r1, [r0, #0]
    c0be:	bd10      	pop	{r4, pc}
    c0c0:	21c5      	movs	r1, #197	; 0xc5
    c0c2:	203c      	movs	r0, #60	; 0x3c
    c0c4:	f7f9 fb00 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0c8:	200002ab 	.word	0x200002ab
    c0cc:	4000f000 	.word	0x4000f000

0000c0d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    c0d0:	4806      	ldr	r0, [pc, #24]	; (c0ec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    c0d2:	7801      	ldrb	r1, [r0, #0]
    c0d4:	b141      	cbz	r1, c0e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    c0d6:	4806      	ldr	r0, [pc, #24]	; (c0f0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    c0d8:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c0dc:	2800      	cmp	r0, #0
    c0de:	d002      	beq.n	c0e6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    c0e0:	4804      	ldr	r0, [pc, #16]	; (c0f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    c0e2:	6800      	ldr	r0, [r0, #0]
    c0e4:	b2c0      	uxtb	r0, r0
    c0e6:	4770      	bx	lr
    c0e8:	78c0      	ldrb	r0, [r0, #3]
    c0ea:	4770      	bx	lr
    c0ec:	200002ab 	.word	0x200002ab
    c0f0:	4000f000 	.word	0x4000f000
    c0f4:	4000f400 	.word	0x4000f400

0000c0f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    c0f8:	4901      	ldr	r1, [pc, #4]	; (c100 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    c0fa:	2001      	movs	r0, #1
    c0fc:	6088      	str	r0, [r1, #8]
    c0fe:	4770      	bx	lr
    c100:	4000f000 	.word	0x4000f000

0000c104 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c108:	2800      	cmp	r0, #0
    c10a:	d02e      	beq.n	c16a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c10c:	4818      	ldr	r0, [pc, #96]	; (c170 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    c10e:	7800      	ldrb	r0, [r0, #0]
    c110:	b1b0      	cbz	r0, c140 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    c112:	4d18      	ldr	r5, [pc, #96]	; (c174 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    c114:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c118:	2800      	cmp	r0, #0
    c11a:	d126      	bne.n	c16a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c11c:	2702      	movs	r7, #2
    c11e:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    c122:	4c15      	ldr	r4, [pc, #84]	; (c178 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    c124:	6820      	ldr	r0, [r4, #0]
    c126:	43c0      	mvns	r0, r0
    c128:	f340 1600 	sbfx	r6, r0, #4, #1
    c12c:	6820      	ldr	r0, [r4, #0]
    c12e:	f040 0010 	orr.w	r0, r0, #16
    c132:	6020      	str	r0, [r4, #0]
    c134:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    c138:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    c13c:	1c76      	adds	r6, r6, #1
    c13e:	e009      	b.n	c154 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    c140:	f240 1153 	movw	r1, #339	; 0x153
    c144:	203c      	movs	r0, #60	; 0x3c
    c146:	f7f9 fabf 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c14a:	bf00      	nop
    c14c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    c150:	f7f9 f934 	bl	53bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c154:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c158:	2800      	cmp	r0, #0
    c15a:	d0f7      	beq.n	c14c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    c15c:	b91e      	cbnz	r6, c166 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    c15e:	6820      	ldr	r0, [r4, #0]
    c160:	f020 0010 	bic.w	r0, r0, #16
    c164:	6020      	str	r0, [r4, #0]
    c166:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c16e:	0000      	.short	0x0000
    c170:	200002ab 	.word	0x200002ab
    c174:	4000f000 	.word	0x4000f000
    c178:	e000ed10 	.word	0xe000ed10
    c17c:	4902      	ldr	r1, [pc, #8]	; (c188 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    c17e:	4801      	ldr	r0, [pc, #4]	; (c184 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    c180:	6008      	str	r0, [r1, #0]
    c182:	4770      	bx	lr
    c184:	02020000 	.word	0x02020000
    c188:	4001f508 	.word	0x4001f508

0000c18c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c18c:	b510      	push	{r4, lr}
    c18e:	4604      	mov	r4, r0
    c190:	f000 f822 	bl	c1d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    c194:	2c00      	cmp	r4, #0
    c196:	d017      	beq.n	c1c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    c198:	4a0c      	ldr	r2, [pc, #48]	; (c1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c19a:	480c      	ldr	r0, [pc, #48]	; (c1cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c19c:	490c      	ldr	r1, [pc, #48]	; (c1d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c19e:	3214      	adds	r2, #20
    c1a0:	4b0c      	ldr	r3, [pc, #48]	; (c1d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    c1a2:	2c01      	cmp	r4, #1
    c1a4:	d005      	beq.n	c1b2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    c1a6:	2c02      	cmp	r4, #2
    c1a8:	d008      	beq.n	c1bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    c1aa:	2183      	movs	r1, #131	; 0x83
    c1ac:	203d      	movs	r0, #61	; 0x3d
    c1ae:	f7f9 fa8b 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1b2:	2402      	movs	r4, #2
    c1b4:	6004      	str	r4, [r0, #0]
    c1b6:	6011      	str	r1, [r2, #0]
    c1b8:	0620      	lsls	r0, r4, #24
    c1ba:	e004      	b.n	c1c6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    c1bc:	2403      	movs	r4, #3
    c1be:	6004      	str	r4, [r0, #0]
    c1c0:	6011      	str	r1, [r2, #0]
    c1c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c1c6:	6018      	str	r0, [r3, #0]
    c1c8:	bd10      	pop	{r4, pc}
    c1ca:	0000      	.short	0x0000
    c1cc:	4000f500 	.word	0x4000f500
    c1d0:	200017cb 	.word	0x200017cb
    c1d4:	4001f504 	.word	0x4001f504
    c1d8:	4804      	ldr	r0, [pc, #16]	; (c1ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c1da:	2100      	movs	r1, #0
    c1dc:	6001      	str	r1, [r0, #0]
    c1de:	6001      	str	r1, [r0, #0]
    c1e0:	4903      	ldr	r1, [pc, #12]	; (c1f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c1e2:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    c1e6:	6008      	str	r0, [r1, #0]
    c1e8:	4770      	bx	lr
    c1ea:	0000      	.short	0x0000
    c1ec:	4000f500 	.word	0x4000f500
    c1f0:	4001f508 	.word	0x4001f508

0000c1f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c1f4:	4805      	ldr	r0, [pc, #20]	; (c20c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c1f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c1fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c1fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c202:	2100      	movs	r1, #0
    c204:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    c208:	4770      	bx	lr
    c20a:	0000      	.short	0x0000
    c20c:	40001000 	.word	0x40001000

0000c210 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c210:	4904      	ldr	r1, [pc, #16]	; (c224 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c212:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    c216:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    c21a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c21e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c222:	4770      	bx	lr
    c224:	40001000 	.word	0x40001000

0000c228 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    c228:	4801      	ldr	r0, [pc, #4]	; (c230 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    c22a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    c22e:	4770      	bx	lr
    c230:	20001284 	.word	0x20001284

0000c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c236:	4c23      	ldr	r4, [pc, #140]	; (c2c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    c238:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c23c:	f010 0f10 	tst.w	r0, #16
    c240:	d001      	beq.n	c246 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    c242:	2701      	movs	r7, #1
    c244:	e000      	b.n	c248 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    c246:	2700      	movs	r7, #0
    c248:	2010      	movs	r0, #16
    c24a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c24e:	2002      	movs	r0, #2
    c250:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c254:	481c      	ldr	r0, [pc, #112]	; (c2c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    c256:	2500      	movs	r5, #0
    c258:	491d      	ldr	r1, [pc, #116]	; (c2d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    c25a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c25e:	481b      	ldr	r0, [pc, #108]	; (c2cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    c260:	6008      	str	r0, [r1, #0]
    c262:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    c266:	f44f 7688 	mov.w	r6, #272	; 0x110
    c26a:	f010 0fff 	tst.w	r0, #255	; 0xff
    c26e:	d018      	beq.n	c2a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    c270:	20ff      	movs	r0, #255	; 0xff
    c272:	f88d 0000 	strb.w	r0, [sp]
    c276:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c27a:	2001      	movs	r0, #1
    c27c:	6120      	str	r0, [r4, #16]
    c27e:	e004      	b.n	c28a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    c280:	f89d 0000 	ldrb.w	r0, [sp]
    c284:	1e40      	subs	r0, r0, #1
    c286:	f88d 0000 	strb.w	r0, [sp]
    c28a:	f89d 0000 	ldrb.w	r0, [sp]
    c28e:	b128      	cbz	r0, c29c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    c290:	4631      	mov	r1, r6
    c292:	4620      	mov	r0, r4
    c294:	f005 f972 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c298:	2800      	cmp	r0, #0
    c29a:	d0f1      	beq.n	c280 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    c29c:	f89d 0000 	ldrb.w	r0, [sp]
    c2a0:	b158      	cbz	r0, c2ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    c2a2:	f000 fcdb 	bl	cc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c2a6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c2aa:	f000 fe57 	bl	cf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c2ae:	2f00      	cmp	r7, #0
    c2b0:	d002      	beq.n	c2b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    c2b2:	2010      	movs	r0, #16
    c2b4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2ba:	f240 718f 	movw	r1, #1935	; 0x78f
    c2be:	203e      	movs	r0, #62	; 0x3e
    c2c0:	f7f9 fa02 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2c4:	40001000 	.word	0x40001000
    c2c8:	20001284 	.word	0x20001284
    c2cc:	0c0e0000 	.word	0x0c0e0000
    c2d0:	4001f508 	.word	0x4001f508

0000c2d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2d8:	4d20      	ldr	r5, [pc, #128]	; (c35c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    c2da:	4607      	mov	r7, r0
    c2dc:	4688      	mov	r8, r1
    c2de:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    c2e2:	07c1      	lsls	r1, r0, #31
    c2e4:	d018      	beq.n	c318 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    c2e6:	4a1e      	ldr	r2, [pc, #120]	; (c360 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    c2e8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    c2ec:	6011      	str	r1, [r2, #0]
    c2ee:	4c1d      	ldr	r4, [pc, #116]	; (c364 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    c2f0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    c2f4:	f041 0101 	orr.w	r1, r1, #1
    c2f8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    c2fc:	f040 0002 	orr.w	r0, r0, #2
    c300:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    c304:	4640      	mov	r0, r8
    c306:	f000 fe8d 	bl	d024 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c30a:	f000 fc45 	bl	cb98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c30e:	2601      	movs	r6, #1
    c310:	b13f      	cbz	r7, c322 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    c312:	2f01      	cmp	r7, #1
    c314:	d00e      	beq.n	c334 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    c316:	e016      	b.n	c346 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c318:	f240 611a 	movw	r1, #1562	; 0x61a
    c31c:	203e      	movs	r0, #62	; 0x3e
    c31e:	f7f9 f9d3 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c322:	4640      	mov	r0, r8
    c324:	f000 fc68 	bl	cbf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c328:	4640      	mov	r0, r8
    c32a:	f000 fc19 	bl	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c32e:	726e      	strb	r6, [r5, #9]
    c330:	6026      	str	r6, [r4, #0]
    c332:	e008      	b.n	c346 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c334:	f000 fc88 	bl	cc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c338:	f000 fdd6 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c33c:	2002      	movs	r0, #2
    c33e:	7268      	strb	r0, [r5, #9]
    c340:	f000 fcfa 	bl	cd38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c344:	6066      	str	r6, [r4, #4]
    c346:	4808      	ldr	r0, [pc, #32]	; (c368 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c348:	64c6      	str	r6, [r0, #76]	; 0x4c
    c34a:	4807      	ldr	r0, [pc, #28]	; (c368 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c34c:	300c      	adds	r0, #12
    c34e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    c352:	4638      	mov	r0, r7
    c354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c358:	f005 b8f8 	b.w	1154c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c35c:	20001284 	.word	0x20001284
    c360:	4001f504 	.word	0x4001f504
    c364:	40001000 	.word	0x40001000
    c368:	40008000 	.word	0x40008000

0000c36c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c370:	4d35      	ldr	r5, [pc, #212]	; (c448 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    c372:	4606      	mov	r6, r0
    c374:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c378:	4689      	mov	r9, r1
    c37a:	6028      	str	r0, [r5, #0]
    c37c:	4c33      	ldr	r4, [pc, #204]	; (c44c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    c37e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c382:	f040 0002 	orr.w	r0, r0, #2
    c386:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c38a:	4608      	mov	r0, r1
    c38c:	f000 fe4a 	bl	d024 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c390:	f000 fc02 	bl	cb98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c394:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c450 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    c398:	2700      	movs	r7, #0
    c39a:	b116      	cbz	r6, c3a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    c39c:	2e01      	cmp	r6, #1
    c39e:	d027      	beq.n	c3f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c3a0:	e03f      	b.n	c422 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c3a2:	4648      	mov	r0, r9
    c3a4:	f000 fc28 	bl	cbf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c3a8:	79e0      	ldrb	r0, [r4, #7]
    c3aa:	2801      	cmp	r0, #1
    c3ac:	d105      	bne.n	c3ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    c3ae:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c3b2:	f041 0108 	orr.w	r1, r1, #8
    c3b6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c3ba:	4648      	mov	r0, r9
    c3bc:	f000 fbd0 	bl	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c3c0:	2001      	movs	r0, #1
    c3c2:	7260      	strb	r0, [r4, #9]
    c3c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c3c6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c3ca:	62a0      	str	r0, [r4, #40]	; 0x28
    c3cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c3d0:	6028      	str	r0, [r5, #0]
    c3d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c3d6:	f1b9 0f02 	cmp.w	r9, #2
    c3da:	d007      	beq.n	c3ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    c3dc:	f640 0034 	movw	r0, #2100	; 0x834
    c3e0:	f649 72ec 	movw	r2, #40940	; 0x9fec
    c3e4:	4410      	add	r0, r2
    c3e6:	fbb0 f7f1 	udiv	r7, r0, r1
    c3ea:	e01a      	b.n	c422 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c3ec:	4608      	mov	r0, r1
    c3ee:	e7f7      	b.n	c3e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    c3f0:	f000 fc2a 	bl	cc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c3f4:	f000 fd78 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c3f8:	79e0      	ldrb	r0, [r4, #7]
    c3fa:	2801      	cmp	r0, #1
    c3fc:	d105      	bne.n	c40a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    c3fe:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c402:	f041 0104 	orr.w	r1, r1, #4
    c406:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c40a:	2002      	movs	r0, #2
    c40c:	7260      	strb	r0, [r4, #9]
    c40e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c410:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c414:	62a0      	str	r0, [r4, #40]	; 0x28
    c416:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c41a:	6028      	str	r0, [r5, #0]
    c41c:	2729      	movs	r7, #41	; 0x29
    c41e:	f000 fc8b 	bl	cd38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c422:	f000 fc75 	bl	cd10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    c426:	f001 f843 	bl	d4b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    c42a:	6800      	ldr	r0, [r0, #0]
    c42c:	2801      	cmp	r0, #1
    c42e:	d006      	beq.n	c43e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    c430:	2100      	movs	r1, #0
    c432:	4630      	mov	r0, r6
    c434:	f005 f88a 	bl	1154c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c438:	4638      	mov	r0, r7
    c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c43e:	f7ff fef9 	bl	c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c442:	2000      	movs	r0, #0
    c444:	e7f9      	b.n	c43a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    c446:	0000      	.short	0x0000
    c448:	4001f504 	.word	0x4001f504
    c44c:	20001284 	.word	0x20001284
    c450:	40001000 	.word	0x40001000

0000c454 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    c454:	4a02      	ldr	r2, [pc, #8]	; (c460 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    c456:	6b13      	ldr	r3, [r2, #48]	; 0x30
    c458:	6003      	str	r3, [r0, #0]
    c45a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    c45c:	6008      	str	r0, [r1, #0]
    c45e:	4770      	bx	lr
    c460:	20001284 	.word	0x20001284

0000c464 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c464:	b510      	push	{r4, lr}
    c466:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c468:	4901      	ldr	r1, [pc, #4]	; (c470 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c46a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c46e:	bd10      	pop	{r4, pc}
    c470:	20001274 	.word	0x20001274

0000c474 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    c474:	490f      	ldr	r1, [pc, #60]	; (c4b4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    c476:	b510      	push	{r4, lr}
    c478:	69ca      	ldr	r2, [r1, #28]
    c47a:	4282      	cmp	r2, r0
    c47c:	d302      	bcc.n	c484 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    c47e:	f640 010a 	movw	r1, #2058	; 0x80a
    c482:	e00b      	b.n	c49c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    c484:	2201      	movs	r2, #1
    c486:	730a      	strb	r2, [r1, #12]
    c488:	6108      	str	r0, [r1, #16]
    c48a:	490b      	ldr	r1, [pc, #44]	; (c4b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    c48c:	644a      	str	r2, [r1, #68]	; 0x44
    c48e:	1d0a      	adds	r2, r1, #4
    c490:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    c494:	4283      	cmp	r3, r0
    c496:	d304      	bcc.n	c4a2 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    c498:	f640 0113 	movw	r1, #2067	; 0x813
    c49c:	203e      	movs	r0, #62	; 0x3e
    c49e:	f7f9 f913 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4a2:	2300      	movs	r3, #0
    c4a4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    c4a8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4b0:	f000 bd28 	b.w	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    c4b4:	20001284 	.word	0x20001284
    c4b8:	40008000 	.word	0x40008000

0000c4bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c4bc:	b570      	push	{r4, r5, r6, lr}
    c4be:	4c11      	ldr	r4, [pc, #68]	; (c504 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    c4c0:	4606      	mov	r6, r0
    c4c2:	2002      	movs	r0, #2
    c4c4:	7320      	strb	r0, [r4, #12]
    c4c6:	2596      	movs	r5, #150	; 0x96
    c4c8:	f000 f86e 	bl	c5a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c4cc:	4602      	mov	r2, r0
    c4ce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c4d2:	f894 1020 	ldrb.w	r1, [r4, #32]
    c4d6:	2801      	cmp	r0, #1
    c4d8:	d00f      	beq.n	c4fa <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    c4da:	4628      	mov	r0, r5
    c4dc:	f005 f858 	bl	11590 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c4e0:	6120      	str	r0, [r4, #16]
    c4e2:	4809      	ldr	r0, [pc, #36]	; (c508 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c4e4:	2100      	movs	r1, #0
    c4e6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c4ea:	6921      	ldr	r1, [r4, #16]
    c4ec:	69e0      	ldr	r0, [r4, #28]
    c4ee:	4408      	add	r0, r1
    c4f0:	4905      	ldr	r1, [pc, #20]	; (c508 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c4f2:	1d09      	adds	r1, r1, #4
    c4f4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c4f8:	bd70      	pop	{r4, r5, r6, pc}
    c4fa:	4633      	mov	r3, r6
    c4fc:	4628      	mov	r0, r5
    c4fe:	f005 f863 	bl	115c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c502:	e7ed      	b.n	c4e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    c504:	20001284 	.word	0x20001284
    c508:	40008000 	.word	0x40008000

0000c50c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    c50c:	b510      	push	{r4, lr}
    c50e:	f001 f914 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c512:	2800      	cmp	r0, #0
    c514:	d006      	beq.n	c524 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    c516:	4804      	ldr	r0, [pc, #16]	; (c528 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    c518:	6801      	ldr	r1, [r0, #0]
    c51a:	f021 0101 	bic.w	r1, r1, #1
    c51e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    c522:	6001      	str	r1, [r0, #0]
    c524:	bd10      	pop	{r4, pc}
    c526:	0000      	.short	0x0000
    c528:	40001774 	.word	0x40001774

0000c52c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c530:	2238      	movs	r2, #56	; 0x38
    c532:	2100      	movs	r1, #0
    c534:	4813      	ldr	r0, [pc, #76]	; (c584 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c536:	f001 f9b0 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c53a:	f000 fd0f 	bl	cf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c53e:	f001 f8b5 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c542:	4d11      	ldr	r5, [pc, #68]	; (c588 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c544:	4e10      	ldr	r6, [pc, #64]	; (c588 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c546:	2400      	movs	r4, #0
    c548:	4f0f      	ldr	r7, [pc, #60]	; (c588 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c54a:	3508      	adds	r5, #8
    c54c:	3610      	adds	r6, #16
    c54e:	b928      	cbnz	r0, c55c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c550:	f001 f8c3 	bl	d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c554:	b910      	cbnz	r0, c55c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c556:	f001 f8ca 	bl	d6ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c55a:	b108      	cbz	r0, c560 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c55c:	2224      	movs	r2, #36	; 0x24
    c55e:	e006      	b.n	c56e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c560:	f001 f905 	bl	d76e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c564:	b910      	cbnz	r0, c56c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c566:	f001 f8f8 	bl	d75a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c56a:	b140      	cbz	r0, c57e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c56c:	2240      	movs	r2, #64	; 0x40
    c56e:	21ff      	movs	r1, #255	; 0xff
    c570:	4638      	mov	r0, r7
    c572:	f001 f992 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c576:	602c      	str	r4, [r5, #0]
    c578:	6034      	str	r4, [r6, #0]
    c57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c57e:	2238      	movs	r2, #56	; 0x38
    c580:	e7f5      	b.n	c56e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c582:	0000      	.short	0x0000
    c584:	20001284 	.word	0x20001284
    c588:	40000e00 	.word	0x40000e00

0000c58c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c58c:	4805      	ldr	r0, [pc, #20]	; (c5a4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    c58e:	b510      	push	{r4, lr}
    c590:	69c0      	ldr	r0, [r0, #28]
    c592:	2800      	cmp	r0, #0
    c594:	d104      	bne.n	c5a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    c596:	f240 11fb 	movw	r1, #507	; 0x1fb
    c59a:	203e      	movs	r0, #62	; 0x3e
    c59c:	f7f9 f894 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5a0:	bd10      	pop	{r4, pc}
    c5a2:	0000      	.short	0x0000
    c5a4:	20001284 	.word	0x20001284

0000c5a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    c5a8:	4814      	ldr	r0, [pc, #80]	; (c5fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    c5aa:	b510      	push	{r4, lr}
    c5ac:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    c5b0:	7a40      	ldrb	r0, [r0, #9]
    c5b2:	b141      	cbz	r1, c5c6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    c5b4:	2902      	cmp	r1, #2
    c5b6:	d00b      	beq.n	c5d0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c5b8:	2802      	cmp	r0, #2
    c5ba:	d009      	beq.n	c5d0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c5bc:	2901      	cmp	r1, #1
    c5be:	d00b      	beq.n	c5d8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c5c0:	2801      	cmp	r0, #1
    c5c2:	d009      	beq.n	c5d8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c5c4:	e016      	b.n	c5f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    c5c6:	2800      	cmp	r0, #0
    c5c8:	d1f6      	bne.n	c5b8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    c5ca:	f240 117d 	movw	r1, #381	; 0x17d
    c5ce:	e00e      	b.n	c5ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    c5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c5d4:	f000 bc38 	b.w	ce48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c5d8:	4809      	ldr	r0, [pc, #36]	; (c600 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    c5da:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c5de:	f000 000f 	and.w	r0, r0, #15
    c5e2:	2803      	cmp	r0, #3
    c5e4:	d006      	beq.n	c5f4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    c5e6:	2804      	cmp	r0, #4
    c5e8:	d006      	beq.n	c5f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    c5ea:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c5ee:	203e      	movs	r0, #62	; 0x3e
    c5f0:	f7f9 f86a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5f4:	2001      	movs	r0, #1
    c5f6:	bd10      	pop	{r4, pc}
    c5f8:	2002      	movs	r0, #2
    c5fa:	bd10      	pop	{r4, pc}
    c5fc:	20001284 	.word	0x20001284
    c600:	40001000 	.word	0x40001000

0000c604 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    c604:	4805      	ldr	r0, [pc, #20]	; (c61c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    c606:	b510      	push	{r4, lr}
    c608:	6980      	ldr	r0, [r0, #24]
    c60a:	2800      	cmp	r0, #0
    c60c:	d104      	bne.n	c618 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    c60e:	f240 11f5 	movw	r1, #501	; 0x1f5
    c612:	203e      	movs	r0, #62	; 0x3e
    c614:	f7f9 f858 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c618:	bd10      	pop	{r4, pc}
    c61a:	0000      	.short	0x0000
    c61c:	20001284 	.word	0x20001284

0000c620 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c620:	b510      	push	{r4, lr}
    c622:	f000 fc7d 	bl	cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c626:	f7ff fe05 	bl	c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c62a:	f004 ff25 	bl	11478 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c62e:	480f      	ldr	r0, [pc, #60]	; (c66c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c630:	4a0f      	ldr	r2, [pc, #60]	; (c670 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c632:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c634:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c638:	6011      	str	r1, [r2, #0]
    c63a:	2400      	movs	r4, #0
    c63c:	6284      	str	r4, [r0, #40]	; 0x28
    c63e:	7304      	strb	r4, [r0, #12]
    c640:	61c4      	str	r4, [r0, #28]
    c642:	6184      	str	r4, [r0, #24]
    c644:	f000 fc6c 	bl	cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c648:	480a      	ldr	r0, [pc, #40]	; (c674 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c64a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c64e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c652:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c656:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c65a:	2001      	movs	r0, #1
    c65c:	f004 ff45 	bl	114ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c664:	2001      	movs	r0, #1
    c666:	f004 bf33 	b.w	114d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c66a:	0000      	.short	0x0000
    c66c:	20001284 	.word	0x20001284
    c670:	4001f508 	.word	0x4001f508
    c674:	40008000 	.word	0x40008000

0000c678 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c678:	b570      	push	{r4, r5, r6, lr}
    c67a:	2001      	movs	r0, #1
    c67c:	f004 ff35 	bl	114ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c680:	4c37      	ldr	r4, [pc, #220]	; (c760 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c682:	2000      	movs	r0, #0
    c684:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c688:	2001      	movs	r0, #1
    c68a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c68e:	f001 f844 	bl	d71a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c692:	4d34      	ldr	r5, [pc, #208]	; (c764 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c694:	b118      	cbz	r0, c69e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c696:	6828      	ldr	r0, [r5, #0]
    c698:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c69c:	6028      	str	r0, [r5, #0]
    c69e:	f001 f830 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6a2:	b128      	cbz	r0, c6b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c6a4:	6828      	ldr	r0, [r5, #0]
    c6a6:	4930      	ldr	r1, [pc, #192]	; (c768 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c6a8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c6ac:	4308      	orrs	r0, r1
    c6ae:	6028      	str	r0, [r5, #0]
    c6b0:	f001 f843 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c6b4:	b138      	cbz	r0, c6c6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    c6b6:	482b      	ldr	r0, [pc, #172]	; (c764 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c6b8:	1d00      	adds	r0, r0, #4
    c6ba:	6801      	ldr	r1, [r0, #0]
    c6bc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c6c0:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c6c4:	6001      	str	r1, [r0, #0]
    c6c6:	4927      	ldr	r1, [pc, #156]	; (c764 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c6c8:	4828      	ldr	r0, [pc, #160]	; (c76c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c6ca:	313c      	adds	r1, #60	; 0x3c
    c6cc:	6008      	str	r0, [r1, #0]
    c6ce:	f7f8 fee3 	bl	5498 <mpsl_fem_device_config_254_apply_get>
    c6d2:	b140      	cbz	r0, c6e6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c6d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c6d8:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c6dc:	1c41      	adds	r1, r0, #1
    c6de:	d002      	beq.n	c6e6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    c6e0:	4920      	ldr	r1, [pc, #128]	; (c764 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c6e2:	3110      	adds	r1, #16
    c6e4:	6008      	str	r0, [r1, #0]
    c6e6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c6ea:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c6ec:	1c41      	adds	r1, r0, #1
    c6ee:	d004      	beq.n	c6fa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    c6f0:	491f      	ldr	r1, [pc, #124]	; (c770 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c6f2:	680a      	ldr	r2, [r1, #0]
    c6f4:	f360 4217 	bfi	r2, r0, #16, #8
    c6f8:	600a      	str	r2, [r1, #0]
    c6fa:	f240 1103 	movw	r1, #259	; 0x103
    c6fe:	f240 605b 	movw	r0, #1627	; 0x65b
    c702:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    c706:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c70a:	2001      	movs	r0, #1
    c70c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    c710:	f000 fc88 	bl	d024 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c714:	f240 1001 	movw	r0, #257	; 0x101
    c718:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    c71c:	2002      	movs	r0, #2
    c71e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c722:	4915      	ldr	r1, [pc, #84]	; (c778 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c724:	4813      	ldr	r0, [pc, #76]	; (c774 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c726:	6008      	str	r0, [r1, #0]
    c728:	4914      	ldr	r1, [pc, #80]	; (c77c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c72a:	2000      	movs	r0, #0
    c72c:	4d14      	ldr	r5, [pc, #80]	; (c780 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c72e:	8608      	strh	r0, [r1, #48]	; 0x30
    c730:	3110      	adds	r1, #16
    c732:	61c8      	str	r0, [r1, #28]
    c734:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    c738:	7028      	strb	r0, [r5, #0]
    c73a:	2001      	movs	r0, #1
    c73c:	f004 fec8 	bl	114d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c740:	2010      	movs	r0, #16
    c742:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c746:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c74a:	2002      	movs	r0, #2
    c74c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c750:	6868      	ldr	r0, [r5, #4]
    c752:	2800      	cmp	r0, #0
    c754:	d002      	beq.n	c75c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    c756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c75a:	4700      	bx	r0
    c75c:	bd70      	pop	{r4, r5, r6, pc}
    c75e:	0000      	.short	0x0000
    c760:	40001000 	.word	0x40001000
    c764:	4000173c 	.word	0x4000173c
    c768:	80000096 	.word	0x80000096
    c76c:	8900002c 	.word	0x8900002c
    c770:	4000158c 	.word	0x4000158c
    c774:	0c0e0000 	.word	0x0c0e0000
    c778:	4001f508 	.word	0x4001f508
    c77c:	20001274 	.word	0x20001274
    c780:	20000274 	.word	0x20000274

0000c784 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c784:	4901      	ldr	r1, [pc, #4]	; (c78c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c786:	7508      	strb	r0, [r1, #20]
    c788:	4770      	bx	lr
    c78a:	0000      	.short	0x0000
    c78c:	20001284 	.word	0x20001284

0000c790 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c790:	4905      	ldr	r1, [pc, #20]	; (c7a8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c792:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    c796:	4805      	ldr	r0, [pc, #20]	; (c7ac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    c798:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c79c:	f041 0101 	orr.w	r1, r1, #1
    c7a0:	7001      	strb	r1, [r0, #0]
    c7a2:	f000 ba7b 	b.w	cc9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c7a6:	0000      	.short	0x0000
    c7a8:	40001000 	.word	0x40001000
    c7ac:	20001284 	.word	0x20001284

0000c7b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7b4:	4e36      	ldr	r6, [pc, #216]	; (c890 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    c7b6:	4607      	mov	r7, r0
    c7b8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c7bc:	4689      	mov	r9, r1
    c7be:	4614      	mov	r4, r2
    c7c0:	6030      	str	r0, [r6, #0]
    c7c2:	4610      	mov	r0, r2
    c7c4:	f000 fc2e 	bl	d024 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c7c8:	f000 f9e6 	bl	cb98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c7cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; c894 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    c7d0:	4d31      	ldr	r5, [pc, #196]	; (c898 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    c7d2:	f04f 0801 	mov.w	r8, #1
    c7d6:	b127      	cbz	r7, c7e2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c7d8:	2f01      	cmp	r7, #1
    c7da:	d01d      	beq.n	c818 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    c7dc:	f240 710f 	movw	r1, #1807	; 0x70f
    c7e0:	e04c      	b.n	c87c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    c7e2:	4620      	mov	r0, r4
    c7e4:	f000 fa08 	bl	cbf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c7e8:	4620      	mov	r0, r4
    c7ea:	f000 f9b9 	bl	cb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c7ee:	2c02      	cmp	r4, #2
    c7f0:	d00f      	beq.n	c812 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    c7f2:	f640 0034 	movw	r0, #2100	; 0x834
    c7f6:	bf00      	nop
    c7f8:	f649 51f8 	movw	r1, #40440	; 0x9df8
    c7fc:	4401      	add	r1, r0
    c7fe:	4648      	mov	r0, r9
    c800:	f000 fbb4 	bl	cf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    c804:	4604      	mov	r4, r0
    c806:	4650      	mov	r0, sl
    c808:	f000 fb9c 	bl	cf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c80c:	f885 8009 	strb.w	r8, [r5, #9]
    c810:	e014      	b.n	c83c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    c812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c816:	e7ef      	b.n	c7f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    c818:	f000 fa16 	bl	cc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c81c:	f000 fb64 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c820:	f000 fa8a 	bl	cd38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c824:	f649 71ba 	movw	r1, #40890	; 0x9fba
    c828:	4648      	mov	r0, r9
    c82a:	f000 fb9f 	bl	cf6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    c82e:	4604      	mov	r4, r0
    c830:	4818      	ldr	r0, [pc, #96]	; (c894 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c832:	1d00      	adds	r0, r0, #4
    c834:	f000 fb86 	bl	cf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c838:	2002      	movs	r0, #2
    c83a:	7268      	strb	r0, [r5, #9]
    c83c:	f8df 905c 	ldr.w	r9, [pc, #92]	; c89c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    c840:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    c844:	4917      	ldr	r1, [pc, #92]	; (c8a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    c846:	4816      	ldr	r0, [pc, #88]	; (c8a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    c848:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    c84c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c84e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    c852:	62a8      	str	r0, [r5, #40]	; 0x28
    c854:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    c858:	6030      	str	r0, [r6, #0]
    c85a:	2010      	movs	r0, #16
    c85c:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    c860:	03c0      	lsls	r0, r0, #15
    c862:	6030      	str	r0, [r6, #0]
    c864:	f000 fa54 	bl	cd10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    c868:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    c86c:	480b      	ldr	r0, [pc, #44]	; (c89c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    c86e:	300c      	adds	r0, #12
    c870:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c874:	42a0      	cmp	r0, r4
    c876:	d304      	bcc.n	c882 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    c878:	f240 7136 	movw	r1, #1846	; 0x736
    c87c:	203e      	movs	r0, #62	; 0x3e
    c87e:	f7f8 ff23 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c882:	4621      	mov	r1, r4
    c884:	4638      	mov	r0, r7
    c886:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c88a:	f004 be5f 	b.w	1154c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c88e:	0000      	.short	0x0000
    c890:	4001f504 	.word	0x4001f504
    c894:	40001000 	.word	0x40001000
    c898:	20001284 	.word	0x20001284
    c89c:	40008000 	.word	0x40008000
    c8a0:	40008140 	.word	0x40008140
    c8a4:	4001f098 	.word	0x4001f098

0000c8a8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    c8a8:	4b0d      	ldr	r3, [pc, #52]	; (c8e0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    c8aa:	b510      	push	{r4, lr}
    c8ac:	71d8      	strb	r0, [r3, #7]
    c8ae:	729a      	strb	r2, [r3, #10]
    c8b0:	b151      	cbz	r1, c8c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    c8b2:	2002      	movs	r0, #2
    c8b4:	7218      	strb	r0, [r3, #8]
    c8b6:	2801      	cmp	r0, #1
    c8b8:	d008      	beq.n	c8cc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    c8ba:	2802      	cmp	r0, #2
    c8bc:	d00f      	beq.n	c8de <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c8be:	f640 1112 	movw	r1, #2322	; 0x912
    c8c2:	203e      	movs	r0, #62	; 0x3e
    c8c4:	f7f8 ff00 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8c8:	2001      	movs	r0, #1
    c8ca:	e7f3      	b.n	c8b4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    c8cc:	7a58      	ldrb	r0, [r3, #9]
    c8ce:	2802      	cmp	r0, #2
    c8d0:	d105      	bne.n	c8de <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    c8d2:	f000 f9b9 	bl	cc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8da:	f000 bb05 	b.w	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c8de:	bd10      	pop	{r4, pc}
    c8e0:	20001284 	.word	0x20001284

0000c8e4 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    c8e4:	4902      	ldr	r1, [pc, #8]	; (c8f0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    c8e6:	2000      	movs	r0, #0
    c8e8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c8ec:	4770      	bx	lr
    c8ee:	0000      	.short	0x0000
    c8f0:	40008000 	.word	0x40008000

0000c8f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    c8f4:	b538      	push	{r3, r4, r5, lr}
    c8f6:	4c0b      	ldr	r4, [pc, #44]	; (c924 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    c8f8:	4605      	mov	r5, r0
    c8fa:	f44f 718e 	mov.w	r1, #284	; 0x11c
    c8fe:	4620      	mov	r0, r4
    c900:	f004 fe3c 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c904:	2800      	cmp	r0, #0
    c906:	d00c      	beq.n	c922 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    c908:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    c90c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c910:	4240      	negs	r0, r0
    c912:	7028      	strb	r0, [r5, #0]
    c914:	2000      	movs	r0, #0
    c916:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    c91a:	4803      	ldr	r0, [pc, #12]	; (c928 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    c91c:	6800      	ldr	r0, [r0, #0]
    c91e:	9000      	str	r0, [sp, #0]
    c920:	2001      	movs	r0, #1
    c922:	bd38      	pop	{r3, r4, r5, pc}
    c924:	40001000 	.word	0x40001000
    c928:	4000111c 	.word	0x4000111c

0000c92c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    c92c:	4903      	ldr	r1, [pc, #12]	; (c93c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    c92e:	0e02      	lsrs	r2, r0, #24
    c930:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    c934:	0200      	lsls	r0, r0, #8
    c936:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    c93a:	4770      	bx	lr
    c93c:	40001000 	.word	0x40001000

0000c940 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    c940:	6800      	ldr	r0, [r0, #0]
    c942:	4903      	ldr	r1, [pc, #12]	; (c950 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    c944:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c948:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    c94c:	4770      	bx	lr
    c94e:	0000      	.short	0x0000
    c950:	40001000 	.word	0x40001000

0000c954 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    c954:	b510      	push	{r4, lr}
    c956:	f000 fb41 	bl	cfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    c95a:	4807      	ldr	r0, [pc, #28]	; (c978 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    c95c:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c960:	b2c0      	uxtb	r0, r0
    c962:	2803      	cmp	r0, #3
    c964:	d001      	beq.n	c96a <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    c966:	280b      	cmp	r0, #11
    c968:	d104      	bne.n	c974 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    c96a:	f44f 7121 	mov.w	r1, #644	; 0x284
    c96e:	203e      	movs	r0, #62	; 0x3e
    c970:	f7f8 feaa 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c974:	bd10      	pop	{r4, pc}
    c976:	0000      	.short	0x0000
    c978:	40001000 	.word	0x40001000

0000c97c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    c97c:	4901      	ldr	r1, [pc, #4]	; (c984 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    c97e:	7548      	strb	r0, [r1, #21]
    c980:	4770      	bx	lr
    c982:	0000      	.short	0x0000
    c984:	20001284 	.word	0x20001284

0000c988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c98c:	4853      	ldr	r0, [pc, #332]	; (cadc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c98e:	f04f 0a01 	mov.w	sl, #1
    c992:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    c996:	4851      	ldr	r0, [pc, #324]	; (cadc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c998:	300c      	adds	r0, #12
    c99a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    c99e:	4850      	ldr	r0, [pc, #320]	; (cae0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c9a0:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    c9a4:	4c4f      	ldr	r4, [pc, #316]	; (cae4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    c9a6:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    c9aa:	f000 f957 	bl	cc5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c9ae:	494e      	ldr	r1, [pc, #312]	; (cae8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    c9b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c9b2:	6008      	str	r0, [r1, #0]
    c9b4:	f8df 9134 	ldr.w	r9, [pc, #308]	; caec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    c9b8:	2600      	movs	r6, #0
    c9ba:	62a6      	str	r6, [r4, #40]	; 0x28
    c9bc:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    c9c0:	f240 121d 	movw	r2, #285	; 0x11d
    c9c4:	4391      	bics	r1, r2
    c9c6:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    c9ca:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    c9ce:	f000 f9c5 	bl	cd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    c9d2:	4605      	mov	r5, r0
    c9d4:	4841      	ldr	r0, [pc, #260]	; (cadc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c9d6:	3008      	adds	r0, #8
    c9d8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c9dc:	61e0      	str	r0, [r4, #28]
    c9de:	f7ff fde3 	bl	c5a8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c9e2:	f884 0020 	strb.w	r0, [r4, #32]
    c9e6:	7a60      	ldrb	r0, [r4, #9]
    c9e8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    c9ec:	61a6      	str	r6, [r4, #24]
    c9ee:	4e40      	ldr	r6, [pc, #256]	; (caf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c9f0:	07a8      	lsls	r0, r5, #30
    c9f2:	d502      	bpl.n	c9fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    c9f4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c9f8:	61a0      	str	r0, [r4, #24]
    c9fa:	0728      	lsls	r0, r5, #28
    c9fc:	d502      	bpl.n	ca04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    c9fe:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    ca02:	61a0      	str	r0, [r4, #24]
    ca04:	f04f 0800 	mov.w	r8, #0
    ca08:	4639      	mov	r1, r7
    ca0a:	4628      	mov	r0, r5
    ca0c:	f000 fa32 	bl	ce74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    ca10:	b918      	cbnz	r0, ca1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    ca12:	f8c9 a010 	str.w	sl, [r9, #16]
    ca16:	f04f 0801 	mov.w	r8, #1
    ca1a:	4f32      	ldr	r7, [pc, #200]	; (cae4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    ca1c:	07e8      	lsls	r0, r5, #31
    ca1e:	f1a7 0710 	sub.w	r7, r7, #16
    ca22:	d002      	beq.n	ca2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    ca24:	6838      	ldr	r0, [r7, #0]
    ca26:	4780      	blx	r0
    ca28:	e031      	b.n	ca8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    ca2a:	07a8      	lsls	r0, r5, #30
    ca2c:	d526      	bpl.n	ca7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    ca2e:	0768      	lsls	r0, r5, #29
    ca30:	d41e      	bmi.n	ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca32:	f000 fe82 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ca36:	b9d8      	cbnz	r0, ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca38:	f000 fe6f 	bl	d71a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ca3c:	b9c0      	cbnz	r0, ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca3e:	482d      	ldr	r0, [pc, #180]	; (caf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    ca40:	6800      	ldr	r0, [r0, #0]
    ca42:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    ca46:	f3c0 6100 	ubfx	r1, r0, #24, #1
    ca4a:	f000 030f 	and.w	r3, r0, #15
    ca4e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    ca52:	f3c0 2003 	ubfx	r0, r0, #8, #4
    ca56:	b159      	cbz	r1, ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca58:	b10b      	cbz	r3, ca5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    ca5a:	b102      	cbz	r2, ca5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    ca5c:	b940      	cbnz	r0, ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca5e:	4825      	ldr	r0, [pc, #148]	; (caf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    ca60:	1d00      	adds	r0, r0, #4
    ca62:	6800      	ldr	r0, [r0, #0]
    ca64:	b120      	cbz	r0, ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca66:	f1bc 0f03 	cmp.w	ip, #3
    ca6a:	d201      	bcs.n	ca70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ca6c:	f045 0504 	orr.w	r5, r5, #4
    ca70:	f345 0080 	sbfx	r0, r5, #2, #1
    ca74:	4641      	mov	r1, r8
    ca76:	1c40      	adds	r0, r0, #1
    ca78:	687a      	ldr	r2, [r7, #4]
    ca7a:	e007      	b.n	ca8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    ca7c:	f015 0f28 	tst.w	r5, #40	; 0x28
    ca80:	d005      	beq.n	ca8e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    ca82:	f345 1140 	sbfx	r1, r5, #5, #1
    ca86:	68ba      	ldr	r2, [r7, #8]
    ca88:	4640      	mov	r0, r8
    ca8a:	1c49      	adds	r1, r1, #1
    ca8c:	4790      	blx	r2
    ca8e:	06e8      	lsls	r0, r5, #27
    ca90:	d501      	bpl.n	ca96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    ca92:	68f8      	ldr	r0, [r7, #12]
    ca94:	4780      	blx	r0
    ca96:	7a60      	ldrb	r0, [r4, #9]
    ca98:	2802      	cmp	r0, #2
    ca9a:	d11c      	bne.n	cad6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    ca9c:	7b20      	ldrb	r0, [r4, #12]
    ca9e:	2800      	cmp	r0, #0
    caa0:	d019      	beq.n	cad6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    caa2:	2802      	cmp	r0, #2
    caa4:	d004      	beq.n	cab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    caa6:	2801      	cmp	r0, #1
    caa8:	d006      	beq.n	cab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    caaa:	f640 21e1 	movw	r1, #2785	; 0xae1
    caae:	e009      	b.n	cac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cab0:	6921      	ldr	r1, [r4, #16]
    cab2:	69e0      	ldr	r0, [r4, #28]
    cab4:	4408      	add	r0, r1
    cab6:	e008      	b.n	caca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    cab8:	69e1      	ldr	r1, [r4, #28]
    caba:	6920      	ldr	r0, [r4, #16]
    cabc:	4288      	cmp	r0, r1
    cabe:	d804      	bhi.n	caca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    cac0:	f640 21e2 	movw	r1, #2786	; 0xae2
    cac4:	203e      	movs	r0, #62	; 0x3e
    cac6:	f7f8 fdff 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caca:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    cace:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cad2:	f000 ba17 	b.w	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cada:	0000      	.short	0x0000
    cadc:	40008000 	.word	0x40008000
    cae0:	4000b000 	.word	0x4000b000
    cae4:	20001284 	.word	0x20001284
    cae8:	4001f508 	.word	0x4001f508
    caec:	40001000 	.word	0x40001000
    caf0:	40008004 	.word	0x40008004
    caf4:	40001450 	.word	0x40001450

0000caf8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    caf8:	b570      	push	{r4, r5, r6, lr}
    cafa:	4b15      	ldr	r3, [pc, #84]	; (cb50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    cafc:	888c      	ldrh	r4, [r1, #4]
    cafe:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    cb02:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    cb06:	780c      	ldrb	r4, [r1, #0]
    cb08:	f8d1 1001 	ldr.w	r1, [r1, #1]
    cb0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cb10:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    cb14:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    cb18:	2101      	movs	r1, #1
    cb1a:	4081      	lsls	r1, r0
    cb1c:	430c      	orrs	r4, r1
    cb1e:	b2e4      	uxtb	r4, r4
    cb20:	b132      	cbz	r2, cb30 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    cb22:	2a01      	cmp	r2, #1
    cb24:	d00a      	beq.n	cb3c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    cb26:	f240 41ac 	movw	r1, #1196	; 0x4ac
    cb2a:	203e      	movs	r0, #62	; 0x3e
    cb2c:	f7f8 fdcc 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb30:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    cb34:	f3c0 2007 	ubfx	r0, r0, #8, #8
    cb38:	4388      	bics	r0, r1
    cb3a:	e004      	b.n	cb46 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    cb3c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    cb40:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    cb44:	b2c0      	uxtb	r0, r0
    cb46:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    cb4a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    cb4e:	bd70      	pop	{r4, r5, r6, pc}
    cb50:	40001000 	.word	0x40001000

0000cb54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    cb54:	4901      	ldr	r1, [pc, #4]	; (cb5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    cb56:	2001      	movs	r0, #1
    cb58:	7008      	strb	r0, [r1, #0]
    cb5a:	4770      	bx	lr
    cb5c:	20000274 	.word	0x20000274
    cb60:	b510      	push	{r4, lr}
    cb62:	4604      	mov	r4, r0
    cb64:	f000 fde9 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cb68:	2800      	cmp	r0, #0
    cb6a:	d00e      	beq.n	cb8a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    cb6c:	4a09      	ldr	r2, [pc, #36]	; (cb94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    cb6e:	6811      	ldr	r1, [r2, #0]
    cb70:	0650      	lsls	r0, r2, #25
    cb72:	2c02      	cmp	r4, #2
    cb74:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cb78:	d008      	beq.n	cb8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    cb7a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cb7e:	bf00      	nop
    cb80:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cb84:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cb88:	6010      	str	r0, [r2, #0]
    cb8a:	bd10      	pop	{r4, pc}
    cb8c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cb90:	e7f6      	b.n	cb80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    cb92:	0000      	.short	0x0000
    cb94:	40001588 	.word	0x40001588
    cb98:	4815      	ldr	r0, [pc, #84]	; (cbf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    cb9a:	7d41      	ldrb	r1, [r0, #21]
    cb9c:	2925      	cmp	r1, #37	; 0x25
    cb9e:	d00a      	beq.n	cbb6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    cba0:	2926      	cmp	r1, #38	; 0x26
    cba2:	d00b      	beq.n	cbbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    cba4:	2927      	cmp	r1, #39	; 0x27
    cba6:	d00c      	beq.n	cbc2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    cba8:	7d40      	ldrb	r0, [r0, #21]
    cbaa:	0040      	lsls	r0, r0, #1
    cbac:	290a      	cmp	r1, #10
    cbae:	d80b      	bhi.n	cbc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    cbb0:	f600 1064 	addw	r0, r0, #2404	; 0x964
    cbb4:	e00a      	b.n	cbcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    cbb6:	f640 1062 	movw	r0, #2402	; 0x962
    cbba:	e00f      	b.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cbbc:	f640 107a 	movw	r0, #2426	; 0x97a
    cbc0:	e00c      	b.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cbc2:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    cbc6:	e009      	b.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cbc8:	f600 1066 	addw	r0, r0, #2406	; 0x966
    cbcc:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    cbd0:	d204      	bcs.n	cbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cbd2:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    cbd6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    cbda:	e001      	b.n	cbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    cbdc:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    cbe0:	4a04      	ldr	r2, [pc, #16]	; (cbf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    cbe2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    cbe6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    cbea:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    cbee:	4770      	bx	lr
    cbf0:	20001284 	.word	0x20001284
    cbf4:	40001000 	.word	0x40001000
    cbf8:	4912      	ldr	r1, [pc, #72]	; (cc44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    cbfa:	b508      	push	{r3, lr}
    cbfc:	f991 2014 	ldrsb.w	r2, [r1, #20]
    cc00:	7d49      	ldrb	r1, [r1, #21]
    cc02:	2801      	cmp	r0, #1
    cc04:	d00a      	beq.n	cc1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    cc06:	2802      	cmp	r0, #2
    cc08:	d00a      	beq.n	cc20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    cc0a:	2804      	cmp	r0, #4
    cc0c:	d00a      	beq.n	cc24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    cc0e:	2808      	cmp	r0, #8
    cc10:	d00a      	beq.n	cc28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    cc12:	f240 31ed 	movw	r1, #1005	; 0x3ed
    cc16:	2006      	movs	r0, #6
    cc18:	f7f8 fd56 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc1c:	2000      	movs	r0, #0
    cc1e:	e004      	b.n	cc2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cc20:	2001      	movs	r0, #1
    cc22:	e002      	b.n	cc2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cc24:	2003      	movs	r0, #3
    cc26:	e000      	b.n	cc2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cc28:	2002      	movs	r0, #2
    cc2a:	466b      	mov	r3, sp
    cc2c:	f7f5 f820 	bl	1c70 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    cc30:	b118      	cbz	r0, cc3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    cc32:	f240 41de 	movw	r1, #1246	; 0x4de
    cc36:	203e      	movs	r0, #62	; 0x3e
    cc38:	e7ee      	b.n	cc18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    cc3a:	f99d 0000 	ldrsb.w	r0, [sp]
    cc3e:	f000 f9eb 	bl	d018 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    cc42:	bd08      	pop	{r3, pc}
    cc44:	20001284 	.word	0x20001284
    cc48:	4803      	ldr	r0, [pc, #12]	; (cc58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    cc4a:	7a01      	ldrb	r1, [r0, #8]
    cc4c:	2901      	cmp	r1, #1
    cc4e:	d102      	bne.n	cc56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    cc50:	7a80      	ldrb	r0, [r0, #10]
    cc52:	f7ff bfd1 	b.w	cbf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cc56:	4770      	bx	lr
    cc58:	20001284 	.word	0x20001284
    cc5c:	4805      	ldr	r0, [pc, #20]	; (cc74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    cc5e:	7a40      	ldrb	r0, [r0, #9]
    cc60:	2801      	cmp	r0, #1
    cc62:	d003      	beq.n	cc6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    cc64:	2802      	cmp	r0, #2
    cc66:	d103      	bne.n	cc70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    cc68:	f004 bbee 	b.w	11448 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    cc6c:	f004 bbf8 	b.w	11460 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    cc70:	4770      	bx	lr
    cc72:	0000      	.short	0x0000
    cc74:	20001284 	.word	0x20001284
    cc78:	4807      	ldr	r0, [pc, #28]	; (cc98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    cc7a:	2100      	movs	r1, #0
    cc7c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    cc80:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    cc84:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    cc88:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    cc8c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    cc90:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    cc94:	4770      	bx	lr
    cc96:	0000      	.short	0x0000
    cc98:	40001000 	.word	0x40001000
    cc9c:	4818      	ldr	r0, [pc, #96]	; (cd00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    cc9e:	b510      	push	{r4, lr}
    cca0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    cca4:	07c1      	lsls	r1, r0, #31
    cca6:	d029      	beq.n	ccfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    cca8:	0781      	lsls	r1, r0, #30
    ccaa:	d514      	bpl.n	ccd6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    ccac:	4815      	ldr	r0, [pc, #84]	; (cd04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    ccae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ccb2:	f041 0101 	orr.w	r1, r1, #1
    ccb6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ccba:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    ccbe:	b2c0      	uxtb	r0, r0
    ccc0:	280b      	cmp	r0, #11
    ccc2:	d005      	beq.n	ccd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    ccc4:	280a      	cmp	r0, #10
    ccc6:	d003      	beq.n	ccd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    ccc8:	2803      	cmp	r0, #3
    ccca:	d001      	beq.n	ccd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    cccc:	2802      	cmp	r0, #2
    ccce:	d115      	bne.n	ccfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ccd0:	f240 510f 	movw	r1, #1295	; 0x50f
    ccd4:	e00f      	b.n	ccf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    ccd6:	0740      	lsls	r0, r0, #29
    ccd8:	d510      	bpl.n	ccfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ccda:	480a      	ldr	r0, [pc, #40]	; (cd04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    ccdc:	490a      	ldr	r1, [pc, #40]	; (cd08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    ccde:	3008      	adds	r0, #8
    cce0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    cce4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    cce8:	4808      	ldr	r0, [pc, #32]	; (cd0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    ccea:	f004 fc4c 	bl	11586 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    ccee:	2800      	cmp	r0, #0
    ccf0:	d004      	beq.n	ccfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    ccf2:	f240 5117 	movw	r1, #1303	; 0x517
    ccf6:	203e      	movs	r0, #62	; 0x3e
    ccf8:	f7f8 fce6 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccfc:	bd10      	pop	{r4, pc}
    ccfe:	0000      	.short	0x0000
    cd00:	20001284 	.word	0x20001284
    cd04:	40001000 	.word	0x40001000
    cd08:	4001f098 	.word	0x4001f098
    cd0c:	40008000 	.word	0x40008000
    cd10:	4808      	ldr	r0, [pc, #32]	; (cd34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    cd12:	4601      	mov	r1, r0
    cd14:	79c2      	ldrb	r2, [r0, #7]
    cd16:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    cd1a:	b112      	cbz	r2, cd22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    cd1c:	2a01      	cmp	r2, #1
    cd1e:	d003      	beq.n	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    cd20:	e006      	b.n	cd30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    cd22:	f041 0102 	orr.w	r1, r1, #2
    cd26:	e001      	b.n	cd2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    cd28:	f041 0104 	orr.w	r1, r1, #4
    cd2c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    cd30:	f7ff bfb4 	b.w	cc9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    cd34:	20001284 	.word	0x20001284
    cd38:	b510      	push	{r4, lr}
    cd3a:	f000 fcfe 	bl	d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cd3e:	2800      	cmp	r0, #0
    cd40:	d108      	bne.n	cd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    cd42:	f000 fcea 	bl	d71a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cd46:	2800      	cmp	r0, #0
    cd48:	d104      	bne.n	cd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    cd4a:	4803      	ldr	r0, [pc, #12]	; (cd58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    cd4c:	6801      	ldr	r1, [r0, #0]
    cd4e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cd52:	6001      	str	r1, [r0, #0]
    cd54:	bd10      	pop	{r4, pc}
    cd56:	0000      	.short	0x0000
    cd58:	40001568 	.word	0x40001568
    cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd60:	4d35      	ldr	r5, [pc, #212]	; (ce38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    cd62:	2400      	movs	r4, #0
    cd64:	7b28      	ldrb	r0, [r5, #12]
    cd66:	b138      	cbz	r0, cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cd68:	f44f 71a2 	mov.w	r1, #324	; 0x144
    cd6c:	4833      	ldr	r0, [pc, #204]	; (ce3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    cd6e:	f004 fc0a 	bl	11586 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    cd72:	b108      	cbz	r0, cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cd74:	2601      	movs	r6, #1
    cd76:	e000      	b.n	cd7a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    cd78:	2600      	movs	r6, #0
    cd7a:	7a68      	ldrb	r0, [r5, #9]
    cd7c:	4f30      	ldr	r7, [pc, #192]	; (ce40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    cd7e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    cd82:	2801      	cmp	r0, #1
    cd84:	d002      	beq.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    cd86:	2802      	cmp	r0, #2
    cd88:	d008      	beq.n	cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cd8a:	e018      	b.n	cdbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    cd8c:	4638      	mov	r0, r7
    cd8e:	f004 fbf5 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    cd92:	b108      	cbz	r0, cd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    cd94:	2408      	movs	r4, #8
    cd96:	e012      	b.n	cdbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    cd98:	2400      	movs	r4, #0
    cd9a:	e010      	b.n	cdbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    cd9c:	4638      	mov	r0, r7
    cd9e:	f004 fbed 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    cda2:	b100      	cbz	r0, cda6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    cda4:	2002      	movs	r0, #2
    cda6:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    cdaa:	43c9      	mvns	r1, r1
    cdac:	f341 0100 	sbfx	r1, r1, #0, #1
    cdb0:	1c49      	adds	r1, r1, #1
    cdb2:	d001      	beq.n	cdb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    cdb4:	2400      	movs	r4, #0
    cdb6:	e000      	b.n	cdba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    cdb8:	2404      	movs	r4, #4
    cdba:	4304      	orrs	r4, r0
    cdbc:	4334      	orrs	r4, r6
    cdbe:	f014 0f0b 	tst.w	r4, #11
    cdc2:	d107      	bne.n	cdd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    cdc4:	f44f 7188 	mov.w	r1, #272	; 0x110
    cdc8:	4638      	mov	r0, r7
    cdca:	f004 fbd7 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    cdce:	b100      	cbz	r0, cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    cdd0:	2010      	movs	r0, #16
    cdd2:	4304      	orrs	r4, r0
    cdd4:	481b      	ldr	r0, [pc, #108]	; (ce44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    cdd6:	7800      	ldrb	r0, [r0, #0]
    cdd8:	b1f8      	cbz	r0, ce1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    cdda:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    cdde:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    cde2:	d007      	beq.n	cdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    cde4:	f44f 718a 	mov.w	r1, #276	; 0x114
    cde8:	4638      	mov	r0, r7
    cdea:	f004 fbc7 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    cdee:	b108      	cbz	r0, cdf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    cdf0:	2001      	movs	r0, #1
    cdf2:	e000      	b.n	cdf6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    cdf4:	2000      	movs	r0, #0
    cdf6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    cdfa:	b13e      	cbz	r6, ce0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    cdfc:	f44f 718c 	mov.w	r1, #280	; 0x118
    ce00:	4638      	mov	r0, r7
    ce02:	f004 fbbb 	bl	1157c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    ce06:	b108      	cbz	r0, ce0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    ce08:	2001      	movs	r0, #1
    ce0a:	e000      	b.n	ce0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    ce0c:	2000      	movs	r0, #0
    ce0e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    ce12:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    ce16:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    ce1a:	f7ff ff2d 	bl	cc78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    ce1e:	06e0      	lsls	r0, r4, #27
    ce20:	d506      	bpl.n	ce30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ce22:	0720      	lsls	r0, r4, #28
    ce24:	d404      	bmi.n	ce30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ce26:	7a68      	ldrb	r0, [r5, #9]
    ce28:	2801      	cmp	r0, #1
    ce2a:	d101      	bne.n	ce30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    ce2c:	f044 0420 	orr.w	r4, r4, #32
    ce30:	4620      	mov	r0, r4
    ce32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce36:	0000      	.short	0x0000
    ce38:	20001284 	.word	0x20001284
    ce3c:	40008000 	.word	0x40008000
    ce40:	40001000 	.word	0x40001000
    ce44:	20000274 	.word	0x20000274
    ce48:	4809      	ldr	r0, [pc, #36]	; (ce70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    ce4a:	b510      	push	{r4, lr}
    ce4c:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    ce50:	f000 000f 	and.w	r0, r0, #15
    ce54:	2803      	cmp	r0, #3
    ce56:	d006      	beq.n	ce66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    ce58:	2804      	cmp	r0, #4
    ce5a:	d006      	beq.n	ce6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    ce5c:	f240 11dd 	movw	r1, #477	; 0x1dd
    ce60:	203e      	movs	r0, #62	; 0x3e
    ce62:	f7f8 fc31 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce66:	2001      	movs	r0, #1
    ce68:	bd10      	pop	{r4, pc}
    ce6a:	2002      	movs	r0, #2
    ce6c:	bd10      	pop	{r4, pc}
    ce6e:	0000      	.short	0x0000
    ce70:	40001000 	.word	0x40001000
    ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce78:	4c19      	ldr	r4, [pc, #100]	; (cee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    ce7a:	460d      	mov	r5, r1
    ce7c:	7a21      	ldrb	r1, [r4, #8]
    ce7e:	b129      	cbz	r1, ce8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    ce80:	f010 0f11 	tst.w	r0, #17
    ce84:	d00b      	beq.n	ce9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    ce86:	f7ff f9d5 	bl	c234 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ce8a:	e027      	b.n	cedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    ce8c:	4915      	ldr	r1, [pc, #84]	; (cee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    ce8e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ce92:	6008      	str	r0, [r1, #0]
    ce94:	f000 f862 	bl	cf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    ce98:	2000      	movs	r0, #0
    ce9a:	7320      	strb	r0, [r4, #12]
    ce9c:	e01e      	b.n	cedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    ce9e:	2901      	cmp	r1, #1
    cea0:	d001      	beq.n	cea6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    cea2:	2601      	movs	r6, #1
    cea4:	e000      	b.n	cea8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    cea6:	2600      	movs	r6, #0
    cea8:	79e0      	ldrb	r0, [r4, #7]
    ceaa:	2801      	cmp	r0, #1
    ceac:	d00e      	beq.n	cecc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    ceae:	2700      	movs	r7, #0
    ceb0:	f000 f854 	bl	cf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    ceb4:	2196      	movs	r1, #150	; 0x96
    ceb6:	4630      	mov	r0, r6
    ceb8:	f000 f866 	bl	cf88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    cebc:	4601      	mov	r1, r0
    cebe:	b14f      	cbz	r7, ced4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    cec0:	353b      	adds	r5, #59	; 0x3b
    cec2:	428d      	cmp	r5, r1
    cec4:	d904      	bls.n	ced0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    cec6:	2000      	movs	r0, #0
    cec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cecc:	2701      	movs	r7, #1
    cece:	e7ef      	b.n	ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    ced0:	2001      	movs	r0, #1
    ced2:	71e0      	strb	r0, [r4, #7]
    ced4:	7aa2      	ldrb	r2, [r4, #10]
    ced6:	4630      	mov	r0, r6
    ced8:	f7ff fc6a 	bl	c7b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    cedc:	2001      	movs	r0, #1
    cede:	e7f3      	b.n	cec8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    cee0:	20001284 	.word	0x20001284
    cee4:	4001f508 	.word	0x4001f508
    cee8:	4805      	ldr	r0, [pc, #20]	; (cf00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    ceea:	2100      	movs	r1, #0
    ceec:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    cef0:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    cef4:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    cef8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    cefc:	4770      	bx	lr
    cefe:	0000      	.short	0x0000
    cf00:	40001000 	.word	0x40001000
    cf04:	4804      	ldr	r0, [pc, #16]	; (cf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    cf06:	6a81      	ldr	r1, [r0, #40]	; 0x28
    cf08:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    cf0c:	6281      	str	r1, [r0, #40]	; 0x28
    cf0e:	4903      	ldr	r1, [pc, #12]	; (cf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    cf10:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    cf14:	6008      	str	r0, [r1, #0]
    cf16:	4770      	bx	lr
    cf18:	20001284 	.word	0x20001284
    cf1c:	4001f504 	.word	0x4001f504
    cf20:	4a07      	ldr	r2, [pc, #28]	; (cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    cf22:	2000      	movs	r0, #0
    cf24:	3208      	adds	r2, #8
    cf26:	4906      	ldr	r1, [pc, #24]	; (cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    cf28:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cf2c:	1d0a      	adds	r2, r1, #4
    cf2e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    cf32:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    cf36:	4902      	ldr	r1, [pc, #8]	; (cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    cf38:	310c      	adds	r1, #12
    cf3a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    cf3e:	4770      	bx	lr
    cf40:	40008000 	.word	0x40008000
    cf44:	4903      	ldr	r1, [pc, #12]	; (cf54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    cf46:	79c9      	ldrb	r1, [r1, #7]
    cf48:	2900      	cmp	r1, #0
    cf4a:	d102      	bne.n	cf52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    cf4c:	4902      	ldr	r1, [pc, #8]	; (cf58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    cf4e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    cf52:	4770      	bx	lr
    cf54:	20001284 	.word	0x20001284
    cf58:	4001f098 	.word	0x4001f098
    cf5c:	4802      	ldr	r0, [pc, #8]	; (cf68 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    cf5e:	2100      	movs	r1, #0
    cf60:	71c1      	strb	r1, [r0, #7]
    cf62:	7201      	strb	r1, [r0, #8]
    cf64:	7241      	strb	r1, [r0, #9]
    cf66:	4770      	bx	lr
    cf68:	20001284 	.word	0x20001284
    cf6c:	4a05      	ldr	r2, [pc, #20]	; (cf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    cf6e:	79d2      	ldrb	r2, [r2, #7]
    cf70:	2a01      	cmp	r2, #1
    cf72:	d006      	beq.n	cf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    cf74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cf78:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    cf7c:	fbb1 f1f2 	udiv	r1, r1, r2
    cf80:	1a40      	subs	r0, r0, r1
    cf82:	4770      	bx	lr
    cf84:	20001284 	.word	0x20001284
    cf88:	b570      	push	{r4, r5, r6, lr}
    cf8a:	4c13      	ldr	r4, [pc, #76]	; (cfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    cf8c:	4603      	mov	r3, r0
    cf8e:	460d      	mov	r5, r1
    cf90:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    cf94:	2000      	movs	r0, #0
    cf96:	b15a      	cbz	r2, cfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    cf98:	4621      	mov	r1, r4
    cf9a:	f891 1020 	ldrb.w	r1, [r1, #32]
    cf9e:	b163      	cbz	r3, cfba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    cfa0:	2b01      	cmp	r3, #1
    cfa2:	d111      	bne.n	cfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    cfa4:	2a01      	cmp	r2, #1
    cfa6:	4628      	mov	r0, r5
    cfa8:	d012      	beq.n	cfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    cfaa:	f004 fb31 	bl	11610 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    cfae:	e009      	b.n	cfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    cfb0:	f240 7152 	movw	r1, #1874	; 0x752
    cfb4:	203e      	movs	r0, #62	; 0x3e
    cfb6:	f7f8 fb87 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfba:	2a01      	cmp	r2, #1
    cfbc:	4628      	mov	r0, r5
    cfbe:	d004      	beq.n	cfca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    cfc0:	f004 fb34 	bl	1162c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    cfc4:	69e1      	ldr	r1, [r4, #28]
    cfc6:	4408      	add	r0, r1
    cfc8:	bd70      	pop	{r4, r5, r6, pc}
    cfca:	f004 fb49 	bl	11660 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    cfce:	e7f9      	b.n	cfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    cfd0:	f004 fb37 	bl	11642 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    cfd4:	e7f6      	b.n	cfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    cfd6:	0000      	.short	0x0000
    cfd8:	20001284 	.word	0x20001284
    cfdc:	b510      	push	{r4, lr}
    cfde:	2200      	movs	r2, #0
    cfe0:	2901      	cmp	r1, #1
    cfe2:	d008      	beq.n	cff6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    cfe4:	2902      	cmp	r1, #2
    cfe6:	d004      	beq.n	cff2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    cfe8:	f240 2163 	movw	r1, #611	; 0x263
    cfec:	203e      	movs	r0, #62	; 0x3e
    cfee:	f7f8 fb6b 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    cff6:	4905      	ldr	r1, [pc, #20]	; (d00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    cff8:	430a      	orrs	r2, r1
    cffa:	4905      	ldr	r1, [pc, #20]	; (d010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    cffc:	600a      	str	r2, [r1, #0]
    cffe:	4905      	ldr	r1, [pc, #20]	; (d014 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    d000:	4308      	orrs	r0, r1
    d002:	4903      	ldr	r1, [pc, #12]	; (d010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    d004:	1d09      	adds	r1, r1, #4
    d006:	6008      	str	r0, [r1, #0]
    d008:	bd10      	pop	{r4, pc}
    d00a:	0000      	.short	0x0000
    d00c:	00100108 	.word	0x00100108
    d010:	40001514 	.word	0x40001514
    d014:	02030000 	.word	0x02030000

0000d018 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    d018:	4901      	ldr	r1, [pc, #4]	; (d020 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    d01a:	b2c0      	uxtb	r0, r0
    d01c:	6008      	str	r0, [r1, #0]
    d01e:	4770      	bx	lr
    d020:	4000150c 	.word	0x4000150c

0000d024 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    d024:	b510      	push	{r4, lr}
    d026:	4907      	ldr	r1, [pc, #28]	; (d044 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    d028:	2801      	cmp	r0, #1
    d02a:	d005      	beq.n	d038 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    d02c:	2802      	cmp	r0, #2
    d02e:	d005      	beq.n	d03c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    d030:	218b      	movs	r1, #139	; 0x8b
    d032:	203f      	movs	r0, #63	; 0x3f
    d034:	f7f8 fb48 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d038:	2003      	movs	r0, #3
    d03a:	e000      	b.n	d03e <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    d03c:	2004      	movs	r0, #4
    d03e:	6008      	str	r0, [r1, #0]
    d040:	bd10      	pop	{r4, pc}
    d042:	0000      	.short	0x0000
    d044:	40001510 	.word	0x40001510

0000d048 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    d048:	4770      	bx	lr
    d04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d04e:	000d      	movs	r5, r1
    d050:	4604      	mov	r4, r0
    d052:	f04f 0602 	mov.w	r6, #2
    d056:	f04f 0701 	mov.w	r7, #1
    d05a:	d008      	beq.n	d06e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    d05c:	7828      	ldrb	r0, [r5, #0]
    d05e:	b1d0      	cbz	r0, d096 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    d060:	2801      	cmp	r0, #1
    d062:	d007      	beq.n	d074 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    d064:	2802      	cmp	r0, #2
    d066:	d014      	beq.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d068:	2803      	cmp	r0, #3
    d06a:	d13b      	bne.n	d0e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    d06c:	e016      	b.n	d09c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    d06e:	f880 7020 	strb.w	r7, [r0, #32]
    d072:	e00e      	b.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d074:	6868      	ldr	r0, [r5, #4]
    d076:	28c8      	cmp	r0, #200	; 0xc8
    d078:	d303      	bcc.n	d082 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    d07a:	2104      	movs	r1, #4
    d07c:	f7f5 fe22 	bl	2cc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d080:	b108      	cbz	r0, d086 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    d082:	2600      	movs	r6, #0
    d084:	e007      	b.n	d096 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    d086:	4620      	mov	r0, r4
    d088:	6869      	ldr	r1, [r5, #4]
    d08a:	f000 f92a 	bl	d2e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    d08e:	2601      	movs	r6, #1
    d090:	e001      	b.n	d096 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    d092:	f7f4 fe35 	bl	1d00 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
    d096:	4630      	mov	r0, r6
    d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d09c:	7820      	ldrb	r0, [r4, #0]
    d09e:	2800      	cmp	r0, #0
    d0a0:	d1f7      	bne.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d0a2:	6868      	ldr	r0, [r5, #4]
    d0a4:	f7f4 fdfe 	bl	1ca4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
    d0a8:	b1e0      	cbz	r0, d0e4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    d0aa:	6869      	ldr	r1, [r5, #4]
    d0ac:	7808      	ldrb	r0, [r1, #0]
    d0ae:	b128      	cbz	r0, d0bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    d0b0:	78a0      	ldrb	r0, [r4, #2]
    d0b2:	2805      	cmp	r0, #5
    d0b4:	d007      	beq.n	d0c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    d0b6:	f240 1179 	movw	r1, #377	; 0x179
    d0ba:	e010      	b.n	d0de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    d0bc:	4620      	mov	r0, r4
    d0be:	f000 f918 	bl	d2f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    d0c2:	7067      	strb	r7, [r4, #1]
    d0c4:	e7e5      	b.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d0c6:	4620      	mov	r0, r4
    d0c8:	f000 f92b 	bl	d322 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    d0cc:	78e0      	ldrb	r0, [r4, #3]
    d0ce:	f104 010c 	add.w	r1, r4, #12
    d0d2:	f000 f80a 	bl	d0ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d1db      	bne.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d0da:	f240 117b 	movw	r1, #379	; 0x17b
    d0de:	206a      	movs	r0, #106	; 0x6a
    d0e0:	f7f8 f846 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d0e4:	f884 7020 	strb.w	r7, [r4, #32]
    d0e8:	e7d3      	b.n	d092 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    d0ea:	f7f6 b837 	b.w	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0f2:	460d      	mov	r5, r1
    d0f4:	0004      	movs	r4, r0
    d0f6:	d00b      	beq.n	d110 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    d0f8:	7926      	ldrb	r6, [r4, #4]
    d0fa:	2700      	movs	r7, #0
    d0fc:	2002      	movs	r0, #2
    d0fe:	2d09      	cmp	r5, #9
    d100:	d27b      	bcs.n	d1fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    d102:	e8df f005 	tbb	[pc, r5]
    d106:	1008      	.short	0x1008
    d108:	645b2e2e 	.word	0x645b2e2e
    d10c:	0086977c 	.word	0x0086977c
    d110:	f240 1193 	movw	r1, #403	; 0x193
    d114:	e0e2      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d116:	78a0      	ldrb	r0, [r4, #2]
    d118:	2804      	cmp	r0, #4
    d11a:	d06f      	beq.n	d1fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    d11c:	2803      	cmp	r0, #3
    d11e:	d0fc      	beq.n	d11a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    d120:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    d124:	e0da      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d126:	78a0      	ldrb	r0, [r4, #2]
    d128:	2804      	cmp	r0, #4
    d12a:	d004      	beq.n	d136 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    d12c:	2803      	cmp	r0, #3
    d12e:	d002      	beq.n	d136 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    d130:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    d134:	e0d2      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d136:	2005      	movs	r0, #5
    d138:	70a0      	strb	r0, [r4, #2]
    d13a:	f884 7020 	strb.w	r7, [r4, #32]
    d13e:	7820      	ldrb	r0, [r4, #0]
    d140:	bb80      	cbnz	r0, d1a4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    d142:	2100      	movs	r1, #0
    d144:	4620      	mov	r0, r4
    d146:	f000 f8cc 	bl	d2e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    d14a:	7b20      	ldrb	r0, [r4, #12]
    d14c:	2801      	cmp	r0, #1
    d14e:	d004      	beq.n	d15a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    d150:	69a0      	ldr	r0, [r4, #24]
    d152:	61e0      	str	r0, [r4, #28]
    d154:	2100      	movs	r1, #0
    d156:	68a2      	ldr	r2, [r4, #8]
    d158:	e041      	b.n	d1de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d15a:	78e0      	ldrb	r0, [r4, #3]
    d15c:	f7f5 feda 	bl	2f14 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    d160:	e7f7      	b.n	d152 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    d162:	78a1      	ldrb	r1, [r4, #2]
    d164:	2904      	cmp	r1, #4
    d166:	d004      	beq.n	d172 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    d168:	2903      	cmp	r1, #3
    d16a:	d002      	beq.n	d172 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    d16c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    d170:	e0b4      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d172:	7822      	ldrb	r2, [r4, #0]
    d174:	b122      	cbz	r2, d180 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    d176:	4621      	mov	r1, r4
    d178:	4630      	mov	r0, r6
    d17a:	f000 f8ee 	bl	d35a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    d17e:	e0a4      	b.n	d2ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    d180:	2904      	cmp	r1, #4
    d182:	d000      	beq.n	d186 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    d184:	2001      	movs	r0, #1
    d186:	70a0      	strb	r0, [r4, #2]
    d188:	68a2      	ldr	r2, [r4, #8]
    d18a:	2d02      	cmp	r5, #2
    d18c:	d00b      	beq.n	d1a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    d18e:	2106      	movs	r1, #6
    d190:	4630      	mov	r0, r6
    d192:	4790      	blx	r2
    d194:	2800      	cmp	r0, #0
    d196:	d06b      	beq.n	d270 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    d198:	7800      	ldrb	r0, [r0, #0]
    d19a:	2800      	cmp	r0, #0
    d19c:	d068      	beq.n	d270 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    d19e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    d1a2:	e09b      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d1a4:	e031      	b.n	d20a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    d1a6:	2105      	movs	r1, #5
    d1a8:	4630      	mov	r0, r6
    d1aa:	4790      	blx	r2
    d1ac:	2800      	cmp	r0, #0
    d1ae:	d071      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d1b0:	7800      	ldrb	r0, [r0, #0]
    d1b2:	2800      	cmp	r0, #0
    d1b4:	d06e      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d1b6:	f240 11d5 	movw	r1, #469	; 0x1d5
    d1ba:	e08f      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d1bc:	78a0      	ldrb	r0, [r4, #2]
    d1be:	2805      	cmp	r0, #5
    d1c0:	d002      	beq.n	d1c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    d1c2:	f240 11e1 	movw	r1, #481	; 0x1e1
    d1c6:	e089      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d1c8:	2102      	movs	r1, #2
    d1ca:	68a2      	ldr	r2, [r4, #8]
    d1cc:	e007      	b.n	d1de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d1ce:	78a0      	ldrb	r0, [r4, #2]
    d1d0:	2805      	cmp	r0, #5
    d1d2:	d002      	beq.n	d1da <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    d1d4:	f240 11e7 	movw	r1, #487	; 0x1e7
    d1d8:	e080      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d1da:	68a2      	ldr	r2, [r4, #8]
    d1dc:	2101      	movs	r1, #1
    d1de:	4630      	mov	r0, r6
    d1e0:	4790      	blx	r2
    d1e2:	4601      	mov	r1, r0
    d1e4:	4620      	mov	r0, r4
    d1e6:	f7ff ff30 	bl	d04a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d1ea:	2802      	cmp	r0, #2
    d1ec:	d06d      	beq.n	d2ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    d1ee:	b3f0      	cbz	r0, d26e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    d1f0:	2801      	cmp	r0, #1
    d1f2:	d064      	beq.n	d2be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    d1f4:	f240 2127 	movw	r1, #551	; 0x227
    d1f8:	e070      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d1fa:	e05d      	b.n	d2b8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    d1fc:	e067      	b.n	d2ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    d1fe:	78a0      	ldrb	r0, [r4, #2]
    d200:	2805      	cmp	r0, #5
    d202:	d002      	beq.n	d20a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    d204:	f240 11ed 	movw	r1, #493	; 0x1ed
    d208:	e068      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d20e:	f7f4 bd77 	b.w	1d00 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x90>
    d212:	78a0      	ldrb	r0, [r4, #2]
    d214:	2805      	cmp	r0, #5
    d216:	d002      	beq.n	d21e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    d218:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    d21c:	e05e      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d21e:	68a2      	ldr	r2, [r4, #8]
    d220:	210a      	movs	r1, #10
    d222:	4630      	mov	r0, r6
    d224:	4790      	blx	r2
    d226:	4601      	mov	r1, r0
    d228:	4620      	mov	r0, r4
    d22a:	f7ff ff0e 	bl	d04a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d22e:	f240 11f5 	movw	r1, #501	; 0x1f5
    d232:	e053      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d234:	78a1      	ldrb	r1, [r4, #2]
    d236:	2905      	cmp	r1, #5
    d238:	d006      	beq.n	d248 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    d23a:	7862      	ldrb	r2, [r4, #1]
    d23c:	b10a      	cbz	r2, d242 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    d23e:	2903      	cmp	r1, #3
    d240:	d002      	beq.n	d248 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    d242:	f240 11f9 	movw	r1, #505	; 0x1f9
    d246:	e049      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d248:	7821      	ldrb	r1, [r4, #0]
    d24a:	b129      	cbz	r1, d258 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    d24c:	4621      	mov	r1, r4
    d24e:	4630      	mov	r0, r6
    d250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d254:	f000 b881 	b.w	d35a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    d258:	f894 1020 	ldrb.w	r1, [r4, #32]
    d25c:	b189      	cbz	r1, d282 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    d25e:	f884 7020 	strb.w	r7, [r4, #32]
    d262:	70a0      	strb	r0, [r4, #2]
    d264:	68a2      	ldr	r2, [r4, #8]
    d266:	2108      	movs	r1, #8
    d268:	4630      	mov	r0, r6
    d26a:	4790      	blx	r2
    d26c:	e001      	b.n	d272 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    d26e:	e029      	b.n	d2c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    d270:	e02b      	b.n	d2ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    d272:	2800      	cmp	r0, #0
    d274:	d00e      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d276:	7800      	ldrb	r0, [r0, #0]
    d278:	2800      	cmp	r0, #0
    d27a:	d00b      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d27c:	f240 2105 	movw	r1, #517	; 0x205
    d280:	e02c      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d282:	7861      	ldrb	r1, [r4, #1]
    d284:	b159      	cbz	r1, d29e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    d286:	78e0      	ldrb	r0, [r4, #3]
    d288:	f104 010c 	add.w	r1, r4, #12
    d28c:	f7ff ff2d 	bl	d0ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    d290:	b110      	cbz	r0, d298 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    d292:	7067      	strb	r7, [r4, #1]
    d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d298:	f240 2109 	movw	r1, #521	; 0x209
    d29c:	e01e      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d29e:	70a0      	strb	r0, [r4, #2]
    d2a0:	68a2      	ldr	r2, [r4, #8]
    d2a2:	2107      	movs	r1, #7
    d2a4:	4630      	mov	r0, r6
    d2a6:	4790      	blx	r2
    d2a8:	2800      	cmp	r0, #0
    d2aa:	d0f3      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d2ac:	7800      	ldrb	r0, [r0, #0]
    d2ae:	2800      	cmp	r0, #0
    d2b0:	d0f0      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d2b2:	f240 2111 	movw	r1, #529	; 0x211
    d2b6:	e011      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d2b8:	f240 2116 	movw	r1, #534	; 0x216
    d2bc:	e00e      	b.n	d2dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    d2be:	2104      	movs	r1, #4
    d2c0:	68a2      	ldr	r2, [r4, #8]
    d2c2:	e78c      	b.n	d1de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d2c4:	2103      	movs	r1, #3
    d2c6:	68a2      	ldr	r2, [r4, #8]
    d2c8:	e789      	b.n	d1de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    d2ca:	2d00      	cmp	r5, #0
    d2cc:	d1e2      	bne.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d2ce:	f000 f8f2 	bl	d4b6 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    d2d2:	6800      	ldr	r0, [r0, #0]
    d2d4:	2800      	cmp	r0, #0
    d2d6:	d0dd      	beq.n	d294 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    d2d8:	f240 2131 	movw	r1, #561	; 0x231
    d2dc:	206a      	movs	r0, #106	; 0x6a
    d2de:	f7f7 ff47 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2e2:	4602      	mov	r2, r0
    d2e4:	7b03      	ldrb	r3, [r0, #12]
    d2e6:	6900      	ldr	r0, [r0, #16]
    d2e8:	4408      	add	r0, r1
    d2ea:	6110      	str	r0, [r2, #16]
    d2ec:	3859      	subs	r0, #89	; 0x59
    d2ee:	f7f6 bdc9 	b.w	3e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    d2f2:	2201      	movs	r2, #1
    d2f4:	7302      	strb	r2, [r0, #12]
    d2f6:	2200      	movs	r2, #0
    d2f8:	75c2      	strb	r2, [r0, #23]
    d2fa:	790a      	ldrb	r2, [r1, #4]
    d2fc:	b16a      	cbz	r2, d31a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    d2fe:	2200      	movs	r2, #0
    d300:	8282      	strh	r2, [r0, #20]
    d302:	794a      	ldrb	r2, [r1, #5]
    d304:	b15a      	cbz	r2, d31e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    d306:	2204      	movs	r2, #4
    d308:	7582      	strb	r2, [r0, #22]
    d30a:	688a      	ldr	r2, [r1, #8]
    d30c:	326a      	adds	r2, #106	; 0x6a
    d30e:	6102      	str	r2, [r0, #16]
    d310:	68c9      	ldr	r1, [r1, #12]
    d312:	6181      	str	r1, [r0, #24]
    d314:	2103      	movs	r1, #3
    d316:	7081      	strb	r1, [r0, #2]
    d318:	4770      	bx	lr
    d31a:	222b      	movs	r2, #43	; 0x2b
    d31c:	e7f0      	b.n	d300 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    d31e:	2203      	movs	r2, #3
    d320:	e7f2      	b.n	d308 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    d322:	b510      	push	{r4, lr}
    d324:	4604      	mov	r4, r0
    d326:	2000      	movs	r0, #0
    d328:	7320      	strb	r0, [r4, #12]
    d32a:	75e0      	strb	r0, [r4, #23]
    d32c:	7908      	ldrb	r0, [r1, #4]
    d32e:	b180      	cbz	r0, d352 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    d330:	2000      	movs	r0, #0
    d332:	82a0      	strh	r0, [r4, #20]
    d334:	7948      	ldrb	r0, [r1, #5]
    d336:	b170      	cbz	r0, d356 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    d338:	2004      	movs	r0, #4
    d33a:	75a0      	strb	r0, [r4, #22]
    d33c:	68c8      	ldr	r0, [r1, #12]
    d33e:	306a      	adds	r0, #106	; 0x6a
    d340:	6120      	str	r0, [r4, #16]
    d342:	6889      	ldr	r1, [r1, #8]
    d344:	69e0      	ldr	r0, [r4, #28]
    d346:	f7f5 fd8f 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d34a:	61a0      	str	r0, [r4, #24]
    d34c:	2004      	movs	r0, #4
    d34e:	70a0      	strb	r0, [r4, #2]
    d350:	bd10      	pop	{r4, pc}
    d352:	202b      	movs	r0, #43	; 0x2b
    d354:	e7ed      	b.n	d332 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    d356:	2003      	movs	r0, #3
    d358:	e7ef      	b.n	d33a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    d35a:	b570      	push	{r4, r5, r6, lr}
    d35c:	4605      	mov	r5, r0
    d35e:	460c      	mov	r4, r1
    d360:	78c8      	ldrb	r0, [r1, #3]
    d362:	f7f6 fb57 	bl	3a14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    d366:	b178      	cbz	r0, d388 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    d368:	4620      	mov	r0, r4
    d36a:	f000 f810 	bl	d38e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    d36e:	68a2      	ldr	r2, [r4, #8]
    d370:	2109      	movs	r1, #9
    d372:	4628      	mov	r0, r5
    d374:	4790      	blx	r2
    d376:	2800      	cmp	r0, #0
    d378:	d008      	beq.n	d38c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    d37a:	7800      	ldrb	r0, [r0, #0]
    d37c:	2800      	cmp	r0, #0
    d37e:	d005      	beq.n	d38c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    d380:	21db      	movs	r1, #219	; 0xdb
    d382:	206a      	movs	r0, #106	; 0x6a
    d384:	f7f7 fef4 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d388:	21d7      	movs	r1, #215	; 0xd7
    d38a:	e7fa      	b.n	d382 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    d38c:	bd70      	pop	{r4, r5, r6, pc}
    d38e:	2100      	movs	r1, #0
    d390:	7081      	strb	r1, [r0, #2]
    d392:	7001      	strb	r1, [r0, #0]
    d394:	7041      	strb	r1, [r0, #1]
    d396:	4770      	bx	lr

0000d398 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d398:	b570      	push	{r4, r5, r6, lr}
    d39a:	f7f4 fd0b 	bl	1db4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d39e:	4605      	mov	r5, r0
    d3a0:	2400      	movs	r4, #0
    d3a2:	e006      	b.n	d3b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d3a4:	4620      	mov	r0, r4
    d3a6:	f7f4 fd0b 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d3aa:	f7ff fff0 	bl	d38e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    d3ae:	1c64      	adds	r4, r4, #1
    d3b0:	b2e4      	uxtb	r4, r4
    d3b2:	42ac      	cmp	r4, r5
    d3b4:	d3f6      	bcc.n	d3a4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d3b6:	bd70      	pop	{r4, r5, r6, pc}

0000d3b8 <mpsl_timeslot_request>:
    d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3bc:	460d      	mov	r5, r1
    d3be:	f7f4 fcff 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d3c2:	0004      	movs	r4, r0
    d3c4:	d007      	beq.n	d3d6 <mpsl_timeslot_request+0x1e>
    d3c6:	78a0      	ldrb	r0, [r4, #2]
    d3c8:	f06f 0622 	mvn.w	r6, #34	; 0x22
    d3cc:	2801      	cmp	r0, #1
    d3ce:	d006      	beq.n	d3de <mpsl_timeslot_request+0x26>
    d3d0:	2802      	cmp	r0, #2
    d3d2:	d110      	bne.n	d3f6 <mpsl_timeslot_request+0x3e>
    d3d4:	e003      	b.n	d3de <mpsl_timeslot_request+0x26>
    d3d6:	f06f 0001 	mvn.w	r0, #1
    d3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3de:	f06f 0715 	mvn.w	r7, #21
    d3e2:	b155      	cbz	r5, d3fa <mpsl_timeslot_request+0x42>
    d3e4:	4628      	mov	r0, r5
    d3e6:	f7f4 fc5d 	bl	1ca4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x34>
    d3ea:	b130      	cbz	r0, d3fa <mpsl_timeslot_request+0x42>
    d3ec:	7828      	ldrb	r0, [r5, #0]
    d3ee:	b130      	cbz	r0, d3fe <mpsl_timeslot_request+0x46>
    d3f0:	78a0      	ldrb	r0, [r4, #2]
    d3f2:	2802      	cmp	r0, #2
    d3f4:	d008      	beq.n	d408 <mpsl_timeslot_request+0x50>
    d3f6:	4630      	mov	r0, r6
    d3f8:	e7ef      	b.n	d3da <mpsl_timeslot_request+0x22>
    d3fa:	4638      	mov	r0, r7
    d3fc:	e7ed      	b.n	d3da <mpsl_timeslot_request+0x22>
    d3fe:	4629      	mov	r1, r5
    d400:	4620      	mov	r0, r4
    d402:	f7ff ff76 	bl	d2f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    d406:	e003      	b.n	d410 <mpsl_timeslot_request+0x58>
    d408:	4629      	mov	r1, r5
    d40a:	4620      	mov	r0, r4
    d40c:	f7ff ff89 	bl	d322 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    d410:	78e0      	ldrb	r0, [r4, #3]
    d412:	f104 010c 	add.w	r1, r4, #12
    d416:	f7ff fe68 	bl	d0ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    d41a:	b108      	cbz	r0, d420 <mpsl_timeslot_request+0x68>
    d41c:	2000      	movs	r0, #0
    d41e:	e7dc      	b.n	d3da <mpsl_timeslot_request+0x22>
    d420:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    d424:	206a      	movs	r0, #106	; 0x6a
    d426:	f7f7 fea3 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000d42a <mpsl_timeslot_session_close>:
    d42a:	b510      	push	{r4, lr}
    d42c:	4604      	mov	r4, r0
    d42e:	f7f4 fcc7 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d432:	0001      	movs	r1, r0
    d434:	d004      	beq.n	d440 <mpsl_timeslot_session_close+0x16>
    d436:	7808      	ldrb	r0, [r1, #0]
    d438:	f06f 0222 	mvn.w	r2, #34	; 0x22
    d43c:	b968      	cbnz	r0, d45a <mpsl_timeslot_session_close+0x30>
    d43e:	e002      	b.n	d446 <mpsl_timeslot_session_close+0x1c>
    d440:	f06f 0001 	mvn.w	r0, #1
    d444:	bd10      	pop	{r4, pc}
    d446:	7888      	ldrb	r0, [r1, #2]
    d448:	b138      	cbz	r0, d45a <mpsl_timeslot_session_close+0x30>
    d44a:	2802      	cmp	r0, #2
    d44c:	d007      	beq.n	d45e <mpsl_timeslot_session_close+0x34>
    d44e:	2801      	cmp	r0, #1
    d450:	d005      	beq.n	d45e <mpsl_timeslot_session_close+0x34>
    d452:	2001      	movs	r0, #1
    d454:	7008      	strb	r0, [r1, #0]
    d456:	2000      	movs	r0, #0
    d458:	bd10      	pop	{r4, pc}
    d45a:	4610      	mov	r0, r2
    d45c:	bd10      	pop	{r4, pc}
    d45e:	4620      	mov	r0, r4
    d460:	f7ff ff7b 	bl	d35a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    d464:	e7f7      	b.n	d456 <mpsl_timeslot_session_close+0x2c>

0000d466 <mpsl_timeslot_session_count_set>:
    d466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d46a:	460e      	mov	r6, r1
    d46c:	4607      	mov	r7, r0
    d46e:	f7f4 fca1 	bl	1db4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d472:	4605      	mov	r5, r0
    d474:	2400      	movs	r4, #0
    d476:	e00a      	b.n	d48e <mpsl_timeslot_session_count_set+0x28>
    d478:	4620      	mov	r0, r4
    d47a:	f7f4 fca1 	bl	1dc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d47e:	7880      	ldrb	r0, [r0, #2]
    d480:	b118      	cbz	r0, d48a <mpsl_timeslot_session_count_set+0x24>
    d482:	f04f 30ff 	mov.w	r0, #4294967295
    d486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d48a:	1c64      	adds	r4, r4, #1
    d48c:	b2e4      	uxtb	r4, r4
    d48e:	42ac      	cmp	r4, r5
    d490:	d3f2      	bcc.n	d478 <mpsl_timeslot_session_count_set+0x12>
    d492:	2e08      	cmp	r6, #8
    d494:	d902      	bls.n	d49c <mpsl_timeslot_session_count_set+0x36>
    d496:	f06f 0015 	mvn.w	r0, #21
    d49a:	e7f4      	b.n	d486 <mpsl_timeslot_session_count_set+0x20>
    d49c:	b117      	cbz	r7, d4a4 <mpsl_timeslot_session_count_set+0x3e>
    d49e:	4631      	mov	r1, r6
    d4a0:	4638      	mov	r0, r7
    d4a2:	e001      	b.n	d4a8 <mpsl_timeslot_session_count_set+0x42>
    d4a4:	2100      	movs	r1, #0
    d4a6:	4608      	mov	r0, r1
    d4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d4ac:	f7f4 bc6e 	b.w	1d8c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000d4b0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d4b0:	2000      	movs	r0, #0
    d4b2:	f7f7 ba83 	b.w	49bc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d4b6 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    d4b6:	2000      	movs	r0, #0
    d4b8:	f7f7 ba66 	b.w	4988 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d4bc:	b510      	push	{r4, lr}
    d4be:	f7f6 ff39 	bl	4334 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d4c6:	f000 b800 	b.w	d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d4ca <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d4ca:	0a41      	lsrs	r1, r0, #9
    d4cc:	f643 5209 	movw	r2, #15625	; 0x3d09
    d4d0:	4351      	muls	r1, r2
    d4d2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d4d6:	fb10 f002 	smulbb	r0, r0, r2
    d4da:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d4de:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d4e2:	4770      	bx	lr

0000d4e4 <MPSL_IRQ_RADIO_Handler>:
    d4e4:	f7f5 bd2a 	b.w	2f3c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d4e8:	2800      	cmp	r0, #0
    d4ea:	db09      	blt.n	d500 <MPSL_IRQ_RADIO_Handler+0x1c>
    d4ec:	f000 021f 	and.w	r2, r0, #31
    d4f0:	2101      	movs	r1, #1
    d4f2:	4091      	lsls	r1, r2
    d4f4:	0940      	lsrs	r0, r0, #5
    d4f6:	0080      	lsls	r0, r0, #2
    d4f8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d4fc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d500:	4770      	bx	lr
    d502:	2800      	cmp	r0, #0
    d504:	db0d      	blt.n	d522 <MPSL_IRQ_RADIO_Handler+0x3e>
    d506:	f000 021f 	and.w	r2, r0, #31
    d50a:	2101      	movs	r1, #1
    d50c:	4091      	lsls	r1, r2
    d50e:	0940      	lsrs	r0, r0, #5
    d510:	0080      	lsls	r0, r0, #2
    d512:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d516:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d51a:	f3bf 8f4f 	dsb	sy
    d51e:	f3bf 8f6f 	isb	sy
    d522:	4770      	bx	lr

0000d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d524:	b570      	push	{r4, r5, r6, lr}
    d526:	4602      	mov	r2, r0
    d528:	2000      	movs	r0, #0
    d52a:	2900      	cmp	r1, #0
    d52c:	d01d      	beq.n	d56a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d52e:	fba2 0101 	umull	r0, r1, r2, r1
    d532:	0a40      	lsrs	r0, r0, #9
    d534:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d538:	0a49      	lsrs	r1, r1, #9
    d53a:	1c40      	adds	r0, r0, #1
    d53c:	f141 0100 	adc.w	r1, r1, #0
    d540:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d544:	1883      	adds	r3, r0, r2
    d546:	f141 0100 	adc.w	r1, r1, #0
    d54a:	1c5b      	adds	r3, r3, #1
    d54c:	f141 0400 	adc.w	r4, r1, #0
    d550:	2100      	movs	r1, #0
    d552:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d556:	41a1      	sbcs	r1, r4
    d558:	d203      	bcs.n	d562 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d55a:	2171      	movs	r1, #113	; 0x71
    d55c:	206d      	movs	r0, #109	; 0x6d
    d55e:	f7f7 fe07 	bl	5170 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d562:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d566:	fbb0 f0f2 	udiv	r0, r0, r2
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	5840      	ldr	r0, [r0, r1]
    d56e:	2800      	cmp	r0, #0
    d570:	d000      	beq.n	d574 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d572:	2001      	movs	r0, #1
    d574:	4770      	bx	lr
    d576:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d57a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d57e:	f002 0201 	and.w	r2, r2, #1
    d582:	03c0      	lsls	r0, r0, #15
    d584:	d503      	bpl.n	d58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d586:	428a      	cmp	r2, r1
    d588:	d101      	bne.n	d58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d58a:	2001      	movs	r0, #1
    d58c:	4770      	bx	lr
    d58e:	2000      	movs	r0, #0
    d590:	4770      	bx	lr

0000d592 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d592:	b510      	push	{r4, lr}
    d594:	2101      	movs	r1, #1
    d596:	0788      	lsls	r0, r1, #30
    d598:	f7f7 fd94 	bl	50c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d59c:	2800      	cmp	r0, #0
    d59e:	d000      	beq.n	d5a2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d5a0:	2001      	movs	r0, #1
    d5a2:	bd10      	pop	{r4, pc}

0000d5a4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d5a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d5a8:	2101      	movs	r1, #1
    d5aa:	6001      	str	r1, [r0, #0]
    d5ac:	4770      	bx	lr

0000d5ae <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d5ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d5b2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d5b6:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d5ba:	f002 0203 	and.w	r2, r2, #3
    d5be:	03c9      	lsls	r1, r1, #15
    d5c0:	d503      	bpl.n	d5ca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d5c2:	4282      	cmp	r2, r0
    d5c4:	d101      	bne.n	d5ca <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d5c6:	2001      	movs	r0, #1
    d5c8:	4770      	bx	lr
    d5ca:	2000      	movs	r0, #0
    d5cc:	4770      	bx	lr

0000d5ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d5ce:	b510      	push	{r4, lr}
    d5d0:	2100      	movs	r1, #0
    d5d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d5d6:	f7f7 fd75 	bl	50c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d5da:	2800      	cmp	r0, #0
    d5dc:	d000      	beq.n	d5e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d5de:	2001      	movs	r0, #1
    d5e0:	bd10      	pop	{r4, pc}
    d5e2:	2800      	cmp	r0, #0
    d5e4:	db09      	blt.n	d5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d5e6:	f000 021f 	and.w	r2, r0, #31
    d5ea:	2101      	movs	r1, #1
    d5ec:	4091      	lsls	r1, r2
    d5ee:	0940      	lsrs	r0, r0, #5
    d5f0:	0080      	lsls	r0, r0, #2
    d5f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d5f6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d5fa:	4770      	bx	lr
    d5fc:	2800      	cmp	r0, #0
    d5fe:	db0d      	blt.n	d61c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d600:	f000 021f 	and.w	r2, r0, #31
    d604:	2101      	movs	r1, #1
    d606:	4091      	lsls	r1, r2
    d608:	0940      	lsrs	r0, r0, #5
    d60a:	0080      	lsls	r0, r0, #2
    d60c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d610:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d614:	f3bf 8f4f 	dsb	sy
    d618:	f3bf 8f6f 	isb	sy
    d61c:	4770      	bx	lr
    d61e:	1000      	.short	0x1000
    d620:	00fa0002 	.word	0x00fa0002
    d624:	57230000 	.word	0x57230000
    d628:	31232462 	.word	0x31232462
    d62c:	ee74578f 	.word	0xee74578f
    d630:	c0882fd1 	.word	0xc0882fd1
    d634:	a2f74594 	.word	0xa2f74594
    d638:	36f9      	.short	0x36f9
    d63a:	2800      	cmp	r0, #0
    d63c:	db09      	blt.n	d652 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d63e:	f000 021f 	and.w	r2, r0, #31
    d642:	2101      	movs	r1, #1
    d644:	4091      	lsls	r1, r2
    d646:	0940      	lsrs	r0, r0, #5
    d648:	0080      	lsls	r0, r0, #2
    d64a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d64e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d652:	4770      	bx	lr

0000d654 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d654:	f3ef 8110 	mrs	r1, PRIMASK
    d658:	b672      	cpsid	i
    d65a:	7802      	ldrb	r2, [r0, #0]
    d65c:	2a01      	cmp	r2, #1
    d65e:	d001      	beq.n	d664 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d660:	2201      	movs	r2, #1
    d662:	e000      	b.n	d666 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d664:	2200      	movs	r2, #0
    d666:	2301      	movs	r3, #1
    d668:	7003      	strb	r3, [r0, #0]
    d66a:	b901      	cbnz	r1, d66e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d66c:	b662      	cpsie	i
    d66e:	b10a      	cbz	r2, d674 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d670:	2000      	movs	r0, #0
    d672:	4770      	bx	lr
    d674:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d678:	4770      	bx	lr

0000d67a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d67a:	2100      	movs	r1, #0
    d67c:	7001      	strb	r1, [r0, #0]
    d67e:	4608      	mov	r0, r1
    d680:	4770      	bx	lr

0000d682 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d682:	f3ef 8110 	mrs	r1, PRIMASK
    d686:	b672      	cpsid	i
    d688:	2200      	movs	r2, #0
    d68a:	7002      	strb	r2, [r0, #0]
    d68c:	b901      	cbnz	r1, d690 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d68e:	b662      	cpsie	i
    d690:	2000      	movs	r0, #0
    d692:	4770      	bx	lr

0000d694 <mpsl_low_priority_process>:
    d694:	f7f7 be58 	b.w	5348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d698 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d698:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d69c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d6a0:	280f      	cmp	r0, #15
    d6a2:	d001      	beq.n	d6a8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d6a4:	2000      	movs	r0, #0
    d6a6:	4770      	bx	lr
    d6a8:	2001      	movs	r0, #1
    d6aa:	4770      	bx	lr

0000d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d6ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d6b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d6b4:	280a      	cmp	r0, #10
    d6b6:	d001      	beq.n	d6bc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d6b8:	2000      	movs	r0, #0
    d6ba:	4770      	bx	lr
    d6bc:	2001      	movs	r0, #1
    d6be:	4770      	bx	lr

0000d6c0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d6c0:	b500      	push	{lr}
    d6c2:	f7ff fff3 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d6c6:	b120      	cbz	r0, d6d2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d6c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d6cc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d6d0:	b108      	cbz	r0, d6d6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d6d2:	2000      	movs	r0, #0
    d6d4:	bd00      	pop	{pc}
    d6d6:	2001      	movs	r0, #1
    d6d8:	bd00      	pop	{pc}

0000d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d6da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d6de:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d6e2:	280e      	cmp	r0, #14
    d6e4:	d001      	beq.n	d6ea <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d6e6:	2000      	movs	r0, #0
    d6e8:	4770      	bx	lr
    d6ea:	2001      	movs	r0, #1
    d6ec:	4770      	bx	lr

0000d6ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d6ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d6f2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d6f6:	2810      	cmp	r0, #16
    d6f8:	d001      	beq.n	d6fe <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d6fa:	2000      	movs	r0, #0
    d6fc:	4770      	bx	lr
    d6fe:	2001      	movs	r0, #1
    d700:	4770      	bx	lr

0000d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d702:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d706:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d70a:	2806      	cmp	r0, #6
    d70c:	d003      	beq.n	d716 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d70e:	1c40      	adds	r0, r0, #1
    d710:	d001      	beq.n	d716 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d712:	2000      	movs	r0, #0
    d714:	4770      	bx	lr
    d716:	2001      	movs	r0, #1
    d718:	4770      	bx	lr

0000d71a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d71a:	b500      	push	{lr}
    d71c:	f7ff fff1 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d720:	b148      	cbz	r0, d736 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d722:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d726:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d72a:	2806      	cmp	r0, #6
    d72c:	d303      	bcc.n	d736 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d72e:	1c40      	adds	r0, r0, #1
    d730:	d001      	beq.n	d736 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d732:	2001      	movs	r0, #1
    d734:	bd00      	pop	{pc}
    d736:	2000      	movs	r0, #0
    d738:	bd00      	pop	{pc}

0000d73a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d73a:	b500      	push	{lr}
    d73c:	f7ff ffe1 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d740:	b138      	cbz	r0, d752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d742:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d746:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d74a:	2806      	cmp	r0, #6
    d74c:	d303      	bcc.n	d756 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d74e:	1c40      	adds	r0, r0, #1
    d750:	d001      	beq.n	d756 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d752:	2000      	movs	r0, #0
    d754:	bd00      	pop	{pc}
    d756:	2001      	movs	r0, #1
    d758:	bd00      	pop	{pc}

0000d75a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d75a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d75e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d762:	280d      	cmp	r0, #13
    d764:	d001      	beq.n	d76a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d766:	2000      	movs	r0, #0
    d768:	4770      	bx	lr
    d76a:	2001      	movs	r0, #1
    d76c:	4770      	bx	lr

0000d76e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d76e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d772:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d776:	2808      	cmp	r0, #8
    d778:	d001      	beq.n	d77e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d77a:	2000      	movs	r0, #0
    d77c:	4770      	bx	lr
    d77e:	2001      	movs	r0, #1
    d780:	4770      	bx	lr

0000d782 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d782:	2a00      	cmp	r2, #0
    d784:	bf04      	itt	eq
    d786:	2000      	moveq	r0, #0
    d788:	4770      	bxeq	lr
    d78a:	1e52      	subs	r2, r2, #1
    d78c:	d007      	beq.n	d79e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d78e:	7803      	ldrb	r3, [r0, #0]
    d790:	f891 c000 	ldrb.w	ip, [r1]
    d794:	4563      	cmp	r3, ip
    d796:	bf04      	itt	eq
    d798:	1c40      	addeq	r0, r0, #1
    d79a:	1c49      	addeq	r1, r1, #1
    d79c:	d0f5      	beq.n	d78a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d79e:	7800      	ldrb	r0, [r0, #0]
    d7a0:	7809      	ldrb	r1, [r1, #0]
    d7a2:	1a40      	subs	r0, r0, r1
    d7a4:	4770      	bx	lr

0000d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d7a6:	b4f0      	push	{r4, r5, r6, r7}
    d7a8:	ea80 0c01 	eor.w	ip, r0, r1
    d7ac:	4603      	mov	r3, r0
    d7ae:	f01c 0f03 	tst.w	ip, #3
    d7b2:	d13c      	bne.n	d82e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d7b4:	f013 0f03 	tst.w	r3, #3
    d7b8:	d00b      	beq.n	d7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d7ba:	2a00      	cmp	r2, #0
    d7bc:	bf04      	itt	eq
    d7be:	bcf0      	popeq	{r4, r5, r6, r7}
    d7c0:	4770      	bxeq	lr
    d7c2:	f811 cb01 	ldrb.w	ip, [r1], #1
    d7c6:	f803 cb01 	strb.w	ip, [r3], #1
    d7ca:	1e52      	subs	r2, r2, #1
    d7cc:	f013 0f03 	tst.w	r3, #3
    d7d0:	d1f3      	bne.n	d7ba <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d7d2:	2a03      	cmp	r2, #3
    d7d4:	d94f      	bls.n	d876 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d7d6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d7da:	d24c      	bcs.n	d876 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d7dc:	f1c2 0c00 	rsb	ip, r2, #0
    d7e0:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d7e4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d7e8:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d7ec:	f1cc 0c00 	rsb	ip, ip, #0
    d7f0:	f1bc 0f00 	cmp.w	ip, #0
    d7f4:	dd1b      	ble.n	d82e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d7f6:	1f0d      	subs	r5, r1, #4
    d7f8:	1f1c      	subs	r4, r3, #4
    d7fa:	f01c 0f01 	tst.w	ip, #1
    d7fe:	d003      	beq.n	d808 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d800:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d804:	f844 6f04 	str.w	r6, [r4, #4]!
    d808:	ea5f 066c 	movs.w	r6, ip, asr #1
    d80c:	d007      	beq.n	d81e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d80e:	686f      	ldr	r7, [r5, #4]
    d810:	6067      	str	r7, [r4, #4]
    d812:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d816:	f844 7f08 	str.w	r7, [r4, #8]!
    d81a:	1e76      	subs	r6, r6, #1
    d81c:	d1f7      	bne.n	d80e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d81e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d822:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d826:	f1cc 0c00 	rsb	ip, ip, #0
    d82a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d82e:	2a00      	cmp	r2, #0
    d830:	bf04      	itt	eq
    d832:	bcf0      	popeq	{r4, r5, r6, r7}
    d834:	4770      	bxeq	lr
    d836:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d83a:	d226      	bcs.n	d88a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d83c:	2a00      	cmp	r2, #0
    d83e:	bfdc      	itt	le
    d840:	bcf0      	pople	{r4, r5, r6, r7}
    d842:	4770      	bxle	lr
    d844:	1e49      	subs	r1, r1, #1
    d846:	1e5b      	subs	r3, r3, #1
    d848:	f012 0f01 	tst.w	r2, #1
    d84c:	d003      	beq.n	d856 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d84e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d852:	f803 cf01 	strb.w	ip, [r3, #1]!
    d856:	1052      	asrs	r2, r2, #1
    d858:	bf04      	itt	eq
    d85a:	bcf0      	popeq	{r4, r5, r6, r7}
    d85c:	4770      	bxeq	lr
    d85e:	f891 c001 	ldrb.w	ip, [r1, #1]
    d862:	f883 c001 	strb.w	ip, [r3, #1]
    d866:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d86a:	f803 cf02 	strb.w	ip, [r3, #2]!
    d86e:	1e52      	subs	r2, r2, #1
    d870:	d1f5      	bne.n	d85e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d872:	bcf0      	pop	{r4, r5, r6, r7}
    d874:	4770      	bx	lr
    d876:	2a04      	cmp	r2, #4
    d878:	d3d9      	bcc.n	d82e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d87a:	f851 cb04 	ldr.w	ip, [r1], #4
    d87e:	1f12      	subs	r2, r2, #4
    d880:	f843 cb04 	str.w	ip, [r3], #4
    d884:	2a04      	cmp	r2, #4
    d886:	d2f8      	bcs.n	d87a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d888:	e7d1      	b.n	d82e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d88a:	f811 cb01 	ldrb.w	ip, [r1], #1
    d88e:	f803 cb01 	strb.w	ip, [r3], #1
    d892:	1e52      	subs	r2, r2, #1
    d894:	d1f9      	bne.n	d88a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d896:	bcf0      	pop	{r4, r5, r6, r7}
    d898:	4770      	bx	lr

0000d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d89a:	b470      	push	{r4, r5, r6}
    d89c:	4603      	mov	r3, r0
    d89e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d8a2:	f010 0f03 	tst.w	r0, #3
    d8a6:	d009      	beq.n	d8bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d8a8:	2a00      	cmp	r2, #0
    d8aa:	bf04      	itt	eq
    d8ac:	bc70      	popeq	{r4, r5, r6}
    d8ae:	4770      	bxeq	lr
    d8b0:	f803 cb01 	strb.w	ip, [r3], #1
    d8b4:	1e52      	subs	r2, r2, #1
    d8b6:	f013 0f03 	tst.w	r3, #3
    d8ba:	d1f5      	bne.n	d8a8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d8bc:	b2c9      	uxtb	r1, r1
    d8be:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d8c2:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d8c6:	2a03      	cmp	r2, #3
    d8c8:	d939      	bls.n	d93e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d8ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d8ce:	d236      	bcs.n	d93e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d8d0:	4251      	negs	r1, r2
    d8d2:	17cc      	asrs	r4, r1, #31
    d8d4:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d8d8:	1089      	asrs	r1, r1, #2
    d8da:	424e      	negs	r6, r1
    d8dc:	2e00      	cmp	r6, #0
    d8de:	dd11      	ble.n	d904 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d8e0:	1f19      	subs	r1, r3, #4
    d8e2:	f016 0f01 	tst.w	r6, #1
    d8e6:	bf18      	it	ne
    d8e8:	f841 5f04 	strne.w	r5, [r1, #4]!
    d8ec:	1074      	asrs	r4, r6, #1
    d8ee:	d004      	beq.n	d8fa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d8f0:	604d      	str	r5, [r1, #4]
    d8f2:	f841 5f08 	str.w	r5, [r1, #8]!
    d8f6:	1e64      	subs	r4, r4, #1
    d8f8:	d1fa      	bne.n	d8f0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d8fa:	4271      	negs	r1, r6
    d8fc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d900:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d904:	2a00      	cmp	r2, #0
    d906:	bf04      	itt	eq
    d908:	bc70      	popeq	{r4, r5, r6}
    d90a:	4770      	bxeq	lr
    d90c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d910:	d21d      	bcs.n	d94e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d912:	2a00      	cmp	r2, #0
    d914:	bfdc      	itt	le
    d916:	bc70      	pople	{r4, r5, r6}
    d918:	4770      	bxle	lr
    d91a:	1e59      	subs	r1, r3, #1
    d91c:	f012 0f01 	tst.w	r2, #1
    d920:	bf18      	it	ne
    d922:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d926:	1052      	asrs	r2, r2, #1
    d928:	bf04      	itt	eq
    d92a:	bc70      	popeq	{r4, r5, r6}
    d92c:	4770      	bxeq	lr
    d92e:	f881 c001 	strb.w	ip, [r1, #1]
    d932:	f801 cf02 	strb.w	ip, [r1, #2]!
    d936:	1e52      	subs	r2, r2, #1
    d938:	d1f9      	bne.n	d92e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d93a:	bc70      	pop	{r4, r5, r6}
    d93c:	4770      	bx	lr
    d93e:	2a04      	cmp	r2, #4
    d940:	d3e0      	bcc.n	d904 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d942:	1f12      	subs	r2, r2, #4
    d944:	f843 5b04 	str.w	r5, [r3], #4
    d948:	2a04      	cmp	r2, #4
    d94a:	d2fa      	bcs.n	d942 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d94c:	e7da      	b.n	d904 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d94e:	f803 cb01 	strb.w	ip, [r3], #1
    d952:	1e52      	subs	r2, r2, #1
    d954:	d1fb      	bne.n	d94e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d956:	bc70      	pop	{r4, r5, r6}
    d958:	4770      	bx	lr
    d95a:	f04f 30ff 	mov.w	r0, #4294967295
    d95e:	4770      	bx	lr
    d960:	2000      	movs	r0, #0
    d962:	4770      	bx	lr
    d964:	2000      	movs	r0, #0
    d966:	4770      	bx	lr
    d968:	f04f 30ff 	mov.w	r0, #4294967295
    d96c:	4770      	bx	lr
    d96e:	4770      	bx	lr
    d970:	4770      	bx	lr
    d972:	2000      	movs	r0, #0
    d974:	4770      	bx	lr
    d976:	f04f 30ff 	mov.w	r0, #4294967295
    d97a:	4770      	bx	lr
    d97c:	f04f 30ff 	mov.w	r0, #4294967295
    d980:	4770      	bx	lr
    d982:	2100      	movs	r1, #0
    d984:	7001      	strb	r1, [r0, #0]
    d986:	4770      	bx	lr
    d988:	f04f 30ff 	mov.w	r0, #4294967295
    d98c:	4770      	bx	lr
    d98e:	f04f 30ff 	mov.w	r0, #4294967295
    d992:	4770      	bx	lr
    d994:	2000      	movs	r0, #0
    d996:	4770      	bx	lr
    d998:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d99c:	4605      	mov	r5, r0
    d99e:	f100 0003 	add.w	r0, r0, #3
    d9a2:	f020 0003 	bic.w	r0, r0, #3
    d9a6:	460c      	mov	r4, r1
    d9a8:	9000      	str	r0, [sp, #0]
    d9aa:	7849      	ldrb	r1, [r1, #1]
    d9ac:	f88d 1004 	strb.w	r1, [sp, #4]
    d9b0:	78a1      	ldrb	r1, [r4, #2]
    d9b2:	0016      	movs	r6, r2
    d9b4:	f88d 1005 	strb.w	r1, [sp, #5]
    d9b8:	d000      	beq.n	d9bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    d9ba:	2000      	movs	r0, #0
    d9bc:	a901      	add	r1, sp, #4
    d9be:	f7f8 f87b 	bl	5ab8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    d9c2:	9900      	ldr	r1, [sp, #0]
    d9c4:	4408      	add	r0, r1
    d9c6:	9000      	str	r0, [sp, #0]
    d9c8:	78a1      	ldrb	r1, [r4, #2]
    d9ca:	b141      	cbz	r1, d9de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    d9cc:	8a63      	ldrh	r3, [r4, #18]
    d9ce:	78e2      	ldrb	r2, [r4, #3]
    d9d0:	b106      	cbz	r6, d9d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    d9d2:	2000      	movs	r0, #0
    d9d4:	f7f8 fb00 	bl	5fd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    d9d8:	9900      	ldr	r1, [sp, #0]
    d9da:	4408      	add	r0, r1
    d9dc:	9000      	str	r0, [sp, #0]
    d9de:	4632      	mov	r2, r6
    d9e0:	4621      	mov	r1, r4
    d9e2:	4668      	mov	r0, sp
    d9e4:	f000 f808 	bl	d9f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    d9e8:	9800      	ldr	r0, [sp, #0]
    d9ea:	1dc0      	adds	r0, r0, #7
    d9ec:	f020 0007 	bic.w	r0, r0, #7
    d9f0:	9000      	str	r0, [sp, #0]
    d9f2:	1b40      	subs	r0, r0, r5
    d9f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9fc:	4606      	mov	r6, r0
    d9fe:	460c      	mov	r4, r1
    da00:	7808      	ldrb	r0, [r1, #0]
    da02:	7849      	ldrb	r1, [r1, #1]
    da04:	2700      	movs	r7, #0
    da06:	4408      	add	r0, r1
    da08:	4691      	mov	r9, r2
    da0a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    da0e:	463d      	mov	r5, r7
    da10:	e00e      	b.n	da30 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    da12:	7a23      	ldrb	r3, [r4, #8]
    da14:	2b02      	cmp	r3, #2
    da16:	d200      	bcs.n	da1a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    da18:	2302      	movs	r3, #2
    da1a:	79e2      	ldrb	r2, [r4, #7]
    da1c:	2a03      	cmp	r2, #3
    da1e:	d200      	bcs.n	da22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    da20:	2203      	movs	r2, #3
    da22:	79a1      	ldrb	r1, [r4, #6]
    da24:	7960      	ldrb	r0, [r4, #5]
    da26:	f000 fedf 	bl	e7e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    da2a:	1c6d      	adds	r5, r5, #1
    da2c:	4407      	add	r7, r0
    da2e:	b2ed      	uxtb	r5, r5
    da30:	4545      	cmp	r5, r8
    da32:	d3ee      	bcc.n	da12 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    da34:	6830      	ldr	r0, [r6, #0]
    da36:	1cc0      	adds	r0, r0, #3
    da38:	f020 0003 	bic.w	r0, r0, #3
    da3c:	6030      	str	r0, [r6, #0]
    da3e:	f1b9 0f00 	cmp.w	r9, #0
    da42:	d000      	beq.n	da46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    da44:	2000      	movs	r0, #0
    da46:	463a      	mov	r2, r7
    da48:	4641      	mov	r1, r8
    da4a:	f7f8 fa0f 	bl	5e6c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    da4e:	6831      	ldr	r1, [r6, #0]
    da50:	4408      	add	r0, r1
    da52:	6030      	str	r0, [r6, #0]
    da54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000da58 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    da58:	2000      	movs	r0, #0
    da5a:	4770      	bx	lr

0000da5c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    da5c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    da5e:	4604      	mov	r4, r0
    da60:	1d01      	adds	r1, r0, #4
    da62:	4668      	mov	r0, sp
    da64:	f7f9 fed8 	bl	7818 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    da68:	2800      	cmp	r0, #0
    da6a:	d004      	beq.n	da76 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    da6c:	4669      	mov	r1, sp
    da6e:	4620      	mov	r0, r4
    da70:	f000 f848 	bl	db04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    da74:	2001      	movs	r0, #1
    da76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000da78 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    da78:	b50e      	push	{r1, r2, r3, lr}
    da7a:	4601      	mov	r1, r0
    da7c:	4668      	mov	r0, sp
    da7e:	f000 f827 	bl	dad0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    da82:	4668      	mov	r0, sp
    da84:	f001 fc76 	bl	f374 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    da88:	bd0e      	pop	{r1, r2, r3, pc}

0000da8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    da8a:	b510      	push	{r4, lr}
    da8c:	4604      	mov	r4, r0
    da8e:	4620      	mov	r0, r4
    da90:	f7f7 ff00 	bl	5894 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    da94:	2800      	cmp	r0, #0
    da96:	d006      	beq.n	daa6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    da98:	78a1      	ldrb	r1, [r4, #2]
    da9a:	7820      	ldrb	r0, [r4, #0]
    da9c:	f000 f804 	bl	daa8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    daa0:	2800      	cmp	r0, #0
    daa2:	d0f4      	beq.n	da8e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    daa4:	2001      	movs	r0, #1
    daa6:	bd10      	pop	{r4, pc}
    daa8:	b570      	push	{r4, r5, r6, lr}
    daaa:	460c      	mov	r4, r1
    daac:	4605      	mov	r5, r0
    daae:	f7f7 ff63 	bl	5978 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    dab2:	2800      	cmp	r0, #0
    dab4:	d002      	beq.n	dabc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    dab6:	2d3e      	cmp	r5, #62	; 0x3e
    dab8:	d001      	beq.n	dabe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    daba:	2001      	movs	r0, #1
    dabc:	bd70      	pop	{r4, r5, r6, pc}
    dabe:	2c12      	cmp	r4, #18
    dac0:	d004      	beq.n	dacc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    dac2:	4620      	mov	r0, r4
    dac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dac8:	f7f7 bf72 	b.w	59b0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    dacc:	2000      	movs	r0, #0
    dace:	bd70      	pop	{r4, r5, r6, pc}

0000dad0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    dad0:	880a      	ldrh	r2, [r1, #0]
    dad2:	f3c2 020b 	ubfx	r2, r2, #0, #12
    dad6:	8002      	strh	r2, [r0, #0]
    dad8:	884a      	ldrh	r2, [r1, #2]
    dada:	8042      	strh	r2, [r0, #2]
    dadc:	784a      	ldrb	r2, [r1, #1]
    dade:	0993      	lsrs	r3, r2, #6
    dae0:	2200      	movs	r2, #0
    dae2:	7142      	strb	r2, [r0, #5]
    dae4:	784b      	ldrb	r3, [r1, #1]
    dae6:	f3c3 1301 	ubfx	r3, r3, #4, #2
    daea:	b11b      	cbz	r3, daf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    daec:	2b01      	cmp	r3, #1
    daee:	d005      	beq.n	dafc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    daf0:	2b02      	cmp	r3, #2
    daf2:	d005      	beq.n	db00 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    daf4:	7102      	strb	r2, [r0, #4]
    daf6:	1d09      	adds	r1, r1, #4
    daf8:	6081      	str	r1, [r0, #8]
    dafa:	4770      	bx	lr
    dafc:	2201      	movs	r2, #1
    dafe:	e7f9      	b.n	daf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    db00:	2202      	movs	r2, #2
    db02:	e7f7      	b.n	daf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000db04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    db04:	b510      	push	{r4, lr}
    db06:	460c      	mov	r4, r1
    db08:	7809      	ldrb	r1, [r1, #0]
    db0a:	7001      	strb	r1, [r0, #0]
    db0c:	7841      	ldrb	r1, [r0, #1]
    db0e:	f021 010f 	bic.w	r1, r1, #15
    db12:	7041      	strb	r1, [r0, #1]
    db14:	8822      	ldrh	r2, [r4, #0]
    db16:	f3c2 2203 	ubfx	r2, r2, #8, #4
    db1a:	4311      	orrs	r1, r2
    db1c:	7041      	strb	r1, [r0, #1]
    db1e:	78a2      	ldrb	r2, [r4, #2]
    db20:	7082      	strb	r2, [r0, #2]
    db22:	8862      	ldrh	r2, [r4, #2]
    db24:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    db28:	0a12      	lsrs	r2, r2, #8
    db2a:	70c2      	strb	r2, [r0, #3]
    db2c:	7041      	strb	r1, [r0, #1]
    db2e:	7922      	ldrb	r2, [r4, #4]
    db30:	f002 0203 	and.w	r2, r2, #3
    db34:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    db38:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    db3c:	7041      	strb	r1, [r0, #1]
    db3e:	7962      	ldrb	r2, [r4, #5]
    db40:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    db44:	7041      	strb	r1, [r0, #1]
    db46:	68a1      	ldr	r1, [r4, #8]
    db48:	1d02      	adds	r2, r0, #4
    db4a:	4291      	cmp	r1, r2
    db4c:	d006      	beq.n	db5c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    db4e:	8862      	ldrh	r2, [r4, #2]
    db50:	2afb      	cmp	r2, #251	; 0xfb
    db52:	d300      	bcc.n	db56 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    db54:	22fb      	movs	r2, #251	; 0xfb
    db56:	1d00      	adds	r0, r0, #4
    db58:	f7ff fe25 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db5c:	78a0      	ldrb	r0, [r4, #2]
    db5e:	1d00      	adds	r0, r0, #4
    db60:	b2c0      	uxtb	r0, r0
    db62:	bd10      	pop	{r4, pc}

0000db64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db68:	4604      	mov	r4, r0
    db6a:	780f      	ldrb	r7, [r1, #0]
    db6c:	2000      	movs	r0, #0
    db6e:	250c      	movs	r5, #12
    db70:	2605      	movs	r6, #5
    db72:	223e      	movs	r2, #62	; 0x3e
    db74:	23ff      	movs	r3, #255	; 0xff
    db76:	2f1b      	cmp	r7, #27
    db78:	d27d      	bcs.n	dc76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    db7a:	e8df f007 	tbb	[pc, r7]
    db7e:	0eea      	.short	0x0eea
    db80:	632d2725 	.word	0x632d2725
    db84:	af9b816d 	.word	0xaf9b816d
    db88:	e2c7bcb1 	.word	0xe2c7bcb1
    db8c:	31eaeaf4 	.word	0x31eaeaf4
    db90:	f1fdd5d2 	.word	0xf1fdd5d2
    db94:	edeeeff0 	.word	0xedeeeff0
    db98:	00ec      	.short	0x00ec
    db9a:	7025      	strb	r5, [r4, #0]
    db9c:	7908      	ldrb	r0, [r1, #4]
    db9e:	70a0      	strb	r0, [r4, #2]
    dba0:	7948      	ldrb	r0, [r1, #5]
    dba2:	70e0      	strb	r0, [r4, #3]
    dba4:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dba8:	0a00      	lsrs	r0, r0, #8
    dbaa:	7120      	strb	r0, [r4, #4]
    dbac:	79c8      	ldrb	r0, [r1, #7]
    dbae:	7160      	strb	r0, [r4, #5]
    dbb0:	7a08      	ldrb	r0, [r1, #8]
    dbb2:	71a0      	strb	r0, [r4, #6]
    dbb4:	8908      	ldrh	r0, [r1, #8]
    dbb6:	0a00      	lsrs	r0, r0, #8
    dbb8:	71e0      	strb	r0, [r4, #7]
    dbba:	7a88      	ldrb	r0, [r1, #10]
    dbbc:	7220      	strb	r0, [r4, #8]
    dbbe:	8948      	ldrh	r0, [r1, #10]
    dbc0:	0a00      	lsrs	r0, r0, #8
    dbc2:	7260      	strb	r0, [r4, #9]
    dbc4:	2008      	movs	r0, #8
    dbc6:	e0c2      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dbc8:	2010      	movs	r0, #16
    dbca:	e000      	b.n	dbce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    dbcc:	201a      	movs	r0, #26
    dbce:	7020      	strb	r0, [r4, #0]
    dbd0:	7908      	ldrb	r0, [r1, #4]
    dbd2:	70a0      	strb	r0, [r4, #2]
    dbd4:	2001      	movs	r0, #1
    dbd6:	e0ba      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dbd8:	4620      	mov	r0, r4
    dbda:	f000 f946 	bl	de6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    dbde:	e0b4      	b.n	dd4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    dbe0:	7022      	strb	r2, [r4, #0]
    dbe2:	200a      	movs	r0, #10
    dbe4:	70a0      	strb	r0, [r4, #2]
    dbe6:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    dbea:	70e0      	strb	r0, [r4, #3]
    dbec:	7888      	ldrb	r0, [r1, #2]
    dbee:	7120      	strb	r0, [r4, #4]
    dbf0:	8848      	ldrh	r0, [r1, #2]
    dbf2:	0a00      	lsrs	r0, r0, #8
    dbf4:	7160      	strb	r0, [r4, #5]
    dbf6:	7908      	ldrb	r0, [r1, #4]
    dbf8:	71a0      	strb	r0, [r4, #6]
    dbfa:	7948      	ldrb	r0, [r1, #5]
    dbfc:	71e0      	strb	r0, [r4, #7]
    dbfe:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc02:	60a0      	str	r0, [r4, #8]
    dc04:	8948      	ldrh	r0, [r1, #10]
    dc06:	81a0      	strh	r0, [r4, #12]
    dc08:	68c8      	ldr	r0, [r1, #12]
    dc0a:	f8c4 000e 	str.w	r0, [r4, #14]
    dc0e:	8a08      	ldrh	r0, [r1, #16]
    dc10:	8260      	strh	r0, [r4, #18]
    dc12:	f8d1 0012 	ldr.w	r0, [r1, #18]
    dc16:	6160      	str	r0, [r4, #20]
    dc18:	8ac8      	ldrh	r0, [r1, #22]
    dc1a:	8320      	strh	r0, [r4, #24]
    dc1c:	7e08      	ldrb	r0, [r1, #24]
    dc1e:	76a0      	strb	r0, [r4, #26]
    dc20:	8b08      	ldrh	r0, [r1, #24]
    dc22:	0a00      	lsrs	r0, r0, #8
    dc24:	76e0      	strb	r0, [r4, #27]
    dc26:	7e88      	ldrb	r0, [r1, #26]
    dc28:	7720      	strb	r0, [r4, #28]
    dc2a:	8b48      	ldrh	r0, [r1, #26]
    dc2c:	0a00      	lsrs	r0, r0, #8
    dc2e:	7760      	strb	r0, [r4, #29]
    dc30:	7f08      	ldrb	r0, [r1, #28]
    dc32:	77a0      	strb	r0, [r4, #30]
    dc34:	8b88      	ldrh	r0, [r1, #28]
    dc36:	0a00      	lsrs	r0, r0, #8
    dc38:	77e0      	strb	r0, [r4, #31]
    dc3a:	7f88      	ldrb	r0, [r1, #30]
    dc3c:	f884 0020 	strb.w	r0, [r4, #32]
    dc40:	201f      	movs	r0, #31
    dc42:	e084      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dc44:	7022      	strb	r2, [r4, #0]
    dc46:	2014      	movs	r0, #20
    dc48:	70a0      	strb	r0, [r4, #2]
    dc4a:	7908      	ldrb	r0, [r1, #4]
    dc4c:	70e0      	strb	r0, [r4, #3]
    dc4e:	8888      	ldrh	r0, [r1, #4]
    dc50:	0a00      	lsrs	r0, r0, #8
    dc52:	7120      	strb	r0, [r4, #4]
    dc54:	7988      	ldrb	r0, [r1, #6]
    dc56:	e0a7      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    dc58:	7022      	strb	r2, [r4, #0]
    dc5a:	2004      	movs	r0, #4
    dc5c:	70a0      	strb	r0, [r4, #2]
    dc5e:	7908      	ldrb	r0, [r1, #4]
    dc60:	70e0      	strb	r0, [r4, #3]
    dc62:	7988      	ldrb	r0, [r1, #6]
    dc64:	7120      	strb	r0, [r4, #4]
    dc66:	88c8      	ldrh	r0, [r1, #6]
    dc68:	0a00      	lsrs	r0, r0, #8
    dc6a:	7160      	strb	r0, [r4, #5]
    dc6c:	6888      	ldr	r0, [r1, #8]
    dc6e:	f8c4 0006 	str.w	r0, [r4, #6]
    dc72:	68c8      	ldr	r0, [r1, #12]
    dc74:	e000      	b.n	dc78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    dc76:	e06c      	b.n	dd52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    dc78:	f8c4 000a 	str.w	r0, [r4, #10]
    dc7c:	200c      	movs	r0, #12
    dc7e:	e066      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dc80:	7022      	strb	r2, [r4, #0]
    dc82:	2003      	movs	r0, #3
    dc84:	70a0      	strb	r0, [r4, #2]
    dc86:	7908      	ldrb	r0, [r1, #4]
    dc88:	70e0      	strb	r0, [r4, #3]
    dc8a:	7988      	ldrb	r0, [r1, #6]
    dc8c:	7120      	strb	r0, [r4, #4]
    dc8e:	88c8      	ldrh	r0, [r1, #6]
    dc90:	0a00      	lsrs	r0, r0, #8
    dc92:	7160      	strb	r0, [r4, #5]
    dc94:	7a08      	ldrb	r0, [r1, #8]
    dc96:	71a0      	strb	r0, [r4, #6]
    dc98:	8908      	ldrh	r0, [r1, #8]
    dc9a:	0a00      	lsrs	r0, r0, #8
    dc9c:	71e0      	strb	r0, [r4, #7]
    dc9e:	7a88      	ldrb	r0, [r1, #10]
    dca0:	7220      	strb	r0, [r4, #8]
    dca2:	8948      	ldrh	r0, [r1, #10]
    dca4:	0a00      	lsrs	r0, r0, #8
    dca6:	7260      	strb	r0, [r4, #9]
    dca8:	7b08      	ldrb	r0, [r1, #12]
    dcaa:	72a0      	strb	r0, [r4, #10]
    dcac:	8988      	ldrh	r0, [r1, #12]
    dcae:	0a00      	lsrs	r0, r0, #8
    dcb0:	72e0      	strb	r0, [r4, #11]
    dcb2:	e0d8      	b.n	de66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    dcb4:	7022      	strb	r2, [r4, #0]
    dcb6:	70a6      	strb	r6, [r4, #2]
    dcb8:	7908      	ldrb	r0, [r1, #4]
    dcba:	70e0      	strb	r0, [r4, #3]
    dcbc:	8888      	ldrh	r0, [r1, #4]
    dcbe:	0a00      	lsrs	r0, r0, #8
    dcc0:	7120      	strb	r0, [r4, #4]
    dcc2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dcc6:	f8c4 0005 	str.w	r0, [r4, #5]
    dcca:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dcce:	f8c4 0009 	str.w	r0, [r4, #9]
    dcd2:	89c8      	ldrh	r0, [r1, #14]
    dcd4:	f8a4 000d 	strh.w	r0, [r4, #13]
    dcd8:	200d      	movs	r0, #13
    dcda:	e038      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dcdc:	2011      	movs	r0, #17
    dcde:	e043      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    dce0:	7026      	strb	r6, [r4, #0]
    dce2:	7908      	ldrb	r0, [r1, #4]
    dce4:	70a0      	strb	r0, [r4, #2]
    dce6:	7948      	ldrb	r0, [r1, #5]
    dce8:	70e0      	strb	r0, [r4, #3]
    dcea:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dcee:	0a00      	lsrs	r0, r0, #8
    dcf0:	7120      	strb	r0, [r4, #4]
    dcf2:	79c8      	ldrb	r0, [r1, #7]
    dcf4:	e058      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    dcf6:	2008      	movs	r0, #8
    dcf8:	7020      	strb	r0, [r4, #0]
    dcfa:	7908      	ldrb	r0, [r1, #4]
    dcfc:	70a0      	strb	r0, [r4, #2]
    dcfe:	7988      	ldrb	r0, [r1, #6]
    dd00:	70e0      	strb	r0, [r4, #3]
    dd02:	88c8      	ldrh	r0, [r1, #6]
    dd04:	0a00      	lsrs	r0, r0, #8
    dd06:	7120      	strb	r0, [r4, #4]
    dd08:	7a08      	ldrb	r0, [r1, #8]
    dd0a:	e04d      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    dd0c:	2030      	movs	r0, #48	; 0x30
    dd0e:	7020      	strb	r0, [r4, #0]
    dd10:	7908      	ldrb	r0, [r1, #4]
    dd12:	70a0      	strb	r0, [r4, #2]
    dd14:	7988      	ldrb	r0, [r1, #6]
    dd16:	70e0      	strb	r0, [r4, #3]
    dd18:	88c8      	ldrh	r0, [r1, #6]
    dd1a:	0a00      	lsrs	r0, r0, #8
    dd1c:	7120      	strb	r0, [r4, #4]
    dd1e:	2003      	movs	r0, #3
    dd20:	e015      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dd22:	7022      	strb	r2, [r4, #0]
    dd24:	2007      	movs	r0, #7
    dd26:	e044      	b.n	ddb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    dd28:	7022      	strb	r2, [r4, #0]
    dd2a:	70a5      	strb	r5, [r4, #2]
    dd2c:	7908      	ldrb	r0, [r1, #4]
    dd2e:	70e0      	strb	r0, [r4, #3]
    dd30:	7988      	ldrb	r0, [r1, #6]
    dd32:	7120      	strb	r0, [r4, #4]
    dd34:	88c8      	ldrh	r0, [r1, #6]
    dd36:	0a00      	lsrs	r0, r0, #8
    dd38:	7160      	strb	r0, [r4, #5]
    dd3a:	7a08      	ldrb	r0, [r1, #8]
    dd3c:	71a0      	strb	r0, [r4, #6]
    dd3e:	7a48      	ldrb	r0, [r1, #9]
    dd40:	e027      	b.n	dd92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    dd42:	4620      	mov	r0, r4
    dd44:	1d09      	adds	r1, r1, #4
    dd46:	f7f7 fde9 	bl	591c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    dd4a:	2800      	cmp	r0, #0
    dd4c:	d001      	beq.n	dd52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    dd4e:	7060      	strb	r0, [r4, #1]
    dd50:	1c80      	adds	r0, r0, #2
    dd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd56:	e073      	b.n	de40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    dd58:	e047      	b.n	ddea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    dd5a:	e028      	b.n	ddae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    dd5c:	e053      	b.n	de06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    dd5e:	e061      	b.n	de24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    dd60:	e01a      	b.n	dd98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    dd62:	e009      	b.n	dd78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    dd64:	e7ff      	b.n	dd66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    dd66:	2057      	movs	r0, #87	; 0x57
    dd68:	7020      	strb	r0, [r4, #0]
    dd6a:	7908      	ldrb	r0, [r1, #4]
    dd6c:	70a0      	strb	r0, [r4, #2]
    dd6e:	8888      	ldrh	r0, [r1, #4]
    dd70:	0a00      	lsrs	r0, r0, #8
    dd72:	70e0      	strb	r0, [r4, #3]
    dd74:	2002      	movs	r0, #2
    dd76:	e7ea      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dd78:	7022      	strb	r2, [r4, #0]
    dd7a:	2012      	movs	r0, #18
    dd7c:	70a0      	strb	r0, [r4, #2]
    dd7e:	7908      	ldrb	r0, [r1, #4]
    dd80:	70e0      	strb	r0, [r4, #3]
    dd82:	7948      	ldrb	r0, [r1, #5]
    dd84:	7120      	strb	r0, [r4, #4]
    dd86:	7988      	ldrb	r0, [r1, #6]
    dd88:	7160      	strb	r0, [r4, #5]
    dd8a:	88c8      	ldrh	r0, [r1, #6]
    dd8c:	0a00      	lsrs	r0, r0, #8
    dd8e:	71a0      	strb	r0, [r4, #6]
    dd90:	7a08      	ldrb	r0, [r1, #8]
    dd92:	71e0      	strb	r0, [r4, #7]
    dd94:	2006      	movs	r0, #6
    dd96:	e7da      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    dd98:	7023      	strb	r3, [r4, #0]
    dd9a:	20a1      	movs	r0, #161	; 0xa1
    dd9c:	70a0      	strb	r0, [r4, #2]
    dd9e:	7908      	ldrb	r0, [r1, #4]
    dda0:	70e0      	strb	r0, [r4, #3]
    dda2:	7948      	ldrb	r0, [r1, #5]
    dda4:	7120      	strb	r0, [r4, #4]
    dda6:	2000      	movs	r0, #0
    dda8:	7160      	strb	r0, [r4, #5]
    ddaa:	2004      	movs	r0, #4
    ddac:	e7cf      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ddae:	7023      	strb	r3, [r4, #0]
    ddb0:	20a2      	movs	r0, #162	; 0xa2
    ddb2:	70a0      	strb	r0, [r4, #2]
    ddb4:	7908      	ldrb	r0, [r1, #4]
    ddb6:	70e0      	strb	r0, [r4, #3]
    ddb8:	8888      	ldrh	r0, [r1, #4]
    ddba:	0a00      	lsrs	r0, r0, #8
    ddbc:	7120      	strb	r0, [r4, #4]
    ddbe:	7988      	ldrb	r0, [r1, #6]
    ddc0:	7160      	strb	r0, [r4, #5]
    ddc2:	88c8      	ldrh	r0, [r1, #6]
    ddc4:	0a00      	lsrs	r0, r0, #8
    ddc6:	71a0      	strb	r0, [r4, #6]
    ddc8:	7a08      	ldrb	r0, [r1, #8]
    ddca:	71e0      	strb	r0, [r4, #7]
    ddcc:	8908      	ldrh	r0, [r1, #8]
    ddce:	0a00      	lsrs	r0, r0, #8
    ddd0:	7220      	strb	r0, [r4, #8]
    ddd2:	7a88      	ldrb	r0, [r1, #10]
    ddd4:	7260      	strb	r0, [r4, #9]
    ddd6:	8948      	ldrh	r0, [r1, #10]
    ddd8:	0a00      	lsrs	r0, r0, #8
    ddda:	72a0      	strb	r0, [r4, #10]
    dddc:	7b08      	ldrb	r0, [r1, #12]
    ddde:	72e0      	strb	r0, [r4, #11]
    dde0:	8988      	ldrh	r0, [r1, #12]
    dde2:	0a00      	lsrs	r0, r0, #8
    dde4:	7320      	strb	r0, [r4, #12]
    dde6:	200b      	movs	r0, #11
    dde8:	e7b1      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ddea:	7023      	strb	r3, [r4, #0]
    ddec:	20a3      	movs	r0, #163	; 0xa3
    ddee:	70a0      	strb	r0, [r4, #2]
    ddf0:	7908      	ldrb	r0, [r1, #4]
    ddf2:	70e0      	strb	r0, [r4, #3]
    ddf4:	8888      	ldrh	r0, [r1, #4]
    ddf6:	0a00      	lsrs	r0, r0, #8
    ddf8:	7120      	strb	r0, [r4, #4]
    ddfa:	7988      	ldrb	r0, [r1, #6]
    ddfc:	7160      	strb	r0, [r4, #5]
    ddfe:	79c8      	ldrb	r0, [r1, #7]
    de00:	71a0      	strb	r0, [r4, #6]
    de02:	2005      	movs	r0, #5
    de04:	e7a3      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    de06:	7022      	strb	r2, [r4, #0]
    de08:	2013      	movs	r0, #19
    de0a:	70a0      	strb	r0, [r4, #2]
    de0c:	7908      	ldrb	r0, [r1, #4]
    de0e:	70e0      	strb	r0, [r4, #3]
    de10:	7948      	ldrb	r0, [r1, #5]
    de12:	7120      	strb	r0, [r4, #4]
    de14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    de18:	f8c4 0005 	str.w	r0, [r4, #5]
    de1c:	8948      	ldrh	r0, [r1, #10]
    de1e:	f8a4 0009 	strh.w	r0, [r4, #9]
    de22:	e020      	b.n	de66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    de24:	7023      	strb	r3, [r4, #0]
    de26:	20a4      	movs	r0, #164	; 0xa4
    de28:	70a0      	strb	r0, [r4, #2]
    de2a:	7908      	ldrb	r0, [r1, #4]
    de2c:	70e0      	strb	r0, [r4, #3]
    de2e:	8888      	ldrh	r0, [r1, #4]
    de30:	0a00      	lsrs	r0, r0, #8
    de32:	7120      	strb	r0, [r4, #4]
    de34:	7988      	ldrb	r0, [r1, #6]
    de36:	7160      	strb	r0, [r4, #5]
    de38:	79c8      	ldrb	r0, [r1, #7]
    de3a:	71a0      	strb	r0, [r4, #6]
    de3c:	2007      	movs	r0, #7
    de3e:	e786      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    de40:	7023      	strb	r3, [r4, #0]
    de42:	2080      	movs	r0, #128	; 0x80
    de44:	70a0      	strb	r0, [r4, #2]
    de46:	888a      	ldrh	r2, [r1, #4]
    de48:	f8a4 2003 	strh.w	r2, [r4, #3]
    de4c:	88ca      	ldrh	r2, [r1, #6]
    de4e:	f8a4 2005 	strh.w	r2, [r4, #5]
    de52:	7a0a      	ldrb	r2, [r1, #8]
    de54:	71e2      	strb	r2, [r4, #7]
    de56:	7a4a      	ldrb	r2, [r1, #9]
    de58:	8122      	strh	r2, [r4, #8]
    de5a:	7a8a      	ldrb	r2, [r1, #10]
    de5c:	72a2      	strb	r2, [r4, #10]
    de5e:	7ac9      	ldrb	r1, [r1, #11]
    de60:	f001 0101 	and.w	r1, r1, #1
    de64:	72e1      	strb	r1, [r4, #11]
    de66:	200a      	movs	r0, #10
    de68:	e771      	b.n	dd4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000de6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    de6a:	223e      	movs	r2, #62	; 0x3e
    de6c:	7002      	strb	r2, [r0, #0]
    de6e:	2201      	movs	r2, #1
    de70:	7082      	strb	r2, [r0, #2]
    de72:	790a      	ldrb	r2, [r1, #4]
    de74:	70c2      	strb	r2, [r0, #3]
    de76:	798a      	ldrb	r2, [r1, #6]
    de78:	7102      	strb	r2, [r0, #4]
    de7a:	88ca      	ldrh	r2, [r1, #6]
    de7c:	0a12      	lsrs	r2, r2, #8
    de7e:	7142      	strb	r2, [r0, #5]
    de80:	7a0a      	ldrb	r2, [r1, #8]
    de82:	7182      	strb	r2, [r0, #6]
    de84:	7a4a      	ldrb	r2, [r1, #9]
    de86:	71c2      	strb	r2, [r0, #7]
    de88:	f8d1 200a 	ldr.w	r2, [r1, #10]
    de8c:	6082      	str	r2, [r0, #8]
    de8e:	89ca      	ldrh	r2, [r1, #14]
    de90:	8182      	strh	r2, [r0, #12]
    de92:	7c0a      	ldrb	r2, [r1, #16]
    de94:	7382      	strb	r2, [r0, #14]
    de96:	8a0a      	ldrh	r2, [r1, #16]
    de98:	0a12      	lsrs	r2, r2, #8
    de9a:	73c2      	strb	r2, [r0, #15]
    de9c:	7c8a      	ldrb	r2, [r1, #18]
    de9e:	7402      	strb	r2, [r0, #16]
    dea0:	8a4a      	ldrh	r2, [r1, #18]
    dea2:	0a12      	lsrs	r2, r2, #8
    dea4:	7442      	strb	r2, [r0, #17]
    dea6:	7d0a      	ldrb	r2, [r1, #20]
    dea8:	7482      	strb	r2, [r0, #18]
    deaa:	8a8a      	ldrh	r2, [r1, #20]
    deac:	0a12      	lsrs	r2, r2, #8
    deae:	74c2      	strb	r2, [r0, #19]
    deb0:	7d89      	ldrb	r1, [r1, #22]
    deb2:	7501      	strb	r1, [r0, #20]
    deb4:	2013      	movs	r0, #19
    deb6:	4770      	bx	lr

0000deb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    deb8:	223e      	movs	r2, #62	; 0x3e
    deba:	7002      	strb	r2, [r0, #0]
    debc:	2201      	movs	r2, #1
    debe:	7082      	strb	r2, [r0, #2]
    dec0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dec4:	70c2      	strb	r2, [r0, #3]
    dec6:	788a      	ldrb	r2, [r1, #2]
    dec8:	7102      	strb	r2, [r0, #4]
    deca:	884a      	ldrh	r2, [r1, #2]
    decc:	0a12      	lsrs	r2, r2, #8
    dece:	7142      	strb	r2, [r0, #5]
    ded0:	790a      	ldrb	r2, [r1, #4]
    ded2:	7182      	strb	r2, [r0, #6]
    ded4:	794a      	ldrb	r2, [r1, #5]
    ded6:	71c2      	strb	r2, [r0, #7]
    ded8:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dedc:	6082      	str	r2, [r0, #8]
    dede:	894a      	ldrh	r2, [r1, #10]
    dee0:	8182      	strh	r2, [r0, #12]
    dee2:	7e0a      	ldrb	r2, [r1, #24]
    dee4:	7382      	strb	r2, [r0, #14]
    dee6:	8b0a      	ldrh	r2, [r1, #24]
    dee8:	0a12      	lsrs	r2, r2, #8
    deea:	73c2      	strb	r2, [r0, #15]
    deec:	7e8a      	ldrb	r2, [r1, #26]
    deee:	7402      	strb	r2, [r0, #16]
    def0:	8b4a      	ldrh	r2, [r1, #26]
    def2:	0a12      	lsrs	r2, r2, #8
    def4:	7442      	strb	r2, [r0, #17]
    def6:	7f0a      	ldrb	r2, [r1, #28]
    def8:	7482      	strb	r2, [r0, #18]
    defa:	8b8a      	ldrh	r2, [r1, #28]
    defc:	0a12      	lsrs	r2, r2, #8
    defe:	74c2      	strb	r2, [r0, #19]
    df00:	7f89      	ldrb	r1, [r1, #30]
    df02:	7501      	strb	r1, [r0, #20]
    df04:	2113      	movs	r1, #19
    df06:	7041      	strb	r1, [r0, #1]
    df08:	4608      	mov	r0, r1
    df0a:	4770      	bx	lr

0000df0c <sdc_hci_data_get>:
    df0c:	b510      	push	{r4, lr}
    df0e:	b120      	cbz	r0, df1a <sdc_hci_data_get+0xe>
    df10:	f7ff fda4 	bl	da5c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    df14:	b120      	cbz	r0, df20 <sdc_hci_data_get+0x14>
    df16:	2000      	movs	r0, #0
    df18:	bd10      	pop	{r4, pc}
    df1a:	f06f 0015 	mvn.w	r0, #21
    df1e:	bd10      	pop	{r4, pc}
    df20:	f06f 0022 	mvn.w	r0, #34	; 0x22
    df24:	bd10      	pop	{r4, pc}

0000df26 <sdc_hci_data_put>:
    df26:	b510      	push	{r4, lr}
    df28:	f06f 0415 	mvn.w	r4, #21
    df2c:	b120      	cbz	r0, df38 <sdc_hci_data_put+0x12>
    df2e:	f7ff fda3 	bl	da78 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    df32:	b108      	cbz	r0, df38 <sdc_hci_data_put+0x12>
    df34:	2000      	movs	r0, #0
    df36:	bd10      	pop	{r4, pc}
    df38:	4620      	mov	r0, r4
    df3a:	bd10      	pop	{r4, pc}

0000df3c <sdc_hci_evt_get>:
    df3c:	b510      	push	{r4, lr}
    df3e:	b120      	cbz	r0, df4a <sdc_hci_evt_get+0xe>
    df40:	f7ff fda3 	bl	da8a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    df44:	b120      	cbz	r0, df50 <sdc_hci_evt_get+0x14>
    df46:	2000      	movs	r0, #0
    df48:	bd10      	pop	{r4, pc}
    df4a:	f06f 0015 	mvn.w	r0, #21
    df4e:	bd10      	pop	{r4, pc}
    df50:	f06f 0022 	mvn.w	r0, #34	; 0x22
    df54:	bd10      	pop	{r4, pc}

0000df56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    df56:	f002 beda 	b.w	10d0e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000df5a <sdc_hci_cmd_cb_read_transmit_power_level>:
    df5a:	f002 bf1c 	b.w	10d96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000df5e <sdc_hci_cmd_cb_set_event_mask>:
    df5e:	b510      	push	{r4, lr}
    df60:	f7f7 fd3a 	bl	59d8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    df64:	2000      	movs	r0, #0
    df66:	bd10      	pop	{r4, pc}

0000df68 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    df68:	b510      	push	{r4, lr}
    df6a:	f7f7 fd43 	bl	59f4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    df6e:	2000      	movs	r0, #0
    df70:	bd10      	pop	{r4, pc}

0000df72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    df72:	f002 bf2c 	b.w	10dce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000df76 <sdc_hci_cmd_vs_conn_event_extend>:
    df76:	b508      	push	{r3, lr}
    df78:	7800      	ldrb	r0, [r0, #0]
    df7a:	f88d 0000 	strb.w	r0, [sp]
    df7e:	4668      	mov	r0, sp
    df80:	f002 fddc 	bl	10b3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    df84:	bd08      	pop	{r3, pc}

0000df86 <sdc_hci_cmd_vs_conn_update>:
    df86:	2001      	movs	r0, #1
    df88:	4770      	bx	lr

0000df8a <sdc_hci_cmd_vs_event_length_set>:
    df8a:	f7fd bc13 	b.w	b7b4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000df8e <sdc_hci_cmd_vs_llpm_mode_set>:
    df8e:	2001      	movs	r0, #1
    df90:	4770      	bx	lr

0000df92 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    df92:	7800      	ldrb	r0, [r0, #0]
    df94:	b100      	cbz	r0, df98 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    df96:	2001      	movs	r0, #1
    df98:	f002 bd55 	b.w	10a46 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000df9c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    df9c:	b570      	push	{r4, r5, r6, lr}
    df9e:	4605      	mov	r5, r0
    dfa0:	2210      	movs	r2, #16
    dfa2:	2100      	movs	r1, #0
    dfa4:	f7ff fc79 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dfa8:	2210      	movs	r2, #16
    dfaa:	2100      	movs	r1, #0
    dfac:	f105 0010 	add.w	r0, r5, #16
    dfb0:	f7ff fc73 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dfb4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    dfb8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    dfbc:	1c40      	adds	r0, r0, #1
    dfbe:	d10b      	bne.n	dfd8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfc0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    dfc4:	1c40      	adds	r0, r0, #1
    dfc6:	d107      	bne.n	dfd8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    dfcc:	1c40      	adds	r0, r0, #1
    dfce:	d103      	bne.n	dfd8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    dfd0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    dfd4:	1c40      	adds	r0, r0, #1
    dfd6:	d00b      	beq.n	dff0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    dfd8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    dfdc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    dfe0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    dfe4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    dfe8:	612a      	str	r2, [r5, #16]
    dfea:	6168      	str	r0, [r5, #20]
    dfec:	61a9      	str	r1, [r5, #24]
    dfee:	61eb      	str	r3, [r5, #28]
    dff0:	2000      	movs	r0, #0
    dff2:	f7f8 fa93 	bl	651c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    dff6:	b918      	cbnz	r0, e000 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    dff8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    dffc:	07c0      	lsls	r0, r0, #31
    dffe:	d118      	bne.n	e032 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e000:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e004:	1c40      	adds	r0, r0, #1
    e006:	d10b      	bne.n	e020 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e008:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e00c:	1c40      	adds	r0, r0, #1
    e00e:	d107      	bne.n	e020 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e010:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e014:	1c40      	adds	r0, r0, #1
    e016:	d103      	bne.n	e020 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e018:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e01c:	1c40      	adds	r0, r0, #1
    e01e:	d008      	beq.n	e032 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e020:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e024:	6861      	ldr	r1, [r4, #4]
    e026:	68a2      	ldr	r2, [r4, #8]
    e028:	68e3      	ldr	r3, [r4, #12]
    e02a:	6028      	str	r0, [r5, #0]
    e02c:	6069      	str	r1, [r5, #4]
    e02e:	60aa      	str	r2, [r5, #8]
    e030:	60eb      	str	r3, [r5, #12]
    e032:	2000      	movs	r0, #0
    e034:	bd70      	pop	{r4, r5, r6, pc}

0000e036 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e036:	b538      	push	{r3, r4, r5, lr}
    e038:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e03c:	4604      	mov	r4, r0
    e03e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e042:	1c40      	adds	r0, r0, #1
    e044:	d105      	bne.n	e052 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e046:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e04a:	43c0      	mvns	r0, r0
    e04c:	0400      	lsls	r0, r0, #16
    e04e:	0c00      	lsrs	r0, r0, #16
    e050:	d03e      	beq.n	e0d0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e052:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e056:	07c0      	lsls	r0, r0, #31
    e058:	d03a      	beq.n	e0d0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e05a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e05e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e062:	f8ad 1000 	strh.w	r1, [sp]
    e066:	f8c4 0001 	str.w	r0, [r4, #1]
    e06a:	f8bd 0000 	ldrh.w	r0, [sp]
    e06e:	f8a4 0005 	strh.w	r0, [r4, #5]
    e072:	79a0      	ldrb	r0, [r4, #6]
    e074:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e078:	71a0      	strb	r0, [r4, #6]
    e07a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e07e:	1c40      	adds	r0, r0, #1
    e080:	d00f      	beq.n	e0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e082:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e086:	1c40      	adds	r0, r0, #1
    e088:	d00b      	beq.n	e0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e08a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e08e:	1c40      	adds	r0, r0, #1
    e090:	d007      	beq.n	e0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e092:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e096:	1c40      	adds	r0, r0, #1
    e098:	d003      	beq.n	e0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e09a:	2000      	movs	r0, #0
    e09c:	f7f8 fa3e 	bl	651c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e0a0:	b140      	cbz	r0, e0b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e0a2:	2210      	movs	r2, #16
    e0a4:	2100      	movs	r1, #0
    e0a6:	1de0      	adds	r0, r4, #7
    e0a8:	f7ff fbf7 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e0ac:	2001      	movs	r0, #1
    e0ae:	7020      	strb	r0, [r4, #0]
    e0b0:	2000      	movs	r0, #0
    e0b2:	bd38      	pop	{r3, r4, r5, pc}
    e0b4:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e0b8:	6869      	ldr	r1, [r5, #4]
    e0ba:	68a8      	ldr	r0, [r5, #8]
    e0bc:	68eb      	ldr	r3, [r5, #12]
    e0be:	f8c4 2007 	str.w	r2, [r4, #7]
    e0c2:	f8c4 100b 	str.w	r1, [r4, #11]
    e0c6:	f8c4 000f 	str.w	r0, [r4, #15]
    e0ca:	f8c4 3013 	str.w	r3, [r4, #19]
    e0ce:	e7ed      	b.n	e0ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e0d0:	2000      	movs	r0, #0
    e0d2:	e7ec      	b.n	e0ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e0d4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e0d4:	f002 bd24 	b.w	10b20 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e0d8 <sdc_hci_cmd_ip_read_bd_addr>:
    e0d8:	f002 be2a 	b.w	10d30 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e0dc <sdc_hci_cmd_ip_read_local_version_information>:
    e0dc:	f7fd bb78 	b.w	b7d0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e0e0 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    e0e0:	f002 ba08 	b.w	104f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000e0e4 <sdc_hci_cmd_le_add_device_to_white_list>:
    e0e4:	f002 ba21 	b.w	1052a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e0e8 <sdc_hci_cmd_le_clear_resolving_list>:
    e0e8:	f002 ba36 	b.w	10558 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000e0ec <sdc_hci_cmd_le_clear_white_list>:
    e0ec:	f002 ba41 	b.w	10572 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e0f0 <sdc_hci_cmd_le_encrypt>:
    e0f0:	f002 ba49 	b.w	10586 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e0f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    e0f4:	8802      	ldrh	r2, [r0, #0]
    e0f6:	800a      	strh	r2, [r1, #0]
    e0f8:	f002 ba4e 	b.w	10598 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000e0fc <sdc_hci_cmd_le_long_term_key_request_reply>:
    e0fc:	8802      	ldrh	r2, [r0, #0]
    e0fe:	800a      	strh	r2, [r1, #0]
    e100:	f002 ba63 	b.w	105ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000e104 <sdc_hci_cmd_le_rand>:
    e104:	f002 ba8b 	b.w	1061e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e108 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    e108:	f002 ba8f 	b.w	1062a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000e10c <sdc_hci_cmd_le_read_buffer_size>:
    e10c:	f7fd baa8 	b.w	b660 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e110 <sdc_hci_cmd_le_read_channel_map>:
    e110:	f7fd bab0 	b.w	b674 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e114 <sdc_hci_cmd_le_read_max_data_length>:
    e114:	f002 ba92 	b.w	1063c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e118 <sdc_hci_cmd_le_read_phy>:
    e118:	f002 baa0 	b.w	1065c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e11c <sdc_hci_cmd_le_read_remote_features>:
    e11c:	f7fd bad4 	b.w	b6c8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e120 <sdc_hci_cmd_le_read_resolving_list_size>:
    e120:	f002 bac7 	b.w	106b2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000e124 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e124:	f7fd baf0 	b.w	b708 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e128 <sdc_hci_cmd_le_read_transmit_power>:
    e128:	f002 bac7 	b.w	106ba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e12c <sdc_hci_cmd_le_read_white_list_size>:
    e12c:	f002 bace 	b.w	106cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e130 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    e130:	f002 bad0 	b.w	106d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000e134 <sdc_hci_cmd_le_remove_device_from_white_list>:
    e134:	f002 bae7 	b.w	10706 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e138 <sdc_hci_cmd_le_set_address_resolution_enable>:
    e138:	f002 bafa 	b.w	10730 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000e13c <sdc_hci_cmd_le_set_adv_data>:
    e13c:	f002 bb06 	b.w	1074c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000e140 <sdc_hci_cmd_le_set_adv_enable>:
    e140:	f002 bb19 	b.w	10776 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000e144 <sdc_hci_cmd_le_set_adv_params>:
    e144:	f002 bb4a 	b.w	107dc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000e148 <sdc_hci_cmd_le_set_data_length>:
    e148:	f002 bbdd 	b.w	10906 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e14c <sdc_hci_cmd_le_set_default_phy>:
    e14c:	f7fd baec 	b.w	b728 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e150 <sdc_hci_cmd_le_set_event_mask>:
    e150:	b510      	push	{r4, lr}
    e152:	f7f7 fc3b 	bl	59cc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e156:	2000      	movs	r0, #0
    e158:	bd10      	pop	{r4, pc}

0000e15a <sdc_hci_cmd_le_set_phy>:
    e15a:	f002 bbfb 	b.w	10954 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e15e <sdc_hci_cmd_le_set_privacy_mode>:
    e15e:	f002 bc19 	b.w	10994 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000e162 <sdc_hci_cmd_le_set_random_address>:
    e162:	f002 bc2d 	b.w	109c0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e166 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    e166:	f002 bc39 	b.w	109dc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000e16a <sdc_hci_cmd_le_set_scan_response_data>:
    e16a:	f002 bc40 	b.w	109ee <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000e16e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e16e:	f002 bc53 	b.w	10a18 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e172 <sdc_hci_cmd_lc_disconnect>:
    e172:	f002 b96b 	b.w	1044c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e176 <sdc_hci_cmd_lc_read_remote_version_information>:
    e176:	f002 bde7 	b.w	10d48 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e17a:	b570      	push	{r4, r5, r6, lr}
    e17c:	880b      	ldrh	r3, [r1, #0]
    e17e:	7f04      	ldrb	r4, [r0, #28]
    e180:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e184:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    e188:	8802      	ldrh	r2, [r0, #0]
    e18a:	4435      	add	r5, r6
    e18c:	1da4      	adds	r4, r4, #6
    e18e:	882d      	ldrh	r5, [r5, #0]
    e190:	4422      	add	r2, r4
    e192:	b292      	uxth	r2, r2
    e194:	4425      	add	r5, r4
    e196:	1e54      	subs	r4, r2, #1
    e198:	442c      	add	r4, r5
    e19a:	fb94 f4f2 	sdiv	r4, r4, r2
    e19e:	fb02 6204 	mla	r2, r2, r4, r6
    e1a2:	8840      	ldrh	r0, [r0, #2]
    e1a4:	b292      	uxth	r2, r2
    e1a6:	4290      	cmp	r0, r2
    e1a8:	d903      	bls.n	e1b2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e1aa:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e1ae:	4310      	orrs	r0, r2
    e1b0:	e002      	b.n	e1b8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e1b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e1b6:	4398      	bics	r0, r3
    e1b8:	8008      	strh	r0, [r1, #0]
    e1ba:	bd70      	pop	{r4, r5, r6, pc}
    e1bc:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    e1c0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e1c4:	429a      	cmp	r2, r3
    e1c6:	d107      	bne.n	e1d8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e1c8:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e1cc:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e1d0:	4288      	cmp	r0, r1
    e1d2:	d001      	beq.n	e1d8 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e1d4:	2001      	movs	r0, #1
    e1d6:	4770      	bx	lr
    e1d8:	2000      	movs	r0, #0
    e1da:	4770      	bx	lr

0000e1dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e1dc:	b570      	push	{r4, r5, r6, lr}
    e1de:	7f00      	ldrb	r0, [r0, #28]
    e1e0:	461c      	mov	r4, r3
    e1e2:	1d80      	adds	r0, r0, #6
    e1e4:	4408      	add	r0, r1
    e1e6:	4613      	mov	r3, r2
    e1e8:	8809      	ldrh	r1, [r1, #0]
    e1ea:	9a04      	ldr	r2, [sp, #16]
    e1ec:	1cc9      	adds	r1, r1, #3
    e1ee:	b289      	uxth	r1, r1
    e1f0:	1915      	adds	r5, r2, r4
    e1f2:	1ec0      	subs	r0, r0, #3
    e1f4:	428d      	cmp	r5, r1
    e1f6:	d805      	bhi.n	e204 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e1f8:	1881      	adds	r1, r0, r2
    e1fa:	4622      	mov	r2, r4
    e1fc:	4618      	mov	r0, r3
    e1fe:	f7ff fad2 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e202:	e000      	b.n	e206 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e204:	2400      	movs	r4, #0
    e206:	4620      	mov	r0, r4
    e208:	bd70      	pop	{r4, r5, r6, pc}

0000e20a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e20a:	b570      	push	{r4, r5, r6, lr}
    e20c:	7f00      	ldrb	r0, [r0, #28]
    e20e:	461c      	mov	r4, r3
    e210:	1d80      	adds	r0, r0, #6
    e212:	4408      	add	r0, r1
    e214:	4613      	mov	r3, r2
    e216:	8809      	ldrh	r1, [r1, #0]
    e218:	9a04      	ldr	r2, [sp, #16]
    e21a:	1cc9      	adds	r1, r1, #3
    e21c:	b289      	uxth	r1, r1
    e21e:	1915      	adds	r5, r2, r4
    e220:	1ec0      	subs	r0, r0, #3
    e222:	428d      	cmp	r5, r1
    e224:	d805      	bhi.n	e232 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e226:	4410      	add	r0, r2
    e228:	4622      	mov	r2, r4
    e22a:	4619      	mov	r1, r3
    e22c:	f7ff fabb 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e230:	e000      	b.n	e234 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e232:	2400      	movs	r4, #0
    e234:	4620      	mov	r0, r4
    e236:	bd70      	pop	{r4, r5, r6, pc}

0000e238 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e238:	8881      	ldrh	r1, [r0, #4]
    e23a:	88c0      	ldrh	r0, [r0, #6]
    e23c:	4288      	cmp	r0, r1
    e23e:	d101      	bne.n	e244 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e240:	2001      	movs	r0, #1
    e242:	4770      	bx	lr
    e244:	2000      	movs	r0, #0
    e246:	4770      	bx	lr

0000e248 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e248:	8881      	ldrh	r1, [r0, #4]
    e24a:	8900      	ldrh	r0, [r0, #8]
    e24c:	4288      	cmp	r0, r1
    e24e:	d101      	bne.n	e254 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e250:	2001      	movs	r0, #1
    e252:	4770      	bx	lr
    e254:	2000      	movs	r0, #0
    e256:	4770      	bx	lr

0000e258 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e258:	b570      	push	{r4, r5, r6, lr}
    e25a:	4604      	mov	r4, r0
    e25c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e260:	8880      	ldrh	r0, [r0, #4]
    e262:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e266:	4401      	add	r1, r0
    e268:	8a20      	ldrh	r0, [r4, #16]
    e26a:	2800      	cmp	r0, #0
    e26c:	d01a      	beq.n	e2a4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e26e:	89a2      	ldrh	r2, [r4, #12]
    e270:	2500      	movs	r5, #0
    e272:	4410      	add	r0, r2
    e274:	b280      	uxth	r0, r0
    e276:	81a0      	strh	r0, [r4, #12]
    e278:	880a      	ldrh	r2, [r1, #0]
    e27a:	4290      	cmp	r0, r2
    e27c:	d905      	bls.n	e28a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    e27e:	f240 1163 	movw	r1, #355	; 0x163
    e282:	f04f 0014 	mov.w	r0, #20
    e286:	f7f7 fa1f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e28a:	d109      	bne.n	e2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e28c:	69a0      	ldr	r0, [r4, #24]
    e28e:	b108      	cbz	r0, e294 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    e290:	7f40      	ldrb	r0, [r0, #29]
    e292:	7088      	strb	r0, [r1, #2]
    e294:	f104 0104 	add.w	r1, r4, #4
    e298:	4620      	mov	r0, r4
    e29a:	f7ff ff6e 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e29e:	81a5      	strh	r5, [r4, #12]
    e2a0:	8225      	strh	r5, [r4, #16]
    e2a2:	2001      	movs	r0, #1
    e2a4:	bd70      	pop	{r4, r5, r6, pc}

0000e2a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2a8:	4604      	mov	r4, r0
    e2aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e2ae:	88c0      	ldrh	r0, [r0, #6]
    e2b0:	460e      	mov	r6, r1
    e2b2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e2b6:	8a60      	ldrh	r0, [r4, #18]
    e2b8:	19d9      	adds	r1, r3, r7
    e2ba:	b108      	cbz	r0, e2c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e2bc:	42b0      	cmp	r0, r6
    e2be:	d201      	bcs.n	e2c4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e2c0:	2000      	movs	r0, #0
    e2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2c4:	89e0      	ldrh	r0, [r4, #14]
    e2c6:	2500      	movs	r5, #0
    e2c8:	b140      	cbz	r0, e2dc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e2ca:	f8b1 c000 	ldrh.w	ip, [r1]
    e2ce:	4560      	cmp	r0, ip
    e2d0:	d008      	beq.n	e2e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e2d2:	f240 214b 	movw	r1, #587	; 0x24b
    e2d6:	2014      	movs	r0, #20
    e2d8:	f7f7 f9f6 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2dc:	7f60      	ldrb	r0, [r4, #29]
    e2de:	7088      	strb	r0, [r1, #2]
    e2e0:	800d      	strh	r5, [r1, #0]
    e2e2:	e00e      	b.n	e302 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e2e4:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e2e8:	4418      	add	r0, r3
    e2ea:	f10c 0c06 	add.w	ip, ip, #6
    e2ee:	44bc      	add	ip, r7
    e2f0:	4460      	add	r0, ip
    e2f2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e2f6:	f820 cc03 	strh.w	ip, [r0, #-3]
    e2fa:	f894 c020 	ldrb.w	ip, [r4, #32]
    e2fe:	f800 cc01 	strb.w	ip, [r0, #-1]
    e302:	89e0      	ldrh	r0, [r4, #14]
    e304:	4430      	add	r0, r6
    e306:	81e0      	strh	r0, [r4, #14]
    e308:	8808      	ldrh	r0, [r1, #0]
    e30a:	4430      	add	r0, r6
    e30c:	8008      	strh	r0, [r1, #0]
    e30e:	b19a      	cbz	r2, e338 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e310:	1da1      	adds	r1, r4, #6
    e312:	4620      	mov	r0, r4
    e314:	f7ff ff31 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e318:	81e5      	strh	r5, [r4, #14]
    e31a:	7f60      	ldrb	r0, [r4, #29]
    e31c:	1c40      	adds	r0, r0, #1
    e31e:	7760      	strb	r0, [r4, #29]
    e320:	7da0      	ldrb	r0, [r4, #22]
    e322:	f88d 0000 	strb.w	r0, [sp]
    e326:	9800      	ldr	r0, [sp, #0]
    e328:	9000      	str	r0, [sp, #0]
    e32a:	f89d 0000 	ldrb.w	r0, [sp]
    e32e:	b178      	cbz	r0, e350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e330:	88e0      	ldrh	r0, [r4, #6]
    e332:	82a0      	strh	r0, [r4, #20]
    e334:	75a5      	strb	r5, [r4, #22]
    e336:	e00b      	b.n	e350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e338:	7f20      	ldrb	r0, [r4, #28]
    e33a:	89e1      	ldrh	r1, [r4, #14]
    e33c:	1d80      	adds	r0, r0, #6
    e33e:	4438      	add	r0, r7
    e340:	4419      	add	r1, r3
    e342:	4408      	add	r0, r1
    e344:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e348:	83e1      	strh	r1, [r4, #30]
    e34a:	7880      	ldrb	r0, [r0, #2]
    e34c:	f884 0020 	strb.w	r0, [r4, #32]
    e350:	8265      	strh	r5, [r4, #18]
    e352:	2001      	movs	r0, #1
    e354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e356 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e356:	b510      	push	{r4, lr}
    e358:	4604      	mov	r4, r0
    e35a:	88c0      	ldrh	r0, [r0, #6]
    e35c:	88a1      	ldrh	r1, [r4, #4]
    e35e:	4281      	cmp	r1, r0
    e360:	d007      	beq.n	e372 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e362:	89a0      	ldrh	r0, [r4, #12]
    e364:	b928      	cbnz	r0, e372 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e366:	8a20      	ldrh	r0, [r4, #16]
    e368:	b918      	cbnz	r0, e372 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e36a:	88a0      	ldrh	r0, [r4, #4]
    e36c:	8aa1      	ldrh	r1, [r4, #20]
    e36e:	4288      	cmp	r0, r1
    e370:	d101      	bne.n	e376 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e372:	2000      	movs	r0, #0
    e374:	bd10      	pop	{r4, pc}
    e376:	1d21      	adds	r1, r4, #4
    e378:	4620      	mov	r0, r4
    e37a:	f7ff fefe 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e37e:	2000      	movs	r0, #0
    e380:	8220      	strh	r0, [r4, #16]
    e382:	2001      	movs	r0, #1
    e384:	bd10      	pop	{r4, pc}

0000e386 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e386:	b510      	push	{r4, lr}
    e388:	4604      	mov	r4, r0
    e38a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e38e:	88c0      	ldrh	r0, [r0, #6]
    e390:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e394:	4402      	add	r2, r0
    e396:	8820      	ldrh	r0, [r4, #0]
    e398:	2845      	cmp	r0, #69	; 0x45
    e39a:	d200      	bcs.n	e39e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e39c:	2045      	movs	r0, #69	; 0x45
    e39e:	4288      	cmp	r0, r1
    e3a0:	d204      	bcs.n	e3ac <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e3a2:	f240 1119 	movw	r1, #281	; 0x119
    e3a6:	2014      	movs	r0, #20
    e3a8:	f7f7 f98e 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3ac:	7de0      	ldrb	r0, [r4, #23]
    e3ae:	2800      	cmp	r0, #0
    e3b0:	d003      	beq.n	e3ba <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e3b2:	8810      	ldrh	r0, [r2, #0]
    e3b4:	4288      	cmp	r0, r1
    e3b6:	d201      	bcs.n	e3bc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e3b8:	2000      	movs	r0, #0
    e3ba:	bd10      	pop	{r4, pc}
    e3bc:	8011      	strh	r1, [r2, #0]
    e3be:	1da1      	adds	r1, r4, #6
    e3c0:	4620      	mov	r0, r4
    e3c2:	f7ff feda 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3c6:	2000      	movs	r0, #0
    e3c8:	75e0      	strb	r0, [r4, #23]
    e3ca:	2001      	movs	r0, #1
    e3cc:	bd10      	pop	{r4, pc}

0000e3ce <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3d2:	8941      	ldrh	r1, [r0, #10]
    e3d4:	8886      	ldrh	r6, [r0, #4]
    e3d6:	4604      	mov	r4, r0
    e3d8:	2500      	movs	r5, #0
    e3da:	f100 070a 	add.w	r7, r0, #10
    e3de:	e006      	b.n	e3ee <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e3e0:	4639      	mov	r1, r7
    e3e2:	4620      	mov	r0, r4
    e3e4:	f7ff fec9 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3e8:	1c6d      	adds	r5, r5, #1
    e3ea:	8961      	ldrh	r1, [r4, #10]
    e3ec:	b2ad      	uxth	r5, r5
    e3ee:	42b1      	cmp	r1, r6
    e3f0:	d1f6      	bne.n	e3e0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e3f2:	4628      	mov	r0, r5
    e3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e3f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e3f8:	b530      	push	{r4, r5, lr}
    e3fa:	88c4      	ldrh	r4, [r0, #6]
    e3fc:	8881      	ldrh	r1, [r0, #4]
    e3fe:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e402:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e406:	4413      	add	r3, r2
    e408:	8882      	ldrh	r2, [r0, #4]
    e40a:	8a85      	ldrh	r5, [r0, #20]
    e40c:	42aa      	cmp	r2, r5
    e40e:	d012      	beq.n	e436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e410:	42a1      	cmp	r1, r4
    e412:	d010      	beq.n	e436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e414:	8981      	ldrh	r1, [r0, #12]
    e416:	b971      	cbnz	r1, e436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e418:	6982      	ldr	r2, [r0, #24]
    e41a:	b172      	cbz	r2, e43a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e41c:	4610      	mov	r0, r2
    e41e:	f7ff ff13 	bl	e248 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e422:	b950      	cbnz	r0, e43a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e424:	8910      	ldrh	r0, [r2, #8]
    e426:	3224      	adds	r2, #36	; 0x24
    e428:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e42c:	4410      	add	r0, r2
    e42e:	7899      	ldrb	r1, [r3, #2]
    e430:	7880      	ldrb	r0, [r0, #2]
    e432:	4288      	cmp	r0, r1
    e434:	d101      	bne.n	e43a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e436:	2000      	movs	r0, #0
    e438:	bd30      	pop	{r4, r5, pc}
    e43a:	4618      	mov	r0, r3
    e43c:	bd30      	pop	{r4, r5, pc}

0000e43e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e43e:	7f00      	ldrb	r0, [r0, #28]
    e440:	1d80      	adds	r0, r0, #6
    e442:	4408      	add	r0, r1
    e444:	1ec0      	subs	r0, r0, #3
    e446:	6010      	str	r0, [r2, #0]
    e448:	8808      	ldrh	r0, [r1, #0]
    e44a:	4770      	bx	lr

0000e44c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e450:	460e      	mov	r6, r1
    e452:	88c1      	ldrh	r1, [r0, #6]
    e454:	8902      	ldrh	r2, [r0, #8]
    e456:	4604      	mov	r4, r0
    e458:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e45c:	8800      	ldrh	r0, [r0, #0]
    e45e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e462:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e466:	2845      	cmp	r0, #69	; 0x45
    e468:	d200      	bcs.n	e46c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e46a:	2045      	movs	r0, #69	; 0x45
    e46c:	42b0      	cmp	r0, r6
    e46e:	d203      	bcs.n	e478 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e470:	21db      	movs	r1, #219	; 0xdb
    e472:	2014      	movs	r0, #20
    e474:	f7f7 f928 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	4610      	mov	r0, r2
    e47a:	f7ff fe9f 	bl	e1bc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e47e:	b110      	cbz	r0, e486 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e480:	2000      	movs	r0, #0
    e482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e486:	42af      	cmp	r7, r5
    e488:	d908      	bls.n	e49c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e48a:	7f21      	ldrb	r1, [r4, #28]
    e48c:	1b78      	subs	r0, r7, r5
    e48e:	1a40      	subs	r0, r0, r1
    e490:	1f80      	subs	r0, r0, #6
    e492:	4286      	cmp	r6, r0
    e494:	dd02      	ble.n	e49c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e496:	2000      	movs	r0, #0
    e498:	75e0      	strb	r0, [r4, #23]
    e49a:	e7f1      	b.n	e480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e49c:	eb08 0005 	add.w	r0, r8, r5
    e4a0:	2101      	movs	r1, #1
    e4a2:	8006      	strh	r6, [r0, #0]
    e4a4:	75e1      	strb	r1, [r4, #23]
    e4a6:	e7ec      	b.n	e482 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e4a8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e4a8:	b538      	push	{r3, r4, r5, lr}
    e4aa:	88c4      	ldrh	r4, [r0, #6]
    e4ac:	8881      	ldrh	r1, [r0, #4]
    e4ae:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e4b2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e4b6:	441a      	add	r2, r3
    e4b8:	42a1      	cmp	r1, r4
    e4ba:	d010      	beq.n	e4de <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e4bc:	8983      	ldrh	r3, [r0, #12]
    e4be:	8a05      	ldrh	r5, [r0, #16]
    e4c0:	8812      	ldrh	r2, [r2, #0]
    e4c2:	442b      	add	r3, r5
    e4c4:	4293      	cmp	r3, r2
    e4c6:	d308      	bcc.n	e4da <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e4c8:	f8ad 1000 	strh.w	r1, [sp]
    e4cc:	4669      	mov	r1, sp
    e4ce:	f7ff fe54 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4d2:	f8bd 0000 	ldrh.w	r0, [sp]
    e4d6:	42a0      	cmp	r0, r4
    e4d8:	d001      	beq.n	e4de <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e4da:	2001      	movs	r0, #1
    e4dc:	bd38      	pop	{r3, r4, r5, pc}
    e4de:	2000      	movs	r0, #0
    e4e0:	bd38      	pop	{r3, r4, r5, pc}

0000e4e2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e4e2:	b570      	push	{r4, r5, r6, lr}
    e4e4:	88c6      	ldrh	r6, [r0, #6]
    e4e6:	8885      	ldrh	r5, [r0, #4]
    e4e8:	4603      	mov	r3, r0
    e4ea:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e4ee:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e4f2:	4420      	add	r0, r4
    e4f4:	42b5      	cmp	r5, r6
    e4f6:	d102      	bne.n	e4fe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e4f8:	2000      	movs	r0, #0
    e4fa:	8218      	strh	r0, [r3, #16]
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    e4fe:	8804      	ldrh	r4, [r0, #0]
    e500:	899d      	ldrh	r5, [r3, #12]
    e502:	7f1e      	ldrb	r6, [r3, #28]
    e504:	1b64      	subs	r4, r4, r5
    e506:	4435      	add	r5, r6
    e508:	4428      	add	r0, r5
    e50a:	880d      	ldrh	r5, [r1, #0]
    e50c:	b2a4      	uxth	r4, r4
    e50e:	1cc0      	adds	r0, r0, #3
    e510:	42a5      	cmp	r5, r4
    e512:	d900      	bls.n	e516 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e514:	800c      	strh	r4, [r1, #0]
    e516:	899c      	ldrh	r4, [r3, #12]
    e518:	b124      	cbz	r4, e524 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e51a:	2400      	movs	r4, #0
    e51c:	7014      	strb	r4, [r2, #0]
    e51e:	8809      	ldrh	r1, [r1, #0]
    e520:	8219      	strh	r1, [r3, #16]
    e522:	bd70      	pop	{r4, r5, r6, pc}
    e524:	2401      	movs	r4, #1
    e526:	e7f9      	b.n	e51c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e528 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e528:	b508      	push	{r3, lr}
    e52a:	8a81      	ldrh	r1, [r0, #20]
    e52c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e530:	3aff      	subs	r2, #255	; 0xff
    e532:	d008      	beq.n	e546 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e534:	7d82      	ldrb	r2, [r0, #22]
    e536:	f88d 2000 	strb.w	r2, [sp]
    e53a:	9a00      	ldr	r2, [sp, #0]
    e53c:	9200      	str	r2, [sp, #0]
    e53e:	f89d 2000 	ldrb.w	r2, [sp]
    e542:	b952      	cbnz	r2, e55a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e544:	e004      	b.n	e550 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e546:	f44f 7162 	mov.w	r1, #904	; 0x388
    e54a:	2014      	movs	r0, #20
    e54c:	f7f7 f8bc 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e550:	8880      	ldrh	r0, [r0, #4]
    e552:	4281      	cmp	r1, r0
    e554:	d101      	bne.n	e55a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e556:	2000      	movs	r0, #0
    e558:	bd08      	pop	{r3, pc}
    e55a:	2001      	movs	r0, #1
    e55c:	bd08      	pop	{r3, pc}

0000e55e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e55e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e562:	8281      	strh	r1, [r0, #20]
    e564:	2100      	movs	r1, #0
    e566:	7581      	strb	r1, [r0, #22]
    e568:	4770      	bx	lr

0000e56a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e56a:	b510      	push	{r4, lr}
    e56c:	8a81      	ldrh	r1, [r0, #20]
    e56e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e572:	3aff      	subs	r2, #255	; 0xff
    e574:	d004      	beq.n	e580 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e576:	f44f 7159 	mov.w	r1, #868	; 0x364
    e57a:	2014      	movs	r0, #20
    e57c:	f7f7 f8a4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e580:	88c1      	ldrh	r1, [r0, #6]
    e582:	8281      	strh	r1, [r0, #20]
    e584:	89c1      	ldrh	r1, [r0, #14]
    e586:	b109      	cbz	r1, e58c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e588:	2101      	movs	r1, #1
    e58a:	e000      	b.n	e58e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e58c:	2100      	movs	r1, #0
    e58e:	7581      	strb	r1, [r0, #22]
    e590:	bd10      	pop	{r4, pc}

0000e592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e596:	461d      	mov	r5, r3
    e598:	4616      	mov	r6, r2
    e59a:	9f06      	ldr	r7, [sp, #24]
    e59c:	460b      	mov	r3, r1
    e59e:	4604      	mov	r4, r0
    e5a0:	463a      	mov	r2, r7
    e5a2:	4629      	mov	r1, r5
    e5a4:	4630      	mov	r0, r6
    e5a6:	f000 f84f 	bl	e648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e5aa:	4283      	cmp	r3, r0
    e5ac:	d201      	bcs.n	e5b2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e5ae:	21a8      	movs	r1, #168	; 0xa8
    e5b0:	e018      	b.n	e5e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e5b2:	1ce0      	adds	r0, r4, #3
    e5b4:	f020 0103 	bic.w	r1, r0, #3
    e5b8:	4620      	mov	r0, r4
    e5ba:	42a1      	cmp	r1, r4
    e5bc:	d001      	beq.n	e5c2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e5be:	21a9      	movs	r1, #169	; 0xa9
    e5c0:	e010      	b.n	e5e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e5c2:	2224      	movs	r2, #36	; 0x24
    e5c4:	2100      	movs	r1, #0
    e5c6:	f7ff f968 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e5ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e5ce:	82a0      	strh	r0, [r4, #20]
    e5d0:	19a8      	adds	r0, r5, r6
    e5d2:	1d80      	adds	r0, r0, #6
    e5d4:	4378      	muls	r0, r7
    e5d6:	b280      	uxth	r0, r0
    e5d8:	7725      	strb	r5, [r4, #28]
    e5da:	8060      	strh	r0, [r4, #2]
    e5dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e5e0:	d903      	bls.n	e5ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e5e2:	21af      	movs	r1, #175	; 0xaf
    e5e4:	2014      	movs	r0, #20
    e5e6:	f7f7 f86f 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ea:	8026      	strh	r6, [r4, #0]
    e5ec:	2000      	movs	r0, #0
    e5ee:	7760      	strb	r0, [r4, #29]
    e5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e5f4:	6181      	str	r1, [r0, #24]
    e5f6:	6188      	str	r0, [r1, #24]
    e5f8:	4770      	bx	lr

0000e5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5fe:	460b      	mov	r3, r1
    e600:	4604      	mov	r4, r0
    e602:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e606:	8905      	ldrh	r5, [r0, #8]
    e608:	8946      	ldrh	r6, [r0, #10]
    e60a:	8880      	ldrh	r0, [r0, #4]
    e60c:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e610:	4439      	add	r1, r7
    e612:	460f      	mov	r7, r1
    e614:	4285      	cmp	r5, r0
    e616:	d102      	bne.n	e61e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e618:	2000      	movs	r0, #0
    e61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e61e:	b10a      	cbz	r2, e624 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e620:	1cc8      	adds	r0, r1, #3
    e622:	6010      	str	r0, [r2, #0]
    e624:	b123      	cbz	r3, e630 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e626:	7f22      	ldrb	r2, [r4, #28]
    e628:	1cf9      	adds	r1, r7, #3
    e62a:	4618      	mov	r0, r3
    e62c:	f7ff f8bb 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e630:	883f      	ldrh	r7, [r7, #0]
    e632:	f104 0108 	add.w	r1, r4, #8
    e636:	4620      	mov	r0, r4
    e638:	f7ff fd9f 	bl	e17a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e63c:	42b5      	cmp	r5, r6
    e63e:	d101      	bne.n	e644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e640:	8920      	ldrh	r0, [r4, #8]
    e642:	8160      	strh	r0, [r4, #10]
    e644:	4638      	mov	r0, r7
    e646:	e7e8      	b.n	e61a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e648:	4401      	add	r1, r0
    e64a:	1d89      	adds	r1, r1, #6
    e64c:	4351      	muls	r1, r2
    e64e:	b28a      	uxth	r2, r1
    e650:	2100      	movs	r1, #0
    e652:	2845      	cmp	r0, #69	; 0x45
    e654:	d201      	bcs.n	e65a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e656:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e65a:	3224      	adds	r2, #36	; 0x24
    e65c:	1850      	adds	r0, r2, r1
    e65e:	b280      	uxth	r0, r0
    e660:	4770      	bx	lr

0000e662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e666:	4688      	mov	r8, r1
    e668:	88c1      	ldrh	r1, [r0, #6]
    e66a:	4604      	mov	r4, r0
    e66c:	8900      	ldrh	r0, [r0, #8]
    e66e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e672:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e676:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e67a:	eb05 0906 	add.w	r9, r5, r6
    e67e:	f7ff fd9d 	bl	e1bc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e682:	2200      	movs	r2, #0
    e684:	b998      	cbnz	r0, e6ae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e686:	8820      	ldrh	r0, [r4, #0]
    e688:	2845      	cmp	r0, #69	; 0x45
    e68a:	d200      	bcs.n	e68e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e68c:	2045      	movs	r0, #69	; 0x45
    e68e:	42b7      	cmp	r7, r6
    e690:	d906      	bls.n	e6a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e692:	7f23      	ldrb	r3, [r4, #28]
    e694:	1bb9      	subs	r1, r7, r6
    e696:	1ac9      	subs	r1, r1, r3
    e698:	1f89      	subs	r1, r1, #6
    e69a:	4281      	cmp	r1, r0
    e69c:	da00      	bge.n	e6a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e69e:	4608      	mov	r0, r1
    e6a0:	89e1      	ldrh	r1, [r4, #14]
    e6a2:	b111      	cbz	r1, e6aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e6a4:	f8b9 3000 	ldrh.w	r3, [r9]
    e6a8:	1ac0      	subs	r0, r0, r3
    e6aa:	4540      	cmp	r0, r8
    e6ac:	da03      	bge.n	e6b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e6ae:	8262      	strh	r2, [r4, #18]
    e6b0:	2000      	movs	r0, #0
    e6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6b6:	7f20      	ldrb	r0, [r4, #28]
    e6b8:	4429      	add	r1, r5
    e6ba:	1d80      	adds	r0, r0, #6
    e6bc:	4430      	add	r0, r6
    e6be:	4408      	add	r0, r1
    e6c0:	f8a4 8012 	strh.w	r8, [r4, #18]
    e6c4:	1ec0      	subs	r0, r0, #3
    e6c6:	e7f4      	b.n	e6b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e6c8:	2100      	movs	r1, #0
    e6ca:	81c1      	strh	r1, [r0, #14]
    e6cc:	8241      	strh	r1, [r0, #18]
    e6ce:	7581      	strb	r1, [r0, #22]
    e6d0:	4770      	bx	lr

0000e6d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e6d2:	b570      	push	{r4, r5, r6, lr}
    e6d4:	2300      	movs	r3, #0
    e6d6:	2908      	cmp	r1, #8
    e6d8:	d204      	bcs.n	e6e4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e6da:	f240 11cb 	movw	r1, #459	; 0x1cb
    e6de:	2015      	movs	r0, #21
    e6e0:	f7f6 fff2 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e4:	6802      	ldr	r2, [r0, #0]
    e6e6:	b90a      	cbnz	r2, e6ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e6e8:	e01e      	b.n	e728 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e6ea:	4610      	mov	r0, r2
    e6ec:	6802      	ldr	r2, [r0, #0]
    e6ee:	8893      	ldrh	r3, [r2, #4]
    e6f0:	428b      	cmp	r3, r1
    e6f2:	d002      	beq.n	e6fa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e6f4:	6813      	ldr	r3, [r2, #0]
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d1f7      	bne.n	e6ea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e6fa:	8894      	ldrh	r4, [r2, #4]
    e6fc:	4613      	mov	r3, r2
    e6fe:	428c      	cmp	r4, r1
    e700:	d101      	bne.n	e706 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e702:	6811      	ldr	r1, [r2, #0]
    e704:	e00d      	b.n	e722 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e706:	f101 0508 	add.w	r5, r1, #8
    e70a:	b2ae      	uxth	r6, r5
    e70c:	2500      	movs	r5, #0
    e70e:	42b4      	cmp	r4, r6
    e710:	d309      	bcc.n	e726 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e712:	1a64      	subs	r4, r4, r1
    e714:	4411      	add	r1, r2
    e716:	600d      	str	r5, [r1, #0]
    e718:	808c      	strh	r4, [r1, #4]
    e71a:	6802      	ldr	r2, [r0, #0]
    e71c:	6812      	ldr	r2, [r2, #0]
    e71e:	6002      	str	r2, [r0, #0]
    e720:	600a      	str	r2, [r1, #0]
    e722:	6001      	str	r1, [r0, #0]
    e724:	e000      	b.n	e728 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e726:	2300      	movs	r3, #0
    e728:	4618      	mov	r0, r3
    e72a:	bd70      	pop	{r4, r5, r6, pc}

0000e72c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e72c:	b510      	push	{r4, lr}
    e72e:	000c      	movs	r4, r1
    e730:	d006      	beq.n	e740 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e732:	2c08      	cmp	r4, #8
    e734:	d209      	bcs.n	e74a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e736:	f240 1195 	movw	r1, #405	; 0x195
    e73a:	2015      	movs	r0, #21
    e73c:	f7f6 ffc4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e740:	b108      	cbz	r0, e746 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e742:	2100      	movs	r1, #0
    e744:	6001      	str	r1, [r0, #0]
    e746:	2000      	movs	r0, #0
    e748:	bd10      	pop	{r4, pc}
    e74a:	b118      	cbz	r0, e754 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e74c:	b2a1      	uxth	r1, r4
    e74e:	6800      	ldr	r0, [r0, #0]
    e750:	f000 f814 	bl	e77c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e754:	1d20      	adds	r0, r4, #4
    e756:	bd10      	pop	{r4, pc}

0000e758 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e758:	2100      	movs	r1, #0
    e75a:	6802      	ldr	r2, [r0, #0]
    e75c:	e003      	b.n	e766 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e75e:	8893      	ldrh	r3, [r2, #4]
    e760:	6812      	ldr	r2, [r2, #0]
    e762:	4419      	add	r1, r3
    e764:	b289      	uxth	r1, r1
    e766:	2a00      	cmp	r2, #0
    e768:	d1f9      	bne.n	e75e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e76a:	f000 b807 	b.w	e77c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e76e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e76e:	2300      	movs	r3, #0
    e770:	600b      	str	r3, [r1, #0]
    e772:	808a      	strh	r2, [r1, #4]
    e774:	6802      	ldr	r2, [r0, #0]
    e776:	600a      	str	r2, [r1, #0]
    e778:	6001      	str	r1, [r0, #0]
    e77a:	4770      	bx	lr
    e77c:	2300      	movs	r3, #0
    e77e:	6043      	str	r3, [r0, #4]
    e780:	1d02      	adds	r2, r0, #4
    e782:	8101      	strh	r1, [r0, #8]
    e784:	6002      	str	r2, [r0, #0]
    e786:	4770      	bx	lr

0000e788 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    e788:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    e78c:	3bff      	subs	r3, #255	; 0xff
    e78e:	d001      	beq.n	e794 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    e790:	2902      	cmp	r1, #2
    e792:	d301      	bcc.n	e798 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    e794:	2000      	movs	r0, #0
    e796:	4770      	bx	lr
    e798:	f7f7 ba50 	b.w	5c3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e79c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e7a0:	3aff      	subs	r2, #255	; 0xff
    e7a2:	d001      	beq.n	e7a8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    e7a4:	2902      	cmp	r1, #2
    e7a6:	d301      	bcc.n	e7ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    e7a8:	2000      	movs	r0, #0
    e7aa:	4770      	bx	lr
    e7ac:	f7f7 ba80 	b.w	5cb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e7b0:	b570      	push	{r4, r5, r6, lr}
    e7b2:	4605      	mov	r5, r0
    e7b4:	460c      	mov	r4, r1
    e7b6:	4608      	mov	r0, r1
    e7b8:	f000 f973 	bl	eaa2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e7bc:	b108      	cbz	r0, e7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e7be:	2010      	movs	r0, #16
    e7c0:	bd70      	pop	{r4, r5, r6, pc}
    e7c2:	2d02      	cmp	r5, #2
    e7c4:	d301      	bcc.n	e7ca <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    e7c6:	2007      	movs	r0, #7
    e7c8:	bd70      	pop	{r4, r5, r6, pc}
    e7ca:	7025      	strb	r5, [r4, #0]
    e7cc:	2000      	movs	r0, #0
    e7ce:	8060      	strh	r0, [r4, #2]
    e7d0:	bd70      	pop	{r4, r5, r6, pc}
    e7d2:	b510      	push	{r4, lr}
    e7d4:	4604      	mov	r4, r0
    e7d6:	f7f7 fab7 	bl	5d48 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    e7da:	42a0      	cmp	r0, r4
    e7dc:	d901      	bls.n	e7e2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    e7de:	2001      	movs	r0, #1
    e7e0:	bd10      	pop	{r4, pc}
    e7e2:	2000      	movs	r0, #0
    e7e4:	bd10      	pop	{r4, pc}
    e7e6:	4770      	bx	lr

0000e7e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e7e8:	b570      	push	{r4, r5, r6, lr}
    e7ea:	460e      	mov	r6, r1
    e7ec:	461d      	mov	r5, r3
    e7ee:	4611      	mov	r1, r2
    e7f0:	f000 f811 	bl	e816 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e7f4:	4604      	mov	r4, r0
    e7f6:	4629      	mov	r1, r5
    e7f8:	4630      	mov	r0, r6
    e7fa:	f000 f803 	bl	e804 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e7fe:	4420      	add	r0, r4
    e800:	1d00      	adds	r0, r0, #4
    e802:	bd70      	pop	{r4, r5, r6, pc}
    e804:	b510      	push	{r4, lr}
    e806:	460a      	mov	r2, r1
    e808:	2101      	movs	r1, #1
    e80a:	f7ff ff1d 	bl	e648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e80e:	1cc0      	adds	r0, r0, #3
    e810:	f020 0003 	bic.w	r0, r0, #3
    e814:	bd10      	pop	{r4, pc}
    e816:	b510      	push	{r4, lr}
    e818:	460a      	mov	r2, r1
    e81a:	2101      	movs	r1, #1
    e81c:	f7ff ff14 	bl	e648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e820:	1cc0      	adds	r0, r0, #3
    e822:	f020 0003 	bic.w	r0, r0, #3
    e826:	bd10      	pop	{r4, pc}
    e828:	b109      	cbz	r1, e82e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    e82a:	2100      	movs	r1, #0
    e82c:	e000      	b.n	e830 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    e82e:	2102      	movs	r1, #2
    e830:	1843      	adds	r3, r0, r1
    e832:	7d1a      	ldrb	r2, [r3, #20]
    e834:	2a02      	cmp	r2, #2
    e836:	d008      	beq.n	e84a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e838:	7d5b      	ldrb	r3, [r3, #21]
    e83a:	2b02      	cmp	r3, #2
    e83c:	d009      	beq.n	e852 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e83e:	2a03      	cmp	r2, #3
    e840:	d003      	beq.n	e84a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e842:	2b03      	cmp	r3, #3
    e844:	d005      	beq.n	e852 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    e846:	2000      	movs	r0, #0
    e848:	4770      	bx	lr
    e84a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e84e:	8b00      	ldrh	r0, [r0, #24]
    e850:	4770      	bx	lr
    e852:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e856:	8b40      	ldrh	r0, [r0, #26]
    e858:	4770      	bx	lr
    e85a:	b109      	cbz	r1, e860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    e85c:	2100      	movs	r1, #0
    e85e:	e000      	b.n	e862 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    e860:	2102      	movs	r1, #2
    e862:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e866:	8b01      	ldrh	r1, [r0, #24]
    e868:	b911      	cbnz	r1, e870 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    e86a:	8b40      	ldrh	r0, [r0, #26]
    e86c:	2800      	cmp	r0, #0
    e86e:	d000      	beq.n	e872 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    e870:	2001      	movs	r0, #1
    e872:	4770      	bx	lr
    e874:	b538      	push	{r3, r4, r5, lr}
    e876:	7883      	ldrb	r3, [r0, #2]
    e878:	f88d 3000 	strb.w	r3, [sp]
    e87c:	9b00      	ldr	r3, [sp, #0]
    e87e:	9300      	str	r3, [sp, #0]
    e880:	f89d 3000 	ldrb.w	r3, [sp]
    e884:	b953      	cbnz	r3, e89c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    e886:	b10a      	cbz	r2, e88c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    e888:	2300      	movs	r3, #0
    e88a:	e000      	b.n	e88e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    e88c:	2302      	movs	r3, #2
    e88e:	18c2      	adds	r2, r0, r3
    e890:	7d14      	ldrb	r4, [r2, #20]
    e892:	2c02      	cmp	r4, #2
    e894:	d004      	beq.n	e8a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    e896:	7d52      	ldrb	r2, [r2, #21]
    e898:	2a02      	cmp	r2, #2
    e89a:	d004      	beq.n	e8a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    e89c:	2000      	movs	r0, #0
    e89e:	bd38      	pop	{r3, r4, r5, pc}
    e8a0:	461a      	mov	r2, r3
    e8a2:	1c5b      	adds	r3, r3, #1
    e8a4:	e000      	b.n	e8a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    e8a6:	1c5a      	adds	r2, r3, #1
    e8a8:	b181      	cbz	r1, e8cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    e8aa:	18c5      	adds	r5, r0, r3
    e8ac:	2400      	movs	r4, #0
    e8ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e8b2:	752c      	strb	r4, [r5, #20]
    e8b4:	831c      	strh	r4, [r3, #24]
    e8b6:	2303      	movs	r3, #3
    e8b8:	1884      	adds	r4, r0, r2
    e8ba:	7523      	strb	r3, [r4, #20]
    e8bc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    e8c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    e8c4:	685b      	ldr	r3, [r3, #4]
    e8c6:	600b      	str	r3, [r1, #0]
    e8c8:	8b00      	ldrh	r0, [r0, #24]
    e8ca:	8088      	strh	r0, [r1, #4]
    e8cc:	2001      	movs	r0, #1
    e8ce:	bd38      	pop	{r3, r4, r5, pc}
    e8d0:	b510      	push	{r4, lr}
    e8d2:	b109      	cbz	r1, e8d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    e8d4:	2100      	movs	r1, #0
    e8d6:	e000      	b.n	e8da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    e8d8:	2102      	movs	r1, #2
    e8da:	1843      	adds	r3, r0, r1
    e8dc:	7d1c      	ldrb	r4, [r3, #20]
    e8de:	4294      	cmp	r4, r2
    e8e0:	d103      	bne.n	e8ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    e8e2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8e6:	8b00      	ldrh	r0, [r0, #24]
    e8e8:	bd10      	pop	{r4, pc}
    e8ea:	7d5b      	ldrb	r3, [r3, #21]
    e8ec:	4293      	cmp	r3, r2
    e8ee:	d103      	bne.n	e8f8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    e8f0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    e8f4:	8b40      	ldrh	r0, [r0, #26]
    e8f6:	bd10      	pop	{r4, pc}
    e8f8:	2000      	movs	r0, #0
    e8fa:	bd10      	pop	{r4, pc}
    e8fc:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    e900:	d201      	bcs.n	e906 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    e902:	0841      	lsrs	r1, r0, #1
    e904:	e000      	b.n	e908 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    e906:	21ff      	movs	r1, #255	; 0xff
    e908:	1a40      	subs	r0, r0, r1
    e90a:	f240 6172 	movw	r1, #1650	; 0x672
    e90e:	4288      	cmp	r0, r1
    e910:	db00      	blt.n	e914 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    e912:	4608      	mov	r0, r1
    e914:	b280      	uxth	r0, r0
    e916:	4770      	bx	lr

0000e918 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    e918:	2101      	movs	r1, #1
    e91a:	f7ff bf85 	b.w	e828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    e91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e922:	4606      	mov	r6, r0
    e924:	f342 0780 	sbfx	r7, r2, #2, #1
    e928:	7848      	ldrb	r0, [r1, #1]
    e92a:	460c      	mov	r4, r1
    e92c:	f022 0504 	bic.w	r5, r2, #4
    e930:	1c7f      	adds	r7, r7, #1
    e932:	b100      	cbz	r0, e936 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    e934:	b90d      	cbnz	r5, e93a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    e936:	4328      	orrs	r0, r5
    e938:	d104      	bne.n	e944 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    e93a:	b145      	cbz	r5, e94e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    e93c:	2100      	movs	r1, #0
    e93e:	4620      	mov	r0, r4
    e940:	f7f7 fb0a 	bl	5f58 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    e944:	2101      	movs	r1, #1
    e946:	70a1      	strb	r1, [r4, #2]
    e948:	b11f      	cbz	r7, e952 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    e94a:	2000      	movs	r0, #0
    e94c:	e002      	b.n	e954 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    e94e:	2101      	movs	r1, #1
    e950:	e7f5      	b.n	e93e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    e952:	2002      	movs	r0, #2
    e954:	1822      	adds	r2, r4, r0
    e956:	7d12      	ldrb	r2, [r2, #20]
    e958:	2a03      	cmp	r2, #3
    e95a:	d102      	bne.n	e962 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e95c:	2d02      	cmp	r5, #2
    e95e:	d000      	beq.n	e962 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    e960:	1c40      	adds	r0, r0, #1
    e962:	1822      	adds	r2, r4, r0
    e964:	7511      	strb	r1, [r2, #20]
    e966:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    e96a:	2200      	movs	r2, #0
    e96c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e970:	830a      	strh	r2, [r1, #24]
    e972:	6840      	ldr	r0, [r0, #4]
    e974:	70a2      	strb	r2, [r4, #2]
    e976:	4631      	mov	r1, r6
    e978:	f362 010f 	bfi	r1, r2, #0, #16
    e97c:	e9c6 0100 	strd	r0, r1, [r6]
    e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e984 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e988:	461e      	mov	r6, r3
    e98a:	4613      	mov	r3, r2
    e98c:	4604      	mov	r4, r0
    e98e:	b109      	cbz	r1, e994 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    e990:	2000      	movs	r0, #0
    e992:	e000      	b.n	e996 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    e994:	2002      	movs	r0, #2
    e996:	2101      	movs	r1, #1
    e998:	70a1      	strb	r1, [r4, #2]
    e99a:	1821      	adds	r1, r4, r0
    e99c:	7d0a      	ldrb	r2, [r1, #20]
    e99e:	2a01      	cmp	r2, #1
    e9a0:	d003      	beq.n	e9aa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    e9a2:	7d49      	ldrb	r1, [r1, #21]
    e9a4:	2901      	cmp	r1, #1
    e9a6:	d10c      	bne.n	e9c2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    e9a8:	1c40      	adds	r0, r0, #1
    e9aa:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    e9ae:	2700      	movs	r7, #0
    e9b0:	8b29      	ldrh	r1, [r5, #24]
    e9b2:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    e9b6:	198a      	adds	r2, r1, r6
    e9b8:	4562      	cmp	r2, ip
    e9ba:	d905      	bls.n	e9c8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    e9bc:	4420      	add	r0, r4
    e9be:	832f      	strh	r7, [r5, #24]
    e9c0:	7507      	strb	r7, [r0, #20]
    e9c2:	2000      	movs	r0, #0
    e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9c8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    e9cc:	4632      	mov	r2, r6
    e9ce:	6840      	ldr	r0, [r0, #4]
    e9d0:	4408      	add	r0, r1
    e9d2:	4619      	mov	r1, r3
    e9d4:	f7fe fee7 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9d8:	8b28      	ldrh	r0, [r5, #24]
    e9da:	4430      	add	r0, r6
    e9dc:	8328      	strh	r0, [r5, #24]
    e9de:	70a7      	strb	r7, [r4, #2]
    e9e0:	2001      	movs	r0, #1
    e9e2:	e7ef      	b.n	e9c4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000e9e4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    e9e4:	2202      	movs	r2, #2
    e9e6:	2100      	movs	r1, #0
    e9e8:	f7ff bf72 	b.w	e8d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e9ec <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    e9ec:	b510      	push	{r4, lr}
    e9ee:	2101      	movs	r1, #1
    e9f0:	f7ff ff33 	bl	e85a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e9f4:	2800      	cmp	r0, #0
    e9f6:	d000      	beq.n	e9fa <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e9f8:	2001      	movs	r0, #1
    e9fa:	bd10      	pop	{r4, pc}

0000e9fc <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e9fc:	2201      	movs	r2, #1
    e9fe:	f7ff bf39 	b.w	e874 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000ea02 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    ea02:	2200      	movs	r2, #0
    ea04:	f7ff bf36 	b.w	e874 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    ea08:	b570      	push	{r4, r5, r6, lr}
    ea0a:	b109      	cbz	r1, ea10 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    ea0c:	2300      	movs	r3, #0
    ea0e:	e000      	b.n	ea12 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    ea10:	2302      	movs	r3, #2
    ea12:	2101      	movs	r1, #1
    ea14:	7081      	strb	r1, [r0, #2]
    ea16:	18c1      	adds	r1, r0, r3
    ea18:	2402      	movs	r4, #2
    ea1a:	7d0d      	ldrb	r5, [r1, #20]
    ea1c:	2d01      	cmp	r5, #1
    ea1e:	d007      	beq.n	ea30 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    ea20:	7d4d      	ldrb	r5, [r1, #21]
    ea22:	2d01      	cmp	r5, #1
    ea24:	d009      	beq.n	ea3a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    ea26:	f44f 718b 	mov.w	r1, #278	; 0x116
    ea2a:	2009      	movs	r0, #9
    ea2c:	f7f6 fe4c 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ea34:	831a      	strh	r2, [r3, #24]
    ea36:	750c      	strb	r4, [r1, #20]
    ea38:	e003      	b.n	ea42 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    ea3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ea3e:	835a      	strh	r2, [r3, #26]
    ea40:	754c      	strb	r4, [r1, #21]
    ea42:	2100      	movs	r1, #0
    ea44:	7081      	strb	r1, [r0, #2]
    ea46:	bd70      	pop	{r4, r5, r6, pc}

0000ea48 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    ea48:	2101      	movs	r1, #1
    ea4a:	7001      	strb	r1, [r0, #0]
    ea4c:	4770      	bx	lr

0000ea4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    ea4e:	2201      	movs	r2, #1
    ea50:	4611      	mov	r1, r2
    ea52:	f7ff bf3d 	b.w	e8d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000ea56 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    ea56:	2201      	movs	r2, #1
    ea58:	2100      	movs	r1, #0
    ea5a:	f7ff bf39 	b.w	e8d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000ea5e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    ea5e:	2100      	movs	r1, #0
    ea60:	f7ff bee2 	b.w	e828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    ea64:	2800      	cmp	r0, #0
    ea66:	db09      	blt.n	ea7c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    ea68:	f000 021f 	and.w	r2, r0, #31
    ea6c:	2101      	movs	r1, #1
    ea6e:	4091      	lsls	r1, r2
    ea70:	0940      	lsrs	r0, r0, #5
    ea72:	0080      	lsls	r0, r0, #2
    ea74:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ea78:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ea7c:	4770      	bx	lr
    ea7e:	5840      	ldr	r0, [r0, r1]
    ea80:	2800      	cmp	r0, #0
    ea82:	d000      	beq.n	ea86 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    ea84:	2001      	movs	r0, #1
    ea86:	4770      	bx	lr

0000ea88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ea88:	f7f7 bbbc 	b.w	6204 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000ea8c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    ea8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ea90:	2000      	movs	r0, #0
    ea92:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ea96:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ea9a:	2001      	movs	r0, #1
    ea9c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    eaa0:	4770      	bx	lr

0000eaa2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    eaa2:	b108      	cbz	r0, eaa8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    eaa4:	2000      	movs	r0, #0
    eaa6:	4770      	bx	lr
    eaa8:	2001      	movs	r0, #1
    eaaa:	4770      	bx	lr

0000eaac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    eaac:	f7f7 bcfc 	b.w	64a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000eab0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    eab0:	f7f7 bcea 	b.w	6488 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000eab4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    eab4:	b510      	push	{r4, lr}
    eab6:	2900      	cmp	r1, #0
    eab8:	4604      	mov	r4, r0
    eaba:	f04f 0106 	mov.w	r1, #6
    eabe:	d002      	beq.n	eac6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    eac0:	f7f6 fe8e 	bl	57e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eac4:	e001      	b.n	eaca <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    eac6:	f7f6 fe99 	bl	57fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eaca:	7960      	ldrb	r0, [r4, #5]
    eacc:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ead0:	7160      	strb	r0, [r4, #5]
    ead2:	bd10      	pop	{r4, pc}

0000ead4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ead4:	4770      	bx	lr

0000ead6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ead6:	b530      	push	{r4, r5, lr}
    ead8:	460c      	mov	r4, r1
    eada:	4605      	mov	r5, r0
    eadc:	b08d      	sub	sp, #52	; 0x34
    eade:	f04f 0103 	mov.w	r1, #3
    eae2:	f104 0003 	add.w	r0, r4, #3
    eae6:	b112      	cbz	r2, eaee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    eae8:	f7f6 fe7a 	bl	57e0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    eaec:	e001      	b.n	eaf2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    eaee:	f7f6 fe85 	bl	57fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eaf2:	7960      	ldrb	r0, [r4, #5]
    eaf4:	220d      	movs	r2, #13
    eaf6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    eafa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    eafe:	7160      	strb	r0, [r4, #5]
    eb00:	2100      	movs	r1, #0
    eb02:	a804      	add	r0, sp, #16
    eb04:	f7fe fec9 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb08:	78e0      	ldrb	r0, [r4, #3]
    eb0a:	f88d 001f 	strb.w	r0, [sp, #31]
    eb0e:	7920      	ldrb	r0, [r4, #4]
    eb10:	f88d 001e 	strb.w	r0, [sp, #30]
    eb14:	7960      	ldrb	r0, [r4, #5]
    eb16:	f88d 001d 	strb.w	r0, [sp, #29]
    eb1a:	2210      	movs	r2, #16
    eb1c:	4629      	mov	r1, r5
    eb1e:	4668      	mov	r0, sp
    eb20:	f7fe fe41 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb24:	4668      	mov	r0, sp
    eb26:	f7ff ffaf 	bl	ea88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    eb2a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    eb2e:	7020      	strb	r0, [r4, #0]
    eb30:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    eb34:	7060      	strb	r0, [r4, #1]
    eb36:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    eb3a:	70a0      	strb	r0, [r4, #2]
    eb3c:	b00d      	add	sp, #52	; 0x34
    eb3e:	bd30      	pop	{r4, r5, pc}

0000eb40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    eb40:	f7f8 b88a 	b.w	6c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    eb44:	07c1      	lsls	r1, r0, #31
    eb46:	d001      	beq.n	eb4c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    eb48:	2001      	movs	r0, #1
    eb4a:	4770      	bx	lr
    eb4c:	0780      	lsls	r0, r0, #30
    eb4e:	d501      	bpl.n	eb54 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    eb50:	2002      	movs	r0, #2
    eb52:	4770      	bx	lr
    eb54:	2000      	movs	r0, #0
    eb56:	4770      	bx	lr
    eb58:	b510      	push	{r4, lr}
    eb5a:	2801      	cmp	r0, #1
    eb5c:	d008      	beq.n	eb70 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    eb5e:	2802      	cmp	r0, #2
    eb60:	d004      	beq.n	eb6c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    eb62:	f240 31ad 	movw	r1, #941	; 0x3ad
    eb66:	2006      	movs	r0, #6
    eb68:	f7f6 fdae 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb6c:	2001      	movs	r0, #1
    eb6e:	bd10      	pop	{r4, pc}
    eb70:	2000      	movs	r0, #0
    eb72:	bd10      	pop	{r4, pc}
    eb74:	2900      	cmp	r1, #0
    eb76:	d004      	beq.n	eb82 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    eb78:	2801      	cmp	r0, #1
    eb7a:	d003      	beq.n	eb84 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    eb7c:	2901      	cmp	r1, #1
    eb7e:	d001      	beq.n	eb84 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    eb80:	2002      	movs	r0, #2
    eb82:	4770      	bx	lr
    eb84:	2001      	movs	r0, #1
    eb86:	4770      	bx	lr
    eb88:	f7ff bcab 	b.w	e4e2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000eb8c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    eb8c:	2101      	movs	r1, #1
    eb8e:	f7f8 bbf3 	b.w	7378 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000eb92 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    eb92:	b510      	push	{r4, lr}
    eb94:	f002 fc46 	bl	11424 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    eb98:	b118      	cbz	r0, eba2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    eb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb9e:	f7fd b949 	b.w	be34 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    eba2:	20ff      	movs	r0, #255	; 0xff
    eba4:	bd10      	pop	{r4, pc}

0000eba6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    eba6:	b510      	push	{r4, lr}
    eba8:	f7f8 fc2e 	bl	7408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ebac:	2810      	cmp	r0, #16
    ebae:	d003      	beq.n	ebb8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ebb0:	f7f8 fbfa 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ebb4:	2810      	cmp	r0, #16
    ebb6:	d100      	bne.n	ebba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ebb8:	2008      	movs	r0, #8
    ebba:	bd10      	pop	{r4, pc}

0000ebbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    ebbc:	b510      	push	{r4, lr}
    ebbe:	f7f8 fc23 	bl	7408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ebc2:	2810      	cmp	r0, #16
    ebc4:	d007      	beq.n	ebd6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ebc6:	f7f8 fbef 	bl	73a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ebca:	2810      	cmp	r0, #16
    ebcc:	d003      	beq.n	ebd6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ebce:	f7f8 fc63 	bl	7498 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    ebd2:	2001      	movs	r0, #1
    ebd4:	bd10      	pop	{r4, pc}
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ebda:	b510      	push	{r4, lr}
    ebdc:	f7f8 fc14 	bl	7408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ebe0:	2810      	cmp	r0, #16
    ebe2:	d003      	beq.n	ebec <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ebe4:	f7f8 fca0 	bl	7528 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    ebe8:	2001      	movs	r0, #1
    ebea:	bd10      	pop	{r4, pc}
    ebec:	2000      	movs	r0, #0
    ebee:	bd10      	pop	{r4, pc}

0000ebf0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ebf0:	b570      	push	{r4, r5, r6, lr}
    ebf2:	460e      	mov	r6, r1
    ebf4:	b08c      	sub	sp, #48	; 0x30
    ebf6:	4614      	mov	r4, r2
    ebf8:	4601      	mov	r1, r0
    ebfa:	461d      	mov	r5, r3
    ebfc:	2210      	movs	r2, #16
    ebfe:	4668      	mov	r0, sp
    ec00:	f000 f91a 	bl	ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec04:	2210      	movs	r2, #16
    ec06:	4631      	mov	r1, r6
    ec08:	a804      	add	r0, sp, #16
    ec0a:	f000 f915 	bl	ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec0e:	4668      	mov	r0, sp
    ec10:	f7ff ff3a 	bl	ea88 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ec14:	a908      	add	r1, sp, #32
    ec16:	f04f 0210 	mov.w	r2, #16
    ec1a:	4628      	mov	r0, r5
    ec1c:	b11c      	cbz	r4, ec26 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ec1e:	f000 f90b 	bl	ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ec22:	b00c      	add	sp, #48	; 0x30
    ec24:	bd70      	pop	{r4, r5, r6, pc}
    ec26:	f7fe fdbe 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ec2a:	e7fa      	b.n	ec22 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ec2c:	b510      	push	{r4, lr}
    ec2e:	460c      	mov	r4, r1
    ec30:	2100      	movs	r1, #0
    ec32:	f7ff fdb3 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ec36:	6060      	str	r0, [r4, #4]
    ec38:	b118      	cbz	r0, ec42 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ec3a:	2001      	movs	r0, #1
    ec3c:	7020      	strb	r0, [r4, #0]
    ec3e:	2000      	movs	r0, #0
    ec40:	bd10      	pop	{r4, pc}
    ec42:	2002      	movs	r0, #2
    ec44:	bd10      	pop	{r4, pc}

0000ec46 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ec46:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec4a:	4348      	muls	r0, r1
    ec4c:	4770      	bx	lr

0000ec4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ec4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec52:	fbb0 f0f1 	udiv	r0, r0, r1
    ec56:	b280      	uxth	r0, r0
    ec58:	4770      	bx	lr

0000ec5a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ec5a:	b570      	push	{r4, r5, r6, lr}
    ec5c:	4604      	mov	r4, r0
    ec5e:	4290      	cmp	r0, r2
    ec60:	d20b      	bcs.n	ec7a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ec62:	1b10      	subs	r0, r2, r4
    ec64:	2865      	cmp	r0, #101	; 0x65
    ec66:	d200      	bcs.n	ec6a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ec68:	2065      	movs	r0, #101	; 0x65
    ec6a:	1825      	adds	r5, r4, r0
    ec6c:	428d      	cmp	r5, r1
    ec6e:	d803      	bhi.n	ec78 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ec70:	2104      	movs	r1, #4
    ec72:	f7f4 f827 	bl	2cc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ec76:	b108      	cbz	r0, ec7c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ec78:	4620      	mov	r0, r4
    ec7a:	bd70      	pop	{r4, r5, r6, pc}
    ec7c:	4628      	mov	r0, r5
    ec7e:	bd70      	pop	{r4, r5, r6, pc}

0000ec80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ec80:	b510      	push	{r4, lr}
    ec82:	f1a2 030f 	sub.w	r3, r2, #15
    ec86:	290c      	cmp	r1, #12
    ec88:	d244      	bcs.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ec8a:	e8df f001 	tbb	[pc, r1]
    ec8e:	0806      	.short	0x0806
    ec90:	1815120d 	.word	0x1815120d
    ec94:	4127241c 	.word	0x4127241c
    ec98:	312a      	.short	0x312a
    ec9a:	b3c2      	cbz	r2, ed0e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ec9c:	e03a      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ec9e:	2a07      	cmp	r2, #7
    eca0:	d03a      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eca2:	2a08      	cmp	r2, #8
    eca4:	d038      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    eca6:	e035      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    eca8:	2a0c      	cmp	r2, #12
    ecaa:	d035      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecac:	2a0b      	cmp	r2, #11
    ecae:	d033      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecb0:	e030      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecb2:	2a0d      	cmp	r2, #13
    ecb4:	d030      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecb6:	e02d      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecb8:	2b0c      	cmp	r3, #12
    ecba:	d92d      	bls.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecbc:	e02a      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecbe:	3a10      	subs	r2, #16
    ecc0:	2a0b      	cmp	r2, #11
    ecc2:	d929      	bls.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecc4:	e026      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecc6:	2b03      	cmp	r3, #3
    ecc8:	d926      	bls.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecca:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    ecce:	b308      	cbz	r0, ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecd0:	2a1b      	cmp	r2, #27
    ecd2:	d921      	bls.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecd4:	e01e      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecd6:	2a04      	cmp	r2, #4
    ecd8:	d01e      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecda:	e01b      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecdc:	2a06      	cmp	r2, #6
    ecde:	d01b      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ece0:	e018      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ece2:	2a1c      	cmp	r2, #28
    ece4:	d018      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ece6:	2a1d      	cmp	r2, #29
    ece8:	d016      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecea:	2a1e      	cmp	r2, #30
    ecec:	d014      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecee:	e011      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ecf0:	2a1f      	cmp	r2, #31
    ecf2:	d011      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecf4:	2a20      	cmp	r2, #32
    ecf6:	d00f      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecf8:	2a21      	cmp	r2, #33	; 0x21
    ecfa:	d00d      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ecfc:	2a22      	cmp	r2, #34	; 0x22
    ecfe:	d00b      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed00:	2a23      	cmp	r2, #35	; 0x23
    ed02:	d009      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed04:	2a24      	cmp	r2, #36	; 0x24
    ed06:	d007      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed08:	2a26      	cmp	r2, #38	; 0x26
    ed0a:	d005      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed0c:	e002      	b.n	ed14 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ed0e:	e003      	b.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed10:	2a0e      	cmp	r2, #14
    ed12:	d001      	beq.n	ed18 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ed14:	2000      	movs	r0, #0
    ed16:	bd10      	pop	{r4, pc}
    ed18:	2001      	movs	r0, #1
    ed1a:	bd10      	pop	{r4, pc}

0000ed1c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ed1c:	280c      	cmp	r0, #12
    ed1e:	d013      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed20:	280b      	cmp	r0, #11
    ed22:	d011      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed24:	280d      	cmp	r0, #13
    ed26:	d00f      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed28:	281f      	cmp	r0, #31
    ed2a:	d00d      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed2c:	2820      	cmp	r0, #32
    ed2e:	d00b      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed30:	2821      	cmp	r0, #33	; 0x21
    ed32:	d009      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed34:	2822      	cmp	r0, #34	; 0x22
    ed36:	d007      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed38:	2823      	cmp	r0, #35	; 0x23
    ed3a:	d005      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed3c:	2824      	cmp	r0, #36	; 0x24
    ed3e:	d003      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed40:	2826      	cmp	r0, #38	; 0x26
    ed42:	d001      	beq.n	ed48 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ed44:	2000      	movs	r0, #0
    ed46:	4770      	bx	lr
    ed48:	2001      	movs	r0, #1
    ed4a:	4770      	bx	lr

0000ed4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ed4c:	f011 0f0c 	tst.w	r1, #12
    ed50:	d016      	beq.n	ed80 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ed52:	074a      	lsls	r2, r1, #29
    ed54:	f44f 7116 	mov.w	r1, #600	; 0x258
    ed58:	2a00      	cmp	r2, #0
    ed5a:	da02      	bge.n	ed62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ed5c:	f04f 0210 	mov.w	r2, #16
    ed60:	e001      	b.n	ed66 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ed62:	f04f 0240 	mov.w	r2, #64	; 0x40
    ed66:	da01      	bge.n	ed6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ed68:	f04f 0196 	mov.w	r1, #150	; 0x96
    ed6c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ed70:	eba0 0301 	sub.w	r3, r0, r1
    ed74:	4288      	cmp	r0, r1
    ed76:	d910      	bls.n	ed9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ed78:	fb93 f0f2 	sdiv	r0, r3, r2
    ed7c:	b280      	uxth	r0, r0
    ed7e:	4770      	bx	lr
    ed80:	2902      	cmp	r1, #2
    ed82:	d002      	beq.n	ed8a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    ed84:	2870      	cmp	r0, #112	; 0x70
    ed86:	d80a      	bhi.n	ed9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    ed88:	e007      	b.n	ed9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ed8a:	283c      	cmp	r0, #60	; 0x3c
    ed8c:	d905      	bls.n	ed9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ed8e:	383c      	subs	r0, #60	; 0x3c
    ed90:	17c1      	asrs	r1, r0, #31
    ed92:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ed96:	1080      	asrs	r0, r0, #2
    ed98:	e7f0      	b.n	ed7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ed9a:	2000      	movs	r0, #0
    ed9c:	e7ee      	b.n	ed7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ed9e:	3870      	subs	r0, #112	; 0x70
    eda0:	17c1      	asrs	r1, r0, #31
    eda2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eda6:	10c0      	asrs	r0, r0, #3
    eda8:	e7e8      	b.n	ed7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000edaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    edaa:	6809      	ldr	r1, [r1, #0]
    edac:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    edb0:	4770      	bx	lr

0000edb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    edb2:	07c1      	lsls	r1, r0, #31
    edb4:	d001      	beq.n	edba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    edb6:	2001      	movs	r0, #1
    edb8:	4770      	bx	lr
    edba:	0781      	lsls	r1, r0, #30
    edbc:	d501      	bpl.n	edc2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    edbe:	2002      	movs	r0, #2
    edc0:	4770      	bx	lr
    edc2:	0740      	lsls	r0, r0, #29
    edc4:	d501      	bpl.n	edca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    edc6:	2008      	movs	r0, #8
    edc8:	4770      	bx	lr
    edca:	2000      	movs	r0, #0
    edcc:	4770      	bx	lr

0000edce <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    edce:	b510      	push	{r4, lr}
    edd0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    edd4:	2901      	cmp	r1, #1
    edd6:	d006      	beq.n	ede6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    edd8:	2902      	cmp	r1, #2
    edda:	d005      	beq.n	ede8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    eddc:	f240 31b1 	movw	r1, #945	; 0x3b1
    ede0:	2029      	movs	r0, #41	; 0x29
    ede2:	f7f6 fc71 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ede6:	b108      	cbz	r0, edec <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ede8:	4610      	mov	r0, r2
    edea:	bd10      	pop	{r4, pc}
    edec:	f240 40e2 	movw	r0, #1250	; 0x4e2
    edf0:	bd10      	pop	{r4, pc}

0000edf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    edf6:	460c      	mov	r4, r1
    edf8:	4605      	mov	r5, r0
    edfa:	68c6      	ldr	r6, [r0, #12]
    edfc:	f7f4 fb7c 	bl	34f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ee00:	b198      	cbz	r0, ee2a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ee02:	b1bc      	cbz	r4, ee34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ee04:	4630      	mov	r0, r6
    ee06:	68e9      	ldr	r1, [r5, #12]
    ee08:	f7f4 f860 	bl	2ecc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ee0c:	2800      	cmp	r0, #0
    ee0e:	dd11      	ble.n	ee34 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ee10:	4420      	add	r0, r4
    ee12:	1e40      	subs	r0, r0, #1
    ee14:	fbb0 f7f4 	udiv	r7, r0, r4
    ee18:	fb07 f104 	mul.w	r1, r7, r4
    ee1c:	4630      	mov	r0, r6
    ee1e:	f7f4 f823 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ee22:	60e8      	str	r0, [r5, #12]
    ee24:	4638      	mov	r0, r7
    ee26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee2a:	f240 2136 	movw	r1, #566	; 0x236
    ee2e:	2029      	movs	r0, #41	; 0x29
    ee30:	f7f6 fc4a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee34:	2000      	movs	r0, #0
    ee36:	e7f6      	b.n	ee26 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ee38 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ee38:	b530      	push	{r4, r5, lr}
    ee3a:	4613      	mov	r3, r2
    ee3c:	e006      	b.n	ee4c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ee3e:	18cc      	adds	r4, r1, r3
    ee40:	1ad5      	subs	r5, r2, r3
    ee42:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ee46:	1e5b      	subs	r3, r3, #1
    ee48:	5544      	strb	r4, [r0, r5]
    ee4a:	b2db      	uxtb	r3, r3
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d1f6      	bne.n	ee3e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ee50:	bd30      	pop	{r4, r5, pc}

0000ee52 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ee52:	b538      	push	{r3, r4, r5, lr}
    ee54:	4605      	mov	r5, r0
    ee56:	460c      	mov	r4, r1
    ee58:	4668      	mov	r0, sp
    ee5a:	f7fd fd4b 	bl	c8f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ee5e:	b310      	cbz	r0, eea6 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ee60:	f99d 0000 	ldrsb.w	r0, [sp]
    ee64:	7260      	strb	r0, [r4, #9]
    ee66:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ee6a:	72a1      	strb	r1, [r4, #10]
    ee6c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ee70:	2200      	movs	r2, #0
    ee72:	1a41      	subs	r1, r0, r1
    ee74:	d500      	bpl.n	ee78 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ee76:	4249      	negs	r1, r1
    ee78:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ee7c:	428b      	cmp	r3, r1
    ee7e:	dc10      	bgt.n	eea2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee80:	2bff      	cmp	r3, #255	; 0xff
    ee82:	d00e      	beq.n	eea2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee84:	7b21      	ldrb	r1, [r4, #12]
    ee86:	1c49      	adds	r1, r1, #1
    ee88:	b2c9      	uxtb	r1, r1
    ee8a:	7321      	strb	r1, [r4, #12]
    ee8c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ee90:	4299      	cmp	r1, r3
    ee92:	d802      	bhi.n	ee9a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ee94:	7ae1      	ldrb	r1, [r4, #11]
    ee96:	297f      	cmp	r1, #127	; 0x7f
    ee98:	d103      	bne.n	eea2 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee9a:	72e0      	strb	r0, [r4, #11]
    ee9c:	2000      	movs	r0, #0
    ee9e:	7320      	strb	r0, [r4, #12]
    eea0:	2201      	movs	r2, #1
    eea2:	4610      	mov	r0, r2
    eea4:	bd38      	pop	{r3, r4, r5, pc}
    eea6:	207f      	movs	r0, #127	; 0x7f
    eea8:	7260      	strb	r0, [r4, #9]
    eeaa:	2000      	movs	r0, #0
    eeac:	bd38      	pop	{r3, r4, r5, pc}

0000eeae <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    eeae:	2300      	movs	r3, #0
    eeb0:	6283      	str	r3, [r0, #40]	; 0x28
    eeb2:	8602      	strh	r2, [r0, #48]	; 0x30
    eeb4:	f240 2371 	movw	r3, #625	; 0x271
    eeb8:	435a      	muls	r2, r3
    eeba:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    eebe:	1e52      	subs	r2, r2, #1
    eec0:	fbb2 f1f1 	udiv	r1, r2, r1
    eec4:	62c1      	str	r1, [r0, #44]	; 0x2c
    eec6:	4770      	bx	lr

0000eec8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    eec8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    eecc:	4607      	mov	r7, r0
    eece:	4690      	mov	r8, r2
    eed0:	468b      	mov	fp, r1
    eed2:	2601      	movs	r6, #1
    eed4:	4608      	mov	r0, r1
    eed6:	f000 f941 	bl	f15c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    eeda:	4682      	mov	sl, r0
    eedc:	4658      	mov	r0, fp
    eede:	f000 f949 	bl	f174 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    eee2:	4681      	mov	r9, r0
    eee4:	f7ff ff65 	bl	edb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    eee8:	4604      	mov	r4, r0
    eeea:	4650      	mov	r0, sl
    eeec:	f7ff ff61 	bl	edb2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    eef0:	4605      	mov	r5, r0
    eef2:	ea54 0005 	orrs.w	r0, r4, r5
    eef6:	d100      	bne.n	eefa <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    eef8:	2600      	movs	r6, #0
    eefa:	f7fc ff23 	bl	bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    eefe:	ea10 0f09 	tst.w	r0, r9
    ef02:	d100      	bne.n	ef06 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    ef04:	2400      	movs	r4, #0
    ef06:	f7fc ff1d 	bl	bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ef0a:	ea10 0f0a 	tst.w	r0, sl
    ef0e:	d100      	bne.n	ef12 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    ef10:	2500      	movs	r5, #0
    ef12:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    ef16:	42a0      	cmp	r0, r4
    ef18:	d100      	bne.n	ef1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    ef1a:	2400      	movs	r4, #0
    ef1c:	f888 4000 	strb.w	r4, [r8]
    ef20:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    ef24:	42a8      	cmp	r0, r5
    ef26:	d100      	bne.n	ef2a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    ef28:	2500      	movs	r5, #0
    ef2a:	f888 5001 	strb.w	r5, [r8, #1]
    ef2e:	b974      	cbnz	r4, ef4e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef30:	b96d      	cbnz	r5, ef4e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef32:	4658      	mov	r0, fp
    ef34:	f000 f91c 	bl	f170 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    ef38:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    ef3c:	1a40      	subs	r0, r0, r1
    ef3e:	b200      	sxth	r0, r0
    ef40:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ef44:	4288      	cmp	r0, r1
    ef46:	dc01      	bgt.n	ef4c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    ef48:	2800      	cmp	r0, #0
    ef4a:	dc00      	bgt.n	ef4e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    ef4c:	2600      	movs	r6, #0
    ef4e:	4630      	mov	r0, r6
    ef50:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000ef54 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ef54:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ef58:	4348      	muls	r0, r1
    ef5a:	4770      	bx	lr

0000ef5c <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ef5c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ef60:	fb10 f001 	smulbb	r0, r0, r1
    ef64:	4770      	bx	lr

0000ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ef66:	b510      	push	{r4, lr}
    ef68:	2300      	movs	r3, #0
    ef6a:	461a      	mov	r2, r3
    ef6c:	e003      	b.n	ef76 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    ef6e:	5c84      	ldrb	r4, [r0, r2]
    ef70:	4323      	orrs	r3, r4
    ef72:	1c52      	adds	r2, r2, #1
    ef74:	b2d2      	uxtb	r2, r2
    ef76:	428a      	cmp	r2, r1
    ef78:	d3f9      	bcc.n	ef6e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ef7a:	b10b      	cbz	r3, ef80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ef7c:	2000      	movs	r0, #0
    ef7e:	bd10      	pop	{r4, pc}
    ef80:	2001      	movs	r0, #1
    ef82:	bd10      	pop	{r4, pc}

0000ef84 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ef84:	b510      	push	{r4, lr}
    ef86:	4604      	mov	r4, r0
    ef88:	f890 0020 	ldrb.w	r0, [r0, #32]
    ef8c:	b108      	cbz	r0, ef92 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ef8e:	2825      	cmp	r0, #37	; 0x25
    ef90:	d901      	bls.n	ef96 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ef92:	2012      	movs	r0, #18
    ef94:	bd10      	pop	{r4, pc}
    ef96:	b12a      	cbz	r2, efa4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ef98:	7d60      	ldrb	r0, [r4, #21]
    ef9a:	b128      	cbz	r0, efa8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ef9c:	2801      	cmp	r0, #1
    ef9e:	d009      	beq.n	efb4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    efa0:	201f      	movs	r0, #31
    efa2:	bd10      	pop	{r4, pc}
    efa4:	2000      	movs	r0, #0
    efa6:	bd10      	pop	{r4, pc}
    efa8:	4620      	mov	r0, r4
    efaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efae:	4611      	mov	r1, r2
    efb0:	f7f8 bbae 	b.w	7710 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    efb4:	88a2      	ldrh	r2, [r4, #4]
    efb6:	6909      	ldr	r1, [r1, #16]
    efb8:	f104 0015 	add.w	r0, r4, #21
    efbc:	f7f8 fb54 	bl	7668 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    efc0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    efc4:	e7ee      	b.n	efa4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000efc6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    efc6:	b530      	push	{r4, r5, lr}
    efc8:	1c42      	adds	r2, r0, #1
    efca:	428a      	cmp	r2, r1
    efcc:	d004      	beq.n	efd8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    efce:	680a      	ldr	r2, [r1, #0]
    efd0:	f8c0 2001 	str.w	r2, [r0, #1]
    efd4:	7909      	ldrb	r1, [r1, #4]
    efd6:	7141      	strb	r1, [r0, #5]
    efd8:	7941      	ldrb	r1, [r0, #5]
    efda:	f001 011f 	and.w	r1, r1, #31
    efde:	7141      	strb	r1, [r0, #5]
    efe0:	2100      	movs	r1, #0
    efe2:	72c1      	strb	r1, [r0, #11]
    efe4:	1843      	adds	r3, r0, r1
    efe6:	1c49      	adds	r1, r1, #1
    efe8:	785c      	ldrb	r4, [r3, #1]
    efea:	b2c9      	uxtb	r1, r1
    efec:	f004 0201 	and.w	r2, r4, #1
    eff0:	0864      	lsrs	r4, r4, #1
    eff2:	f004 0501 	and.w	r5, r4, #1
    eff6:	4415      	add	r5, r2
    eff8:	0862      	lsrs	r2, r4, #1
    effa:	f002 0401 	and.w	r4, r2, #1
    effe:	442c      	add	r4, r5
    f000:	0852      	lsrs	r2, r2, #1
    f002:	f002 0501 	and.w	r5, r2, #1
    f006:	442c      	add	r4, r5
    f008:	0852      	lsrs	r2, r2, #1
    f00a:	f002 0501 	and.w	r5, r2, #1
    f00e:	442c      	add	r4, r5
    f010:	0852      	lsrs	r2, r2, #1
    f012:	f002 0501 	and.w	r5, r2, #1
    f016:	442c      	add	r4, r5
    f018:	0852      	lsrs	r2, r2, #1
    f01a:	f002 0501 	and.w	r5, r2, #1
    f01e:	442c      	add	r4, r5
    f020:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    f024:	719a      	strb	r2, [r3, #6]
    f026:	7ac3      	ldrb	r3, [r0, #11]
    f028:	2905      	cmp	r1, #5
    f02a:	441a      	add	r2, r3
    f02c:	72c2      	strb	r2, [r0, #11]
    f02e:	d3d9      	bcc.n	efe4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    f030:	bd30      	pop	{r4, r5, pc}
    f032:	b570      	push	{r4, r5, r6, lr}
    f034:	f8d0 201f 	ldr.w	r2, [r0, #31]
    f038:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    f03c:	f012 0fff 	tst.w	r2, #255	; 0xff
    f040:	f023 031f 	bic.w	r3, r3, #31
    f044:	d108      	bne.n	f058 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f046:	f3c2 2407 	ubfx	r4, r2, #8, #8
    f04a:	b92c      	cbnz	r4, f058 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f04c:	f3c2 4407 	ubfx	r4, r2, #16, #8
    f050:	b914      	cbnz	r4, f058 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f052:	0e12      	lsrs	r2, r2, #24
    f054:	d100      	bne.n	f058 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    f056:	b35b      	cbz	r3, f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f058:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    f05c:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    f060:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    f064:	7d83      	ldrb	r3, [r0, #22]
    f066:	b141      	cbz	r1, f07a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f068:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f06c:	d905      	bls.n	f07a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f06e:	f640 5107 	movw	r1, #3335	; 0xd07
    f072:	428a      	cmp	r2, r1
    f074:	d801      	bhi.n	f07a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    f076:	2101      	movs	r1, #1
    f078:	e000      	b.n	f07c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    f07a:	2100      	movs	r1, #0
    f07c:	7846      	ldrb	r6, [r0, #1]
    f07e:	2e22      	cmp	r6, #34	; 0x22
    f080:	d116      	bne.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f082:	b959      	cbnz	r1, f09c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    f084:	1f91      	subs	r1, r2, #6
    f086:	f640 467a 	movw	r6, #3194	; 0xc7a
    f08a:	42b1      	cmp	r1, r6
    f08c:	d810      	bhi.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f08e:	b17b      	cbz	r3, f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f090:	2b08      	cmp	r3, #8
    f092:	d80d      	bhi.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f094:	4293      	cmp	r3, r2
    f096:	d20b      	bcs.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f098:	4294      	cmp	r4, r2
    f09a:	d809      	bhi.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f09c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f0a0:	d206      	bcs.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f0a2:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    f0a6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f0aa:	d801      	bhi.n	f0b0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    f0ac:	2001      	movs	r0, #1
    f0ae:	bd70      	pop	{r4, r5, r6, pc}
    f0b0:	2000      	movs	r0, #0
    f0b2:	bd70      	pop	{r4, r5, r6, pc}

0000f0b4 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    f0b4:	b570      	push	{r4, r5, r6, lr}
    f0b6:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    f0ba:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    f0be:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    f0c2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    f0c6:	88c0      	ldrh	r0, [r0, #6]
    f0c8:	b131      	cbz	r1, f0d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f0ca:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    f0ce:	d903      	bls.n	f0d8 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    f0d0:	f640 5107 	movw	r1, #3335	; 0xd07
    f0d4:	428a      	cmp	r2, r1
    f0d6:	d90b      	bls.n	f0f0 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    f0d8:	1f91      	subs	r1, r2, #6
    f0da:	f640 467a 	movw	r6, #3194	; 0xc7a
    f0de:	42b1      	cmp	r1, r6
    f0e0:	d80e      	bhi.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0e2:	b16b      	cbz	r3, f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0e4:	2b08      	cmp	r3, #8
    f0e6:	d80b      	bhi.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0e8:	4293      	cmp	r3, r2
    f0ea:	d209      	bcs.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0ec:	4294      	cmp	r4, r2
    f0ee:	d807      	bhi.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0f0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f0f4:	d204      	bcs.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0f6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    f0fa:	d801      	bhi.n	f100 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    f0fc:	2001      	movs	r0, #1
    f0fe:	bd70      	pop	{r4, r5, r6, pc}
    f100:	2000      	movs	r0, #0
    f102:	bd70      	pop	{r4, r5, r6, pc}

0000f104 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    f104:	6842      	ldr	r2, [r0, #4]
    f106:	600a      	str	r2, [r1, #0]
    f108:	7a00      	ldrb	r0, [r0, #8]
    f10a:	7108      	strb	r0, [r1, #4]
    f10c:	4770      	bx	lr

0000f10e <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    f10e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f112:	4770      	bx	lr

0000f114 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    f114:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    f118:	4770      	bx	lr

0000f11a <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    f11a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    f11e:	4770      	bx	lr

0000f120 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    f120:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    f124:	4770      	bx	lr

0000f126 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    f126:	8980      	ldrh	r0, [r0, #12]
    f128:	8008      	strh	r0, [r1, #0]
    f12a:	4770      	bx	lr

0000f12c <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    f12c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    f130:	6008      	str	r0, [r1, #0]
    f132:	4770      	bx	lr

0000f134 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    f134:	6842      	ldr	r2, [r0, #4]
    f136:	600a      	str	r2, [r1, #0]
    f138:	6880      	ldr	r0, [r0, #8]
    f13a:	6048      	str	r0, [r1, #4]
    f13c:	4770      	bx	lr

0000f13e <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    f13e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    f142:	600a      	str	r2, [r1, #0]
    f144:	6840      	ldr	r0, [r0, #4]
    f146:	6048      	str	r0, [r1, #4]
    f148:	4770      	bx	lr

0000f14a <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    f14a:	6842      	ldr	r2, [r0, #4]
    f14c:	600a      	str	r2, [r1, #0]
    f14e:	6880      	ldr	r0, [r0, #8]
    f150:	6048      	str	r0, [r1, #4]
    f152:	4770      	bx	lr

0000f154 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    f154:	7800      	ldrb	r0, [r0, #0]
    f156:	f000 0003 	and.w	r0, r0, #3
    f15a:	4770      	bx	lr

0000f15c <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    f15c:	7900      	ldrb	r0, [r0, #4]
    f15e:	4770      	bx	lr

0000f160 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    f160:	8880      	ldrh	r0, [r0, #4]
    f162:	4770      	bx	lr

0000f164 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    f164:	88c0      	ldrh	r0, [r0, #6]
    f166:	4770      	bx	lr

0000f168 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    f168:	8900      	ldrh	r0, [r0, #8]
    f16a:	4770      	bx	lr

0000f16c <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    f16c:	8940      	ldrh	r0, [r0, #10]
    f16e:	4770      	bx	lr

0000f170 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    f170:	88c0      	ldrh	r0, [r0, #6]
    f172:	4770      	bx	lr

0000f174 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    f174:	7940      	ldrb	r0, [r0, #5]
    f176:	4770      	bx	lr

0000f178 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    f178:	7900      	ldrb	r0, [r0, #4]
    f17a:	4770      	bx	lr

0000f17c <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f17c:	7900      	ldrb	r0, [r0, #4]
    f17e:	4770      	bx	lr

0000f180 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f180:	8901      	ldrh	r1, [r0, #8]
    f182:	291b      	cmp	r1, #27
    f184:	d30c      	bcc.n	f1a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f186:	8941      	ldrh	r1, [r0, #10]
    f188:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f18c:	4291      	cmp	r1, r2
    f18e:	d307      	bcc.n	f1a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f190:	8881      	ldrh	r1, [r0, #4]
    f192:	291b      	cmp	r1, #27
    f194:	d304      	bcc.n	f1a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f196:	88c0      	ldrh	r0, [r0, #6]
    f198:	4290      	cmp	r0, r2
    f19a:	d301      	bcc.n	f1a0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f19c:	2001      	movs	r0, #1
    f19e:	4770      	bx	lr
    f1a0:	2000      	movs	r0, #0
    f1a2:	4770      	bx	lr

0000f1a4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f1a4:	b510      	push	{r4, lr}
    f1a6:	29fb      	cmp	r1, #251	; 0xfb
    f1a8:	d904      	bls.n	f1b4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f1aa:	f44f 61af 	mov.w	r1, #1400	; 0x578
    f1ae:	202a      	movs	r0, #42	; 0x2a
    f1b0:	f7f6 fa8a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1b4:	7041      	strb	r1, [r0, #1]
    f1b6:	bd10      	pop	{r4, pc}

0000f1b8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f1b8:	7901      	ldrb	r1, [r0, #4]
    f1ba:	0749      	lsls	r1, r1, #29
    f1bc:	d004      	beq.n	f1c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f1be:	7940      	ldrb	r0, [r0, #5]
    f1c0:	0740      	lsls	r0, r0, #29
    f1c2:	d001      	beq.n	f1c8 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f1c4:	2001      	movs	r0, #1
    f1c6:	4770      	bx	lr
    f1c8:	2000      	movs	r0, #0
    f1ca:	4770      	bx	lr

0000f1cc <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f1cc:	7900      	ldrb	r0, [r0, #4]
    f1ce:	4770      	bx	lr

0000f1d0 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f1d0:	7940      	ldrb	r0, [r0, #5]
    f1d2:	4770      	bx	lr

0000f1d4 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f1d4:	7101      	strb	r1, [r0, #4]
    f1d6:	4770      	bx	lr

0000f1d8 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f1d8:	7141      	strb	r1, [r0, #5]
    f1da:	4770      	bx	lr

0000f1dc <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    f1dc:	b510      	push	{r4, lr}
    f1de:	2a1b      	cmp	r2, #27
    f1e0:	d904      	bls.n	f1ec <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    f1e2:	f240 31df 	movw	r1, #991	; 0x3df
    f1e6:	202a      	movs	r0, #42	; 0x2a
    f1e8:	f7f6 fa6e 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ec:	7042      	strb	r2, [r0, #1]
    f1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1f2:	1cc0      	adds	r0, r0, #3
    f1f4:	f7fe bad7 	b.w	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000f1f8 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    f1f8:	6809      	ldr	r1, [r1, #0]
    f1fa:	60c1      	str	r1, [r0, #12]
    f1fc:	4770      	bx	lr

0000f1fe <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    f1fe:	680a      	ldr	r2, [r1, #0]
    f200:	6042      	str	r2, [r0, #4]
    f202:	6849      	ldr	r1, [r1, #4]
    f204:	6081      	str	r1, [r0, #8]
    f206:	4770      	bx	lr

0000f208 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f208:	680a      	ldr	r2, [r1, #0]
    f20a:	6042      	str	r2, [r0, #4]
    f20c:	6849      	ldr	r1, [r1, #4]
    f20e:	6081      	str	r1, [r0, #8]
    f210:	4770      	bx	lr

0000f212 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    f212:	680a      	ldr	r2, [r1, #0]
    f214:	6042      	str	r2, [r0, #4]
    f216:	6849      	ldr	r1, [r1, #4]
    f218:	6081      	str	r1, [r0, #8]
    f21a:	4770      	bx	lr

0000f21c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f21c:	7802      	ldrb	r2, [r0, #0]
    f21e:	f001 0103 	and.w	r1, r1, #3
    f222:	f022 0203 	bic.w	r2, r2, #3
    f226:	430a      	orrs	r2, r1
    f228:	7002      	strb	r2, [r0, #0]
    f22a:	4770      	bx	lr

0000f22c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f22c:	7101      	strb	r1, [r0, #4]
    f22e:	0a09      	lsrs	r1, r1, #8
    f230:	7141      	strb	r1, [r0, #5]
    f232:	4770      	bx	lr

0000f234 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f234:	7181      	strb	r1, [r0, #6]
    f236:	0a09      	lsrs	r1, r1, #8
    f238:	71c1      	strb	r1, [r0, #7]
    f23a:	4770      	bx	lr

0000f23c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f23c:	7201      	strb	r1, [r0, #8]
    f23e:	0a09      	lsrs	r1, r1, #8
    f240:	7241      	strb	r1, [r0, #9]
    f242:	4770      	bx	lr

0000f244 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f244:	7281      	strb	r1, [r0, #10]
    f246:	0a09      	lsrs	r1, r1, #8
    f248:	72c1      	strb	r1, [r0, #11]
    f24a:	4770      	bx	lr

0000f24c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    f24c:	7802      	ldrb	r2, [r0, #0]
    f24e:	f002 020f 	and.w	r2, r2, #15
    f252:	2a03      	cmp	r2, #3
    f254:	d003      	beq.n	f25e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    f256:	2a05      	cmp	r2, #5
    f258:	d104      	bne.n	f264 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    f25a:	f7ff beea 	b.w	f032 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    f25e:	7840      	ldrb	r0, [r0, #1]
    f260:	280c      	cmp	r0, #12
    f262:	d001      	beq.n	f268 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    f264:	2000      	movs	r0, #0
    f266:	4770      	bx	lr
    f268:	2001      	movs	r0, #1
    f26a:	4770      	bx	lr

0000f26c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    f26c:	b570      	push	{r4, r5, r6, lr}
    f26e:	4614      	mov	r4, r2
    f270:	4605      	mov	r5, r0
    f272:	2a1f      	cmp	r2, #31
    f274:	d903      	bls.n	f27e <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    f276:	21b2      	movs	r1, #178	; 0xb2
    f278:	202a      	movs	r0, #42	; 0x2a
    f27a:	f7f6 fa25 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f27e:	f105 0009 	add.w	r0, r5, #9
    f282:	f7fe fa90 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f286:	1da4      	adds	r4, r4, #6
    f288:	706c      	strb	r4, [r5, #1]
    f28a:	bd70      	pop	{r4, r5, r6, pc}

0000f28c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f28c:	b510      	push	{r4, lr}
    f28e:	7802      	ldrb	r2, [r0, #0]
    f290:	f001 030f 	and.w	r3, r1, #15
    f294:	f022 020f 	bic.w	r2, r2, #15
    f298:	431a      	orrs	r2, r3
    f29a:	7002      	strb	r2, [r0, #0]
    f29c:	2907      	cmp	r1, #7
    f29e:	d20c      	bcs.n	f2ba <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f2a0:	e8df f001 	tbb	[pc, r1]
    f2a4:	06040604 	.word	0x06040604
    f2a8:	00040804 	.word	0x00040804
    f2ac:	2106      	movs	r1, #6
    f2ae:	e002      	b.n	f2b6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f2b0:	210c      	movs	r1, #12
    f2b2:	e000      	b.n	f2b6 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f2b4:	2122      	movs	r1, #34	; 0x22
    f2b6:	7041      	strb	r1, [r0, #1]
    f2b8:	bd10      	pop	{r4, pc}
    f2ba:	216e      	movs	r1, #110	; 0x6e
    f2bc:	202a      	movs	r0, #42	; 0x2a
    f2be:	f7f6 fa03 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2c2 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f2c2:	680a      	ldr	r2, [r1, #0]
    f2c4:	f840 2f09 	str.w	r2, [r0, #9]!
    f2c8:	8889      	ldrh	r1, [r1, #4]
    f2ca:	8081      	strh	r1, [r0, #4]
    f2cc:	4770      	bx	lr

0000f2ce <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f2ce:	7802      	ldrb	r2, [r0, #0]
    f2d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    f2d4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f2d8:	7002      	strb	r2, [r0, #0]
    f2da:	4770      	bx	lr

0000f2dc <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f2dc:	680a      	ldr	r2, [r1, #0]
    f2de:	f840 2f03 	str.w	r2, [r0, #3]!
    f2e2:	8889      	ldrh	r1, [r1, #4]
    f2e4:	8081      	strh	r1, [r0, #4]
    f2e6:	4770      	bx	lr

0000f2e8 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f2e8:	7802      	ldrb	r2, [r0, #0]
    f2ea:	2340      	movs	r3, #64	; 0x40
    f2ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f2f0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f2f4:	430a      	orrs	r2, r1
    f2f6:	7002      	strb	r2, [r0, #0]
    f2f8:	4770      	bx	lr

0000f2fa <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    f2fa:	b570      	push	{r4, r5, r6, lr}
    f2fc:	4614      	mov	r4, r2
    f2fe:	4605      	mov	r5, r0
    f300:	2a1f      	cmp	r2, #31
    f302:	d903      	bls.n	f30c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    f304:	21d4      	movs	r1, #212	; 0xd4
    f306:	202a      	movs	r0, #42	; 0x2a
    f308:	f7f6 f9de 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f30c:	f105 0009 	add.w	r0, r5, #9
    f310:	f7fe fa49 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f314:	1da4      	adds	r4, r4, #6
    f316:	706c      	strb	r4, [r5, #1]
    f318:	bd70      	pop	{r4, r5, r6, pc}

0000f31a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f31a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f31e:	4604      	mov	r4, r0
    f320:	2000      	movs	r0, #0
    f322:	f7f6 fbbb 	bl	5a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f326:	2600      	movs	r6, #0
    f328:	4605      	mov	r5, r0
    f32a:	4637      	mov	r7, r6
    f32c:	e00e      	b.n	f34c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f32e:	8820      	ldrh	r0, [r4, #0]
    f330:	1c40      	adds	r0, r0, #1
    f332:	b280      	uxth	r0, r0
    f334:	8020      	strh	r0, [r4, #0]
    f336:	42a8      	cmp	r0, r5
    f338:	d300      	bcc.n	f33c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f33a:	8027      	strh	r7, [r4, #0]
    f33c:	8820      	ldrh	r0, [r4, #0]
    f33e:	4669      	mov	r1, sp
    f340:	f7ff fc74 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f344:	2800      	cmp	r0, #0
    f346:	d007      	beq.n	f358 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f348:	1c76      	adds	r6, r6, #1
    f34a:	b2f6      	uxtb	r6, r6
    f34c:	42ae      	cmp	r6, r5
    f34e:	d3ee      	bcc.n	f32e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f350:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f354:	8020      	strh	r0, [r4, #0]
    f356:	2012      	movs	r0, #18
    f358:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f35c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    f35c:	6841      	ldr	r1, [r0, #4]
    f35e:	2200      	movs	r2, #0
    f360:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    f364:	2b00      	cmp	r3, #0
    f366:	d004      	beq.n	f372 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    f368:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    f36c:	6840      	ldr	r0, [r0, #4]
    f36e:	f000 bc64 	b.w	fc3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f372:	4770      	bx	lr

0000f374 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f374:	b510      	push	{r4, lr}
    f376:	7901      	ldrb	r1, [r0, #4]
    f378:	b119      	cbz	r1, f382 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f37a:	2901      	cmp	r1, #1
    f37c:	d006      	beq.n	f38c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f37e:	2000      	movs	r0, #0
    f380:	bd10      	pop	{r4, pc}
    f382:	8842      	ldrh	r2, [r0, #2]
    f384:	6883      	ldr	r3, [r0, #8]
    f386:	8800      	ldrh	r0, [r0, #0]
    f388:	2102      	movs	r1, #2
    f38a:	e003      	b.n	f394 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f38c:	8842      	ldrh	r2, [r0, #2]
    f38e:	6883      	ldr	r3, [r0, #8]
    f390:	8800      	ldrh	r0, [r0, #0]
    f392:	2101      	movs	r1, #1
    f394:	f7f8 fa6a 	bl	786c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f398:	b908      	cbnz	r0, f39e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f39a:	f7f8 fabd 	bl	7918 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f39e:	2001      	movs	r0, #1
    f3a0:	bd10      	pop	{r4, pc}
    f3a2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f3a6:	460e      	mov	r6, r1
    f3a8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f3ac:	4617      	mov	r7, r2
    f3ae:	39ff      	subs	r1, #255	; 0xff
    f3b0:	d014      	beq.n	f3dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f3b2:	8030      	strh	r0, [r6, #0]
    f3b4:	2100      	movs	r1, #0
    f3b6:	7171      	strb	r1, [r6, #5]
    f3b8:	f7f6 fda0 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f3bc:	4604      	mov	r4, r0
    f3be:	f7ff f81b 	bl	e3f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f3c2:	0005      	movs	r5, r0
    f3c4:	d00a      	beq.n	f3dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f3c6:	4620      	mov	r0, r4
    f3c8:	4629      	mov	r1, r5
    f3ca:	aa01      	add	r2, sp, #4
    f3cc:	f7ff f837 	bl	e43e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f3d0:	8070      	strh	r0, [r6, #2]
    f3d2:	b130      	cbz	r0, f3e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f3d4:	28fb      	cmp	r0, #251	; 0xfb
    f3d6:	d906      	bls.n	f3e6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f3d8:	21ae      	movs	r1, #174	; 0xae
    f3da:	e026      	b.n	f42a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f3dc:	2000      	movs	r0, #0
    f3de:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f3e2:	21ad      	movs	r1, #173	; 0xad
    f3e4:	e021      	b.n	f42a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f3e6:	9801      	ldr	r0, [sp, #4]
    f3e8:	f7ff feb4 	bl	f154 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f3ec:	2801      	cmp	r0, #1
    f3ee:	d003      	beq.n	f3f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f3f0:	2802      	cmp	r0, #2
    f3f2:	d001      	beq.n	f3f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f3f4:	21bd      	movs	r1, #189	; 0xbd
    f3f6:	e018      	b.n	f42a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f3f8:	7130      	strb	r0, [r6, #4]
    f3fa:	4629      	mov	r1, r5
    f3fc:	8873      	ldrh	r3, [r6, #2]
    f3fe:	2503      	movs	r5, #3
    f400:	4620      	mov	r0, r4
    f402:	463a      	mov	r2, r7
    f404:	9500      	str	r5, [sp, #0]
    f406:	f7fe fee9 	bl	e1dc <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f40a:	4620      	mov	r0, r4
    f40c:	60b7      	str	r7, [r6, #8]
    f40e:	f7fe ffa2 	bl	e356 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f412:	b138      	cbz	r0, f424 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f414:	2100      	movs	r1, #0
    f416:	4620      	mov	r0, r4
    f418:	460a      	mov	r2, r1
    f41a:	f7ff f8ee 	bl	e5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f41e:	b118      	cbz	r0, f428 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f420:	2001      	movs	r0, #1
    f422:	e7dc      	b.n	f3de <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f424:	21cd      	movs	r1, #205	; 0xcd
    f426:	e000      	b.n	f42a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f428:	21d2      	movs	r1, #210	; 0xd2
    f42a:	202b      	movs	r0, #43	; 0x2b
    f42c:	f7f6 f94c 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f430 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f430:	f7f8 bc30 	b.w	7c94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    f434:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f438:	4604      	mov	r4, r0
    f43a:	2000      	movs	r0, #0
    f43c:	f7f6 fb2e 	bl	5a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f440:	4605      	mov	r5, r0
    f442:	2001      	movs	r0, #1
    f444:	f7f6 fb2a 	bl	5a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f448:	4428      	add	r0, r5
    f44a:	2600      	movs	r6, #0
    f44c:	b2c7      	uxtb	r7, r0
    f44e:	46b0      	mov	r8, r6
    f450:	e017      	b.n	f482 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    f452:	8820      	ldrh	r0, [r4, #0]
    f454:	1c40      	adds	r0, r0, #1
    f456:	b280      	uxth	r0, r0
    f458:	8020      	strh	r0, [r4, #0]
    f45a:	42b8      	cmp	r0, r7
    f45c:	d302      	bcc.n	f464 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    f45e:	4640      	mov	r0, r8
    f460:	f8a4 8000 	strh.w	r8, [r4]
    f464:	b280      	uxth	r0, r0
    f466:	42a8      	cmp	r0, r5
    f468:	d304      	bcc.n	f474 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f46a:	42b8      	cmp	r0, r7
    f46c:	d202      	bcs.n	f474 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    f46e:	2000      	movs	r0, #0
    f470:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f474:	4669      	mov	r1, sp
    f476:	f7ff fbd9 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f47a:	2800      	cmp	r0, #0
    f47c:	d0f8      	beq.n	f470 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    f47e:	1c76      	adds	r6, r6, #1
    f480:	b2f6      	uxtb	r6, r6
    f482:	42be      	cmp	r6, r7
    f484:	d3e5      	bcc.n	f452 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    f486:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f48a:	8020      	strh	r0, [r4, #0]
    f48c:	2012      	movs	r0, #18
    f48e:	e7ef      	b.n	f470 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000f490 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f490:	b570      	push	{r4, r5, r6, lr}
    f492:	8050      	strh	r0, [r2, #2]
    f494:	890c      	ldrh	r4, [r1, #8]
    f496:	8094      	strh	r4, [r2, #4]
    f498:	898b      	ldrh	r3, [r1, #12]
    f49a:	80d3      	strh	r3, [r2, #6]
    f49c:	8948      	ldrh	r0, [r1, #10]
    f49e:	8110      	strh	r0, [r2, #8]
    f4a0:	89cd      	ldrh	r5, [r1, #14]
    f4a2:	8155      	strh	r5, [r2, #10]
    f4a4:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f4a6:	42ae      	cmp	r6, r5
    f4a8:	d108      	bne.n	f4bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f4aa:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f4ac:	4285      	cmp	r5, r0
    f4ae:	d105      	bne.n	f4bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f4b0:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f4b2:	429d      	cmp	r5, r3
    f4b4:	d102      	bne.n	f4bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f4b6:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f4b8:	42a3      	cmp	r3, r4
    f4ba:	d001      	beq.n	f4c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f4bc:	2301      	movs	r3, #1
    f4be:	e000      	b.n	f4c2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f4c0:	2300      	movs	r3, #0
    f4c2:	7313      	strb	r3, [r2, #12]
    f4c4:	8548      	strh	r0, [r1, #42]	; 0x2a
    f4c6:	8950      	ldrh	r0, [r2, #10]
    f4c8:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f4ca:	8890      	ldrh	r0, [r2, #4]
    f4cc:	8588      	strh	r0, [r1, #44]	; 0x2c
    f4ce:	88d0      	ldrh	r0, [r2, #6]
    f4d0:	8608      	strh	r0, [r1, #48]	; 0x30
    f4d2:	2001      	movs	r0, #1
    f4d4:	7010      	strb	r0, [r2, #0]
    f4d6:	bd70      	pop	{r4, r5, r6, pc}

0000f4d8 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f4d8:	b510      	push	{r4, lr}
    f4da:	888c      	ldrh	r4, [r1, #4]
    f4dc:	890a      	ldrh	r2, [r1, #8]
    f4de:	884b      	ldrh	r3, [r1, #2]
    f4e0:	88c9      	ldrh	r1, [r1, #6]
    f4e2:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f4e6:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f4ea:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f4ee:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f4f2:	bd10      	pop	{r4, pc}

0000f4f4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f4f4:	b570      	push	{r4, r5, r6, lr}
    f4f6:	4615      	mov	r5, r2
    f4f8:	460c      	mov	r4, r1
    f4fa:	f000 f8c7 	bl	f68c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f4fe:	3096      	adds	r0, #150	; 0x96
    f500:	4428      	add	r0, r5
    f502:	42a0      	cmp	r0, r4
    f504:	d801      	bhi.n	f50a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f506:	1a20      	subs	r0, r4, r0
    f508:	bd70      	pop	{r4, r5, r6, pc}
    f50a:	2000      	movs	r0, #0
    f50c:	bd70      	pop	{r4, r5, r6, pc}

0000f50e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f512:	4604      	mov	r4, r0
    f514:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    f516:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    f518:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    f51c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    f520:	4285      	cmp	r5, r0
    f522:	d300      	bcc.n	f526 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f524:	4605      	mov	r5, r0
    f526:	4620      	mov	r0, r4
    f528:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    f52c:	f000 f89e 	bl	f66c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f530:	4601      	mov	r1, r0
    f532:	86e5      	strh	r5, [r4, #54]	; 0x36
    f534:	8761      	strh	r1, [r4, #58]	; 0x3a
    f536:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    f538:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f53c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f53e:	4680      	mov	r8, r0
    f540:	42aa      	cmp	r2, r5
    f542:	d200      	bcs.n	f546 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    f544:	462a      	mov	r2, r5
    f546:	428b      	cmp	r3, r1
    f548:	d200      	bcs.n	f54c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    f54a:	460b      	mov	r3, r1
    f54c:	8202      	strh	r2, [r0, #16]
    f54e:	f8a8 3012 	strh.w	r3, [r8, #18]
    f552:	42bd      	cmp	r5, r7
    f554:	d101      	bne.n	f55a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    f556:	42b1      	cmp	r1, r6
    f558:	d001      	beq.n	f55e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f55a:	2001      	movs	r0, #1
    f55c:	e000      	b.n	f560 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f55e:	2000      	movs	r0, #0
    f560:	4681      	mov	r9, r0
    f562:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f566:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f56a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f56c:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f56e:	4285      	cmp	r5, r0
    f570:	d300      	bcc.n	f574 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    f572:	4605      	mov	r5, r0
    f574:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f578:	4620      	mov	r0, r4
    f57a:	f000 f87f 	bl	f67c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f57e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f582:	2902      	cmp	r1, #2
    f584:	d108      	bne.n	f598 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    f586:	42af      	cmp	r7, r5
    f588:	d200      	bcs.n	f58c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    f58a:	463d      	mov	r5, r7
    f58c:	4286      	cmp	r6, r0
    f58e:	d200      	bcs.n	f592 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    f590:	4630      	mov	r0, r6
    f592:	2100      	movs	r1, #0
    f594:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f598:	f8a8 5008 	strh.w	r5, [r8, #8]
    f59c:	f8a8 000c 	strh.w	r0, [r8, #12]
    f5a0:	42bd      	cmp	r5, r7
    f5a2:	d101      	bne.n	f5a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    f5a4:	42b0      	cmp	r0, r6
    f5a6:	d001      	beq.n	f5ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f5a8:	2001      	movs	r0, #1
    f5aa:	e000      	b.n	f5ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    f5ac:	2000      	movs	r0, #0
    f5ae:	ea40 0009 	orr.w	r0, r0, r9
    f5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f5b6 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f5b6:	6840      	ldr	r0, [r0, #4]
    f5b8:	4770      	bx	lr

0000f5ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f5be:	4616      	mov	r6, r2
    f5c0:	460f      	mov	r7, r1
    f5c2:	4604      	mov	r4, r0
    f5c4:	f000 f862 	bl	f68c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f5c8:	4605      	mov	r5, r0
    f5ca:	463a      	mov	r2, r7
    f5cc:	68e1      	ldr	r1, [r4, #12]
    f5ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f5d0:	f000 f847 	bl	f662 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f5d4:	19a9      	adds	r1, r5, r6
    f5d6:	4281      	cmp	r1, r0
    f5d8:	d300      	bcc.n	f5dc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f5da:	4608      	mov	r0, r1
    f5dc:	6320      	str	r0, [r4, #48]	; 0x30
    f5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f5e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f5e2:	221b      	movs	r2, #27
    f5e4:	8402      	strh	r2, [r0, #32]
    f5e6:	8382      	strh	r2, [r0, #28]
    f5e8:	82c2      	strh	r2, [r0, #22]
    f5ea:	8282      	strh	r2, [r0, #20]
    f5ec:	8142      	strh	r2, [r0, #10]
    f5ee:	8202      	strh	r2, [r0, #16]
    f5f0:	8102      	strh	r2, [r0, #8]
    f5f2:	8542      	strh	r2, [r0, #42]	; 0x2a
    f5f4:	8582      	strh	r2, [r0, #44]	; 0x2c
    f5f6:	8482      	strh	r2, [r0, #36]	; 0x24
    f5f8:	2900      	cmp	r1, #0
    f5fa:	d10a      	bne.n	f612 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f5fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f600:	8441      	strh	r1, [r0, #34]	; 0x22
    f602:	83c1      	strh	r1, [r0, #30]
    f604:	8341      	strh	r1, [r0, #26]
    f606:	8301      	strh	r1, [r0, #24]
    f608:	81c1      	strh	r1, [r0, #14]
    f60a:	8241      	strh	r1, [r0, #18]
    f60c:	8181      	strh	r1, [r0, #12]
    f60e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f610:	8601      	strh	r1, [r0, #48]	; 0x30
    f612:	4770      	bx	lr

0000f614 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f614:	6800      	ldr	r0, [r0, #0]
    f616:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f61a:	4290      	cmp	r0, r2
    f61c:	d903      	bls.n	f626 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f61e:	1a40      	subs	r0, r0, r1
    f620:	389c      	subs	r0, #156	; 0x9c
    f622:	0840      	lsrs	r0, r0, #1
    f624:	4770      	bx	lr
    f626:	2000      	movs	r0, #0
    f628:	4770      	bx	lr

0000f62a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f62a:	b510      	push	{r4, lr}
    f62c:	9c02      	ldr	r4, [sp, #8]
    f62e:	8281      	strh	r1, [r0, #20]
    f630:	82c2      	strh	r2, [r0, #22]
    f632:	8303      	strh	r3, [r0, #24]
    f634:	8344      	strh	r4, [r0, #26]
    f636:	bd10      	pop	{r4, pc}

0000f638 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f638:	8050      	strh	r0, [r2, #2]
    f63a:	8a88      	ldrh	r0, [r1, #20]
    f63c:	8090      	strh	r0, [r2, #4]
    f63e:	8ac8      	ldrh	r0, [r1, #22]
    f640:	80d0      	strh	r0, [r2, #6]
    f642:	8b08      	ldrh	r0, [r1, #24]
    f644:	8110      	strh	r0, [r2, #8]
    f646:	8b48      	ldrh	r0, [r1, #26]
    f648:	8150      	strh	r0, [r2, #10]
    f64a:	2001      	movs	r0, #1
    f64c:	7010      	strb	r0, [r2, #0]
    f64e:	4770      	bx	lr
    f650:	2902      	cmp	r1, #2
    f652:	d003      	beq.n	f65c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f654:	00c0      	lsls	r0, r0, #3
    f656:	3070      	adds	r0, #112	; 0x70
    f658:	b280      	uxth	r0, r0
    f65a:	4770      	bx	lr
    f65c:	0080      	lsls	r0, r0, #2
    f65e:	303c      	adds	r0, #60	; 0x3c
    f660:	e7fa      	b.n	f658 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f662:	4288      	cmp	r0, r1
    f664:	d300      	bcc.n	f668 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f666:	4608      	mov	r0, r1
    f668:	1a80      	subs	r0, r0, r2
    f66a:	4770      	bx	lr
    f66c:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f670:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f674:	4281      	cmp	r1, r0
    f676:	d200      	bcs.n	f67a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f678:	4608      	mov	r0, r1
    f67a:	4770      	bx	lr
    f67c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f680:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f684:	4281      	cmp	r1, r0
    f686:	d200      	bcs.n	f68a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f688:	4608      	mov	r0, r1
    f68a:	4770      	bx	lr
    f68c:	2196      	movs	r1, #150	; 0x96
    f68e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f692:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f696:	f000 b800 	b.w	f69a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f69e:	460d      	mov	r5, r1
    f6a0:	4606      	mov	r6, r0
    f6a2:	4698      	mov	r8, r3
    f6a4:	4617      	mov	r7, r2
    f6a6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f6a8:	4611      	mov	r1, r2
    f6aa:	f7ff ffd1 	bl	f650 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f6ae:	4604      	mov	r4, r0
    f6b0:	4639      	mov	r1, r7
    f6b2:	4630      	mov	r0, r6
    f6b4:	f7ff ffe2 	bl	f67c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f6b8:	42a0      	cmp	r0, r4
    f6ba:	d200      	bcs.n	f6be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f6bc:	4604      	mov	r4, r0
    f6be:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f6c0:	4641      	mov	r1, r8
    f6c2:	f7ff ffc5 	bl	f650 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f6c6:	4607      	mov	r7, r0
    f6c8:	4641      	mov	r1, r8
    f6ca:	4630      	mov	r0, r6
    f6cc:	f7ff ffce 	bl	f66c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f6d0:	42b8      	cmp	r0, r7
    f6d2:	d300      	bcc.n	f6d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    f6d4:	4638      	mov	r0, r7
    f6d6:	4420      	add	r0, r4
    f6d8:	4428      	add	r0, r5
    f6da:	1d80      	adds	r0, r0, #6
    f6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f6e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    f6e0:	b510      	push	{r4, lr}
    f6e2:	4604      	mov	r4, r0
    f6e4:	2108      	movs	r1, #8
    f6e6:	4620      	mov	r0, r4
    f6e8:	f7f6 f888 	bl	57fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f6ec:	6820      	ldr	r0, [r4, #0]
    f6ee:	2800      	cmp	r0, #0
    f6f0:	d102      	bne.n	f6f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    f6f2:	6860      	ldr	r0, [r4, #4]
    f6f4:	2800      	cmp	r0, #0
    f6f6:	d0f5      	beq.n	f6e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    f6f8:	bd10      	pop	{r4, pc}
    f6fa:	2801      	cmp	r0, #1
    f6fc:	d102      	bne.n	f704 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    f6fe:	7948      	ldrb	r0, [r1, #5]
    f700:	0980      	lsrs	r0, r0, #6
    f702:	d001      	beq.n	f708 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    f704:	2000      	movs	r0, #0
    f706:	4770      	bx	lr
    f708:	2001      	movs	r0, #1
    f70a:	4770      	bx	lr
    f70c:	2801      	cmp	r0, #1
    f70e:	d106      	bne.n	f71e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f710:	7948      	ldrb	r0, [r1, #5]
    f712:	2101      	movs	r1, #1
    f714:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f718:	d101      	bne.n	f71e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f71a:	2001      	movs	r0, #1
    f71c:	4770      	bx	lr
    f71e:	2000      	movs	r0, #0
    f720:	4770      	bx	lr
    f722:	2802      	cmp	r0, #2
    f724:	d003      	beq.n	f72e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    f726:	2803      	cmp	r0, #3
    f728:	d001      	beq.n	f72e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    f72a:	2000      	movs	r0, #0
    f72c:	4770      	bx	lr
    f72e:	2001      	movs	r0, #1
    f730:	4770      	bx	lr

0000f732 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    f732:	b510      	push	{r4, lr}
    f734:	4604      	mov	r4, r0
    f736:	7c00      	ldrb	r0, [r0, #16]
    f738:	f7ff fff3 	bl	f722 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    f73c:	b148      	cbz	r0, f752 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f73e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    f742:	f104 0150 	add.w	r1, r4, #80	; 0x50
    f746:	f7ff fa2e 	bl	eba6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f74a:	2808      	cmp	r0, #8
    f74c:	d001      	beq.n	f752 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    f74e:	2001      	movs	r0, #1
    f750:	bd10      	pop	{r4, pc}
    f752:	7c20      	ldrb	r0, [r4, #16]
    f754:	b118      	cbz	r0, f75e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f756:	2802      	cmp	r0, #2
    f758:	d001      	beq.n	f75e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    f75a:	7de0      	ldrb	r0, [r4, #23]
    f75c:	bd10      	pop	{r4, pc}
    f75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f762:	2000      	movs	r0, #0
    f764:	f7f6 beda 	b.w	651c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000f768 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    f768:	b508      	push	{r3, lr}
    f76a:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    f76e:	f88d 1000 	strb.w	r1, [sp]
    f772:	9900      	ldr	r1, [sp, #0]
    f774:	9100      	str	r1, [sp, #0]
    f776:	f89d 1000 	ldrb.w	r1, [sp]
    f77a:	b109      	cbz	r1, f780 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    f77c:	2001      	movs	r0, #1
    f77e:	bd08      	pop	{r3, pc}
    f780:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    f784:	f88d 0000 	strb.w	r0, [sp]
    f788:	9800      	ldr	r0, [sp, #0]
    f78a:	9000      	str	r0, [sp, #0]
    f78c:	f89d 0000 	ldrb.w	r0, [sp]
    f790:	2000      	movs	r0, #0
    f792:	bd08      	pop	{r3, pc}

0000f794 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    f794:	20ff      	movs	r0, #255	; 0xff
    f796:	7008      	strb	r0, [r1, #0]
    f798:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    f79a:	f7ff b955 	b.w	ea48 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000f79e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    f79e:	b51c      	push	{r2, r3, r4, lr}
    f7a0:	4604      	mov	r4, r0
    f7a2:	22d4      	movs	r2, #212	; 0xd4
    f7a4:	2100      	movs	r1, #0
    f7a6:	f7fe f878 	bl	d89a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7aa:	20ff      	movs	r0, #255	; 0xff
    f7ac:	7020      	strb	r0, [r4, #0]
    f7ae:	207f      	movs	r0, #127	; 0x7f
    f7b0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f7b4:	2013      	movs	r0, #19
    f7b6:	8060      	strh	r0, [r4, #2]
    f7b8:	f7f6 fc60 	bl	607c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    f7bc:	4601      	mov	r1, r0
    f7be:	62e0      	str	r0, [r4, #44]	; 0x2c
    f7c0:	2200      	movs	r2, #0
    f7c2:	4668      	mov	r0, sp
    f7c4:	f7ff f8ab 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f7c8:	2200      	movs	r2, #0
    f7ca:	2101      	movs	r1, #1
    f7cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f7ce:	f7ff f91b 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f7d2:	2204      	movs	r2, #4
    f7d4:	4668      	mov	r0, sp
    f7d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f7d8:	f7ff f8a1 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f7dc:	2200      	movs	r2, #0
    f7de:	4611      	mov	r1, r2
    f7e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f7e2:	f7ff f911 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f7e6:	2000      	movs	r0, #0
    f7e8:	73a0      	strb	r0, [r4, #14]
    f7ea:	f104 0020 	add.w	r0, r4, #32
    f7ee:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    f7f2:	f000 b962 	b.w	faba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000f7f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    f7f6:	7880      	ldrb	r0, [r0, #2]
    f7f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f7fc:	b108      	cbz	r0, f802 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    f7fe:	2000      	movs	r0, #0
    f800:	4770      	bx	lr
    f802:	201f      	movs	r0, #31
    f804:	4770      	bx	lr

0000f806 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    f806:	f7f8 bfbf 	b.w	8788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000f80a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    f80a:	6880      	ldr	r0, [r0, #8]
    f80c:	4770      	bx	lr

0000f80e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    f80e:	2001      	movs	r0, #1
    f810:	4770      	bx	lr

0000f812 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    f812:	b510      	push	{r4, lr}
    f814:	4604      	mov	r4, r0
    f816:	3020      	adds	r0, #32
    f818:	f000 f90f 	bl	fa3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    f81c:	8861      	ldrh	r1, [r4, #2]
    f81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f822:	2228      	movs	r2, #40	; 0x28
    f824:	f7f9 b990 	b.w	8b48 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000f828 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    f828:	2200      	movs	r2, #0
    f82a:	6282      	str	r2, [r0, #40]	; 0x28
    f82c:	8843      	ldrh	r3, [r0, #2]
    f82e:	2b1d      	cmp	r3, #29
    f830:	d001      	beq.n	f836 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    f832:	7341      	strb	r1, [r0, #13]
    f834:	4770      	bx	lr
    f836:	7342      	strb	r2, [r0, #13]
    f838:	4770      	bx	lr

0000f83a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    f83a:	b510      	push	{r4, lr}
    f83c:	2400      	movs	r4, #0
    f83e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f840:	f7ff f8d0 	bl	e9e4 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    f844:	b100      	cbz	r0, f848 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    f846:	2001      	movs	r0, #1
    f848:	4384      	bics	r4, r0
    f84a:	f084 0001 	eor.w	r0, r4, #1
    f84e:	bd10      	pop	{r4, pc}

0000f850 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    f850:	2000      	movs	r0, #0
    f852:	4770      	bx	lr

0000f854 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    f854:	7880      	ldrb	r0, [r0, #2]
    f856:	f000 0001 	and.w	r0, r0, #1
    f85a:	4770      	bx	lr

0000f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    f85c:	7880      	ldrb	r0, [r0, #2]
    f85e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f862:	4770      	bx	lr

0000f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    f864:	2001      	movs	r0, #1
    f866:	4770      	bx	lr

0000f868 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    f868:	7880      	ldrb	r0, [r0, #2]
    f86a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f86e:	4770      	bx	lr

0000f870 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    f870:	f990 000e 	ldrsb.w	r0, [r0, #14]
    f874:	4770      	bx	lr

0000f876 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    f876:	7800      	ldrb	r0, [r0, #0]
    f878:	28ff      	cmp	r0, #255	; 0xff
    f87a:	d001      	beq.n	f880 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    f87c:	2001      	movs	r0, #1
    f87e:	4770      	bx	lr
    f880:	2000      	movs	r0, #0
    f882:	4770      	bx	lr

0000f884 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    f884:	680a      	ldr	r2, [r1, #0]
    f886:	f840 2f11 	str.w	r2, [r0, #17]!
    f88a:	8889      	ldrh	r1, [r1, #4]
    f88c:	8081      	strh	r1, [r0, #4]
    f88e:	2101      	movs	r1, #1
    f890:	7181      	strb	r1, [r0, #6]
    f892:	4770      	bx	lr

0000f894 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    f894:	7b00      	ldrb	r0, [r0, #12]
    f896:	4770      	bx	lr

0000f898 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    f898:	2001      	movs	r0, #1
    f89a:	4770      	bx	lr

0000f89c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    f89c:	61c1      	str	r1, [r0, #28]
    f89e:	4770      	bx	lr

0000f8a0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    f8a0:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    f8a4:	4770      	bx	lr

0000f8a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    f8a6:	b570      	push	{r4, r5, r6, lr}
    f8a8:	4604      	mov	r4, r0
    f8aa:	7880      	ldrb	r0, [r0, #2]
    f8ac:	2501      	movs	r5, #1
    f8ae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f8b2:	b138      	cbz	r0, f8c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    f8b4:	233c      	movs	r3, #60	; 0x3c
    f8b6:	22ff      	movs	r2, #255	; 0xff
    f8b8:	4620      	mov	r0, r4
    f8ba:	69e1      	ldr	r1, [r4, #28]
    f8bc:	f7f8 ff90 	bl	87e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    f8c0:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    f8c4:	78a0      	ldrb	r0, [r4, #2]
    f8c6:	07c0      	lsls	r0, r0, #31
    f8c8:	f7f8 f88a 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f8cc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    f8d0:	bd70      	pop	{r4, r5, r6, pc}

0000f8d2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    f8d2:	7bc0      	ldrb	r0, [r0, #15]
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d000      	beq.n	f8da <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    f8d8:	2001      	movs	r0, #1
    f8da:	4770      	bx	lr
    f8dc:	b510      	push	{r4, lr}
    f8de:	f7ff f962 	bl	eba6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    f8e2:	4604      	mov	r4, r0
    f8e4:	f7f7 fcbc 	bl	7260 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    f8e8:	b138      	cbz	r0, f8fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f8ea:	4620      	mov	r0, r4
    f8ec:	f7f7 fbf0 	bl	70d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    f8f0:	b118      	cbz	r0, f8fa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    f8f2:	2110      	movs	r1, #16
    f8f4:	f7ff fb37 	bl	ef66 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    f8f8:	b108      	cbz	r0, f8fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    f8fa:	2000      	movs	r0, #0
    f8fc:	bd10      	pop	{r4, pc}
    f8fe:	2001      	movs	r0, #1
    f900:	bd10      	pop	{r4, pc}
    f902:	2101      	movs	r1, #1
    f904:	f7f8 bbcc 	b.w	80a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f908:	2101      	movs	r1, #1
    f90a:	f7f8 bbc9 	b.w	80a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    f90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f912:	4604      	mov	r4, r0
    f914:	2700      	movs	r7, #0
    f916:	704f      	strb	r7, [r1, #1]
    f918:	2011      	movs	r0, #17
    f91a:	460d      	mov	r5, r1
    f91c:	7008      	strb	r0, [r1, #0]
    f91e:	2220      	movs	r2, #32
    f920:	f104 0166 	add.w	r1, r4, #102	; 0x66
    f924:	1d28      	adds	r0, r5, #4
    f926:	f7fd ff3e 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f92a:	2601      	movs	r6, #1
    f92c:	722e      	strb	r6, [r5, #8]
    f92e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    f932:	7928      	ldrb	r0, [r5, #4]
    f934:	2800      	cmp	r0, #0
    f936:	d111      	bne.n	f95c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    f938:	88e8      	ldrh	r0, [r5, #6]
    f93a:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    f93e:	69e0      	ldr	r0, [r4, #28]
    f940:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    f944:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    f948:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    f94c:	8800      	ldrh	r0, [r0, #0]
    f94e:	f7f6 fad5 	bl	5efc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f952:	f7fe fe04 	bl	e55e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f956:	69e0      	ldr	r0, [r4, #28]
    f958:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    f95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f964:	4604      	mov	r4, r0
    f966:	460f      	mov	r7, r1
    f968:	7e40      	ldrb	r0, [r0, #25]
    f96a:	f7f7 fb71 	bl	7050 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f96e:	4606      	mov	r6, r0
    f970:	7e20      	ldrb	r0, [r4, #24]
    f972:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f976:	b120      	cbz	r0, f982 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f978:	b11e      	cbz	r6, f982 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    f97a:	7e60      	ldrb	r0, [r4, #25]
    f97c:	f7f7 fb5c 	bl	7038 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f980:	b1a0      	cbz	r0, f9ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    f982:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f986:	2800      	cmp	r0, #0
    f988:	d024      	beq.n	f9d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    f98a:	7ea0      	ldrb	r0, [r4, #26]
    f98c:	2800      	cmp	r0, #0
    f98e:	d021      	beq.n	f9d4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    f990:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f994:	4629      	mov	r1, r5
    f996:	f7ff feb9 	bl	f70c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    f99a:	b1a8      	cbz	r0, f9c8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    f99c:	f7f7 fb48 	bl	7030 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f9a0:	463a      	mov	r2, r7
    f9a2:	4629      	mov	r1, r5
    f9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9a8:	f7ff b895 	b.w	ead6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f9ac:	2001      	movs	r0, #1
    f9ae:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f9b2:	463a      	mov	r2, r7
    f9b4:	4629      	mov	r1, r5
    f9b6:	4630      	mov	r0, r6
    f9b8:	f7ff f88d 	bl	ead6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f9bc:	7e61      	ldrb	r1, [r4, #25]
    f9be:	4628      	mov	r0, r5
    f9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9c4:	f7f7 bb50 	b.w	7068 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f9c8:	4639      	mov	r1, r7
    f9ca:	4628      	mov	r0, r5
    f9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9d0:	f7ff b870 	b.w	eab4 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9d8:	b510      	push	{r4, lr}
    f9da:	4604      	mov	r4, r0
    f9dc:	4608      	mov	r0, r1
    f9de:	f7fc ffcd 	bl	c97c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f9e2:	7921      	ldrb	r1, [r4, #4]
    f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9e8:	2025      	movs	r0, #37	; 0x25
    f9ea:	f001 bdad 	b.w	11548 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    f9ee:	b510      	push	{r4, lr}
    f9f0:	4604      	mov	r4, r0
    f9f2:	3026      	adds	r0, #38	; 0x26
    f9f4:	f7fc ff7e 	bl	c8f4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d102      	bne.n	fa02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    f9fc:	207f      	movs	r0, #127	; 0x7f
    f9fe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    fa02:	bd10      	pop	{r4, pc}
    fa04:	7802      	ldrb	r2, [r0, #0]
    fa06:	2320      	movs	r3, #32
    fa08:	f022 0220 	bic.w	r2, r2, #32
    fa0c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    fa10:	430a      	orrs	r2, r1
    fa12:	7002      	strb	r2, [r0, #0]
    fa14:	4770      	bx	lr

0000fa16 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    fa16:	b570      	push	{r4, r5, r6, lr}
    fa18:	7001      	strb	r1, [r0, #0]
    fa1a:	7042      	strb	r2, [r0, #1]
    fa1c:	4614      	mov	r4, r2
    fa1e:	460d      	mov	r5, r1
    fa20:	7880      	ldrb	r0, [r0, #2]
    fa22:	f000 f87f 	bl	fb24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fa26:	fb10 f005 	smulbb	r0, r0, r5
    fa2a:	4360      	muls	r0, r4
    fa2c:	28ff      	cmp	r0, #255	; 0xff
    fa2e:	d303      	bcc.n	fa38 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    fa30:	215c      	movs	r1, #92	; 0x5c
    fa32:	202e      	movs	r0, #46	; 0x2e
    fa34:	f7f5 fe48 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa38:	bd70      	pop	{r4, r5, r6, pc}

0000fa3a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    fa3a:	b510      	push	{r4, lr}
    fa3c:	4604      	mov	r4, r0
    fa3e:	7880      	ldrb	r0, [r0, #2]
    fa40:	f000 f870 	bl	fb24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fa44:	7861      	ldrb	r1, [r4, #1]
    fa46:	7822      	ldrb	r2, [r4, #0]
    fa48:	fb11 f102 	smulbb	r1, r1, r2
    fa4c:	4348      	muls	r0, r1
    fa4e:	b2c0      	uxtb	r0, r0
    fa50:	bd10      	pop	{r4, pc}

0000fa52 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    fa52:	b510      	push	{r4, lr}
    fa54:	4604      	mov	r4, r0
    fa56:	f000 f84d 	bl	faf4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    fa5a:	7961      	ldrb	r1, [r4, #5]
    fa5c:	1c49      	adds	r1, r1, #1
    fa5e:	b2c9      	uxtb	r1, r1
    fa60:	7161      	strb	r1, [r4, #5]
    fa62:	7862      	ldrb	r2, [r4, #1]
    fa64:	4291      	cmp	r1, r2
    fa66:	d10b      	bne.n	fa80 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fa68:	2200      	movs	r2, #0
    fa6a:	7162      	strb	r2, [r4, #5]
    fa6c:	78e1      	ldrb	r1, [r4, #3]
    fa6e:	4301      	orrs	r1, r0
    fa70:	70e1      	strb	r1, [r4, #3]
    fa72:	78a3      	ldrb	r3, [r4, #2]
    fa74:	4299      	cmp	r1, r3
    fa76:	d103      	bne.n	fa80 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    fa78:	70e2      	strb	r2, [r4, #3]
    fa7a:	7921      	ldrb	r1, [r4, #4]
    fa7c:	1c49      	adds	r1, r1, #1
    fa7e:	7121      	strb	r1, [r4, #4]
    fa80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa84:	f000 b825 	b.w	fad2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000fa88 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    fa88:	7081      	strb	r1, [r0, #2]
    fa8a:	4770      	bx	lr

0000fa8c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    fa8c:	b570      	push	{r4, r5, r6, lr}
    fa8e:	4604      	mov	r4, r0
    fa90:	7880      	ldrb	r0, [r0, #2]
    fa92:	f000 f847 	bl	fb24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    fa96:	7861      	ldrb	r1, [r4, #1]
    fa98:	fb11 f500 	smulbb	r5, r1, r0
    fa9c:	78e0      	ldrb	r0, [r4, #3]
    fa9e:	f000 f841 	bl	fb24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    faa2:	7861      	ldrb	r1, [r4, #1]
    faa4:	7962      	ldrb	r2, [r4, #5]
    faa6:	fb10 2001 	smlabb	r0, r0, r1, r2
    faaa:	7821      	ldrb	r1, [r4, #0]
    faac:	7922      	ldrb	r2, [r4, #4]
    faae:	1a89      	subs	r1, r1, r2
    fab0:	fb11 f105 	smulbb	r1, r1, r5
    fab4:	1a08      	subs	r0, r1, r0
    fab6:	b2c0      	uxtb	r0, r0
    fab8:	bd70      	pop	{r4, r5, r6, pc}

0000faba <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    faba:	2100      	movs	r1, #0
    fabc:	6001      	str	r1, [r0, #0]
    fabe:	8081      	strh	r1, [r0, #4]
    fac0:	2101      	movs	r1, #1
    fac2:	7041      	strb	r1, [r0, #1]
    fac4:	7001      	strb	r1, [r0, #0]
    fac6:	4770      	bx	lr

0000fac8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    fac8:	2100      	movs	r1, #0
    faca:	70c1      	strb	r1, [r0, #3]
    facc:	7141      	strb	r1, [r0, #5]
    face:	7101      	strb	r1, [r0, #4]
    fad0:	4770      	bx	lr
    fad2:	b510      	push	{r4, lr}
    fad4:	2801      	cmp	r0, #1
    fad6:	d007      	beq.n	fae8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    fad8:	2802      	cmp	r0, #2
    fada:	d007      	beq.n	faec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    fadc:	2804      	cmp	r0, #4
    fade:	d007      	beq.n	faf0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    fae0:	2139      	movs	r1, #57	; 0x39
    fae2:	202e      	movs	r0, #46	; 0x2e
    fae4:	f7f5 fdf0 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fae8:	2025      	movs	r0, #37	; 0x25
    faea:	bd10      	pop	{r4, pc}
    faec:	2026      	movs	r0, #38	; 0x26
    faee:	bd10      	pop	{r4, pc}
    faf0:	2027      	movs	r0, #39	; 0x27
    faf2:	bd10      	pop	{r4, pc}
    faf4:	4601      	mov	r1, r0
    faf6:	2000      	movs	r0, #0
    faf8:	788a      	ldrb	r2, [r1, #2]
    fafa:	07d3      	lsls	r3, r2, #31
    fafc:	d002      	beq.n	fb04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    fafe:	78cb      	ldrb	r3, [r1, #3]
    fb00:	07db      	lsls	r3, r3, #31
    fb02:	d006      	beq.n	fb12 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    fb04:	0793      	lsls	r3, r2, #30
    fb06:	d506      	bpl.n	fb16 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fb08:	78cb      	ldrb	r3, [r1, #3]
    fb0a:	079b      	lsls	r3, r3, #30
    fb0c:	d403      	bmi.n	fb16 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    fb0e:	2002      	movs	r0, #2
    fb10:	4770      	bx	lr
    fb12:	2001      	movs	r0, #1
    fb14:	4770      	bx	lr
    fb16:	0752      	lsls	r2, r2, #29
    fb18:	d5fc      	bpl.n	fb14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fb1a:	78c9      	ldrb	r1, [r1, #3]
    fb1c:	0749      	lsls	r1, r1, #29
    fb1e:	d4f9      	bmi.n	fb14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    fb20:	2004      	movs	r0, #4
    fb22:	4770      	bx	lr
    fb24:	f3c0 0180 	ubfx	r1, r0, #2, #1
    fb28:	f3c0 0240 	ubfx	r2, r0, #1, #1
    fb2c:	4411      	add	r1, r2
    fb2e:	f000 0001 	and.w	r0, r0, #1
    fb32:	4408      	add	r0, r1
    fb34:	4770      	bx	lr

0000fb36 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    fb36:	f240 315a 	movw	r1, #858	; 0x35a
    fb3a:	4348      	muls	r0, r1
    fb3c:	4770      	bx	lr

0000fb3e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    fb3e:	f240 20ef 	movw	r0, #751	; 0x2ef
    fb42:	4770      	bx	lr
    fb44:	041c020e 	.word	0x041c020e
    fb48:	0c600630 	.word	0x0c600630
    fb4c:	06b4035a 	.word	0x06b4035a
    fb50:	0bf505c5 	.word	0x0bf505c5
    fb54:	01a31225 	.word	0x01a31225
    fb58:	05bf03b1 	.word	0x05bf03b1
    fb5c:	064902ef 	.word	0x064902ef
    fb60:	09a3      	.short	0x09a3

0000fb62 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    fb62:	b510      	push	{r4, lr}
    fb64:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    fb68:	b109      	cbz	r1, fb6e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    fb6a:	2000      	movs	r0, #0
    fb6c:	bd10      	pop	{r4, pc}
    fb6e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    fb72:	b949      	cbnz	r1, fb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fb74:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    fb78:	b131      	cbz	r1, fb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fb7a:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    fb7e:	428a      	cmp	r2, r1
    fb80:	d902      	bls.n	fb88 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    fb82:	f7ff fe90 	bl	f8a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fb86:	e7f0      	b.n	fb6a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    fb88:	2001      	movs	r0, #1
    fb8a:	bd10      	pop	{r4, pc}

0000fb8c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    fb8c:	b510      	push	{r4, lr}
    fb8e:	b131      	cbz	r1, fb9e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    fb90:	2901      	cmp	r1, #1
    fb92:	d008      	beq.n	fba6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    fb94:	f240 718b 	movw	r1, #1931	; 0x78b
    fb98:	2030      	movs	r0, #48	; 0x30
    fb9a:	f7f5 fd95 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fba2:	f000 b9d4 	b.w	ff4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    fba6:	2100      	movs	r1, #0
    fba8:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    fbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbb0:	f000 b93b 	b.w	fe2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000fbb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    fbb4:	b510      	push	{r4, lr}
    fbb6:	4604      	mov	r4, r0
    fbb8:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    fbbc:	2800      	cmp	r0, #0
    fbbe:	d019      	beq.n	fbf4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    fbc0:	2001      	movs	r0, #1
    fbc2:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    fbc6:	4601      	mov	r1, r0
    fbc8:	4620      	mov	r0, r4
    fbca:	f7ff fe69 	bl	f8a0 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    fbce:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    fbd2:	b170      	cbz	r0, fbf2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    fbd4:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    fbd8:	f7f3 fdf0 	bl	37bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    fbdc:	7820      	ldrb	r0, [r4, #0]
    fbde:	f7f3 ff3b 	bl	3a58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    fbe2:	f814 09a0 	ldrb.w	r0, [r4], #-160
    fbe6:	f7f3 ff15 	bl	3a14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fbea:	b120      	cbz	r0, fbf6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    fbec:	2000      	movs	r0, #0
    fbee:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    fbf2:	2000      	movs	r0, #0
    fbf4:	bd10      	pop	{r4, pc}
    fbf6:	f240 2103 	movw	r1, #515	; 0x203
    fbfa:	2030      	movs	r0, #48	; 0x30
    fbfc:	f7f5 fd64 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fc00 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    fc00:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    fc04:	4770      	bx	lr

0000fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    fc06:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    fc0a:	4770      	bx	lr

0000fc0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    fc0c:	b50e      	push	{r1, r2, r3, lr}
    fc0e:	4669      	mov	r1, sp
    fc10:	2001      	movs	r0, #1
    fc12:	f7fe fdcd 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fc16:	b138      	cbz	r0, fc28 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    fc18:	f44f 71a1 	mov.w	r1, #322	; 0x142
    fc1c:	2030      	movs	r0, #48	; 0x30
    fc1e:	f7f5 fd53 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc22:	9802      	ldr	r0, [sp, #8]
    fc24:	f7ff ffc6 	bl	fbb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fc28:	4668      	mov	r0, sp
    fc2a:	f7f5 ff85 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fc2e:	2800      	cmp	r0, #0
    fc30:	d0f7      	beq.n	fc22 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    fc32:	f7f9 f913 	bl	8e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    fc36:	2000      	movs	r0, #0
    fc38:	bd0e      	pop	{r1, r2, r3, pc}

0000fc3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    fc3a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fc3c:	4604      	mov	r4, r0
    fc3e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    fc42:	2800      	cmp	r0, #0
    fc44:	d153      	bne.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fc46:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    fc4a:	2803      	cmp	r0, #3
    fc4c:	d14f      	bne.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fc4e:	f7fd fc35 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    fc52:	4601      	mov	r1, r0
    fc54:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    fc58:	f7f3 f938 	bl	2ecc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    fc5c:	2800      	cmp	r0, #0
    fc5e:	dd46      	ble.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fc60:	68e1      	ldr	r1, [r4, #12]
    fc62:	b111      	cbz	r1, fc6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    fc64:	fbb0 f0f1 	udiv	r0, r0, r1
    fc68:	e000      	b.n	fc6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    fc6a:	2000      	movs	r0, #0
    fc6c:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    fc70:	1c40      	adds	r0, r0, #1
    fc72:	4408      	add	r0, r1
    fc74:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    fc78:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    fc7c:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    fc80:	1a08      	subs	r0, r1, r0
    fc82:	b200      	sxth	r0, r0
    fc84:	2800      	cmp	r0, #0
    fc86:	dd32      	ble.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fc88:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    fc8c:	f7f3 fd96 	bl	37bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    fc90:	2800      	cmp	r0, #0
    fc92:	d02c      	beq.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fc94:	2001      	movs	r0, #1
    fc96:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    fc9a:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    fc9e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    fca2:	ae01      	add	r6, sp, #4
    fca4:	1a40      	subs	r0, r0, r1
    fca6:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    fcaa:	1e40      	subs	r0, r0, #1
    fcac:	4408      	add	r0, r1
    fcae:	b285      	uxth	r5, r0
    fcb0:	e017      	b.n	fce2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    fcb2:	9600      	str	r6, [sp, #0]
    fcb4:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    fcb8:	2300      	movs	r3, #0
    fcba:	2201      	movs	r2, #1
    fcbc:	4620      	mov	r0, r4
    fcbe:	f7f9 f99d 	bl	8ffc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    fcc2:	2800      	cmp	r0, #0
    fcc4:	d013      	beq.n	fcee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    fcc6:	2801      	cmp	r0, #1
    fcc8:	d004      	beq.n	fcd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    fcca:	f240 6101 	movw	r1, #1537	; 0x601
    fcce:	2030      	movs	r0, #48	; 0x30
    fcd0:	f7f5 fcfa 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcd4:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    fcd8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fcdc:	4408      	add	r0, r1
    fcde:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    fce2:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    fce6:	1a28      	subs	r0, r5, r0
    fce8:	b200      	sxth	r0, r0
    fcea:	2800      	cmp	r0, #0
    fcec:	dae1      	bge.n	fcb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    fcee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fcf0:	2000      	movs	r0, #0
    fcf2:	4770      	bx	lr
    fcf4:	b570      	push	{r4, r5, r6, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	2601      	movs	r6, #1
    fcfa:	f000 f90c 	bl	ff16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    fcfe:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    fd02:	2000      	movs	r0, #0
    fd04:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    fd08:	2001      	movs	r0, #1
    fd0a:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    fd0e:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    fd12:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    fd16:	b160      	cbz	r0, fd32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    fd18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fd1c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    fd20:	f7f3 f8a2 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    fd24:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    fd28:	2100      	movs	r1, #0
    fd2a:	4628      	mov	r0, r5
    fd2c:	f7ff f861 	bl	edf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    fd30:	e00f      	b.n	fd52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    fd32:	4620      	mov	r0, r4
    fd34:	f7ff fd69 	bl	f80a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fd38:	4606      	mov	r6, r0
    fd3a:	4631      	mov	r1, r6
    fd3c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    fd40:	f7f3 f892 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    fd44:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    fd48:	4631      	mov	r1, r6
    fd4a:	4628      	mov	r0, r5
    fd4c:	f7ff f851 	bl	edf2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    fd50:	1c46      	adds	r6, r0, #1
    fd52:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    fd56:	1c41      	adds	r1, r0, #1
    fd58:	290a      	cmp	r1, #10
    fd5a:	d202      	bcs.n	fd62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    fd5c:	4430      	add	r0, r6
    fd5e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    fd62:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    fd66:	b130      	cbz	r0, fd76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    fd68:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    fd6c:	1c40      	adds	r0, r0, #1
    fd6e:	280a      	cmp	r0, #10
    fd70:	d301      	bcc.n	fd76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    fd72:	2002      	movs	r0, #2
    fd74:	e000      	b.n	fd78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    fd76:	2003      	movs	r0, #3
    fd78:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    fd7c:	2100      	movs	r1, #0
    fd7e:	4620      	mov	r0, r4
    fd80:	f000 f822 	bl	fdc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    fd84:	b120      	cbz	r0, fd90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    fd86:	4620      	mov	r0, r4
    fd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd8c:	f000 b80d 	b.w	fdaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    fd90:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    fd94:	4629      	mov	r1, r5
    fd96:	f000 f8bc 	bl	ff12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    fd9a:	2800      	cmp	r0, #0
    fd9c:	d104      	bne.n	fda8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    fd9e:	f240 61a2 	movw	r1, #1698	; 0x6a2
    fda2:	2030      	movs	r0, #48	; 0x30
    fda4:	f7f5 fc90 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fda8:	bd70      	pop	{r4, r5, r6, pc}
    fdaa:	b510      	push	{r4, lr}
    fdac:	4604      	mov	r4, r0
    fdae:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    fdb2:	f7f3 fe2f 	bl	3a14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    fdb6:	2000      	movs	r0, #0
    fdb8:	7520      	strb	r0, [r4, #20]
    fdba:	bd10      	pop	{r4, pc}
    fdbc:	b510      	push	{r4, lr}
    fdbe:	f7ff fd28 	bl	f812 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    fdc2:	f200 1009 	addw	r0, r0, #265	; 0x109
    fdc6:	bd10      	pop	{r4, pc}
    fdc8:	b570      	push	{r4, r5, r6, lr}
    fdca:	4604      	mov	r4, r0
    fdcc:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    fdd0:	460d      	mov	r5, r1
    fdd2:	b108      	cbz	r0, fdd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    fdd4:	2001      	movs	r0, #1
    fdd6:	bd70      	pop	{r4, r5, r6, pc}
    fdd8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    fddc:	b1a8      	cbz	r0, fe0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    fdde:	4620      	mov	r0, r4
    fde0:	f7ff fd13 	bl	f80a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    fde4:	4405      	add	r5, r0
    fde6:	4620      	mov	r0, r4
    fde8:	f7ff ffe8 	bl	fdbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    fdec:	1941      	adds	r1, r0, r5
    fdee:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    fdf2:	4288      	cmp	r0, r1
    fdf4:	d206      	bcs.n	fe04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    fdf6:	2001      	movs	r0, #1
    fdf8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    fdfc:	4620      	mov	r0, r4
    fdfe:	f7ff fd52 	bl	f8a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    fe02:	e7e7      	b.n	fdd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    fe04:	1b40      	subs	r0, r0, r5
    fe06:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    fe0a:	2000      	movs	r0, #0
    fe0c:	bd70      	pop	{r4, r5, r6, pc}
    fe0e:	b510      	push	{r4, lr}
    fe10:	4604      	mov	r4, r0
    fe12:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    fe16:	f000 f9e8 	bl	101ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    fe1a:	4602      	mov	r2, r0
    fe1c:	4620      	mov	r0, r4
    fe1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe22:	f240 111b 	movw	r1, #283	; 0x11b
    fe26:	f7ff bbc8 	b.w	f5ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    fe2a:	b510      	push	{r4, lr}
    fe2c:	f7fc fbf8 	bl	c620 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    fe30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe34:	f7f3 bf44 	b.w	3cc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    fe38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe3c:	4604      	mov	r4, r0
    fe3e:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    fe42:	2800      	cmp	r0, #0
    fe44:	d051      	beq.n	feea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    fe46:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    fe4a:	2803      	cmp	r0, #3
    fe4c:	d14d      	bne.n	feea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    fe4e:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    fe52:	f001 fac2 	bl	113da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    fe56:	4605      	mov	r5, r0
    fe58:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    fe5c:	f7f8 fff0 	bl	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fe60:	4428      	add	r0, r5
    fe62:	b286      	uxth	r6, r0
    fe64:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    fe68:	f7f8 ffea 	bl	8e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    fe6c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    fe70:	fa1f f880 	uxth.w	r8, r0
    fe74:	4648      	mov	r0, r9
    fe76:	f001 fb49 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fe7a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    fe7e:	1a0d      	subs	r5, r1, r0
    fe80:	4648      	mov	r0, r9
    fe82:	f001 fb51 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fe86:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    fe8a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fe8e:	fbb0 f0fa 	udiv	r0, r0, sl
    fe92:	1a2d      	subs	r5, r5, r0
    fe94:	4648      	mov	r0, r9
    fe96:	f001 fb39 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fe9a:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    fe9e:	1a0f      	subs	r7, r1, r0
    fea0:	4648      	mov	r0, r9
    fea2:	f001 fb41 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fea6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    feaa:	4401      	add	r1, r0
    feac:	fbb1 f0fa 	udiv	r0, r1, sl
    feb0:	1a39      	subs	r1, r7, r0
    feb2:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    feb6:	4370      	muls	r0, r6
    feb8:	fbb0 f2f8 	udiv	r2, r0, r8
    febc:	2029      	movs	r0, #41	; 0x29
    febe:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    fec2:	3260      	adds	r2, #96	; 0x60
    fec4:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    fec8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    fecc:	42a9      	cmp	r1, r5
    fece:	d801      	bhi.n	fed4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    fed0:	4285      	cmp	r5, r0
    fed2:	d901      	bls.n	fed8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    fed4:	f7f5 f85a 	bl	4f8c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    fed8:	4631      	mov	r1, r6
    feda:	68e0      	ldr	r0, [r4, #12]
    fedc:	f7fd fb22 	bl	d524 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    fee0:	2100      	movs	r1, #0
    fee2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    fee6:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    feea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    feee:	b570      	push	{r4, r5, r6, lr}
    fef0:	460c      	mov	r4, r1
    fef2:	4605      	mov	r5, r0
    fef4:	f001 fb18 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fef8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    fefc:	4408      	add	r0, r1
    fefe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ff02:	fbb0 f6f1 	udiv	r6, r0, r1
    ff06:	4628      	mov	r0, r5
    ff08:	f001 fb00 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ff0c:	4430      	add	r0, r6
    ff0e:	4420      	add	r0, r4
    ff10:	bd70      	pop	{r4, r5, r6, pc}
    ff12:	f7f3 b923 	b.w	315c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ff16:	b510      	push	{r4, lr}
    ff18:	4604      	mov	r4, r0
    ff1a:	f7ff fca3 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff1e:	b1a0      	cbz	r0, ff4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    ff20:	4620      	mov	r0, r4
    ff22:	f7ff fc97 	bl	f854 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ff26:	b918      	cbnz	r0, ff30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    ff28:	4620      	mov	r0, r4
    ff2a:	f7ff fc9d 	bl	f868 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ff2e:	b120      	cbz	r0, ff3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    ff30:	2449      	movs	r4, #73	; 0x49
    ff32:	f001 fab7 	bl	114a4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    ff36:	b928      	cbnz	r0, ff44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    ff38:	e001      	b.n	ff3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    ff3a:	2442      	movs	r4, #66	; 0x42
    ff3c:	e7f9      	b.n	ff32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    ff3e:	f001 faa7 	bl	11490 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    ff42:	b100      	cbz	r0, ff46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    ff44:	1de4      	adds	r4, r4, #7
    ff46:	4620      	mov	r0, r4
    ff48:	bd10      	pop	{r4, pc}
    ff4a:	206b      	movs	r0, #107	; 0x6b
    ff4c:	bd10      	pop	{r4, pc}
    ff4e:	b570      	push	{r4, r5, r6, lr}
    ff50:	4604      	mov	r4, r0
    ff52:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    ff56:	2500      	movs	r5, #0
    ff58:	b118      	cbz	r0, ff62 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    ff5a:	2001      	movs	r0, #1
    ff5c:	f000 f887 	bl	1006e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    ff60:	4605      	mov	r5, r0
    ff62:	4620      	mov	r0, r4
    ff64:	f7ff fc51 	bl	f80a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ff68:	1941      	adds	r1, r0, r5
    ff6a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    ff6e:	34b8      	adds	r4, #184	; 0xb8
    ff70:	f7f2 ff7a 	bl	2e68 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ff74:	2600      	movs	r6, #0
    ff76:	60e0      	str	r0, [r4, #12]
    ff78:	f804 6b0b 	strb.w	r6, [r4], #11
    ff7c:	2001      	movs	r0, #1
    ff7e:	f804 0901 	strb.w	r0, [r4], #-1
    ff82:	2003      	movs	r0, #3
    ff84:	f804 09c2 	strb.w	r0, [r4], #-194
    ff88:	4620      	mov	r0, r4
    ff8a:	f7ff ffc4 	bl	ff16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    ff8e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ff92:	4629      	mov	r1, r5
    ff94:	4620      	mov	r0, r4
    ff96:	f7ff ff17 	bl	fdc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ff9a:	b930      	cbnz	r0, ffaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    ff9c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    ffa0:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    ffa4:	f7ff ffb5 	bl	ff12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    ffa8:	b128      	cbz	r0, ffb6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    ffaa:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    ffae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffb2:	f7ff bf3a 	b.w	fe2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    ffb6:	f240 61eb 	movw	r1, #1771	; 0x6eb
    ffba:	2030      	movs	r0, #48	; 0x30
    ffbc:	f7f5 fb84 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffc0:	b510      	push	{r4, lr}
    ffc2:	4604      	mov	r4, r0
    ffc4:	2000      	movs	r0, #0
    ffc6:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    ffca:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    ffce:	f7f3 fd21 	bl	3a14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ffd2:	2020      	movs	r0, #32
    ffd4:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    ffd8:	bd10      	pop	{r4, pc}
    ffda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ffde:	2500      	movs	r5, #0
    ffe0:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    ffe4:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    ffe8:	4688      	mov	r8, r1
    ffea:	4604      	mov	r4, r0
    ffec:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    fff0:	2701      	movs	r7, #1
    fff2:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    fff6:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    fffa:	4639      	mov	r1, r7
    fffc:	34a0      	adds	r4, #160	; 0xa0
    fffe:	f7f7 faa1 	bl	7544 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   10002:	6860      	ldr	r0, [r4, #4]
   10004:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
   10008:	6861      	ldr	r1, [r4, #4]
   1000a:	7820      	ldrb	r0, [r4, #0]
   1000c:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   10010:	6861      	ldr	r1, [r4, #4]
   10012:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
   10016:	6860      	ldr	r0, [r4, #4]
   10018:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
   1001c:	6864      	ldr	r4, [r4, #4]
   1001e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
   10022:	2300      	movs	r3, #0
   10024:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
   10028:	461a      	mov	r2, r3
   1002a:	4619      	mov	r1, r3
   1002c:	4620      	mov	r0, r4
   1002e:	9500      	str	r5, [sp, #0]
   10030:	f7f8 ffe4 	bl	8ffc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   10034:	b120      	cbz	r0, 10040 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
   10036:	f240 2117 	movw	r1, #535	; 0x217
   1003a:	2030      	movs	r0, #48	; 0x30
   1003c:	f7f5 fb44 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10040:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
   10044:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
   10048:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
   1004c:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
   10050:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
   10054:	f504 7498 	add.w	r4, r4, #304	; 0x130
   10058:	7665      	strb	r5, [r4, #25]
   1005a:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
   1005e:	1e40      	subs	r0, r0, #1
   10060:	f824 0cbc 	strh.w	r0, [r4, #-188]
   10064:	86e5      	strh	r5, [r4, #54]	; 0x36
   10066:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1006a:	f7ff bede 	b.w	fe2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
   1006e:	b510      	push	{r4, lr}
   10070:	f7f9 f9d0 	bl	9414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
   10074:	f242 7110 	movw	r1, #10000	; 0x2710
   10078:	fbb0 f2f1 	udiv	r2, r0, r1
   1007c:	fb01 0012 	mls	r0, r1, r2, r0
   10080:	bd10      	pop	{r4, pc}
   10082:	b570      	push	{r4, r5, r6, lr}
   10084:	b140      	cbz	r0, 10098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
   10086:	2909      	cmp	r1, #9
   10088:	d248      	bcs.n	1011c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
   1008a:	e8df f001 	tbb	[pc, r1]
   1008e:	1507      	.short	0x1507
   10090:	47373b3b 	.word	0x47373b3b
   10094:	00433f29 	.word	0x00433f29
   10098:	21cd      	movs	r1, #205	; 0xcd
   1009a:	e03c      	b.n	10116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   1009c:	4604      	mov	r4, r0
   1009e:	f7f7 ffcf 	bl	8040 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   100a2:	b110      	cbz	r0, 100aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
   100a4:	f240 2175 	movw	r1, #629	; 0x275
   100a8:	e035      	b.n	10116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   100aa:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   100ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   100b2:	38f8      	subs	r0, #248	; 0xf8
   100b4:	f7f3 bee6 	b.w	3e84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   100b8:	4605      	mov	r5, r0
   100ba:	f7ff fbcf 	bl	f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   100be:	b9a8      	cbnz	r0, 100ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
   100c0:	4628      	mov	r0, r5
   100c2:	f7ff fe7b 	bl	fdbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   100c6:	4604      	mov	r4, r0
   100c8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   100cc:	42a0      	cmp	r0, r4
   100ce:	d20b      	bcs.n	100e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   100d0:	1a20      	subs	r0, r4, r0
   100d2:	2104      	movs	r1, #4
   100d4:	f7f2 fdf6 	bl	2cc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   100d8:	b130      	cbz	r0, 100e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
   100da:	4628      	mov	r0, r5
   100dc:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   100e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   100e4:	f7ff bb8f 	b.w	f806 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   100e8:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
   100ec:	4628      	mov	r0, r5
   100ee:	f7f7 ffc3 	bl	8078 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   100f2:	2800      	cmp	r0, #0
   100f4:	d014      	beq.n	10120 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
   100f6:	f44f 712a 	mov.w	r1, #680	; 0x2a8
   100fa:	e00c      	b.n	10116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   100fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10100:	f7fc bc42 	b.w	c988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   10104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10108:	f7ff bdf4 	b.w	fcf4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
   1010c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10110:	f7ff be4b 	b.w	fdaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   10114:	21ed      	movs	r1, #237	; 0xed
   10116:	2030      	movs	r0, #48	; 0x30
   10118:	f7f5 fad6 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1011c:	21f1      	movs	r1, #241	; 0xf1
   1011e:	e7fa      	b.n	10116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
   10120:	bd70      	pop	{r4, r5, r6, pc}
   10122:	b510      	push	{r4, lr}
   10124:	0004      	movs	r4, r0
   10126:	d008      	beq.n	1013a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
   10128:	2909      	cmp	r1, #9
   1012a:	d25c      	bcs.n	101e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
   1012c:	e8df f001 	tbb	[pc, r1]
   10130:	3e3e3607 	.word	0x3e3e3607
   10134:	4a435b3a 	.word	0x4a435b3a
   10138:	0057      	.short	0x0057
   1013a:	2196      	movs	r1, #150	; 0x96
   1013c:	e050      	b.n	101e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   1013e:	2100      	movs	r1, #0
   10140:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
   10144:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   10148:	4620      	mov	r0, r4
   1014a:	b189      	cbz	r1, 10170 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
   1014c:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
   10150:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
   10154:	428a      	cmp	r2, r1
   10156:	d106      	bne.n	10166 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
   10158:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
   1015c:	1a51      	subs	r1, r2, r1
   1015e:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   10162:	4611      	mov	r1, r2
   10164:	e00d      	b.n	10182 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   10166:	1a51      	subs	r1, r2, r1
   10168:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1016c:	b291      	uxth	r1, r2
   1016e:	e008      	b.n	10182 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
   10170:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   10174:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
   10178:	1a89      	subs	r1, r1, r2
   1017a:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
   1017e:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
   10182:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
   10186:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
   1018a:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
   1018e:	f7f9 fb5d 	bl	984c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   10192:	4620      	mov	r0, r4
   10194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10198:	f7f9 b946 	b.w	9428 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
   1019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101a0:	f000 b905 	b.w	103ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   101a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101a8:	f7fc bbee 	b.w	c988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   101ac:	4620      	mov	r0, r4
   101ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101b2:	f000 b827 	b.w	10204 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
   101b6:	2001      	movs	r0, #1
   101b8:	f7f2 fd74 	bl	2ca4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   101bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101c0:	f7fe bcbe 	b.w	eb40 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
   101c4:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
   101c8:	2804      	cmp	r0, #4
   101ca:	d001      	beq.n	101d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   101cc:	21b8      	movs	r1, #184	; 0xb8
   101ce:	e007      	b.n	101e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   101d0:	4620      	mov	r0, r4
   101d2:	f7ff fef5 	bl	ffc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   101d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101da:	f7f7 bc01 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   101de:	21c1      	movs	r1, #193	; 0xc1
   101e0:	2030      	movs	r0, #48	; 0x30
   101e2:	f7f5 fa71 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101e6:	21c5      	movs	r1, #197	; 0xc5
   101e8:	e7fa      	b.n	101e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
   101ea:	b510      	push	{r4, lr}
   101ec:	f001 f99c 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   101f0:	f64d 7141 	movw	r1, #57153	; 0xdf41
   101f4:	4408      	add	r0, r1
   101f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   101fa:	fbb0 f0f1 	udiv	r0, r0, r1
   101fe:	f500 70bb 	add.w	r0, r0, #374	; 0x176
   10202:	bd10      	pop	{r4, pc}
   10204:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10206:	4604      	mov	r4, r0
   10208:	f7fd f958 	bl	d4bc <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
   1020c:	4601      	mov	r1, r0
   1020e:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
   10212:	f7f2 fe5b 	bl	2ecc <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
   10216:	68e1      	ldr	r1, [r4, #12]
   10218:	b111      	cbz	r1, 10220 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
   1021a:	fbb0 f0f1 	udiv	r0, r0, r1
   1021e:	e000      	b.n	10222 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
   10220:	2000      	movs	r0, #0
   10222:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
   10226:	290d      	cmp	r1, #13
   10228:	d00c      	beq.n	10244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
   1022a:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
   1022e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   10232:	1813      	adds	r3, r2, r0
   10234:	1acb      	subs	r3, r1, r3
   10236:	b21b      	sxth	r3, r3
   10238:	2b00      	cmp	r3, #0
   1023a:	db06      	blt.n	1024a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
   1023c:	1c49      	adds	r1, r1, #1
   1023e:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   10242:	e006      	b.n	10252 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
   10244:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   10248:	e012      	b.n	10270 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
   1024a:	1c40      	adds	r0, r0, #1
   1024c:	4410      	add	r0, r2
   1024e:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   10252:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   10256:	f88d 0000 	strb.w	r0, [sp]
   1025a:	9800      	ldr	r0, [sp, #0]
   1025c:	9000      	str	r0, [sp, #0]
   1025e:	f89d 0000 	ldrb.w	r0, [sp]
   10262:	b940      	cbnz	r0, 10276 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   10264:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   10268:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
   1026c:	4288      	cmp	r0, r1
   1026e:	d102      	bne.n	10276 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
   10270:	1c40      	adds	r0, r0, #1
   10272:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   10276:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
   1027a:	1c40      	adds	r0, r0, #1
   1027c:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
   10280:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
   10284:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
   10288:	1a40      	subs	r0, r0, r1
   1028a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
   1028e:	1e40      	subs	r0, r0, #1
   10290:	4408      	add	r0, r1
   10292:	b285      	uxth	r5, r0
   10294:	e026      	b.n	102e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   10296:	a801      	add	r0, sp, #4
   10298:	2300      	movs	r3, #0
   1029a:	9000      	str	r0, [sp, #0]
   1029c:	461a      	mov	r2, r3
   1029e:	4620      	mov	r0, r4
   102a0:	f7f8 feac 	bl	8ffc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
   102a4:	2800      	cmp	r0, #0
   102a6:	d038      	beq.n	1031a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
   102a8:	2801      	cmp	r0, #1
   102aa:	d004      	beq.n	102b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
   102ac:	f240 614e 	movw	r1, #1614	; 0x64e
   102b0:	2030      	movs	r0, #48	; 0x30
   102b2:	f7f5 fa09 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102b6:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
   102ba:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
   102be:	1a42      	subs	r2, r0, r1
   102c0:	b212      	sxth	r2, r2
   102c2:	2a00      	cmp	r2, #0
   102c4:	da09      	bge.n	102da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   102c6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   102ca:	4402      	add	r2, r0
   102cc:	1aaa      	subs	r2, r5, r2
   102ce:	b212      	sxth	r2, r2
   102d0:	2a00      	cmp	r2, #0
   102d2:	da02      	bge.n	102da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
   102d4:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
   102d8:	e004      	b.n	102e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
   102da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   102de:	4408      	add	r0, r1
   102e0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
   102e4:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
   102e8:	1a68      	subs	r0, r5, r1
   102ea:	b200      	sxth	r0, r0
   102ec:	2800      	cmp	r0, #0
   102ee:	dad2      	bge.n	10296 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
   102f0:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
   102f4:	b178      	cbz	r0, 10316 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
   102f6:	2008      	movs	r0, #8
   102f8:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
   102fc:	2001      	movs	r0, #1
   102fe:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
   10302:	4620      	mov	r0, r4
   10304:	f000 f855 	bl	103b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   10308:	4620      	mov	r0, r4
   1030a:	f7ff fe59 	bl	ffc0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
   1030e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   10312:	f7f7 bb65 	b.w	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10316:	203e      	movs	r0, #62	; 0x3e
   10318:	e7ee      	b.n	102f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
   1031a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1031c:	00fa01f4 	.word	0x00fa01f4
   10320:	00640096 	.word	0x00640096
   10324:	0032004b 	.word	0x0032004b
   10328:	0014001e 	.word	0x0014001e
   1032c:	0005000a 	.word	0x0005000a
   10330:	00010002 	.word	0x00010002
   10334:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   10338:	f001 0307 	and.w	r3, r1, #7
   1033c:	7802      	ldrb	r2, [r0, #0]
   1033e:	2101      	movs	r1, #1
   10340:	4099      	lsls	r1, r3
   10342:	438a      	bics	r2, r1
   10344:	7002      	strb	r2, [r0, #0]
   10346:	4770      	bx	lr

00010348 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   10348:	b510      	push	{r4, lr}
   1034a:	4604      	mov	r4, r0
   1034c:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
   10350:	68e1      	ldr	r1, [r4, #12]
   10352:	4288      	cmp	r0, r1
   10354:	d109      	bne.n	1036a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   10356:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   1035a:	8aa2      	ldrh	r2, [r4, #20]
   1035c:	4291      	cmp	r1, r2
   1035e:	d104      	bne.n	1036a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   10360:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
   10364:	8ae2      	ldrh	r2, [r4, #22]
   10366:	4291      	cmp	r1, r2
   10368:	d013      	beq.n	10392 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
   1036a:	8821      	ldrh	r1, [r4, #0]
   1036c:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
   10370:	f7fe fc6d 	bl	ec4e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   10374:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
   10378:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
   1037c:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
   10380:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
   10384:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
   10388:	2001      	movs	r0, #1
   1038a:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
   1038e:	f7f7 fb27 	bl	79e0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
   10392:	2102      	movs	r1, #2
   10394:	4620      	mov	r0, r4
   10396:	f7f7 f8d5 	bl	7544 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   1039a:	2000      	movs	r0, #0
   1039c:	f804 0f7e 	strb.w	r0, [r4, #126]!
   103a0:	2003      	movs	r0, #3
   103a2:	70e0      	strb	r0, [r4, #3]
   103a4:	bd10      	pop	{r4, pc}

000103a6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   103a6:	f7f5 bd35 	b.w	5e14 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

000103aa <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   103aa:	2000      	movs	r0, #0
   103ac:	4770      	bx	lr

000103ae <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   103ae:	f7f6 ba69 	b.w	6884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

000103b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   103b2:	2100      	movs	r1, #0
   103b4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
   103b8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
   103bc:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
   103c0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
   103c4:	b109      	cbz	r1, 103ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   103c6:	2102      	movs	r1, #2
   103c8:	e000      	b.n	103cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   103ca:	2103      	movs	r1, #3
   103cc:	f7f8 bce6 	b.w	8d9c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   103d0:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   103d4:	28fe      	cmp	r0, #254	; 0xfe
   103d6:	d001      	beq.n	103dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   103d8:	2001      	movs	r0, #1
   103da:	4770      	bx	lr
   103dc:	2000      	movs	r0, #0
   103de:	4770      	bx	lr
   103e0:	b510      	push	{r4, lr}
   103e2:	2801      	cmp	r0, #1
   103e4:	d006      	beq.n	103f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   103e6:	2802      	cmp	r0, #2
   103e8:	d004      	beq.n	103f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   103ea:	f240 2163 	movw	r1, #611	; 0x263
   103ee:	2006      	movs	r0, #6
   103f0:	f7f5 f96a 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103f4:	bd10      	pop	{r4, pc}
   103f6:	2801      	cmp	r0, #1
   103f8:	d002      	beq.n	10400 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   103fa:	2802      	cmp	r0, #2
   103fc:	d105      	bne.n	1040a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   103fe:	e002      	b.n	10406 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   10400:	2901      	cmp	r1, #1
   10402:	d004      	beq.n	1040e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   10404:	e001      	b.n	1040a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   10406:	2902      	cmp	r1, #2
   10408:	d001      	beq.n	1040e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   1040a:	2000      	movs	r0, #0
   1040c:	4770      	bx	lr
   1040e:	2001      	movs	r0, #1
   10410:	4770      	bx	lr
   10412:	1a40      	subs	r0, r0, r1
   10414:	b200      	sxth	r0, r0
   10416:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   1041a:	4288      	cmp	r0, r1
   1041c:	dc01      	bgt.n	10422 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   1041e:	2800      	cmp	r0, #0
   10420:	dc01      	bgt.n	10426 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   10422:	2001      	movs	r0, #1
   10424:	4770      	bx	lr
   10426:	2000      	movs	r0, #0
   10428:	4770      	bx	lr
   1042a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   1042e:	f001 0107 	and.w	r1, r1, #7
   10432:	7800      	ldrb	r0, [r0, #0]
   10434:	2201      	movs	r2, #1
   10436:	408a      	lsls	r2, r1
   10438:	4010      	ands	r0, r2
   1043a:	40c8      	lsrs	r0, r1
   1043c:	4770      	bx	lr
   1043e:	b118      	cbz	r0, 10448 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   10440:	2802      	cmp	r0, #2
   10442:	d001      	beq.n	10448 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
   10444:	2001      	movs	r0, #1
   10446:	4770      	bx	lr
   10448:	2000      	movs	r0, #0
   1044a:	4770      	bx	lr

0001044c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   1044c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1044e:	7881      	ldrb	r1, [r0, #2]
   10450:	4604      	mov	r4, r0
   10452:	291a      	cmp	r1, #26
   10454:	d025      	beq.n	104a2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   10456:	dc0e      	bgt.n	10476 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
   10458:	2916      	cmp	r1, #22
   1045a:	d22d      	bcs.n	104b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1045c:	e8df f001 	tbb	[pc, r1]
   10460:	2c2c2c2c 	.word	0x2c2c2c2c
   10464:	2c2c212c 	.word	0x2c2c212c
   10468:	2c2c2c2c 	.word	0x2c2c2c2c
   1046c:	2c2c2c2c 	.word	0x2c2c2c2c
   10470:	212c2c2c 	.word	0x212c2c2c
   10474:	2121      	.short	0x2121
   10476:	292a      	cmp	r1, #42	; 0x2a
   10478:	d01e      	beq.n	104b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1047a:	dc0b      	bgt.n	10494 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
   1047c:	f1a1 011e 	sub.w	r1, r1, #30
   10480:	290c      	cmp	r1, #12
   10482:	d219      	bcs.n	104b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   10484:	e8df f001 	tbb	[pc, r1]
   10488:	18181818 	.word	0x18181818
   1048c:	18181818 	.word	0x18181818
   10490:	0d181818 	.word	0x0d181818
   10494:	393a      	subs	r1, #58	; 0x3a
   10496:	2904      	cmp	r1, #4
   10498:	d20e      	bcs.n	104b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   1049a:	e8df f001 	tbb	[pc, r1]
   1049e:	020d      	.short	0x020d
   104a0:	020d      	.short	0x020d
   104a2:	8820      	ldrh	r0, [r4, #0]
   104a4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   104a8:	d206      	bcs.n	104b8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
   104aa:	2701      	movs	r7, #1
   104ac:	4669      	mov	r1, sp
   104ae:	f7fe fbbd 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   104b2:	b118      	cbz	r0, 104bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
   104b4:	2002      	movs	r0, #2
   104b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   104b8:	2012      	movs	r0, #18
   104ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   104bc:	9d01      	ldr	r5, [sp, #4]
   104be:	4668      	mov	r0, sp
   104c0:	462e      	mov	r6, r5
   104c2:	f505 75bc 	add.w	r5, r5, #376	; 0x178
   104c6:	f206 1679 	addw	r6, r6, #377	; 0x179
   104ca:	f000 fe8d 	bl	111e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   104ce:	b138      	cbz	r0, 104e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
   104d0:	7828      	ldrb	r0, [r5, #0]
   104d2:	f88d 0008 	strb.w	r0, [sp, #8]
   104d6:	9802      	ldr	r0, [sp, #8]
   104d8:	9002      	str	r0, [sp, #8]
   104da:	f89d 0008 	ldrb.w	r0, [sp, #8]
   104de:	b108      	cbz	r0, 104e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
   104e0:	200c      	movs	r0, #12
   104e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   104e4:	702f      	strb	r7, [r5, #0]
   104e6:	78a0      	ldrb	r0, [r4, #2]
   104e8:	7030      	strb	r0, [r6, #0]
   104ea:	4668      	mov	r0, sp
   104ec:	f7fe ff36 	bl	f35c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   104f0:	2000      	movs	r0, #0
   104f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000104f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
   104f4:	b510      	push	{r4, lr}
   104f6:	4604      	mov	r4, r0
   104f8:	7800      	ldrb	r0, [r0, #0]
   104fa:	b118      	cbz	r0, 10504 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   104fc:	2801      	cmp	r0, #1
   104fe:	d001      	beq.n	10504 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
   10500:	2012      	movs	r0, #18
   10502:	bd10      	pop	{r4, pc}
   10504:	f000 fe9e 	bl	11244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   10508:	b120      	cbz	r0, 10514 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   1050a:	f7f6 fe0d 	bl	7128 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   1050e:	b108      	cbz	r0, 10514 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
   10510:	200c      	movs	r0, #12
   10512:	bd10      	pop	{r4, pc}
   10514:	7820      	ldrb	r0, [r4, #0]
   10516:	f7ff ff92 	bl	1043e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   1051a:	1de2      	adds	r2, r4, #7
   1051c:	f104 0317 	add.w	r3, r4, #23
   10520:	1c61      	adds	r1, r4, #1
   10522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10526:	f7f6 be31 	b.w	718c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0001052a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   1052a:	b510      	push	{r4, lr}
   1052c:	4604      	mov	r4, r0
   1052e:	f000 fef2 	bl	11316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   10532:	b108      	cbz	r0, 10538 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   10534:	200c      	movs	r0, #12
   10536:	bd10      	pop	{r4, pc}
   10538:	7820      	ldrb	r0, [r4, #0]
   1053a:	b118      	cbz	r0, 10544 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   1053c:	2801      	cmp	r0, #1
   1053e:	d001      	beq.n	10544 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   10540:	2012      	movs	r0, #18
   10542:	bd10      	pop	{r4, pc}
   10544:	f7ff ff7b 	bl	1043e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   10548:	1c61      	adds	r1, r4, #1
   1054a:	f7f6 fe97 	bl	727c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
   1054e:	b108      	cbz	r0, 10554 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   10550:	2000      	movs	r0, #0
   10552:	bd10      	pop	{r4, pc}
   10554:	2007      	movs	r0, #7
   10556:	bd10      	pop	{r4, pc}

00010558 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
   10558:	b510      	push	{r4, lr}
   1055a:	f000 fe73 	bl	11244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1055e:	b120      	cbz	r0, 1056a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10560:	f7f6 fde2 	bl	7128 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10564:	b108      	cbz	r0, 1056a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
   10566:	200c      	movs	r0, #12
   10568:	bd10      	pop	{r4, pc}
   1056a:	f7f6 fe55 	bl	7218 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
   1056e:	2000      	movs	r0, #0
   10570:	bd10      	pop	{r4, pc}

00010572 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   10572:	b510      	push	{r4, lr}
   10574:	f000 fecf 	bl	11316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   10578:	b108      	cbz	r0, 1057e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   1057a:	200c      	movs	r0, #12
   1057c:	bd10      	pop	{r4, pc}
   1057e:	f7f6 fea5 	bl	72cc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
   10582:	2000      	movs	r0, #0
   10584:	bd10      	pop	{r4, pc}

00010586 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   10586:	b510      	push	{r4, lr}
   10588:	460b      	mov	r3, r1
   1058a:	2201      	movs	r2, #1
   1058c:	f100 0110 	add.w	r1, r0, #16
   10590:	f7fe fb2e 	bl	ebf0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   10594:	2000      	movs	r0, #0
   10596:	bd10      	pop	{r4, pc}

00010598 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   10598:	b510      	push	{r4, lr}
   1059a:	8800      	ldrh	r0, [r0, #0]
   1059c:	2100      	movs	r1, #0
   1059e:	f7fe f8fd 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   105a2:	b118      	cbz	r0, 105ac <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   105a4:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
   105a8:	b111      	cbz	r1, 105b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   105aa:	e007      	b.n	105bc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   105ac:	2002      	movs	r0, #2
   105ae:	bd10      	pop	{r4, pc}
   105b0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   105b4:	2914      	cmp	r1, #20
   105b6:	d003      	beq.n	105c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   105b8:	2915      	cmp	r1, #21
   105ba:	d001      	beq.n	105c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   105bc:	200c      	movs	r0, #12
   105be:	bd10      	pop	{r4, pc}
   105c0:	2102      	movs	r1, #2
   105c2:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
   105c6:	2000      	movs	r0, #0
   105c8:	bd10      	pop	{r4, pc}

000105ca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   105ca:	b538      	push	{r3, r4, r5, lr}
   105cc:	4605      	mov	r5, r0
   105ce:	8800      	ldrh	r0, [r0, #0]
   105d0:	2100      	movs	r1, #0
   105d2:	f7fe f8e3 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   105d6:	0004      	movs	r4, r0
   105d8:	d003      	beq.n	105e2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   105da:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
   105de:	b110      	cbz	r0, 105e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   105e0:	e010      	b.n	10604 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   105e2:	2002      	movs	r0, #2
   105e4:	bd38      	pop	{r3, r4, r5, pc}
   105e6:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
   105ea:	2814      	cmp	r0, #20
   105ec:	d001      	beq.n	105f2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   105ee:	2815      	cmp	r0, #21
   105f0:	d108      	bne.n	10604 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
   105f2:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   105f6:	f88d 0000 	strb.w	r0, [sp]
   105fa:	9800      	ldr	r0, [sp, #0]
   105fc:	9000      	str	r0, [sp, #0]
   105fe:	f89d 0000 	ldrb.w	r0, [sp]
   10602:	b108      	cbz	r0, 10608 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
   10604:	200c      	movs	r0, #12
   10606:	bd38      	pop	{r3, r4, r5, pc}
   10608:	2210      	movs	r2, #16
   1060a:	1ca9      	adds	r1, r5, #2
   1060c:	f504 70be 	add.w	r0, r4, #380	; 0x17c
   10610:	f7fd f8c9 	bl	d7a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10614:	2001      	movs	r0, #1
   10616:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
   1061a:	2000      	movs	r0, #0
   1061c:	bd38      	pop	{r3, r4, r5, pc}

0001061e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   1061e:	b510      	push	{r4, lr}
   10620:	2108      	movs	r1, #8
   10622:	f7f5 f8eb 	bl	57fc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   10626:	2000      	movs	r0, #0
   10628:	bd10      	pop	{r4, pc}

0001062a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   1062a:	b510      	push	{r4, lr}
   1062c:	4604      	mov	r4, r0
   1062e:	f000 fdf2 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   10632:	f7ff f91d 	bl	f870 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   10636:	7020      	strb	r0, [r4, #0]
   10638:	2000      	movs	r0, #0
   1063a:	bd10      	pop	{r4, pc}

0001063c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   1063c:	b510      	push	{r4, lr}
   1063e:	4604      	mov	r4, r0
   10640:	f000 fdcc 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10644:	b140      	cbz	r0, 10658 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
   10646:	20fb      	movs	r0, #251	; 0xfb
   10648:	8020      	strh	r0, [r4, #0]
   1064a:	f640 0148 	movw	r1, #2120	; 0x848
   1064e:	8061      	strh	r1, [r4, #2]
   10650:	80a0      	strh	r0, [r4, #4]
   10652:	80e1      	strh	r1, [r4, #6]
   10654:	2000      	movs	r0, #0
   10656:	bd10      	pop	{r4, pc}
   10658:	2001      	movs	r0, #1
   1065a:	bd10      	pop	{r4, pc}

0001065c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   1065c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   1065e:	460d      	mov	r5, r1
   10660:	4606      	mov	r6, r0
   10662:	f7fb fb69 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10666:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1066a:	b300      	cbz	r0, 106ae <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
   1066c:	8830      	ldrh	r0, [r6, #0]
   1066e:	4669      	mov	r1, sp
   10670:	f7fe fadc 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10674:	2800      	cmp	r0, #0
   10676:	d119      	bne.n	106ac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
   10678:	9c01      	ldr	r4, [sp, #4]
   1067a:	2700      	movs	r7, #0
   1067c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
   10680:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
   10684:	f000 fc46 	bl	10f14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   10688:	70a8      	strb	r0, [r5, #2]
   1068a:	7860      	ldrb	r0, [r4, #1]
   1068c:	f000 fc42 	bl	10f14 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
   10690:	70e8      	strb	r0, [r5, #3]
   10692:	78a0      	ldrb	r0, [r4, #2]
   10694:	f88d 0008 	strb.w	r0, [sp, #8]
   10698:	9802      	ldr	r0, [sp, #8]
   1069a:	9002      	str	r0, [sp, #8]
   1069c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   106a0:	3c6a      	subs	r4, #106	; 0x6a
   106a2:	2800      	cmp	r0, #0
   106a4:	d1ea      	bne.n	1067c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
   106a6:	8830      	ldrh	r0, [r6, #0]
   106a8:	8028      	strh	r0, [r5, #0]
   106aa:	2000      	movs	r0, #0
   106ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   106ae:	2001      	movs	r0, #1
   106b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000106b2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
   106b2:	2108      	movs	r1, #8
   106b4:	7001      	strb	r1, [r0, #0]
   106b6:	2000      	movs	r0, #0
   106b8:	4770      	bx	lr

000106ba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   106ba:	b510      	push	{r4, lr}
   106bc:	4604      	mov	r4, r0
   106be:	20d8      	movs	r0, #216	; 0xd8
   106c0:	7020      	strb	r0, [r4, #0]
   106c2:	f000 fd6c 	bl	1119e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   106c6:	7060      	strb	r0, [r4, #1]
   106c8:	2000      	movs	r0, #0
   106ca:	bd10      	pop	{r4, pc}

000106cc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   106cc:	2108      	movs	r1, #8
   106ce:	7001      	strb	r1, [r0, #0]
   106d0:	2000      	movs	r0, #0
   106d2:	4770      	bx	lr

000106d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
   106d4:	b510      	push	{r4, lr}
   106d6:	4604      	mov	r4, r0
   106d8:	7800      	ldrb	r0, [r0, #0]
   106da:	b108      	cbz	r0, 106e0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
   106dc:	2801      	cmp	r0, #1
   106de:	d110      	bne.n	10702 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   106e0:	f000 fdb0 	bl	11244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   106e4:	b120      	cbz	r0, 106f0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   106e6:	f7f6 fd1f 	bl	7128 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   106ea:	b108      	cbz	r0, 106f0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
   106ec:	200c      	movs	r0, #12
   106ee:	bd10      	pop	{r4, pc}
   106f0:	7820      	ldrb	r0, [r4, #0]
   106f2:	f7ff fea4 	bl	1043e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   106f6:	1c61      	adds	r1, r4, #1
   106f8:	f7fe fa60 	bl	ebbc <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
   106fc:	b108      	cbz	r0, 10702 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
   106fe:	2000      	movs	r0, #0
   10700:	bd10      	pop	{r4, pc}
   10702:	2012      	movs	r0, #18
   10704:	bd10      	pop	{r4, pc}

00010706 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   10706:	b510      	push	{r4, lr}
   10708:	4604      	mov	r4, r0
   1070a:	f000 fe04 	bl	11316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
   1070e:	b108      	cbz	r0, 10714 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   10710:	200c      	movs	r0, #12
   10712:	bd10      	pop	{r4, pc}
   10714:	7820      	ldrb	r0, [r4, #0]
   10716:	b108      	cbz	r0, 1071c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   10718:	2801      	cmp	r0, #1
   1071a:	d107      	bne.n	1072c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   1071c:	f7ff fe8f 	bl	1043e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   10720:	1c61      	adds	r1, r4, #1
   10722:	f7fe fa5a 	bl	ebda <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
   10726:	b108      	cbz	r0, 1072c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   10728:	2000      	movs	r0, #0
   1072a:	bd10      	pop	{r4, pc}
   1072c:	2012      	movs	r0, #18
   1072e:	bd10      	pop	{r4, pc}

00010730 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
   10730:	b510      	push	{r4, lr}
   10732:	4604      	mov	r4, r0
   10734:	f000 fd86 	bl	11244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   10738:	b108      	cbz	r0, 1073e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
   1073a:	200c      	movs	r0, #12
   1073c:	bd10      	pop	{r4, pc}
   1073e:	7820      	ldrb	r0, [r4, #0]
   10740:	f000 0001 	and.w	r0, r0, #1
   10744:	f7f6 fcea 	bl	711c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
   10748:	2000      	movs	r0, #0
   1074a:	bd10      	pop	{r4, pc}

0001074c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   1074c:	b51c      	push	{r2, r3, r4, lr}
   1074e:	4604      	mov	r4, r0
   10750:	f000 fd61 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   10754:	2000      	movs	r0, #0
   10756:	f88d 0002 	strb.w	r0, [sp, #2]
   1075a:	2103      	movs	r1, #3
   1075c:	f88d 1001 	strb.w	r1, [sp, #1]
   10760:	f814 1b01 	ldrb.w	r1, [r4], #1
   10764:	f88d 1003 	strb.w	r1, [sp, #3]
   10768:	f88d 0000 	strb.w	r0, [sp]
   1076c:	4668      	mov	r0, sp
   1076e:	9401      	str	r4, [sp, #4]
   10770:	f000 f9f8 	bl	10b64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   10774:	bd1c      	pop	{r2, r3, r4, pc}

00010776 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   10776:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10778:	4605      	mov	r5, r0
   1077a:	f000 fd4c 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   1077e:	4606      	mov	r6, r0
   10780:	7828      	ldrb	r0, [r5, #0]
   10782:	2400      	movs	r4, #0
   10784:	b160      	cbz	r0, 107a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10786:	f88d 4000 	strb.w	r4, [sp]
   1078a:	2001      	movs	r0, #1
   1078c:	f10d 0101 	add.w	r1, sp, #1
   10790:	f7f5 fe98 	bl	64c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10794:	b120      	cbz	r0, 107a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   10796:	4668      	mov	r0, sp
   10798:	f000 f897 	bl	108ca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   1079c:	2800      	cmp	r0, #0
   1079e:	d112      	bne.n	107c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   107a0:	f88d 400c 	strb.w	r4, [sp, #12]
   107a4:	4630      	mov	r0, r6
   107a6:	f7ff f859 	bl	f85c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   107aa:	b118      	cbz	r0, 107b4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   107ac:	2080      	movs	r0, #128	; 0x80
   107ae:	f8ad 000d 	strh.w	r0, [sp, #13]
   107b2:	e001      	b.n	107b8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   107b4:	f8ad 400d 	strh.w	r4, [sp, #13]
   107b8:	f88d 400f 	strb.w	r4, [sp, #15]
   107bc:	7828      	ldrb	r0, [r5, #0]
   107be:	2801      	cmp	r0, #1
   107c0:	d003      	beq.n	107ca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   107c2:	b138      	cbz	r0, 107d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   107c4:	2012      	movs	r0, #18
   107c6:	b004      	add	sp, #16
   107c8:	bd70      	pop	{r4, r5, r6, pc}
   107ca:	a903      	add	r1, sp, #12
   107cc:	4630      	mov	r0, r6
   107ce:	f7fb f8b3 	bl	b938 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   107d2:	e7f8      	b.n	107c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   107d4:	4630      	mov	r0, r6
   107d6:	f000 fd3c 	bl	11252 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   107da:	e7f4      	b.n	107c6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

000107dc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   107dc:	b530      	push	{r4, r5, lr}
   107de:	b08b      	sub	sp, #44	; 0x2c
   107e0:	4604      	mov	r4, r0
   107e2:	f000 fd18 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   107e6:	4602      	mov	r2, r0
   107e8:	7920      	ldrb	r0, [r4, #4]
   107ea:	2804      	cmp	r0, #4
   107ec:	d803      	bhi.n	107f6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   107ee:	8860      	ldrh	r0, [r4, #2]
   107f0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   107f4:	d902      	bls.n	107fc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   107f6:	2012      	movs	r0, #18
   107f8:	b00b      	add	sp, #44	; 0x2c
   107fa:	bd30      	pop	{r4, r5, pc}
   107fc:	2500      	movs	r5, #0
   107fe:	f88d 5004 	strb.w	r5, [sp, #4]
   10802:	7921      	ldrb	r1, [r4, #4]
   10804:	9500      	str	r5, [sp, #0]
   10806:	f89d 0000 	ldrb.w	r0, [sp]
   1080a:	2905      	cmp	r1, #5
   1080c:	f040 0010 	orr.w	r0, r0, #16
   10810:	f88d 0000 	strb.w	r0, [sp]
   10814:	d254      	bcs.n	108c0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   10816:	e8df f001 	tbb	[pc, r1]
   1081a:	0803      	.short	0x0803
   1081c:	000b1105 	.word	0x000b1105
   10820:	f040 0001 	orr.w	r0, r0, #1
   10824:	f040 0002 	orr.w	r0, r0, #2
   10828:	e006      	b.n	10838 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   1082a:	f040 0009 	orr.w	r0, r0, #9
   1082e:	e001      	b.n	10834 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   10830:	f040 0001 	orr.w	r0, r0, #1
   10834:	f040 0004 	orr.w	r0, r0, #4
   10838:	f88d 0000 	strb.w	r0, [sp]
   1083c:	f8bd 0000 	ldrh.w	r0, [sp]
   10840:	9000      	str	r0, [sp, #0]
   10842:	f8bd 0000 	ldrh.w	r0, [sp]
   10846:	f8ad 0005 	strh.w	r0, [sp, #5]
   1084a:	8821      	ldrh	r1, [r4, #0]
   1084c:	f8dd 0006 	ldr.w	r0, [sp, #6]
   10850:	f361 201f 	bfi	r0, r1, #8, #24
   10854:	f8cd 0006 	str.w	r0, [sp, #6]
   10858:	8861      	ldrh	r1, [r4, #2]
   1085a:	f8dd 0009 	ldr.w	r0, [sp, #9]
   1085e:	f361 201f 	bfi	r0, r1, #8, #24
   10862:	f8cd 0009 	str.w	r0, [sp, #9]
   10866:	7b60      	ldrb	r0, [r4, #13]
   10868:	f88d 000d 	strb.w	r0, [sp, #13]
   1086c:	7960      	ldrb	r0, [r4, #5]
   1086e:	f88d 000e 	strb.w	r0, [sp, #14]
   10872:	79a0      	ldrb	r0, [r4, #6]
   10874:	f88d 000f 	strb.w	r0, [sp, #15]
   10878:	f8d4 0007 	ldr.w	r0, [r4, #7]
   1087c:	9004      	str	r0, [sp, #16]
   1087e:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   10882:	f8ad 0014 	strh.w	r0, [sp, #20]
   10886:	7ba0      	ldrb	r0, [r4, #14]
   10888:	f88d 0016 	strb.w	r0, [sp, #22]
   1088c:	207f      	movs	r0, #127	; 0x7f
   1088e:	f88d 0017 	strb.w	r0, [sp, #23]
   10892:	2001      	movs	r0, #1
   10894:	f88d 0018 	strb.w	r0, [sp, #24]
   10898:	f88d 5019 	strb.w	r5, [sp, #25]
   1089c:	f88d 001a 	strb.w	r0, [sp, #26]
   108a0:	f88d 501b 	strb.w	r5, [sp, #27]
   108a4:	4610      	mov	r0, r2
   108a6:	f7fe fff5 	bl	f894 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   108aa:	f88d 001c 	strb.w	r0, [sp, #28]
   108ae:	f88d 501d 	strb.w	r5, [sp, #29]
   108b2:	f88d 501e 	strb.w	r5, [sp, #30]
   108b6:	a909      	add	r1, sp, #36	; 0x24
   108b8:	a801      	add	r0, sp, #4
   108ba:	f000 f8de 	bl	10a7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   108be:	e79b      	b.n	107f8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   108c0:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
   108c4:	2039      	movs	r0, #57	; 0x39
   108c6:	f7f4 feff 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000108ca <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   108ca:	b570      	push	{r4, r5, r6, lr}
   108cc:	4604      	mov	r4, r0
   108ce:	7800      	ldrb	r0, [r0, #0]
   108d0:	2101      	movs	r1, #1
   108d2:	f7fd ff63 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   108d6:	0005      	movs	r5, r0
   108d8:	d007      	beq.n	108ea <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   108da:	f7ff f994 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   108de:	b160      	cbz	r0, 108fa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   108e0:	4628      	mov	r0, r5
   108e2:	f7fe ffc1 	bl	f868 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   108e6:	b110      	cbz	r0, 108ee <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   108e8:	e005      	b.n	108f6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   108ea:	2042      	movs	r0, #66	; 0x42
   108ec:	bd70      	pop	{r4, r5, r6, pc}
   108ee:	4628      	mov	r0, r5
   108f0:	f7fe ffb0 	bl	f854 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   108f4:	b108      	cbz	r0, 108fa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   108f6:	200c      	movs	r0, #12
   108f8:	bd70      	pop	{r4, r5, r6, pc}
   108fa:	1c61      	adds	r1, r4, #1
   108fc:	4628      	mov	r0, r5
   108fe:	f7fe ffc1 	bl	f884 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10902:	2000      	movs	r0, #0
   10904:	bd70      	pop	{r4, r5, r6, pc}

00010906 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10906:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10908:	460d      	mov	r5, r1
   1090a:	4604      	mov	r4, r0
   1090c:	f000 fc66 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10910:	b130      	cbz	r0, 10920 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   10912:	88a2      	ldrh	r2, [r4, #4]
   10914:	f244 2090 	movw	r0, #17040	; 0x4290
   10918:	4282      	cmp	r2, r0
   1091a:	d903      	bls.n	10924 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
   1091c:	2012      	movs	r0, #18
   1091e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10920:	2001      	movs	r0, #1
   10922:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10924:	f640 0048 	movw	r0, #2120	; 0x848
   10928:	4282      	cmp	r2, r0
   1092a:	d300      	bcc.n	1092e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
   1092c:	4602      	mov	r2, r0
   1092e:	8820      	ldrh	r0, [r4, #0]
   10930:	f8ad 0000 	strh.w	r0, [sp]
   10934:	8860      	ldrh	r0, [r4, #2]
   10936:	f8ad 0002 	strh.w	r0, [sp, #2]
   1093a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1093e:	8860      	ldrh	r0, [r4, #2]
   10940:	f8ad 0006 	strh.w	r0, [sp, #6]
   10944:	f8ad 2008 	strh.w	r2, [sp, #8]
   10948:	8820      	ldrh	r0, [r4, #0]
   1094a:	8028      	strh	r0, [r5, #0]
   1094c:	4668      	mov	r0, sp
   1094e:	f7fb f8c1 	bl	bad4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   10952:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010954 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10954:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10956:	4604      	mov	r4, r0
   10958:	f7fb f9ee 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1095c:	f3c0 2000 	ubfx	r0, r0, #8, #1
   10960:	b1b0      	cbz	r0, 10990 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   10962:	f10d 0007 	add.w	r0, sp, #7
   10966:	9000      	str	r0, [sp, #0]
   10968:	7922      	ldrb	r2, [r4, #4]
   1096a:	78e1      	ldrb	r1, [r4, #3]
   1096c:	78a0      	ldrb	r0, [r4, #2]
   1096e:	f10d 0306 	add.w	r3, sp, #6
   10972:	f000 fc94 	bl	1129e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
   10976:	2800      	cmp	r0, #0
   10978:	d109      	bne.n	1098e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1097a:	8820      	ldrh	r0, [r4, #0]
   1097c:	f8ad 0004 	strh.w	r0, [sp, #4]
   10980:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10984:	f8ad 0008 	strh.w	r0, [sp, #8]
   10988:	a801      	add	r0, sp, #4
   1098a:	f000 f9a6 	bl	10cda <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   1098e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10990:	2001      	movs	r0, #1
   10992:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010994 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   10994:	b510      	push	{r4, lr}
   10996:	4604      	mov	r4, r0
   10998:	f000 fc54 	bl	11244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   1099c:	b120      	cbz	r0, 109a8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   1099e:	f7f6 fbc3 	bl	7128 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   109a2:	b108      	cbz	r0, 109a8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   109a4:	200c      	movs	r0, #12
   109a6:	bd10      	pop	{r4, pc}
   109a8:	7820      	ldrb	r0, [r4, #0]
   109aa:	f7ff fd48 	bl	1043e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
   109ae:	79e2      	ldrb	r2, [r4, #7]
   109b0:	1c61      	adds	r1, r4, #1
   109b2:	f7f6 fb67 	bl	7084 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   109b6:	b108      	cbz	r0, 109bc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   109b8:	2000      	movs	r0, #0
   109ba:	bd10      	pop	{r4, pc}
   109bc:	2002      	movs	r0, #2
   109be:	bd10      	pop	{r4, pc}

000109c0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   109c0:	b510      	push	{r4, lr}
   109c2:	4604      	mov	r4, r0
   109c4:	2001      	movs	r0, #1
   109c6:	f000 fac8 	bl	10f5a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   109ca:	b128      	cbz	r0, 109d8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   109cc:	4621      	mov	r1, r4
   109ce:	2001      	movs	r0, #1
   109d0:	f7f5 fd90 	bl	64f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   109d4:	2000      	movs	r0, #0
   109d6:	bd10      	pop	{r4, pc}
   109d8:	200c      	movs	r0, #12
   109da:	bd10      	pop	{r4, pc}

000109dc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   109dc:	b510      	push	{r4, lr}
   109de:	8800      	ldrh	r0, [r0, #0]
   109e0:	f7f6 fc30 	bl	7244 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   109e4:	b108      	cbz	r0, 109ea <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   109e6:	2000      	movs	r0, #0
   109e8:	bd10      	pop	{r4, pc}
   109ea:	2030      	movs	r0, #48	; 0x30
   109ec:	bd10      	pop	{r4, pc}

000109ee <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   109ee:	b51c      	push	{r2, r3, r4, lr}
   109f0:	4604      	mov	r4, r0
   109f2:	f000 fc10 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   109f6:	2000      	movs	r0, #0
   109f8:	f88d 0000 	strb.w	r0, [sp]
   109fc:	f88d 0002 	strb.w	r0, [sp, #2]
   10a00:	2003      	movs	r0, #3
   10a02:	f88d 0001 	strb.w	r0, [sp, #1]
   10a06:	f814 0b01 	ldrb.w	r0, [r4], #1
   10a0a:	f88d 0003 	strb.w	r0, [sp, #3]
   10a0e:	4668      	mov	r0, sp
   10a10:	9401      	str	r4, [sp, #4]
   10a12:	f000 f910 	bl	10c36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10a16:	bd1c      	pop	{r2, r3, r4, pc}

00010a18 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   10a18:	b51c      	push	{r2, r3, r4, lr}
   10a1a:	4604      	mov	r4, r0
   10a1c:	f000 fbde 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10a20:	b178      	cbz	r0, 10a42 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   10a22:	8820      	ldrh	r0, [r4, #0]
   10a24:	f8ad 0000 	strh.w	r0, [sp]
   10a28:	8860      	ldrh	r0, [r4, #2]
   10a2a:	f8ad 0002 	strh.w	r0, [sp, #2]
   10a2e:	8820      	ldrh	r0, [r4, #0]
   10a30:	f8ad 0004 	strh.w	r0, [sp, #4]
   10a34:	8860      	ldrh	r0, [r4, #2]
   10a36:	f8ad 0006 	strh.w	r0, [sp, #6]
   10a3a:	4668      	mov	r0, sp
   10a3c:	f7fb f8ce 	bl	bbdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
   10a40:	bd1c      	pop	{r2, r3, r4, pc}
   10a42:	2001      	movs	r0, #1
   10a44:	bd1c      	pop	{r2, r3, r4, pc}

00010a46 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10a46:	b510      	push	{r4, lr}
   10a48:	f7f5 fd78 	bl	653c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   10a4c:	2000      	movs	r0, #0
   10a4e:	bd10      	pop	{r4, pc}

00010a50 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10a50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10a52:	460c      	mov	r4, r1
   10a54:	4605      	mov	r5, r0
   10a56:	f000 fbc1 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10a5a:	b160      	cbz	r0, 10a76 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   10a5c:	4669      	mov	r1, sp
   10a5e:	4628      	mov	r0, r5
   10a60:	f7fe f8e4 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10a64:	2800      	cmp	r0, #0
   10a66:	d105      	bne.n	10a74 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   10a68:	2100      	movs	r1, #0
   10a6a:	4622      	mov	r2, r4
   10a6c:	9801      	ldr	r0, [sp, #4]
   10a6e:	f000 fb40 	bl	110f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10a72:	2000      	movs	r0, #0
   10a74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10a76:	2001      	movs	r0, #1
   10a78:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010a7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   10a7a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10a7e:	460f      	mov	r7, r1
   10a80:	4605      	mov	r5, r0
   10a82:	7806      	ldrb	r6, [r0, #0]
   10a84:	f000 fac5 	bl	11012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   10a88:	2800      	cmp	r0, #0
   10a8a:	d10a      	bne.n	10aa2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10a8c:	4628      	mov	r0, r5
   10a8e:	f000 fa9a 	bl	10fc6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   10a92:	2800      	cmp	r0, #0
   10a94:	d105      	bne.n	10aa2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10a96:	2001      	movs	r0, #1
   10a98:	f7f5 f800 	bl	5a9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10a9c:	4286      	cmp	r6, r0
   10a9e:	d302      	bcc.n	10aa6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   10aa0:	2007      	movs	r0, #7
   10aa2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10aa6:	2101      	movs	r1, #1
   10aa8:	4630      	mov	r0, r6
   10aaa:	f7fd fe77 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10aae:	0004      	movs	r4, r0
   10ab0:	d004      	beq.n	10abc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   10ab2:	f7ff f8a8 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10ab6:	b150      	cbz	r0, 10ace <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   10ab8:	200c      	movs	r0, #12
   10aba:	e7f2      	b.n	10aa2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10abc:	2200      	movs	r2, #0
   10abe:	2101      	movs	r1, #1
   10ac0:	4630      	mov	r0, r6
   10ac2:	f7fd fe61 	bl	e788 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   10ac6:	0004      	movs	r4, r0
   10ac8:	d00f      	beq.n	10aea <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   10aca:	f7fe fe68 	bl	f79e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   10ace:	4620      	mov	r0, r4
   10ad0:	f7fe fece 	bl	f870 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   10ad4:	7038      	strb	r0, [r7, #0]
   10ad6:	74e8      	strb	r0, [r5, #19]
   10ad8:	4629      	mov	r1, r5
   10ada:	4620      	mov	r0, r4
   10adc:	f7f7 f9e8 	bl	7eb0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   10ae0:	4606      	mov	r6, r0
   10ae2:	7e68      	ldrb	r0, [r5, #25]
   10ae4:	b1d0      	cbz	r0, 10b1c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   10ae6:	b12e      	cbz	r6, 10af4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   10ae8:	e018      	b.n	10b1c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   10aea:	f241 212d 	movw	r1, #4653	; 0x122d
   10aee:	2039      	movs	r0, #57	; 0x39
   10af0:	f7f4 fdea 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10af4:	2200      	movs	r2, #0
   10af6:	4668      	mov	r0, sp
   10af8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10afa:	f7fd ff10 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10afe:	2200      	movs	r2, #0
   10b00:	2101      	movs	r1, #1
   10b02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10b04:	f7fd ff80 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10b08:	2204      	movs	r2, #4
   10b0a:	4668      	mov	r0, sp
   10b0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10b0e:	f7fd ff06 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10b12:	2200      	movs	r2, #0
   10b14:	4611      	mov	r1, r2
   10b16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10b18:	f7fd ff76 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10b1c:	4630      	mov	r0, r6
   10b1e:	e7c0      	b.n	10aa2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

00010b20 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10b20:	b510      	push	{r4, lr}
   10b22:	4604      	mov	r4, r0
   10b24:	2000      	movs	r0, #0
   10b26:	f000 fa18 	bl	10f5a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   10b2a:	b128      	cbz	r0, 10b38 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   10b2c:	4621      	mov	r1, r4
   10b2e:	2000      	movs	r0, #0
   10b30:	f7f5 fce0 	bl	64f4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10b34:	2000      	movs	r0, #0
   10b36:	bd10      	pop	{r4, pc}
   10b38:	200c      	movs	r0, #12
   10b3a:	bd10      	pop	{r4, pc}

00010b3c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   10b3c:	b510      	push	{r4, lr}
   10b3e:	7800      	ldrb	r0, [r0, #0]
   10b40:	f000 0001 	and.w	r0, r0, #1
   10b44:	f7f8 f8f0 	bl	8d28 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   10b48:	2000      	movs	r0, #0
   10b4a:	bd10      	pop	{r4, pc}

00010b4c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   10b4c:	b510      	push	{r4, lr}
   10b4e:	4604      	mov	r4, r0
   10b50:	f000 fb44 	bl	111dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10b54:	b120      	cbz	r0, 10b60 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   10b56:	4620      	mov	r0, r4
   10b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b5c:	f7fa bfba 	b.w	bad4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   10b60:	2001      	movs	r0, #1
   10b62:	bd10      	pop	{r4, pc}

00010b64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10b64:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10b68:	4606      	mov	r6, r0
   10b6a:	7845      	ldrb	r5, [r0, #1]
   10b6c:	7800      	ldrb	r0, [r0, #0]
   10b6e:	2101      	movs	r1, #1
   10b70:	f7fd fe14 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10b74:	0004      	movs	r4, r0
   10b76:	d01e      	beq.n	10bb6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10b78:	f7fe fe3d 	bl	f7f6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10b7c:	78f1      	ldrb	r1, [r6, #3]
   10b7e:	4281      	cmp	r1, r0
   10b80:	d800      	bhi.n	10b84 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10b82:	4608      	mov	r0, r1
   10b84:	4607      	mov	r7, r0
   10b86:	2d04      	cmp	r5, #4
   10b88:	d018      	beq.n	10bbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10b8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10b8c:	f7fd ff5f 	bl	ea4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10b90:	4438      	add	r0, r7
   10b92:	b281      	uxth	r1, r0
   10b94:	4620      	mov	r0, r4
   10b96:	2201      	movs	r2, #1
   10b98:	f000 f9f1 	bl	10f7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d10b      	bne.n	10bb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10ba0:	2d03      	cmp	r5, #3
   10ba2:	d000      	beq.n	10ba6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10ba4:	b1df      	cbz	r7, 10bde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10ba6:	4620      	mov	r0, r4
   10ba8:	f7fe fe5c 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10bac:	7871      	ldrb	r1, [r6, #1]
   10bae:	2903      	cmp	r1, #3
   10bb0:	d010      	beq.n	10bd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10bb2:	b9a0      	cbnz	r0, 10bde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10bb4:	e004      	b.n	10bc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10bb6:	2042      	movs	r0, #66	; 0x42
   10bb8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10bbc:	b97f      	cbnz	r7, 10bde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10bbe:	e7f2      	b.n	10ba6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10bc0:	2904      	cmp	r1, #4
   10bc2:	d107      	bne.n	10bd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10bc4:	4620      	mov	r0, r4
   10bc6:	f7ff f81e 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10bca:	b140      	cbz	r0, 10bde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10bcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10bce:	f7fd ff0d 	bl	e9ec <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10bd2:	b120      	cbz	r0, 10bde <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10bd4:	2d01      	cmp	r5, #1
   10bd6:	d004      	beq.n	10be2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10bd8:	2d03      	cmp	r5, #3
   10bda:	d002      	beq.n	10be2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10bdc:	e00e      	b.n	10bfc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10bde:	2012      	movs	r0, #18
   10be0:	e7ea      	b.n	10bb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10be2:	4620      	mov	r0, r4
   10be4:	f7fe fe3e 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10be8:	b108      	cbz	r0, 10bee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10bea:	2200      	movs	r2, #0
   10bec:	e002      	b.n	10bf4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10bee:	2d01      	cmp	r5, #1
   10bf0:	d013      	beq.n	10c1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10bf2:	2201      	movs	r2, #1
   10bf4:	4668      	mov	r0, sp
   10bf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10bf8:	f7fd fe91 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10bfc:	2d04      	cmp	r5, #4
   10bfe:	d018      	beq.n	10c32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10c00:	6872      	ldr	r2, [r6, #4]
   10c02:	463b      	mov	r3, r7
   10c04:	2101      	movs	r1, #1
   10c06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10c08:	f7fd febc 	bl	e984 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10c0c:	b138      	cbz	r0, 10c1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10c0e:	7870      	ldrb	r0, [r6, #1]
   10c10:	2802      	cmp	r0, #2
   10c12:	d006      	beq.n	10c22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10c14:	2803      	cmp	r0, #3
   10c16:	d004      	beq.n	10c22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10c18:	e00b      	b.n	10c32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10c1a:	2202      	movs	r2, #2
   10c1c:	e7ea      	b.n	10bf4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10c1e:	2007      	movs	r0, #7
   10c20:	e7ca      	b.n	10bb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10c22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10c24:	f7fd ff13 	bl	ea4e <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10c28:	4602      	mov	r2, r0
   10c2a:	2101      	movs	r1, #1
   10c2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10c2e:	f7fd feeb 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10c32:	2000      	movs	r0, #0
   10c34:	e7c0      	b.n	10bb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010c36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10c36:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10c3a:	4607      	mov	r7, r0
   10c3c:	7845      	ldrb	r5, [r0, #1]
   10c3e:	78c6      	ldrb	r6, [r0, #3]
   10c40:	7800      	ldrb	r0, [r0, #0]
   10c42:	2101      	movs	r1, #1
   10c44:	f7fd fdaa 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10c48:	0004      	movs	r4, r0
   10c4a:	d003      	beq.n	10c54 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10c4c:	f7fe fe0c 	bl	f868 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10c50:	b118      	cbz	r0, 10c5a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10c52:	e003      	b.n	10c5c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10c54:	2042      	movs	r0, #66	; 0x42
   10c56:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10c5a:	2600      	movs	r6, #0
   10c5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10c5e:	f7fd fefa 	bl	ea56 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10c62:	4430      	add	r0, r6
   10c64:	b281      	uxth	r1, r0
   10c66:	4688      	mov	r8, r1
   10c68:	4620      	mov	r0, r4
   10c6a:	2201      	movs	r2, #1
   10c6c:	f000 f987 	bl	10f7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10c70:	2800      	cmp	r0, #0
   10c72:	d1f0      	bne.n	10c56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10c74:	2d04      	cmp	r5, #4
   10c76:	d008      	beq.n	10c8a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10c78:	2d03      	cmp	r5, #3
   10c7a:	d00a      	beq.n	10c92 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10c7c:	b12e      	cbz	r6, 10c8a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10c7e:	4620      	mov	r0, r4
   10c80:	f7fe ffc1 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10c84:	b118      	cbz	r0, 10c8e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10c86:	200c      	movs	r0, #12
   10c88:	e7e5      	b.n	10c56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10c8a:	2012      	movs	r0, #18
   10c8c:	e7e3      	b.n	10c56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10c8e:	2d01      	cmp	r5, #1
   10c90:	d10c      	bne.n	10cac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10c92:	4620      	mov	r0, r4
   10c94:	f7fe fde6 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10c98:	b108      	cbz	r0, 10c9e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10c9a:	2204      	movs	r2, #4
   10c9c:	e002      	b.n	10ca4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10c9e:	2d01      	cmp	r5, #1
   10ca0:	d010      	beq.n	10cc4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10ca2:	2205      	movs	r2, #5
   10ca4:	4668      	mov	r0, sp
   10ca6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10ca8:	f7fd fe39 	bl	e91e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10cac:	687a      	ldr	r2, [r7, #4]
   10cae:	4633      	mov	r3, r6
   10cb0:	2100      	movs	r1, #0
   10cb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10cb4:	f7fd fe66 	bl	e984 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10cb8:	b130      	cbz	r0, 10cc8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10cba:	2d02      	cmp	r5, #2
   10cbc:	d006      	beq.n	10ccc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10cbe:	2d03      	cmp	r5, #3
   10cc0:	d004      	beq.n	10ccc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10cc2:	e008      	b.n	10cd6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10cc4:	2206      	movs	r2, #6
   10cc6:	e7ed      	b.n	10ca4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10cc8:	2007      	movs	r0, #7
   10cca:	e7c4      	b.n	10c56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10ccc:	4642      	mov	r2, r8
   10cce:	2100      	movs	r1, #0
   10cd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10cd2:	f7fd fe99 	bl	ea08 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10cd6:	2000      	movs	r0, #0
   10cd8:	e7bd      	b.n	10c56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010cda <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10cda:	b510      	push	{r4, lr}
   10cdc:	4604      	mov	r4, r0
   10cde:	8880      	ldrh	r0, [r0, #4]
   10ce0:	b128      	cbz	r0, 10cee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10ce2:	2801      	cmp	r0, #1
   10ce4:	d003      	beq.n	10cee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10ce6:	2802      	cmp	r0, #2
   10ce8:	d001      	beq.n	10cee <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10cea:	2012      	movs	r0, #18
   10cec:	bd10      	pop	{r4, pc}
   10cee:	78e0      	ldrb	r0, [r4, #3]
   10cf0:	f000 f9dc 	bl	110ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   10cf4:	b148      	cbz	r0, 10d0a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10cf6:	78a0      	ldrb	r0, [r4, #2]
   10cf8:	f000 f9d8 	bl	110ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   10cfc:	b128      	cbz	r0, 10d0a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10cfe:	4620      	mov	r0, r4
   10d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10d04:	2101      	movs	r1, #1
   10d06:	f000 b884 	b.w	10e12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10d0a:	2011      	movs	r0, #17
   10d0c:	bd10      	pop	{r4, pc}

00010d0e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10d0e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10d10:	460c      	mov	r4, r1
   10d12:	4605      	mov	r5, r0
   10d14:	8800      	ldrh	r0, [r0, #0]
   10d16:	4669      	mov	r1, sp
   10d18:	f7fd ff88 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10d1c:	2800      	cmp	r0, #0
   10d1e:	d106      	bne.n	10d2e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10d20:	9801      	ldr	r0, [sp, #4]
   10d22:	8829      	ldrh	r1, [r5, #0]
   10d24:	8021      	strh	r1, [r4, #0]
   10d26:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   10d2a:	8060      	strh	r0, [r4, #2]
   10d2c:	2000      	movs	r0, #0
   10d2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010d30 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10d30:	b510      	push	{r4, lr}
   10d32:	4604      	mov	r4, r0
   10d34:	4601      	mov	r1, r0
   10d36:	2000      	movs	r0, #0
   10d38:	f7f5 fbc4 	bl	64c4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10d3c:	b910      	cbnz	r0, 10d44 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10d3e:	2000      	movs	r0, #0
   10d40:	6020      	str	r0, [r4, #0]
   10d42:	80a0      	strh	r0, [r4, #4]
   10d44:	2000      	movs	r0, #0
   10d46:	bd10      	pop	{r4, pc}

00010d48 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   10d48:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10d4a:	8800      	ldrh	r0, [r0, #0]
   10d4c:	4669      	mov	r1, sp
   10d4e:	f7fd ff6d 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10d52:	b958      	cbnz	r0, 10d6c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10d54:	4668      	mov	r0, sp
   10d56:	f000 fa47 	bl	111e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
   10d5a:	b138      	cbz	r0, 10d6c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10d5c:	9c01      	ldr	r4, [sp, #4]
   10d5e:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   10d62:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
   10d66:	3470      	adds	r4, #112	; 0x70
   10d68:	b929      	cbnz	r1, 10d76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   10d6a:	e001      	b.n	10d70 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   10d6c:	2002      	movs	r0, #2
   10d6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10d74:	b109      	cbz	r1, 10d7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   10d76:	203a      	movs	r0, #58	; 0x3a
   10d78:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10d7a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   10d7e:	f04f 0501 	mov.w	r5, #1
   10d82:	0789      	lsls	r1, r1, #30
   10d84:	d103      	bne.n	10d8e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   10d86:	7005      	strb	r5, [r0, #0]
   10d88:	4668      	mov	r0, sp
   10d8a:	f7fe fae7 	bl	f35c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10d8e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   10d92:	2000      	movs	r0, #0
   10d94:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010d96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10d96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10d98:	460c      	mov	r4, r1
   10d9a:	4605      	mov	r5, r0
   10d9c:	8800      	ldrh	r0, [r0, #0]
   10d9e:	4669      	mov	r1, sp
   10da0:	f7fd ff44 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10da4:	b108      	cbz	r0, 10daa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10da6:	2002      	movs	r0, #2
   10da8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10daa:	78a8      	ldrb	r0, [r5, #2]
   10dac:	b130      	cbz	r0, 10dbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10dae:	f000 f9f6 	bl	1119e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   10db2:	70a0      	strb	r0, [r4, #2]
   10db4:	8828      	ldrh	r0, [r5, #0]
   10db6:	8020      	strh	r0, [r4, #0]
   10db8:	2000      	movs	r0, #0
   10dba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10dbc:	9801      	ldr	r0, [sp, #4]
   10dbe:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   10dc2:	e7f6      	b.n	10db2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010dc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10dc4:	b510      	push	{r4, lr}
   10dc6:	f7fa ff43 	bl	bc50 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10dca:	2000      	movs	r0, #0
   10dcc:	bd10      	pop	{r4, pc}

00010dce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10dce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10dd2:	4604      	mov	r4, r0
   10dd4:	8840      	ldrh	r0, [r0, #2]
   10dd6:	460d      	mov	r5, r1
   10dd8:	b1b8      	cbz	r0, 10e0a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10dda:	8820      	ldrh	r0, [r4, #0]
   10ddc:	4669      	mov	r1, sp
   10dde:	f7fd ff25 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10de2:	2800      	cmp	r0, #0
   10de4:	d10f      	bne.n	10e06 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10de6:	8820      	ldrh	r0, [r4, #0]
   10de8:	8028      	strh	r0, [r5, #0]
   10dea:	9e01      	ldr	r6, [sp, #4]
   10dec:	f106 050c 	add.w	r5, r6, #12
   10df0:	3670      	adds	r6, #112	; 0x70
   10df2:	682f      	ldr	r7, [r5, #0]
   10df4:	8862      	ldrh	r2, [r4, #2]
   10df6:	4639      	mov	r1, r7
   10df8:	4630      	mov	r0, r6
   10dfa:	f7fe f858 	bl	eeae <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10dfe:	6828      	ldr	r0, [r5, #0]
   10e00:	42b8      	cmp	r0, r7
   10e02:	d1f6      	bne.n	10df2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10e04:	2000      	movs	r0, #0
   10e06:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10e0a:	2012      	movs	r0, #18
   10e0c:	e7fb      	b.n	10e06 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010e0e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10e0e:	f7fa bcf7 	b.w	b800 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010e12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e16:	b086      	sub	sp, #24
   10e18:	468a      	mov	sl, r1
   10e1a:	4606      	mov	r6, r0
   10e1c:	8800      	ldrh	r0, [r0, #0]
   10e1e:	a901      	add	r1, sp, #4
   10e20:	f7fd ff04 	bl	ec2c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10e24:	2800      	cmp	r0, #0
   10e26:	d138      	bne.n	10e9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   10e28:	9802      	ldr	r0, [sp, #8]
   10e2a:	f04f 0800 	mov.w	r8, #0
   10e2e:	4601      	mov	r1, r0
   10e30:	4689      	mov	r9, r1
   10e32:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
   10e36:	f88d 1000 	strb.w	r1, [sp]
   10e3a:	9900      	ldr	r1, [sp, #0]
   10e3c:	9100      	str	r1, [sp, #0]
   10e3e:	f89d 5000 	ldrb.w	r5, [sp]
   10e42:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
   10e46:	3070      	adds	r0, #112	; 0x70
   10e48:	2921      	cmp	r1, #33	; 0x21
   10e4a:	d100      	bne.n	10e4e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
   10e4c:	b13d      	cbz	r5, 10e5e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   10e4e:	2400      	movs	r4, #0
   10e50:	304c      	adds	r0, #76	; 0x4c
   10e52:	2108      	movs	r1, #8
   10e54:	4607      	mov	r7, r0
   10e56:	f7ff fae8 	bl	1042a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10e5a:	b110      	cbz	r0, 10e62 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
   10e5c:	e007      	b.n	10e6e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   10e5e:	2401      	movs	r4, #1
   10e60:	e7f6      	b.n	10e50 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
   10e62:	210b      	movs	r1, #11
   10e64:	4638      	mov	r0, r7
   10e66:	f7ff fae0 	bl	1042a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10e6a:	b900      	cbnz	r0, 10e6e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   10e6c:	b1a4      	cbz	r4, 10e98 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
   10e6e:	a804      	add	r0, sp, #16
   10e70:	9000      	str	r0, [sp, #0]
   10e72:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10e76:	ab03      	add	r3, sp, #12
   10e78:	4632      	mov	r2, r6
   10e7a:	4649      	mov	r1, r9
   10e7c:	f000 f96f 	bl	1115e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   10e80:	0007      	movs	r7, r0
   10e82:	d10a      	bne.n	10e9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   10e84:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10e88:	9c02      	ldr	r4, [sp, #8]
   10e8a:	b148      	cbz	r0, 10ea0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10e8c:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
   10e90:	2001      	movs	r0, #1
   10e92:	7060      	strb	r0, [r4, #1]
   10e94:	b94d      	cbnz	r5, 10eaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   10e96:	e006      	b.n	10ea6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10e98:	201a      	movs	r0, #26
   10e9a:	b006      	add	sp, #24
   10e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ea0:	f504 7497 	add.w	r4, r4, #302	; 0x12e
   10ea4:	e7f4      	b.n	10e90 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
   10ea6:	7820      	ldrb	r0, [r4, #0]
   10ea8:	b108      	cbz	r0, 10eae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   10eaa:	273a      	movs	r7, #58	; 0x3a
   10eac:	e012      	b.n	10ed4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   10eae:	f884 a000 	strb.w	sl, [r4]
   10eb2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10eb6:	70a0      	strb	r0, [r4, #2]
   10eb8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10ebc:	70e1      	strb	r1, [r4, #3]
   10ebe:	f88d 0000 	strb.w	r0, [sp]
   10ec2:	f88d 1001 	strb.w	r1, [sp, #1]
   10ec6:	88b0      	ldrh	r0, [r6, #4]
   10ec8:	f8ad 0002 	strh.w	r0, [sp, #2]
   10ecc:	4669      	mov	r1, sp
   10ece:	4648      	mov	r0, r9
   10ed0:	f7fd ff6b 	bl	edaa <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10ed4:	f884 8001 	strb.w	r8, [r4, #1]
   10ed8:	4638      	mov	r0, r7
   10eda:	e7de      	b.n	10e9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

00010edc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10edc:	b510      	push	{r4, lr}
   10ede:	2008      	movs	r0, #8
   10ee0:	f7fa ff20 	bl	bd24 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   10ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ee8:	f7f8 bc98 	b.w	981c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10eec:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10ef0:	4288      	cmp	r0, r1
   10ef2:	d303      	bcc.n	10efc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   10ef4:	f640 0148 	movw	r1, #2120	; 0x848
   10ef8:	4288      	cmp	r0, r1
   10efa:	d300      	bcc.n	10efe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   10efc:	4608      	mov	r0, r1
   10efe:	4770      	bx	lr
   10f00:	07c1      	lsls	r1, r0, #31
   10f02:	d001      	beq.n	10f08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   10f04:	2001      	movs	r0, #1
   10f06:	4770      	bx	lr
   10f08:	0780      	lsls	r0, r0, #30
   10f0a:	d501      	bpl.n	10f10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   10f0c:	2002      	movs	r0, #2
   10f0e:	4770      	bx	lr
   10f10:	2000      	movs	r0, #0
   10f12:	4770      	bx	lr
   10f14:	b510      	push	{r4, lr}
   10f16:	2801      	cmp	r0, #1
   10f18:	d006      	beq.n	10f28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10f1a:	2802      	cmp	r0, #2
   10f1c:	d004      	beq.n	10f28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10f1e:	f240 2163 	movw	r1, #611	; 0x263
   10f22:	2006      	movs	r0, #6
   10f24:	f7f4 fbd0 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f28:	bd10      	pop	{r4, pc}
   10f2a:	b50e      	push	{r1, r2, r3, lr}
   10f2c:	4669      	mov	r1, sp
   10f2e:	2001      	movs	r0, #1
   10f30:	f7fd fc3e 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10f34:	b150      	cbz	r0, 10f4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10f36:	f240 114f 	movw	r1, #335	; 0x14f
   10f3a:	2039      	movs	r0, #57	; 0x39
   10f3c:	f7f4 fbc4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10f40:	9802      	ldr	r0, [sp, #8]
   10f42:	f7fe fe60 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10f46:	b108      	cbz	r0, 10f4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10f48:	2001      	movs	r0, #1
   10f4a:	bd0e      	pop	{r1, r2, r3, pc}
   10f4c:	4668      	mov	r0, sp
   10f4e:	f7f4 fdf3 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10f52:	2800      	cmp	r0, #0
   10f54:	d0f4      	beq.n	10f40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   10f56:	2000      	movs	r0, #0
   10f58:	bd0e      	pop	{r1, r2, r3, pc}
   10f5a:	b510      	push	{r4, lr}
   10f5c:	f7ff ffe5 	bl	10f2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   10f60:	b158      	cbz	r0, 10f7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10f62:	f000 f958 	bl	11216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   10f66:	4604      	mov	r4, r0
   10f68:	f7fe fc7e 	bl	f868 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10f6c:	b918      	cbnz	r0, 10f76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   10f6e:	4620      	mov	r0, r4
   10f70:	f7fe fc70 	bl	f854 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10f74:	b108      	cbz	r0, 10f7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10f76:	2000      	movs	r0, #0
   10f78:	bd10      	pop	{r4, pc}
   10f7a:	2001      	movs	r0, #1
   10f7c:	bd10      	pop	{r4, pc}
   10f7e:	b570      	push	{r4, r5, r6, lr}
   10f80:	460c      	mov	r4, r1
   10f82:	4605      	mov	r5, r0
   10f84:	b112      	cbz	r2, 10f8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   10f86:	291f      	cmp	r1, #31
   10f88:	d80c      	bhi.n	10fa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10f8a:	e016      	b.n	10fba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10f8c:	f7f5 f89a 	bl	60c4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10f90:	42a0      	cmp	r0, r4
   10f92:	d201      	bcs.n	10f98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   10f94:	2007      	movs	r0, #7
   10f96:	bd70      	pop	{r4, r5, r6, pc}
   10f98:	4628      	mov	r0, r5
   10f9a:	f7fe fc63 	bl	f864 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10f9e:	b118      	cbz	r0, 10fa8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10fa0:	2c1f      	cmp	r4, #31
   10fa2:	d901      	bls.n	10fa8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10fa4:	2012      	movs	r0, #18
   10fa6:	bd70      	pop	{r4, r5, r6, pc}
   10fa8:	4628      	mov	r0, r5
   10faa:	f7fe fc64 	bl	f876 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10fae:	b130      	cbz	r0, 10fbe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   10fb0:	4621      	mov	r1, r4
   10fb2:	4628      	mov	r0, r5
   10fb4:	f7fe fc2b 	bl	f80e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10fb8:	b118      	cbz	r0, 10fc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   10fba:	2000      	movs	r0, #0
   10fbc:	bd70      	pop	{r4, r5, r6, pc}
   10fbe:	2042      	movs	r0, #66	; 0x42
   10fc0:	bd70      	pop	{r4, r5, r6, pc}
   10fc2:	2045      	movs	r0, #69	; 0x45
   10fc4:	bd70      	pop	{r4, r5, r6, pc}
   10fc6:	b510      	push	{r4, lr}
   10fc8:	4604      	mov	r4, r0
   10fca:	7840      	ldrb	r0, [r0, #1]
   10fcc:	06c1      	lsls	r1, r0, #27
   10fce:	d51c      	bpl.n	1100a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10fd0:	07c0      	lsls	r0, r0, #31
   10fd2:	d00b      	beq.n	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10fd4:	f7fa fe7a 	bl	bccc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10fd8:	b1b8      	cbz	r0, 1100a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10fda:	7860      	ldrb	r0, [r4, #1]
   10fdc:	06c1      	lsls	r1, r0, #27
   10fde:	d405      	bmi.n	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10fe0:	0700      	lsls	r0, r0, #28
   10fe2:	d503      	bpl.n	10fec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10fe4:	7d20      	ldrb	r0, [r4, #20]
   10fe6:	2802      	cmp	r0, #2
   10fe8:	d10f      	bne.n	1100a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10fea:	e010      	b.n	1100e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10fec:	7d20      	ldrb	r0, [r4, #20]
   10fee:	2802      	cmp	r0, #2
   10ff0:	d001      	beq.n	10ff6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   10ff2:	7ea0      	ldrb	r0, [r4, #26]
   10ff4:	b948      	cbnz	r0, 1100a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10ff6:	7860      	ldrb	r0, [r4, #1]
   10ff8:	0700      	lsls	r0, r0, #28
   10ffa:	d408      	bmi.n	1100e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10ffc:	f8d4 0005 	ldr.w	r0, [r4, #5]
   11000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   11004:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   11008:	d201      	bcs.n	1100e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   1100a:	2011      	movs	r0, #17
   1100c:	bd10      	pop	{r4, pc}
   1100e:	2000      	movs	r0, #0
   11010:	bd10      	pop	{r4, pc}
   11012:	b538      	push	{r3, r4, r5, lr}
   11014:	4604      	mov	r4, r0
   11016:	7800      	ldrb	r0, [r0, #0]
   11018:	28ef      	cmp	r0, #239	; 0xef
   1101a:	d843      	bhi.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1101c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   11020:	f8ad 0000 	strh.w	r0, [sp]
   11024:	9800      	ldr	r0, [sp, #0]
   11026:	f000 f951 	bl	112cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
   1102a:	b3a0      	cbz	r0, 11096 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1102c:	7861      	ldrb	r1, [r4, #1]
   1102e:	0708      	lsls	r0, r1, #28
   11030:	d40b      	bmi.n	1104a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   11032:	f8d4 0002 	ldr.w	r0, [r4, #2]
   11036:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1103a:	0a02      	lsrs	r2, r0, #8
   1103c:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   11040:	d830      	bhi.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11042:	2220      	movs	r2, #32
   11044:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   11048:	d82c      	bhi.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1104a:	7a60      	ldrb	r0, [r4, #9]
   1104c:	b318      	cbz	r0, 11096 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   1104e:	2807      	cmp	r0, #7
   11050:	d828      	bhi.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11052:	7aa0      	ldrb	r0, [r4, #10]
   11054:	b128      	cbz	r0, 11062 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   11056:	2801      	cmp	r0, #1
   11058:	d003      	beq.n	11062 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1105a:	2802      	cmp	r0, #2
   1105c:	d001      	beq.n	11062 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1105e:	2803      	cmp	r0, #3
   11060:	d120      	bne.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11062:	074a      	lsls	r2, r1, #29
   11064:	d403      	bmi.n	1106e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   11066:	2802      	cmp	r0, #2
   11068:	d001      	beq.n	1106e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1106a:	2803      	cmp	r0, #3
   1106c:	d105      	bne.n	1107a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   1106e:	7ae0      	ldrb	r0, [r4, #11]
   11070:	b108      	cbz	r0, 11076 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   11072:	2801      	cmp	r0, #1
   11074:	d116      	bne.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11076:	0748      	lsls	r0, r1, #29
   11078:	d407      	bmi.n	1108a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1107a:	7ca0      	ldrb	r0, [r4, #18]
   1107c:	b128      	cbz	r0, 1108a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1107e:	2801      	cmp	r0, #1
   11080:	d003      	beq.n	1108a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   11082:	2802      	cmp	r0, #2
   11084:	d001      	beq.n	1108a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   11086:	2803      	cmp	r0, #3
   11088:	d10c      	bne.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1108a:	06c8      	lsls	r0, r1, #27
   1108c:	7d20      	ldrb	r0, [r4, #20]
   1108e:	d503      	bpl.n	11098 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   11090:	2801      	cmp	r0, #1
   11092:	d107      	bne.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11094:	e002      	b.n	1109c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   11096:	e005      	b.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   11098:	2802      	cmp	r0, #2
   1109a:	d003      	beq.n	110a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1109c:	7e20      	ldrb	r0, [r4, #24]
   1109e:	b118      	cbz	r0, 110a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   110a0:	2801      	cmp	r0, #1
   110a2:	d001      	beq.n	110a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   110a4:	2012      	movs	r0, #18
   110a6:	bd38      	pop	{r3, r4, r5, pc}
   110a8:	2000      	movs	r0, #0
   110aa:	bd38      	pop	{r3, r4, r5, pc}
   110ac:	b510      	push	{r4, lr}
   110ae:	0004      	movs	r4, r0
   110b0:	d005      	beq.n	110be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   110b2:	f7fa fe47 	bl	bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   110b6:	4384      	bics	r4, r0
   110b8:	d001      	beq.n	110be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   110ba:	2000      	movs	r0, #0
   110bc:	bd10      	pop	{r4, pc}
   110be:	2001      	movs	r0, #1
   110c0:	bd10      	pop	{r4, pc}
   110c2:	28fb      	cmp	r0, #251	; 0xfb
   110c4:	d803      	bhi.n	110ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   110c6:	f640 0048 	movw	r0, #2120	; 0x848
   110ca:	4281      	cmp	r1, r0
   110cc:	d901      	bls.n	110d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   110ce:	2011      	movs	r0, #17
   110d0:	4770      	bx	lr
   110d2:	2000      	movs	r0, #0
   110d4:	4770      	bx	lr
   110d6:	381b      	subs	r0, #27
   110d8:	28e1      	cmp	r0, #225	; 0xe1
   110da:	d206      	bcs.n	110ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   110dc:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   110e0:	d303      	bcc.n	110ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   110e2:	f244 2090 	movw	r0, #17040	; 0x4290
   110e6:	4281      	cmp	r1, r0
   110e8:	d901      	bls.n	110ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   110ea:	2012      	movs	r0, #18
   110ec:	4770      	bx	lr
   110ee:	2000      	movs	r0, #0
   110f0:	4770      	bx	lr
   110f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110f6:	4606      	mov	r6, r0
   110f8:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   110fc:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   11100:	4615      	mov	r5, r2
   11102:	302c      	adds	r0, #44	; 0x2c
   11104:	f7f7 fe16 	bl	8d34 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   11108:	4680      	mov	r8, r0
   1110a:	2102      	movs	r1, #2
   1110c:	f7fd fe1e 	bl	ed4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11110:	4287      	cmp	r7, r0
   11112:	d200      	bcs.n	11116 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   11114:	4638      	mov	r0, r7
   11116:	4607      	mov	r7, r0
   11118:	2102      	movs	r1, #2
   1111a:	4640      	mov	r0, r8
   1111c:	f7fd fe16 	bl	ed4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   11120:	4284      	cmp	r4, r0
   11122:	d200      	bcs.n	11126 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   11124:	4620      	mov	r0, r4
   11126:	8831      	ldrh	r1, [r6, #0]
   11128:	8029      	strh	r1, [r5, #0]
   1112a:	2f1b      	cmp	r7, #27
   1112c:	d913      	bls.n	11156 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   1112e:	2ffb      	cmp	r7, #251	; 0xfb
   11130:	d300      	bcc.n	11134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   11132:	27fb      	movs	r7, #251	; 0xfb
   11134:	806f      	strh	r7, [r5, #2]
   11136:	281b      	cmp	r0, #27
   11138:	d90f      	bls.n	1115a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   1113a:	28fb      	cmp	r0, #251	; 0xfb
   1113c:	d300      	bcc.n	11140 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1113e:	20fb      	movs	r0, #251	; 0xfb
   11140:	80e8      	strh	r0, [r5, #6]
   11142:	4640      	mov	r0, r8
   11144:	f7ff fed2 	bl	10eec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   11148:	80a8      	strh	r0, [r5, #4]
   1114a:	4640      	mov	r0, r8
   1114c:	f7ff fece 	bl	10eec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   11150:	8128      	strh	r0, [r5, #8]
   11152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11156:	271b      	movs	r7, #27
   11158:	e7ec      	b.n	11134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1115a:	201b      	movs	r0, #27
   1115c:	e7f0      	b.n	11140 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1115e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11162:	7890      	ldrb	r0, [r2, #2]
   11164:	9e06      	ldr	r6, [sp, #24]
   11166:	461d      	mov	r5, r3
   11168:	4614      	mov	r4, r2
   1116a:	b908      	cbnz	r0, 11170 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   1116c:	f7fa fdea 	bl	bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   11170:	78e4      	ldrb	r4, [r4, #3]
   11172:	4607      	mov	r7, r0
   11174:	b914      	cbnz	r4, 1117c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   11176:	f7fa fde5 	bl	bd44 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1117a:	4604      	mov	r4, r0
   1117c:	b16f      	cbz	r7, 1119a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1117e:	b164      	cbz	r4, 1119a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   11180:	4638      	mov	r0, r7
   11182:	f7ff febd 	bl	10f00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   11186:	4620      	mov	r0, r4
   11188:	f7ff feba 	bl	10f00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1118c:	b12f      	cbz	r7, 1119a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1118e:	b124      	cbz	r4, 1119a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   11190:	702f      	strb	r7, [r5, #0]
   11192:	7034      	strb	r4, [r6, #0]
   11194:	2000      	movs	r0, #0
   11196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1119a:	2009      	movs	r0, #9
   1119c:	e7fb      	b.n	11196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   1119e:	b510      	push	{r4, lr}
   111a0:	f7fc faa5 	bl	d6ee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   111a4:	b928      	cbnz	r0, 111b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   111a6:	f7fc fad8 	bl	d75a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   111aa:	b910      	cbnz	r0, 111b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   111ac:	f7fc fadf 	bl	d76e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   111b0:	b108      	cbz	r0, 111b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   111b2:	2008      	movs	r0, #8
   111b4:	bd10      	pop	{r4, pc}
   111b6:	f7fc fa6f 	bl	d698 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   111ba:	b940      	cbnz	r0, 111ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   111bc:	f7fc fa76 	bl	d6ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   111c0:	b928      	cbnz	r0, 111ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   111c2:	f7fc fa8a 	bl	d6da <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   111c6:	b910      	cbnz	r0, 111ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   111c8:	f7fc fa9b 	bl	d702 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   111cc:	b108      	cbz	r0, 111d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   111ce:	2004      	movs	r0, #4
   111d0:	bd10      	pop	{r4, pc}
   111d2:	f240 519c 	movw	r1, #1436	; 0x59c
   111d6:	2039      	movs	r0, #57	; 0x39
   111d8:	f7f4 fa76 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   111dc:	b510      	push	{r4, lr}
   111de:	f7fa fdab 	bl	bd38 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   111e2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   111e6:	bd10      	pop	{r4, pc}
   111e8:	6840      	ldr	r0, [r0, #4]
   111ea:	f000 b800 	b.w	111ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   111ee:	b508      	push	{r3, lr}
   111f0:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   111f4:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   111f8:	f88d 0000 	strb.w	r0, [sp]
   111fc:	9800      	ldr	r0, [sp, #0]
   111fe:	9000      	str	r0, [sp, #0]
   11200:	f89d 0000 	ldrb.w	r0, [sp]
   11204:	1e40      	subs	r0, r0, #1
   11206:	4208      	tst	r0, r1
   11208:	d003      	beq.n	11212 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1120a:	2904      	cmp	r1, #4
   1120c:	d001      	beq.n	11212 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   1120e:	2001      	movs	r0, #1
   11210:	bd08      	pop	{r3, pc}
   11212:	2000      	movs	r0, #0
   11214:	bd08      	pop	{r3, pc}
   11216:	b510      	push	{r4, lr}
   11218:	2101      	movs	r1, #1
   1121a:	2000      	movs	r0, #0
   1121c:	f7fd fabe 	bl	e79c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   11220:	0004      	movs	r4, r0
   11222:	d108      	bne.n	11236 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
   11224:	2200      	movs	r2, #0
   11226:	2101      	movs	r1, #1
   11228:	4610      	mov	r0, r2
   1122a:	f7fd faad 	bl	e788 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1122e:	0004      	movs	r4, r0
   11230:	d003      	beq.n	1123a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
   11232:	f7fe fab4 	bl	f79e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   11236:	4620      	mov	r0, r4
   11238:	bd10      	pop	{r4, pc}
   1123a:	f240 2135 	movw	r1, #565	; 0x235
   1123e:	2039      	movs	r0, #57	; 0x39
   11240:	f7f4 fa42 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11244:	b510      	push	{r4, lr}
   11246:	f7ff fe70 	bl	10f2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1124a:	2800      	cmp	r0, #0
   1124c:	d000      	beq.n	11250 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
   1124e:	2001      	movs	r0, #1
   11250:	bd10      	pop	{r4, pc}
   11252:	b570      	push	{r4, r5, r6, lr}
   11254:	4605      	mov	r5, r0
   11256:	f7fe fb0e 	bl	f876 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1125a:	b170      	cbz	r0, 1127a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   1125c:	4628      	mov	r0, r5
   1125e:	f7fe fcd2 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11262:	2800      	cmp	r0, #0
   11264:	d008      	beq.n	11278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   11266:	4628      	mov	r0, r5
   11268:	f7fe fcca 	bl	fc00 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1126c:	4604      	mov	r4, r0
   1126e:	4628      	mov	r0, r5
   11270:	f7fe fca0 	bl	fbb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   11274:	b118      	cbz	r0, 1127e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   11276:	200c      	movs	r0, #12
   11278:	bd70      	pop	{r4, r5, r6, pc}
   1127a:	2042      	movs	r0, #66	; 0x42
   1127c:	bd70      	pop	{r4, r5, r6, pc}
   1127e:	b164      	cbz	r4, 1129a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   11280:	8820      	ldrh	r0, [r4, #0]
   11282:	f7fd fc13 	bl	eaac <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   11286:	8820      	ldrh	r0, [r4, #0]
   11288:	2100      	movs	r1, #0
   1128a:	f7f4 fca5 	bl	5bd8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   1128e:	b120      	cbz	r0, 1129a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   11290:	f241 41ca 	movw	r1, #5322	; 0x14ca
   11294:	2039      	movs	r0, #57	; 0x39
   11296:	f7f4 fa17 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1129a:	2000      	movs	r0, #0
   1129c:	bd70      	pop	{r4, r5, r6, pc}
   1129e:	b530      	push	{r4, r5, lr}
   112a0:	f340 0400 	sbfx	r4, r0, #0, #1
   112a4:	f340 0040 	sbfx	r0, r0, #1, #1
   112a8:	1c40      	adds	r0, r0, #1
   112aa:	9d03      	ldr	r5, [sp, #12]
   112ac:	1c64      	adds	r4, r4, #1
   112ae:	d000      	beq.n	112b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   112b0:	b119      	cbz	r1, 112ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   112b2:	b100      	cbz	r0, 112b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   112b4:	b10a      	cbz	r2, 112ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   112b6:	b91c      	cbnz	r4, 112c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   112b8:	e001      	b.n	112be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   112ba:	2011      	movs	r0, #17
   112bc:	bd30      	pop	{r4, r5, pc}
   112be:	2100      	movs	r1, #0
   112c0:	7019      	strb	r1, [r3, #0]
   112c2:	b900      	cbnz	r0, 112c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   112c4:	2200      	movs	r2, #0
   112c6:	702a      	strb	r2, [r5, #0]
   112c8:	2000      	movs	r0, #0
   112ca:	bd30      	pop	{r4, r5, pc}
   112cc:	b2c0      	uxtb	r0, r0
   112ce:	06c1      	lsls	r1, r0, #27
   112d0:	d40c      	bmi.n	112ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   112d2:	0681      	lsls	r1, r0, #26
   112d4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   112d8:	d503      	bpl.n	112e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   112da:	b9d1      	cbnz	r1, 11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   112dc:	0781      	lsls	r1, r0, #30
   112de:	d418      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   112e0:	e001      	b.n	112e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   112e2:	2900      	cmp	r1, #0
   112e4:	d1fa      	bne.n	112dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   112e6:	0700      	lsls	r0, r0, #28
   112e8:	d413      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   112ea:	e010      	b.n	1130e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   112ec:	0641      	lsls	r1, r0, #25
   112ee:	d410      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   112f0:	0681      	lsls	r1, r0, #26
   112f2:	d40e      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   112f4:	07c1      	lsls	r1, r0, #31
   112f6:	ea4f 7180 	mov.w	r1, r0, lsl #30
   112fa:	d004      	beq.n	11306 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   112fc:	2900      	cmp	r1, #0
   112fe:	db02      	blt.n	11306 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   11300:	0740      	lsls	r0, r0, #29
   11302:	d404      	bmi.n	1130e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   11304:	e005      	b.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   11306:	0701      	lsls	r1, r0, #28
   11308:	d403      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1130a:	0740      	lsls	r0, r0, #29
   1130c:	d401      	bmi.n	11312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1130e:	2001      	movs	r0, #1
   11310:	4770      	bx	lr
   11312:	2000      	movs	r0, #0
   11314:	4770      	bx	lr
   11316:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   11318:	4669      	mov	r1, sp
   1131a:	2001      	movs	r0, #1
   1131c:	f7fd fa48 	bl	e7b0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   11320:	b178      	cbz	r0, 11342 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   11322:	f240 116d 	movw	r1, #365	; 0x16d
   11326:	2039      	movs	r0, #57	; 0x39
   11328:	f7f4 f9ce 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1132c:	9c02      	ldr	r4, [sp, #8]
   1132e:	4620      	mov	r0, r4
   11330:	f7fe fc69 	bl	fc06 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   11334:	b128      	cbz	r0, 11342 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   11336:	4620      	mov	r0, r4
   11338:	f7fe facb 	bl	f8d2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   1133c:	b108      	cbz	r0, 11342 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1133e:	2001      	movs	r0, #1
   11340:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11342:	4668      	mov	r0, sp
   11344:	f7f4 fbf8 	bl	5b38 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   11348:	2800      	cmp	r0, #0
   1134a:	d0ef      	beq.n	1132c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   1134c:	2000      	movs	r0, #0
   1134e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00011350 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   11350:	6802      	ldr	r2, [r0, #0]
   11352:	b912      	cbnz	r2, 1135a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   11354:	6001      	str	r1, [r0, #0]
   11356:	4770      	bx	lr
   11358:	4602      	mov	r2, r0
   1135a:	6850      	ldr	r0, [r2, #4]
   1135c:	b108      	cbz	r0, 11362 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   1135e:	428a      	cmp	r2, r1
   11360:	d1fa      	bne.n	11358 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   11362:	428a      	cmp	r2, r1
   11364:	d0f7      	beq.n	11356 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   11366:	6051      	str	r1, [r2, #4]
   11368:	4770      	bx	lr
   1136a:	b510      	push	{r4, lr}
   1136c:	f7fe fc4e 	bl	fc0c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   11370:	b108      	cbz	r0, 11376 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   11372:	21d9      	movs	r1, #217	; 0xd9
   11374:	e003      	b.n	1137e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   11376:	f7f6 fe6b 	bl	8050 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1137a:	b118      	cbz	r0, 11384 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   1137c:	21de      	movs	r1, #222	; 0xde
   1137e:	2001      	movs	r0, #1
   11380:	f7f4 f9a2 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11388:	2001      	movs	r0, #1
   1138a:	f7f4 bb6b 	b.w	5a64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1138e:	b510      	push	{r4, lr}
   11390:	4604      	mov	r4, r0
   11392:	e002      	b.n	1139a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   11394:	6820      	ldr	r0, [r4, #0]
   11396:	4780      	blx	r0
   11398:	6864      	ldr	r4, [r4, #4]
   1139a:	2c00      	cmp	r4, #0
   1139c:	d1fa      	bne.n	11394 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   1139e:	bd10      	pop	{r4, pc}
   113a0:	b510      	push	{r4, lr}
   113a2:	2000      	movs	r0, #0
   113a4:	f7f4 fb5e 	bl	5a64 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   113a8:	f7f4 fd94 	bl	5ed4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   113ac:	f7f5 f86c 	bl	6488 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   113b0:	f7f5 fa5a 	bl	6868 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   113b4:	2800      	cmp	r0, #0
   113b6:	d003      	beq.n	113c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   113b8:	21b8      	movs	r1, #184	; 0xb8
   113ba:	2001      	movs	r0, #1
   113bc:	f7f4 f984 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   113c0:	bd10      	pop	{r4, pc}
   113c2:	b510      	push	{r4, lr}
   113c4:	f7ff ffd1 	bl	1136a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   113c8:	f7fe ffef 	bl	103aa <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   113cc:	2800      	cmp	r0, #0
   113ce:	d003      	beq.n	113d8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   113d0:	21f5      	movs	r1, #245	; 0xf5
   113d2:	2001      	movs	r0, #1
   113d4:	f7f4 f978 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   113d8:	bd10      	pop	{r4, pc}

000113da <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   113da:	f7f3 bdd1 	b.w	4f80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   113de:	0001      	.short	0x0001
   113e0:	0002000b 	.word	0x0002000b
   113e4:	0005000a 	.word	0x0005000a
   113e8:	000a0009 	.word	0x000a0009
   113ec:	00140008 	.word	0x00140008
   113f0:	001e0007 	.word	0x001e0007
   113f4:	00320006 	.word	0x00320006
   113f8:	004b0005 	.word	0x004b0005
   113fc:	00640004 	.word	0x00640004
   11400:	00960003 	.word	0x00960003
   11404:	00fa0002 	.word	0x00fa0002
   11408:	01f40001 	.word	0x01f40001
	...

0001140e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1140e:	b510      	push	{r4, lr}
   11410:	f7fb f88c 	bl	c52c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   11414:	f000 f850 	bl	114b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   11418:	f7fa fd02 	bl	be20 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1141c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11420:	f7fa be00 	b.w	c024 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00011424 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   11424:	b510      	push	{r4, lr}
   11426:	24c8      	movs	r4, #200	; 0xc8
   11428:	1e64      	subs	r4, r4, #1
   1142a:	b2e4      	uxtb	r4, r4
   1142c:	f7fa fd16 	bl	be5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   11430:	2802      	cmp	r0, #2
   11432:	d003      	beq.n	1143c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   11434:	2801      	cmp	r0, #1
   11436:	d000      	beq.n	1143a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   11438:	2000      	movs	r0, #0
   1143a:	bd10      	pop	{r4, pc}
   1143c:	2c00      	cmp	r4, #0
   1143e:	d1f3      	bne.n	11428 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   11440:	2193      	movs	r1, #147	; 0x93
   11442:	203b      	movs	r0, #59	; 0x3b
   11444:	f7f4 f940 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00011448 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   11448:	b510      	push	{r4, lr}
   1144a:	f7f4 f807 	bl	545c <mpsl_fem_lna_configuration_clear>
   1144e:	2800      	cmp	r0, #0
   11450:	d005      	beq.n	1145e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   11452:	1c40      	adds	r0, r0, #1
   11454:	d003      	beq.n	1145e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   11456:	2150      	movs	r1, #80	; 0x50
   11458:	2040      	movs	r0, #64	; 0x40
   1145a:	f7f4 f935 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1145e:	bd10      	pop	{r4, pc}

00011460 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   11460:	b510      	push	{r4, lr}
   11462:	f7f4 f807 	bl	5474 <mpsl_fem_pa_configuration_clear>
   11466:	2800      	cmp	r0, #0
   11468:	d005      	beq.n	11476 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1146a:	1c40      	adds	r0, r0, #1
   1146c:	d003      	beq.n	11476 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1146e:	2149      	movs	r1, #73	; 0x49
   11470:	2040      	movs	r0, #64	; 0x40
   11472:	f7f4 f929 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11476:	bd10      	pop	{r4, pc}

00011478 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   11478:	b510      	push	{r4, lr}
   1147a:	f7f3 ffe9 	bl	5450 <mpsl_fem_disable>
   1147e:	2800      	cmp	r0, #0
   11480:	d005      	beq.n	1148e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   11482:	1c40      	adds	r0, r0, #1
   11484:	d003      	beq.n	1148e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   11486:	2157      	movs	r1, #87	; 0x57
   11488:	2040      	movs	r0, #64	; 0x40
   1148a:	f7f4 f91d 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1148e:	bd10      	pop	{r4, pc}

00011490 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   11490:	b510      	push	{r4, lr}
   11492:	2100      	movs	r1, #0
   11494:	4608      	mov	r0, r1
   11496:	f7f3 ffe7 	bl	5468 <mpsl_fem_lna_configuration_set>
   1149a:	b108      	cbz	r0, 114a0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   1149c:	2000      	movs	r0, #0
   1149e:	bd10      	pop	{r4, pc}
   114a0:	2001      	movs	r0, #1
   114a2:	bd10      	pop	{r4, pc}

000114a4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   114a4:	b508      	push	{r3, lr}
   114a6:	4668      	mov	r0, sp
   114a8:	f7f3 fff0 	bl	548c <mpsl_fem_pa_is_configured>
   114ac:	f89d 0000 	ldrb.w	r0, [sp]
   114b0:	2800      	cmp	r0, #0
   114b2:	d000      	beq.n	114b6 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   114b4:	2001      	movs	r0, #1
   114b6:	bd08      	pop	{r3, pc}

000114b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   114b8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   114bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   114c0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   114c4:	f3bf 8f4f 	dsb	sy
   114c8:	f3bf 8f6f 	isb	sy
   114cc:	f7fa be84 	b.w	c1d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   114d0:	2800      	cmp	r0, #0
   114d2:	db09      	blt.n	114e8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   114d4:	f000 021f 	and.w	r2, r0, #31
   114d8:	2101      	movs	r1, #1
   114da:	4091      	lsls	r1, r2
   114dc:	0940      	lsrs	r0, r0, #5
   114de:	0080      	lsls	r0, r0, #2
   114e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   114e4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   114e8:	4770      	bx	lr
   114ea:	2800      	cmp	r0, #0
   114ec:	db0d      	blt.n	1150a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   114ee:	f000 021f 	and.w	r2, r0, #31
   114f2:	2101      	movs	r1, #1
   114f4:	4091      	lsls	r1, r2
   114f6:	0940      	lsrs	r0, r0, #5
   114f8:	0080      	lsls	r0, r0, #2
   114fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   114fe:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   11502:	f3bf 8f4f 	dsb	sy
   11506:	f3bf 8f6f 	isb	sy
   1150a:	4770      	bx	lr

0001150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   1150c:	b510      	push	{r4, lr}
   1150e:	2801      	cmp	r0, #1
   11510:	d006      	beq.n	11520 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   11512:	2802      	cmp	r0, #2
   11514:	d006      	beq.n	11524 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   11516:	f640 3141 	movw	r1, #2881	; 0xb41
   1151a:	203e      	movs	r0, #62	; 0x3e
   1151c:	f7f4 f8d4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11520:	2028      	movs	r0, #40	; 0x28
   11522:	bd10      	pop	{r4, pc}
   11524:	2018      	movs	r0, #24
   11526:	bd10      	pop	{r4, pc}

00011528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   11528:	b510      	push	{r4, lr}
   1152a:	2801      	cmp	r0, #1
   1152c:	d006      	beq.n	1153c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   1152e:	2802      	cmp	r0, #2
   11530:	d007      	beq.n	11542 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   11532:	f640 3155 	movw	r1, #2901	; 0xb55
   11536:	203e      	movs	r0, #62	; 0x3e
   11538:	f7f4 f8c6 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1153c:	f641 6014 	movw	r0, #7700	; 0x1e14
   11540:	bd10      	pop	{r4, pc}
   11542:	f241 1030 	movw	r0, #4400	; 0x1130
   11546:	bd10      	pop	{r4, pc}

00011548 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   11548:	f7fb bd48 	b.w	cfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   1154c:	b510      	push	{r4, lr}
   1154e:	460a      	mov	r2, r1
   11550:	b130      	cbz	r0, 11560 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   11552:	2801      	cmp	r0, #1
   11554:	d00b      	beq.n	1156e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   11556:	f240 6114 	movw	r1, #1556	; 0x614
   1155a:	203e      	movs	r0, #62	; 0x3e
   1155c:	f7f4 f8b4 	bl	56c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   11560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11564:	f102 0128 	add.w	r1, r2, #40	; 0x28
   11568:	4610      	mov	r0, r2
   1156a:	f7fa bccb 	b.w	bf04 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11572:	f102 0129 	add.w	r1, r2, #41	; 0x29
   11576:	4610      	mov	r0, r2
   11578:	f7fa bcae 	b.w	bed8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   1157c:	5840      	ldr	r0, [r0, r1]
   1157e:	2800      	cmp	r0, #0
   11580:	d000      	beq.n	11584 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   11582:	2001      	movs	r0, #1
   11584:	4770      	bx	lr
   11586:	5840      	ldr	r0, [r0, r1]
   11588:	2800      	cmp	r0, #0
   1158a:	d000      	beq.n	1158e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   1158c:	2001      	movs	r0, #1
   1158e:	4770      	bx	lr

00011590 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   11590:	b570      	push	{r4, r5, r6, lr}
   11592:	4605      	mov	r5, r0
   11594:	4614      	mov	r4, r2
   11596:	4608      	mov	r0, r1
   11598:	f7ff ffc6 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1159c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   115a0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   115a4:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   115a8:	4620      	mov	r0, r4
   115aa:	f7ff ffbd 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   115ae:	4428      	add	r0, r5
   115b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   115b4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   115b8:	fbb0 f5f1 	udiv	r5, r0, r1
   115bc:	4620      	mov	r0, r4
   115be:	f7ff ffa5 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   115c2:	4428      	add	r0, r5
   115c4:	1d40      	adds	r0, r0, #5
   115c6:	bd70      	pop	{r4, r5, r6, pc}

000115c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   115c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115cc:	4607      	mov	r7, r0
   115ce:	461d      	mov	r5, r3
   115d0:	460e      	mov	r6, r1
   115d2:	4614      	mov	r4, r2
   115d4:	4610      	mov	r0, r2
   115d6:	f7ff ffa7 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   115da:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   115de:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   115e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   115e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   115ea:	2e02      	cmp	r6, #2
   115ec:	d00e      	beq.n	1160c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   115ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
   115f2:	4411      	add	r1, r2
   115f4:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   115f8:	fbb1 f6f0 	udiv	r6, r1, r0
   115fc:	4620      	mov	r0, r4
   115fe:	f7ff ff85 	bl	1150c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   11602:	4430      	add	r0, r6
   11604:	4428      	add	r0, r5
   11606:	1d40      	adds	r0, r0, #5
   11608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1160c:	4602      	mov	r2, r0
   1160e:	e7f0      	b.n	115f2 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00011610 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   11610:	b510      	push	{r4, lr}
   11612:	4604      	mov	r4, r0
   11614:	4608      	mov	r0, r1
   11616:	f7ff ff87 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1161a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1161e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   11622:	fbb0 f0f1 	udiv	r0, r0, r1
   11626:	1a20      	subs	r0, r4, r0
   11628:	1e80      	subs	r0, r0, #2
   1162a:	bd10      	pop	{r4, pc}

0001162c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1162c:	b510      	push	{r4, lr}
   1162e:	4604      	mov	r4, r0
   11630:	4608      	mov	r0, r1
   11632:	f7ff ff79 	bl	11528 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   11636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1163a:	fbb0 f0f1 	udiv	r0, r0, r1
   1163e:	1a20      	subs	r0, r4, r0
   11640:	bd10      	pop	{r4, pc}

00011642 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   11642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11646:	2902      	cmp	r1, #2
   11648:	d008      	beq.n	1165c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   1164a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1164e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   11652:	fbb1 f1f2 	udiv	r1, r1, r2
   11656:	4408      	add	r0, r1
   11658:	1e80      	subs	r0, r0, #2
   1165a:	4770      	bx	lr
   1165c:	4611      	mov	r1, r2
   1165e:	e7f6      	b.n	1164e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

00011660 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   11660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11664:	2902      	cmp	r1, #2
   11666:	d007      	beq.n	11678 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   11668:	f240 51dc 	movw	r1, #1500	; 0x5dc
   1166c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   11670:	fbb1 f1f2 	udiv	r1, r1, r2
   11674:	4408      	add	r0, r1
   11676:	4770      	bx	lr
   11678:	4611      	mov	r1, r2
   1167a:	e7f7      	b.n	1166c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   1167c:	1702080c 	.word	0x1702080c
   11680:	0201010d 	.word	0x0201010d
   11684:	01010909 	.word	0x01010909
   11688:	18090206 	.word	0x18090206
   1168c:	01010318 	.word	0x01010318
   11690:	03030909 	.word	0x03030909
   11694:	00000005 	.word	0x00000005

00011698 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   11698:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1169a:	4c35      	ldr	r4, [pc, #212]	; (11770 <nrf_flash_sync_exe+0xd8>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1169c:	f04f 31ff 	mov.w	r1, #4294967295
{
   116a0:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   116a2:	f04f 30ff 	mov.w	r0, #4294967295
   116a6:	f007 fc49 	bl	18f3c <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   116aa:	f104 0118 	add.w	r1, r4, #24
   116ae:	4831      	ldr	r0, [pc, #196]	; (11774 <nrf_flash_sync_exe+0xdc>)
   116b0:	f7f0 fb34 	bl	1d1c <mpsl_timeslot_session_open>
   116b4:	4606      	mov	r6, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   116b6:	f007 fc49 	bl	18f4c <multithreading_lock_release>

	if (ret < 0) {
   116ba:	2e00      	cmp	r6, #0
   116bc:	db51      	blt.n	11762 <nrf_flash_sync_exe+0xca>
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   116be:	f240 1301 	movw	r3, #257	; 0x101
   116c2:	8523      	strh	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   116c4:	69e3      	ldr	r3, [r4, #28]
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;

	_context.op_desc = op_desc;
   116c6:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   116c8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
	req->params.earliest.length_us =
   116cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   116ce:	4b2a      	ldr	r3, [pc, #168]	; (11778 <nrf_flash_sync_exe+0xe0>)
   116d0:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   116d2:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   116d4:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   116d8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   116dc:	63e3      	str	r3, [r4, #60]	; 0x3c
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   116de:	f104 0540 	add.w	r5, r4, #64	; 0x40
   116e2:	f3bf 8f5b 	dmb	ish
   116e6:	e855 3f00 	ldrex	r3, [r5]
   116ea:	e845 2100 	strex	r1, r2, [r5]
   116ee:	2900      	cmp	r1, #0
   116f0:	d1f9      	bne.n	116e6 <nrf_flash_sync_exe+0x4e>
   116f2:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   116f6:	f04f 31ff 	mov.w	r1, #4294967295
   116fa:	f04f 30ff 	mov.w	r0, #4294967295
   116fe:	f007 fc1d 	bl	18f3c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   11702:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11706:	7e20      	ldrb	r0, [r4, #24]
   11708:	f7fb fe56 	bl	d3b8 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   1170c:	f007 fc1e 	bl	18f4c <multithreading_lock_release>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   11710:	a315      	add	r3, pc, #84	; (adr r3, 11768 <nrf_flash_sync_exe+0xd0>)
   11712:	e9d3 2300 	ldrd	r2, r3, [r3]
   11716:	4620      	mov	r0, r4
   11718:	f00a f96e 	bl	1b9f8 <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1171c:	2800      	cmp	r0, #0
   1171e:	da0a      	bge.n	11736 <nrf_flash_sync_exe+0x9e>
   11720:	f3bf 8f5b 	dmb	ish
   11724:	2301      	movs	r3, #1
   11726:	e855 2f00 	ldrex	r2, [r5]
   1172a:	e845 3100 	strex	r1, r3, [r5]
   1172e:	2900      	cmp	r1, #0
   11730:	d1f9      	bne.n	11726 <nrf_flash_sync_exe+0x8e>
   11732:	f3bf 8f5b 	dmb	ish
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   11736:	f04f 31ff 	mov.w	r1, #4294967295
   1173a:	f04f 30ff 	mov.w	r0, #4294967295
   1173e:	f007 fbfd 	bl	18f3c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   11742:	7e20      	ldrb	r0, [r4, #24]
   11744:	f7fb fe71 	bl	d42a <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   11748:	f007 fc00 	bl	18f4c <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1174c:	f3bf 8f5b 	dmb	ish
   11750:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11752:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   11756:	b113      	cbz	r3, 1175e <nrf_flash_sync_exe+0xc6>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
   11758:	4805      	ldr	r0, [pc, #20]	; (11770 <nrf_flash_sync_exe+0xd8>)
   1175a:	f00a f977 	bl	1ba4c <z_impl_k_sem_reset>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   1175e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   11760:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11762:	f06f 000b 	mvn.w	r0, #11
   11766:	e7fb      	b.n	11760 <nrf_flash_sync_exe+0xc8>
   11768:	001138d5 	.word	0x001138d5
   1176c:	00000000 	.word	0x00000000
   11770:	2000297c 	.word	0x2000297c
   11774:	00019a21 	.word	0x00019a21
   11778:	07a11fff 	.word	0x07a11fff

0001177c <sensor_node_fsm>:
        [CONFIGURE_STATE] = SMF_CREATE_STATE(configure_state_entry, configure_state_run, NULL),
        [OPERATING_STATE] = SMF_CREATE_STATE(NULL, operating_state_run, NULL),
};

static void sensor_node_fsm(void)
{
   1177c:	b510      	push	{r4, lr}
    int32_t ret;
    // Set initial state
    smf_set_initial(SMF_CTX(&user_object), &fsm_states[CONFIGURE_STATE]);
   1177e:	4905      	ldr	r1, [pc, #20]	; (11794 <sensor_node_fsm+0x18>)
   11780:	4805      	ldr	r0, [pc, #20]	; (11798 <sensor_node_fsm+0x1c>)

    // Run the state machine
    while (1)
    {
        // State machine terminates if a non-zero value is returned
        ret = smf_run_state(SMF_CTX(&user_object));
   11782:	4c05      	ldr	r4, [pc, #20]	; (11798 <sensor_node_fsm+0x1c>)
    smf_set_initial(SMF_CTX(&user_object), &fsm_states[CONFIGURE_STATE]);
   11784:	f00e fe53 	bl	2042e <smf_set_initial>
        ret = smf_run_state(SMF_CTX(&user_object));
   11788:	4620      	mov	r0, r4
   1178a:	f00e fe7b 	bl	20484 <smf_run_state>
        if (ret)
   1178e:	2800      	cmp	r0, #0
   11790:	d0fa      	beq.n	11788 <sensor_node_fsm+0xc>
        {
            // handle return code and terminate state machine
            break;
        }
    }
}
   11792:	bd10      	pop	{r4, pc}
   11794:	000244d8 	.word	0x000244d8
   11798:	2000214c 	.word	0x2000214c

0001179c <clear_id_cb>:
    k_work_submit(&work_clear_id);
   1179c:	4801      	ldr	r0, [pc, #4]	; (117a4 <clear_id_cb+0x8>)
   1179e:	f00a ba9d 	b.w	1bcdc <k_work_submit>
   117a2:	bf00      	nop
   117a4:	2000215c 	.word	0x2000215c

000117a8 <configure_state_run>:
{
   117a8:	b507      	push	{r0, r1, r2, lr}
    if (nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &dev_id_buffer, sizeof(dev_id_buffer)) != sizeof(dev_id_buffer))
   117aa:	f000 f9d1 	bl	11b50 <get_file_system_handle>
   117ae:	2301      	movs	r3, #1
   117b0:	f10d 0207 	add.w	r2, sp, #7
   117b4:	2100      	movs	r1, #0
   117b6:	f00e fb96 	bl	1fee6 <nvs_read>
   117ba:	2801      	cmp	r0, #1
   117bc:	d008      	beq.n	117d0 <configure_state_run+0x28>
        start_configure_state_adv();
   117be:	f000 f8b3 	bl	11928 <start_configure_state_adv>
	return z_impl_k_sem_take(sem, timeout);
   117c2:	4807      	ldr	r0, [pc, #28]	; (117e0 <configure_state_run+0x38>)
   117c4:	f04f 32ff 	mov.w	r2, #4294967295
   117c8:	f04f 33ff 	mov.w	r3, #4294967295
   117cc:	f00a f914 	bl	1b9f8 <z_impl_k_sem_take>
    smf_set_state(SMF_CTX(&user_object), &fsm_states[OPERATING_STATE]);
   117d0:	4904      	ldr	r1, [pc, #16]	; (117e4 <configure_state_run+0x3c>)
   117d2:	4805      	ldr	r0, [pc, #20]	; (117e8 <configure_state_run+0x40>)
   117d4:	f00e fe37 	bl	20446 <smf_set_state>
}
   117d8:	b003      	add	sp, #12
   117da:	f85d fb04 	ldr.w	pc, [sp], #4
   117de:	bf00      	nop
   117e0:	20002134 	.word	0x20002134
   117e4:	000244e8 	.word	0x000244e8
   117e8:	2000214c 	.word	0x2000214c

000117ec <configure_state_entry>:
{
   117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!device_is_ready(clean_row_id_button.port))
   117ee:	4d2f      	ldr	r5, [pc, #188]	; (118ac <configure_state_entry+0xc0>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   117f0:	482f      	ldr	r0, [pc, #188]	; (118b0 <configure_state_entry+0xc4>)
   117f2:	2201      	movs	r2, #1
   117f4:	2100      	movs	r1, #0
   117f6:	f012 f800 	bl	237fa <z_impl_k_sem_init>
    init_watchdog();
   117fa:	f000 f9d7 	bl	11bac <init_watchdog>
    ble_init();
   117fe:	f000 f883 	bl	11908 <ble_init>
    if (!device_is_ready(clean_row_id_button.port))
   11802:	6828      	ldr	r0, [r5, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   11804:	f011 fe3e 	bl	23484 <z_device_ready>
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
   11808:	796b      	ldrb	r3, [r5, #5]
	return gpio_pin_configure(spec->port,
   1180a:	6828      	ldr	r0, [r5, #0]
   1180c:	7929      	ldrb	r1, [r5, #4]
   1180e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
	struct gpio_driver_data *data =
   11812:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   11814:	6887      	ldr	r7, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11816:	6834      	ldr	r4, [r6, #0]
   11818:	f013 0f01 	tst.w	r3, #1
   1181c:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11820:	fa03 f301 	lsl.w	r3, r3, r1
   11824:	bf14      	ite	ne
   11826:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11828:	ea24 0303 	biceq.w	r3, r4, r3
   1182c:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1182e:	683b      	ldr	r3, [r7, #0]
   11830:	4798      	blx	r3
    gpio_init_callback(&clear_id_button_cb, clear_id_cb, BIT(clean_row_id_button.pin));
   11832:	792b      	ldrb	r3, [r5, #4]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   11834:	481f      	ldr	r0, [pc, #124]	; (118b4 <configure_state_entry+0xc8>)
   11836:	4920      	ldr	r1, [pc, #128]	; (118b8 <configure_state_entry+0xcc>)
   11838:	2201      	movs	r2, #1
   1183a:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
   1183e:	e9c1 0301 	strd	r0, r3, [r1, #4]
    gpio_add_callback(clean_row_id_button.port, &clear_id_button_cb);
   11842:	6828      	ldr	r0, [r5, #0]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   11844:	6883      	ldr	r3, [r0, #8]
   11846:	69db      	ldr	r3, [r3, #28]
   11848:	b103      	cbz	r3, 1184c <configure_state_entry+0x60>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1184a:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1184c:	6828      	ldr	r0, [r5, #0]
   1184e:	7929      	ldrb	r1, [r5, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11850:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   11852:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   11854:	6824      	ldr	r4, [r4, #0]
   11856:	2301      	movs	r3, #1
   11858:	408b      	lsls	r3, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1185a:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1185c:	bf14      	ite	ne
   1185e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   11862:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
   11866:	6994      	ldr	r4, [r2, #24]
   11868:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1186c:	47a0      	blx	r4
    k_work_init(&work_clear_id, clear_id_work_function);
   1186e:	4913      	ldr	r1, [pc, #76]	; (118bc <configure_state_entry+0xd0>)
   11870:	4813      	ldr	r0, [pc, #76]	; (118c0 <configure_state_entry+0xd4>)
   11872:	f012 f839 	bl	238e8 <k_work_init>
    flash_system_init();
   11876:	f000 f949 	bl	11b0c <flash_system_init>
    gpio_interface_init();
   1187a:	f000 f9ad 	bl	11bd8 <gpio_interface_init>
    init_battery_adc_channel();
   1187e:	f000 f89d 	bl	119bc <init_battery_adc_channel>
    init_soil_adc_channel();
   11882:	f000 f913 	bl	11aac <init_soil_adc_channel>
    init_adc_calibration_channel();
   11886:	f000 f927 	bl	11ad8 <init_adc_calibration_channel>
    init_adc_calibration_timer();
   1188a:	f000 f965 	bl	11b58 <init_adc_calibration_timer>
    start_adc_calibration_timer(K_SECONDS(1), K_SECONDS(30));
   1188e:	2300      	movs	r3, #0
   11890:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11894:	2100      	movs	r1, #0
   11896:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1189a:	f000 f967 	bl	11b6c <start_adc_calibration_timer>
}
   1189e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    pm_device_action_run(bme_spi_device, PM_DEVICE_ACTION_SUSPEND);
   118a2:	4808      	ldr	r0, [pc, #32]	; (118c4 <configure_state_entry+0xd8>)
   118a4:	2100      	movs	r1, #0
   118a6:	f00e bb4c 	b.w	1ff42 <pm_device_action_run>
   118aa:	bf00      	nop
   118ac:	200004c0 	.word	0x200004c0
   118b0:	20002134 	.word	0x20002134
   118b4:	0001179d 	.word	0x0001179d
   118b8:	20002128 	.word	0x20002128
   118bc:	0001f37d 	.word	0x0001f37d
   118c0:	2000215c 	.word	0x2000215c
   118c4:	000241f4 	.word	0x000241f4

000118c8 <operating_state_run>:
{
   118c8:	b508      	push	{r3, lr}
    start_operating_state_adv();
   118ca:	f000 f845 	bl	11958 <start_operating_state_adv>
	z_impl_k_thread_abort(thread);
   118ce:	4802      	ldr	r0, [pc, #8]	; (118d8 <operating_state_run+0x10>)
}
   118d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   118d4:	f001 bfb2 	b.w	1383c <z_impl_k_thread_abort>
   118d8:	200018d8 	.word	0x200018d8

000118dc <connected>:
};

// -- static functions definitions ---------------------------------------------
static void connected(struct bt_conn *conn, uint8_t err)
{
    ble_connection = conn;
   118dc:	4b01      	ldr	r3, [pc, #4]	; (118e4 <connected+0x8>)
   118de:	6018      	str	r0, [r3, #0]
    {
        LOG_INF("Connection failed (err %u)\n", err);
        return;
    }
    LOG_INF("Connection succeed (err %u)\n", err);
}
   118e0:	4770      	bx	lr
   118e2:	bf00      	nop
   118e4:	2000216c 	.word	0x2000216c

000118e8 <bt_ready>:
{
    LOG_INF("Disconnected (reason %u)\n", reason);
}

static void bt_ready(int err)
{
   118e8:	b508      	push	{r3, lr}
    if (err)
   118ea:	b938      	cbnz	r0, 118fc <bt_ready+0x14>
        LOG_INF("BLE init failed with error code %d\n", err);
        return;
    }

    // Configure connection callbacks
    bt_conn_cb_register(&conn_callbacks);
   118ec:	4804      	ldr	r0, [pc, #16]	; (11900 <bt_ready+0x18>)
   118ee:	f003 ffad 	bl	1584c <bt_conn_cb_register>
	z_impl_k_sem_give(sem);
   118f2:	4804      	ldr	r0, [pc, #16]	; (11904 <bt_ready+0x1c>)

    k_sem_give(&ble_init_ok);
}
   118f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   118f8:	f00a b858 	b.w	1b9ac <z_impl_k_sem_give>
   118fc:	bd08      	pop	{r3, pc}
   118fe:	bf00      	nop
   11900:	20000548 	.word	0x20000548
   11904:	20000b60 	.word	0x20000b60

00011908 <ble_init>:
}

// --- functions definitions ---------------------------------------------------
// TODO: should return error code
void ble_init(void)
{
   11908:	b510      	push	{r4, lr}
    int error = 0;

    error = bt_enable(bt_ready);
   1190a:	4805      	ldr	r0, [pc, #20]	; (11920 <ble_init+0x18>)
   1190c:	f003 f81a 	bl	14944 <bt_enable>
	return z_impl_k_sem_take(sem, timeout);
   11910:	4804      	ldr	r0, [pc, #16]	; (11924 <ble_init+0x1c>)
    }
    else
    {
        LOG_INF("BLE initialization did not complete in time: (err: %d)\n", error);
    }
}
   11912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1191a:	2300      	movs	r3, #0
   1191c:	f00a b86c 	b.w	1b9f8 <z_impl_k_sem_take>
   11920:	000118e9 	.word	0x000118e9
   11924:	20000b60 	.word	0x20000b60

00011928 <start_configure_state_adv>:
}

// Function to start advertising configuration data
// This function is called when an unconfigured device boots
void start_configure_state_adv(void)
{
   11928:	b530      	push	{r4, r5, lr}
    int err;
    // Start advertising both advertising data and scan response data
    err = bt_le_adv_start(BT_LE_ADV_CONN, configuration_adv_data, ARRAY_SIZE(configuration_adv_data),
   1192a:	4d08      	ldr	r5, [pc, #32]	; (1194c <start_configure_state_adv+0x24>)
   1192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1192e:	b089      	sub	sp, #36	; 0x24
    err = bt_le_adv_start(BT_LE_ADV_CONN, configuration_adv_data, ARRAY_SIZE(configuration_adv_data),
   11930:	ac03      	add	r4, sp, #12
   11932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11934:	682b      	ldr	r3, [r5, #0]
   11936:	6023      	str	r3, [r4, #0]
   11938:	2302      	movs	r3, #2
   1193a:	9300      	str	r3, [sp, #0]
   1193c:	4904      	ldr	r1, [pc, #16]	; (11950 <start_configure_state_adv+0x28>)
   1193e:	4b05      	ldr	r3, [pc, #20]	; (11954 <start_configure_state_adv+0x2c>)
   11940:	2201      	movs	r2, #1
   11942:	a803      	add	r0, sp, #12
   11944:	f003 fc06 	bl	15154 <bt_le_adv_start>
        LOG_INF("Advertising failed to start (err %d)\n", err);
        return;
    }

    LOG_INF("Advertising successfully started\n");
}
   11948:	b009      	add	sp, #36	; 0x24
   1194a:	bd30      	pop	{r4, r5, pc}
   1194c:	00024470 	.word	0x00024470
   11950:	000245fc 	.word	0x000245fc
   11954:	0002460c 	.word	0x0002460c

00011958 <start_operating_state_adv>:

// Function to start advertising operating data
// This function will be called when device reboots but is already configured
void start_operating_state_adv(void)
{
   11958:	b530      	push	{r4, r5, lr}
    int err;
    // Start advertising both advertising data and scan response data
    err = bt_le_adv_start(BT_LE_ADV_CONN, operating_adv_data, ARRAY_SIZE(operating_adv_data),
   1195a:	4d08      	ldr	r5, [pc, #32]	; (1197c <start_operating_state_adv+0x24>)
   1195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1195e:	b089      	sub	sp, #36	; 0x24
    err = bt_le_adv_start(BT_LE_ADV_CONN, operating_adv_data, ARRAY_SIZE(operating_adv_data),
   11960:	ac03      	add	r4, sp, #12
   11962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11964:	682b      	ldr	r3, [r5, #0]
   11966:	6023      	str	r3, [r4, #0]
   11968:	2302      	movs	r3, #2
   1196a:	9300      	str	r3, [sp, #0]
   1196c:	4904      	ldr	r1, [pc, #16]	; (11980 <start_operating_state_adv+0x28>)
   1196e:	4b05      	ldr	r3, [pc, #20]	; (11984 <start_operating_state_adv+0x2c>)
   11970:	2201      	movs	r2, #1
   11972:	a803      	add	r0, sp, #12
   11974:	f003 fbee 	bl	15154 <bt_le_adv_start>
        LOG_INF("Advertising failed to start (err %d)\n", err);
        return;
    }

    LOG_INF("Advertising successfully started\n");
}
   11978:	b009      	add	sp, #36	; 0x24
   1197a:	bd30      	pop	{r4, r5, pc}
   1197c:	00024470 	.word	0x00024470
   11980:	00024604 	.word	0x00024604
   11984:	0002460c 	.word	0x0002460c

00011988 <configuration_write_id>:
                          const struct bt_gatt_attr *attr,
                          const void *buf,
                          uint16_t len,
                          uint16_t offset,
                          uint8_t flags)
{
   11988:	b538      	push	{r3, r4, r5, lr}
   1198a:	461c      	mov	r4, r3
    int err;
    const uint8_t *configuration_id = buf;

    if(*configuration_id > MAX_CONFIGURATION_ID || *configuration_id == 0)
   1198c:	7813      	ldrb	r3, [r2, #0]
   1198e:	3b01      	subs	r3, #1
   11990:	2b04      	cmp	r3, #4
{
   11992:	4615      	mov	r5, r2
    if(*configuration_id > MAX_CONFIGURATION_ID || *configuration_id == 0)
   11994:	d80d      	bhi.n	119b2 <configuration_write_id+0x2a>
        LOG_INF("Invalid configuration ID: %d", *configuration_id);
        return 0;
    }

    // Write Configuration ID to flash
    err = nvs_write(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, configuration_id, sizeof(*configuration_id));
   11996:	f000 f8db 	bl	11b50 <get_file_system_handle>
   1199a:	2301      	movs	r3, #1
   1199c:	462a      	mov	r2, r5
   1199e:	2100      	movs	r1, #0
   119a0:	f001 f87e 	bl	12aa0 <nvs_write>
    if(err<0)
   119a4:	2800      	cmp	r0, #0
   119a6:	db02      	blt.n	119ae <configuration_write_id+0x26>
	z_impl_k_sem_give(sem);
   119a8:	4803      	ldr	r0, [pc, #12]	; (119b8 <configuration_write_id+0x30>)
   119aa:	f009 ffff 	bl	1b9ac <z_impl_k_sem_give>
    {
        // After configuration is done, give configuration semaphore
        // TODO: this semaphore is given every time we write on the configuration characteristic
        k_sem_give(&configure_done_sem);
    }
    return len;
   119ae:	4620      	mov	r0, r4
}
   119b0:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   119b2:	2000      	movs	r0, #0
   119b4:	e7fc      	b.n	119b0 <configuration_write_id+0x28>
   119b6:	bf00      	nop
   119b8:	20002134 	.word	0x20002134

000119bc <init_battery_adc_channel>:
 * Initialize the battery measurement ADC Channel
 * 
 * @return int16_t 
 */
int16_t init_battery_adc_channel(void)
{
   119bc:	b508      	push	{r3, lr}
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   119be:	4803      	ldr	r0, [pc, #12]	; (119cc <init_battery_adc_channel+0x10>)
   119c0:	4903      	ldr	r1, [pc, #12]	; (119d0 <init_battery_adc_channel+0x14>)
   119c2:	6883      	ldr	r3, [r0, #8]
   119c4:	681b      	ldr	r3, [r3, #0]
   119c6:	4798      	blx	r3
    {
        LOG_INF("Error setting up battery measurement channel.");
    }

    return err;
}
   119c8:	b200      	sxth	r0, r0
   119ca:	bd08      	pop	{r3, pc}
   119cc:	00024184 	.word	0x00024184
   119d0:	00024d50 	.word	0x00024d50

000119d4 <bh1750_sample_fetch>:
 * @param chan
 * @return int
 */
static int bh1750_sample_fetch(const struct device *dev,
                               enum sensor_channel chan)
{
   119d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119d6:	b087      	sub	sp, #28
    struct bh1750_device_t *bh1750_data = dev->data;
   119d8:	6904      	ldr	r4, [r0, #16]

    /* I2C Request Low Resolution Measurement */

    uint8_t tx_data = BH1750_MEASUREMENT_MODE | BH1750_MEASUREMENT_RES;
   119da:	2322      	movs	r3, #34	; 0x22
   119dc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t rx_data[2];

    pm_device_action_run(bh1750_data->i2c, PM_DEVICE_ACTION_RESUME);
   119e0:	6820      	ldr	r0, [r4, #0]
   119e2:	2101      	movs	r1, #1
   119e4:	f00e faad 	bl	1ff42 <pm_device_action_run>
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   119e8:	2601      	movs	r6, #1
	msg.buf = (uint8_t *)buf;
   119ea:	f10d 0307 	add.w	r3, sp, #7
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   119ee:	2702      	movs	r7, #2

    int err;
    err = i2c_write(bh1750_data->i2c, &tx_data, 1, BH1750_I2C_ADDRESS);
   119f0:	6820      	ldr	r0, [r4, #0]
	msg.buf = (uint8_t *)buf;
   119f2:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   119f4:	9604      	str	r6, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   119f6:	f88d 7014 	strb.w	r7, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   119fa:	6883      	ldr	r3, [r0, #8]
   119fc:	4632      	mov	r2, r6
   119fe:	689d      	ldr	r5, [r3, #8]
   11a00:	a903      	add	r1, sp, #12
   11a02:	2323      	movs	r3, #35	; 0x23
   11a04:	47a8      	blx	r5
   11a06:	4605      	mov	r5, r0
	return z_impl_k_sleep(timeout);
   11a08:	2100      	movs	r1, #0
   11a0a:	f240 3013 	movw	r0, #787	; 0x313
   11a0e:	f00a fcf3 	bl	1c3f8 <z_impl_k_sleep>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   11a12:	ab02      	add	r3, sp, #8

    k_sleep(K_MSEC(BH1750_MEASUREMENT_TIME));

    /* Read the result */
    i2c_read(bh1750_data->i2c, &rx_data, 2, BH1750_I2C_ADDRESS);
   11a14:	6820      	ldr	r0, [r4, #0]
	msg.len = num_bytes;
   11a16:	e9cd 3703 	strd	r3, r7, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   11a1a:	2303      	movs	r3, #3
   11a1c:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11a20:	6883      	ldr	r3, [r0, #8]
   11a22:	4632      	mov	r2, r6
   11a24:	689f      	ldr	r7, [r3, #8]
   11a26:	a903      	add	r1, sp, #12
   11a28:	2323      	movs	r3, #35	; 0x23
   11a2a:	47b8      	blx	r7
    if (err < 0)
   11a2c:	2d00      	cmp	r5, #0
   11a2e:	db15      	blt.n	11a5c <bh1750_sample_fetch+0x88>
    {
        LOG_INF("Read from BH1750 failed");
        return err;
    }

    pm_device_action_run(bh1750_data->i2c, PM_DEVICE_ACTION_SUSPEND);
   11a30:	2100      	movs	r1, #0
   11a32:	6820      	ldr	r0, [r4, #0]
   11a34:	f00e fa85 	bl	1ff42 <pm_device_action_run>

    bh1750_data->data_h_byte = rx_data[0];
    bh1750_data->data_l_byte = rx_data[1];
   11a38:	f89d 3009 	ldrb.w	r3, [sp, #9]
    bh1750_data->data_h_byte = rx_data[0];
   11a3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11a40:	71a0      	strb	r0, [r4, #6]
    bh1750_data->data_l_byte = rx_data[1];
   11a42:	71e3      	strb	r3, [r4, #7]

    /* LUX Calculation */

    uint16_t tmp = (rx_data[0] << 8) | rx_data[1];
    uint16_t lux = tmp / 1.2;
   11a44:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   11a48:	f7ef fcac 	bl	13a4 <__aeabi_i2d>
   11a4c:	4b05      	ldr	r3, [pc, #20]	; (11a64 <bh1750_sample_fetch+0x90>)
   11a4e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   11a52:	f7ef fe3b 	bl	16cc <__aeabi_ddiv>
   11a56:	f7ef ff21 	bl	189c <__aeabi_d2uiz>
   11a5a:	80a0      	strh	r0, [r4, #4]

    bh1750_data->lux = lux;
}
   11a5c:	4628      	mov	r0, r5
   11a5e:	b007      	add	sp, #28
   11a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a62:	bf00      	nop
   11a64:	3ff33333 	.word	0x3ff33333

00011a68 <bh1750_init>:
 *
 * @param dev
 * @return int
 */
int bh1750_init(const struct device *dev)
{
   11a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct bh1750_device_t *drv_data = dev->data;
   11a6a:	6904      	ldr	r4, [r0, #16]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11a6c:	480e      	ldr	r0, [pc, #56]	; (11aa8 <bh1750_init+0x40>)
   11a6e:	f009 fc7f 	bl	1b370 <z_impl_device_get_binding>
    int16_t err;

    drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   11a72:	6020      	str	r0, [r4, #0]

    if (drv_data->i2c == NULL)
   11a74:	b1a0      	cbz	r0, 11aa0 <bh1750_init+0x38>
        return -EINVAL;
    }

    /* Set to powerdown */

    uint8_t data = 0x0;
   11a76:	2200      	movs	r2, #0
   11a78:	f88d 2003 	strb.w	r2, [sp, #3]
	msg.buf = (uint8_t *)buf;
   11a7c:	f10d 0203 	add.w	r2, sp, #3
   11a80:	9201      	str	r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   11a82:	2102      	movs	r1, #2
	msg.len = num_bytes;
   11a84:	2201      	movs	r2, #1
   11a86:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   11a88:	f88d 100c 	strb.w	r1, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   11a8c:	6883      	ldr	r3, [r0, #8]
   11a8e:	a901      	add	r1, sp, #4
   11a90:	689c      	ldr	r4, [r3, #8]
   11a92:	2323      	movs	r3, #35	; 0x23
   11a94:	47a0      	blx	r4
    err = i2c_write(drv_data->i2c, &data, 1, BH1750_I2C_ADDRESS);
   11a96:	b200      	sxth	r0, r0

    if (err < 0)
    {
        LOG_INF("Set device power down failed");
        return err;
   11a98:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    }

    return 0;
}
   11a9c:	b004      	add	sp, #16
   11a9e:	bd10      	pop	{r4, pc}
        return -EINVAL;
   11aa0:	f06f 0015 	mvn.w	r0, #21
   11aa4:	e7fa      	b.n	11a9c <bh1750_init+0x34>
   11aa6:	bf00      	nop
   11aa8:	00024d8c 	.word	0x00024d8c

00011aac <init_soil_adc_channel>:
 *
 * @return int16_t
 */
int16_t
init_soil_adc_channel(void)
{
   11aac:	b508      	push	{r3, lr}
   11aae:	4803      	ldr	r0, [pc, #12]	; (11abc <init_soil_adc_channel+0x10>)
   11ab0:	4903      	ldr	r1, [pc, #12]	; (11ac0 <init_soil_adc_channel+0x14>)
   11ab2:	6883      	ldr	r3, [r0, #8]
   11ab4:	681b      	ldr	r3, [r3, #0]
   11ab6:	4798      	blx	r3
    {
        LOG_INF("Error setting up soil measurement channel.");
    }

    return err;
}
   11ab8:	b200      	sxth	r0, r0
   11aba:	bd08      	pop	{r3, pc}
   11abc:	00024184 	.word	0x00024184
   11ac0:	00024d58 	.word	0x00024d58

00011ac4 <adc_calibrate_work_handler>:
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   11ac4:	4802      	ldr	r0, [pc, #8]	; (11ad0 <adc_calibrate_work_handler+0xc>)
   11ac6:	4903      	ldr	r1, [pc, #12]	; (11ad4 <adc_calibrate_work_handler+0x10>)
   11ac8:	6883      	ldr	r3, [r0, #8]
   11aca:	685b      	ldr	r3, [r3, #4]
   11acc:	4718      	bx	r3
   11ace:	bf00      	nop
   11ad0:	00024184 	.word	0x00024184
   11ad4:	000246cc 	.word	0x000246cc

00011ad8 <init_adc_calibration_channel>:
 * 
 * @return int16_t error
 * 
 */
int16_t init_adc_calibration_channel(void)
{
   11ad8:	b510      	push	{r4, lr}
	return api->channel_setup(dev, channel_cfg);
   11ada:	4806      	ldr	r0, [pc, #24]	; (11af4 <init_adc_calibration_channel+0x1c>)
   11adc:	4906      	ldr	r1, [pc, #24]	; (11af8 <init_adc_calibration_channel+0x20>)
   11ade:	6883      	ldr	r3, [r0, #8]
   11ae0:	681b      	ldr	r3, [r3, #0]
   11ae2:	4798      	blx	r3
    if (err)
    {
        LOG_INF("Error setting up calibration channel.");
    }

    k_work_init(&adc_calibrate_work_item, adc_calibrate_work_handler);
   11ae4:	4905      	ldr	r1, [pc, #20]	; (11afc <init_adc_calibration_channel+0x24>)
   11ae6:	4604      	mov	r4, r0
   11ae8:	4805      	ldr	r0, [pc, #20]	; (11b00 <init_adc_calibration_channel+0x28>)
   11aea:	f011 fefd 	bl	238e8 <k_work_init>

    return err;
}
   11aee:	b220      	sxth	r0, r4
   11af0:	bd10      	pop	{r4, pc}
   11af2:	bf00      	nop
   11af4:	00024184 	.word	0x00024184
   11af8:	00024d60 	.word	0x00024d60
   11afc:	00011ac5 	.word	0x00011ac5
   11b00:	200021a8 	.word	0x200021a8

00011b04 <get_adc_calibrate_work_item>:
 * @return struct k_work* 
 */
struct k_work *get_adc_calibrate_work_item(void)
{
    return &adc_calibrate_work_item;
   11b04:	4800      	ldr	r0, [pc, #0]	; (11b08 <get_adc_calibrate_work_item+0x4>)
   11b06:	4770      	bx	lr
   11b08:	200021a8 	.word	0x200021a8

00011b0c <flash_system_init>:
static struct nvs_fs fs;
static const struct device *flash_dev;

// --- functions definitions ---------------------------------------------------
void flash_system_init(void)
{
   11b0c:	b530      	push	{r4, r5, lr}
    int err = 0;
    struct flash_pages_info info;

    flash_dev = FLASH_AREA_DEVICE(STORAGE_NODE_LABEL);
   11b0e:	4d0d      	ldr	r5, [pc, #52]	; (11b44 <flash_system_init+0x38>)
   11b10:	480d      	ldr	r0, [pc, #52]	; (11b48 <flash_system_init+0x3c>)
   11b12:	6028      	str	r0, [r5, #0]
{
   11b14:	b085      	sub	sp, #20
   11b16:	f011 fcb5 	bl	23484 <z_device_ready>
   11b1a:	b188      	cbz	r0, 11b40 <flash_system_init+0x34>
    {
        LOG_INF("Flash device %s is not ready\n", flash_dev->name);
        return;
    }

	fs.offset = FLASH_AREA_OFFSET(storage);
   11b1c:	4c0b      	ldr	r4, [pc, #44]	; (11b4c <flash_system_init+0x40>)
	err = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
   11b1e:	6828      	ldr	r0, [r5, #0]
	fs.offset = FLASH_AREA_OFFSET(storage);
   11b20:	f44f 214c 	mov.w	r1, #835584	; 0xcc000
   11b24:	6021      	str	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11b26:	aa01      	add	r2, sp, #4
   11b28:	f011 fa98 	bl	2305c <z_impl_flash_get_page_info_by_offs>
	if (err) {
   11b2c:	b940      	cbnz	r0, 11b40 <flash_system_init+0x34>
		LOG_INF("Unable to get page info\n");
		return;
	}
    fs.sector_size = info.size;
   11b2e:	9b02      	ldr	r3, [sp, #8]
   11b30:	81a3      	strh	r3, [r4, #12]
    fs.sector_count = 3U;
   11b32:	2303      	movs	r3, #3
   11b34:	81e3      	strh	r3, [r4, #14]

    err = nvs_init(&fs, flash_dev->name);
   11b36:	682b      	ldr	r3, [r5, #0]
   11b38:	4620      	mov	r0, r4
   11b3a:	6819      	ldr	r1, [r3, #0]
   11b3c:	f000 fe52 	bl	127e4 <nvs_init>
    if (err) {
        LOG_INF("Flash Init failed\n");
        return;
    }
}
   11b40:	b005      	add	sp, #20
   11b42:	bd30      	pop	{r4, r5, pc}
   11b44:	200021b8 	.word	0x200021b8
   11b48:	000241a0 	.word	0x000241a0
   11b4c:	200021bc 	.word	0x200021bc

00011b50 <get_file_system_handle>:

// File system handle getter
struct nvs_fs* get_file_system_handle(void)
{
    return &fs;
   11b50:	4800      	ldr	r0, [pc, #0]	; (11b54 <get_file_system_handle+0x4>)
   11b52:	4770      	bx	lr
   11b54:	200021bc 	.word	0x200021bc

00011b58 <init_adc_calibration_timer>:
}

// --- functions declarations -------------------------------------------
void init_adc_calibration_timer(void)
{
    k_timer_init(&adc_calibration_timer, adc_calibration_timer_handler, NULL);
   11b58:	4902      	ldr	r1, [pc, #8]	; (11b64 <init_adc_calibration_timer+0xc>)
   11b5a:	4803      	ldr	r0, [pc, #12]	; (11b68 <init_adc_calibration_timer+0x10>)
   11b5c:	2200      	movs	r2, #0
   11b5e:	f012 b8be 	b.w	23cde <k_timer_init>
   11b62:	bf00      	nop
   11b64:	0001f493 	.word	0x0001f493
   11b68:	20001958 	.word	0x20001958

00011b6c <start_adc_calibration_timer>:
}

void start_adc_calibration_timer(k_timeout_t duration, k_timeout_t period)
{
   11b6c:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
   11b6e:	e9cd 2300 	strd	r2, r3, [sp]
   11b72:	4602      	mov	r2, r0
   11b74:	460b      	mov	r3, r1
   11b76:	4803      	ldr	r0, [pc, #12]	; (11b84 <start_adc_calibration_timer+0x18>)
   11b78:	f00a fe8e 	bl	1c898 <z_impl_k_timer_start>
    k_timer_start(&adc_calibration_timer, duration, period);
}
   11b7c:	b003      	add	sp, #12
   11b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b82:	bf00      	nop
   11b84:	20001958 	.word	0x20001958

00011b88 <watchdog_thread>:
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   11b88:	4b06      	ldr	r3, [pc, #24]	; (11ba4 <watchdog_thread+0x1c>)
 *        some other thread has stuck. Watchdog won't be fed and
 *        thus a reset will be triggered.
 *
 */
static void watchdog_thread(void)
{
   11b8a:	b570      	push	{r4, r5, r6, lr}
   11b8c:	689e      	ldr	r6, [r3, #8]
	return z_impl_k_sleep(timeout);
   11b8e:	4c06      	ldr	r4, [pc, #24]	; (11ba8 <watchdog_thread+0x20>)
   11b90:	2500      	movs	r5, #0
   11b92:	2100      	movs	r1, #0
   11b94:	68f3      	ldr	r3, [r6, #12]
   11b96:	4803      	ldr	r0, [pc, #12]	; (11ba4 <watchdog_thread+0x1c>)
   11b98:	4798      	blx	r3
   11b9a:	4620      	mov	r0, r4
   11b9c:	4629      	mov	r1, r5
   11b9e:	f00a fc2b 	bl	1c3f8 <z_impl_k_sleep>

    if (hw_wdt_dev)
    {
        while (1)
   11ba2:	e7f6      	b.n	11b92 <watchdog_thread+0xa>
   11ba4:	00024130 	.word	0x00024130
   11ba8:	0004f334 	.word	0x0004f334

00011bac <init_watchdog>:
/**
 * @brief Watchdog initialization function
 *
 */
void init_watchdog(void)
{
   11bac:	b570      	push	{r4, r5, r6, lr}
	return api->install_timeout(dev, cfg);
   11bae:	4c08      	ldr	r4, [pc, #32]	; (11bd0 <init_watchdog+0x24>)
   11bb0:	4908      	ldr	r1, [pc, #32]	; (11bd4 <init_watchdog+0x28>)
   11bb2:	68a5      	ldr	r5, [r4, #8]
   11bb4:	4620      	mov	r0, r4
   11bb6:	68ab      	ldr	r3, [r5, #8]
   11bb8:	4798      	blx	r3
	return api->setup(dev, options);
   11bba:	2102      	movs	r1, #2
   11bbc:	682b      	ldr	r3, [r5, #0]
   11bbe:	4620      	mov	r0, r4
   11bc0:	4798      	blx	r3
	return api->feed(dev, channel_id);
   11bc2:	2100      	movs	r1, #0
   11bc4:	68eb      	ldr	r3, [r5, #12]
   11bc6:	4620      	mov	r0, r4
    }
    else
    {
        LOG_ERR("Watchdog initialization failed!");
    }
}
   11bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11bcc:	4718      	bx	r3
   11bce:	bf00      	nop
   11bd0:	00024130 	.word	0x00024130
   11bd4:	000246e0 	.word	0x000246e0

00011bd8 <gpio_interface_init>:
 * This function contains the configuration
 * for all gpio needed.
 * 
 */
void gpio_interface_init(void)
{
   11bd8:	b508      	push	{r3, lr}
   11bda:	480b      	ldr	r0, [pc, #44]	; (11c08 <gpio_interface_init+0x30>)
   11bdc:	f009 fbc8 	bl	1b370 <z_impl_device_get_binding>
	struct gpio_driver_data *data =
   11be0:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   11be2:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11be4:	6813      	ldr	r3, [r2, #0]
   11be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11bea:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11bec:	680b      	ldr	r3, [r1, #0]
   11bee:	f44f 7200 	mov.w	r2, #512	; 0x200
   11bf2:	2108      	movs	r1, #8
   11bf4:	4798      	blx	r3
    const struct device *gpio_dev = get_gpio_dev();

    /* Soil Moisture GPIO Enable --> Pin P01.8 */
    gpio_pin_configure(gpio_dev, SOIL_MOISTURE_GPIO_ENABLE_PIN, GPIO_OUTPUT);
    /* GPIO High drive mode */
    NRF_P1->PIN_CNF[8] |= (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos);
   11bf6:	4a05      	ldr	r2, [pc, #20]	; (11c0c <gpio_interface_init+0x34>)
   11bf8:	f8d2 3720 	ldr.w	r3, [r2, #1824]	; 0x720
   11bfc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   11c00:	f8c2 3720 	str.w	r3, [r2, #1824]	; 0x720

}
   11c04:	bd08      	pop	{r3, pc}
   11c06:	bf00      	nop
   11c08:	00024dac 	.word	0x00024dac
   11c0c:	50000300 	.word	0x50000300

00011c10 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   11c10:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11c12:	4c0a      	ldr	r4, [pc, #40]	; (11c3c <crc8_ccitt+0x2c>)
   11c14:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   11c16:	4291      	cmp	r1, r2
   11c18:	d100      	bne.n	11c1c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   11c1a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   11c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
   11c20:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11c22:	0903      	lsrs	r3, r0, #4
   11c24:	5ce3      	ldrb	r3, [r4, r3]
   11c26:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   11c2a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11c2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11c30:	5ce0      	ldrb	r0, [r4, r3]
   11c32:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   11c36:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   11c38:	e7ed      	b.n	11c16 <crc8_ccitt+0x6>
   11c3a:	bf00      	nop
   11c3c:	00024db3 	.word	0x00024db3

00011c40 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11c40:	680b      	ldr	r3, [r1, #0]
   11c42:	3301      	adds	r3, #1
   11c44:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11c46:	4b01      	ldr	r3, [pc, #4]	; (11c4c <char_out+0xc>)
   11c48:	681b      	ldr	r3, [r3, #0]
   11c4a:	4718      	bx	r3
   11c4c:	2000056c 	.word	0x2000056c

00011c50 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11c50:	b507      	push	{r0, r1, r2, lr}
   11c52:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11c54:	2100      	movs	r1, #0
{
   11c56:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   11c58:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11c5a:	4803      	ldr	r0, [pc, #12]	; (11c68 <vprintk+0x18>)
   11c5c:	a901      	add	r1, sp, #4
   11c5e:	f000 f8eb 	bl	11e38 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   11c62:	b003      	add	sp, #12
   11c64:	f85d fb04 	ldr.w	pc, [sp], #4
   11c68:	00011c41 	.word	0x00011c41

00011c6c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11c70:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11c74:	f019 0808 	ands.w	r8, r9, #8
{
   11c78:	4604      	mov	r4, r0
   11c7a:	4693      	mov	fp, r2
	if (processing) {
   11c7c:	d00d      	beq.n	11c9a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   11c7e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11c80:	bf0c      	ite	eq
   11c82:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11c86:	f049 0920 	orrne.w	r9, r9, #32
   11c8a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11c8e:	f38b 8811 	msr	BASEPRI, fp
   11c92:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11c9a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   11c9e:	2902      	cmp	r1, #2
   11ca0:	d107      	bne.n	11cb2 <process_event+0x46>
			evt = process_recheck(mgr);
   11ca2:	4620      	mov	r0, r4
   11ca4:	f00d fc38 	bl	1f518 <process_recheck>
		if (evt == EVT_NOP) {
   11ca8:	2800      	cmp	r0, #0
   11caa:	d0f0      	beq.n	11c8e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11cac:	2801      	cmp	r0, #1
   11cae:	8b23      	ldrh	r3, [r4, #24]
   11cb0:	d150      	bne.n	11d54 <process_event+0xe8>
			res = mgr->last_res;
   11cb2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11cb4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11cb6:	2f00      	cmp	r7, #0
   11cb8:	da15      	bge.n	11ce6 <process_event+0x7a>
		*clients = mgr->clients;
   11cba:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cbc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   11cc0:	e9c4 8800 	strd	r8, r8, [r4]
   11cc4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11cc8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   11cca:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11ccc:	8b21      	ldrh	r1, [r4, #24]
   11cce:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11cd2:	45ca      	cmp	sl, r9
   11cd4:	d002      	beq.n	11cdc <process_event+0x70>
		if (do_monitors
   11cd6:	68a3      	ldr	r3, [r4, #8]
   11cd8:	2b00      	cmp	r3, #0
   11cda:	d15c      	bne.n	11d96 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   11cdc:	b90d      	cbnz	r5, 11ce2 <process_event+0x76>
		    || (transit != NULL)) {
   11cde:	2e00      	cmp	r6, #0
   11ce0:	d074      	beq.n	11dcc <process_event+0x160>
   11ce2:	2300      	movs	r3, #0
   11ce4:	e058      	b.n	11d98 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11ce6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11cea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11cec:	2a01      	cmp	r2, #1
   11cee:	d820      	bhi.n	11d32 <process_event+0xc6>
		*clients = mgr->clients;
   11cf0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11cf4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11cf6:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   11cf8:	b289      	uxth	r1, r1
	list->tail = NULL;
   11cfa:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11cfe:	d10c      	bne.n	11d1a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11d00:	2d00      	cmp	r5, #0
   11d02:	462b      	mov	r3, r5
   11d04:	bf38      	it	cc
   11d06:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11d08:	b12b      	cbz	r3, 11d16 <process_event+0xaa>
				mgr->refs += 1U;
   11d0a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11d0c:	681b      	ldr	r3, [r3, #0]
   11d0e:	3201      	adds	r2, #1
   11d10:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11d12:	2b00      	cmp	r3, #0
   11d14:	d1f8      	bne.n	11d08 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d16:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11d1a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11d1c:	4620      	mov	r0, r4
   11d1e:	f00d fbfb 	bl	1f518 <process_recheck>
   11d22:	4606      	mov	r6, r0
   11d24:	2800      	cmp	r0, #0
   11d26:	d0d1      	beq.n	11ccc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11d28:	8b23      	ldrh	r3, [r4, #24]
   11d2a:	f043 0320 	orr.w	r3, r3, #32
   11d2e:	8323      	strh	r3, [r4, #24]
   11d30:	e7cb      	b.n	11cca <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11d32:	2b04      	cmp	r3, #4
   11d34:	d10c      	bne.n	11d50 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d36:	f021 0107 	bic.w	r1, r1, #7
   11d3a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11d3c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11d3e:	4620      	mov	r0, r4
   11d40:	f00d fbea 	bl	1f518 <process_recheck>
   11d44:	4605      	mov	r5, r0
   11d46:	2800      	cmp	r0, #0
   11d48:	d0bf      	beq.n	11cca <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11d4a:	f041 0120 	orr.w	r1, r1, #32
   11d4e:	8321      	strh	r1, [r4, #24]
   11d50:	2500      	movs	r5, #0
   11d52:	e7ba      	b.n	11cca <process_event+0x5e>
		} else if (evt == EVT_START) {
   11d54:	2803      	cmp	r0, #3
   11d56:	d109      	bne.n	11d6c <process_event+0x100>
			transit = mgr->transitions->start;
   11d58:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d5a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   11d5e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d60:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   11d64:	8323      	strh	r3, [r4, #24]
}
   11d66:	2500      	movs	r5, #0
		res = 0;
   11d68:	462f      	mov	r7, r5
   11d6a:	e7af      	b.n	11ccc <process_event+0x60>
		} else if (evt == EVT_STOP) {
   11d6c:	2804      	cmp	r0, #4
   11d6e:	d106      	bne.n	11d7e <process_event+0x112>
			transit = mgr->transitions->stop;
   11d70:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d72:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   11d76:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d78:	f043 0304 	orr.w	r3, r3, #4
   11d7c:	e7f2      	b.n	11d64 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   11d7e:	2805      	cmp	r0, #5
   11d80:	d106      	bne.n	11d90 <process_event+0x124>
			transit = mgr->transitions->reset;
   11d82:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d84:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   11d88:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d8a:	f043 0305 	orr.w	r3, r3, #5
   11d8e:	e7e9      	b.n	11d64 <process_event+0xf8>
   11d90:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11d92:	462e      	mov	r6, r5
   11d94:	e7e8      	b.n	11d68 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   11d96:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11d98:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11d9c:	8321      	strh	r1, [r4, #24]
   11d9e:	f38b 8811 	msr	BASEPRI, fp
   11da2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11da6:	bb03      	cbnz	r3, 11dea <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   11da8:	2d00      	cmp	r5, #0
   11daa:	d133      	bne.n	11e14 <process_event+0x1a8>
			if (transit != NULL) {
   11dac:	b116      	cbz	r6, 11db4 <process_event+0x148>
				transit(mgr, transition_complete);
   11dae:	4921      	ldr	r1, [pc, #132]	; (11e34 <process_event+0x1c8>)
   11db0:	4620      	mov	r0, r4
   11db2:	47b0      	blx	r6
	__asm__ volatile(
   11db4:	f04f 0340 	mov.w	r3, #64	; 0x40
   11db8:	f3ef 8b11 	mrs	fp, BASEPRI
   11dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   11dc0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11dc4:	8b23      	ldrh	r3, [r4, #24]
   11dc6:	f023 0308 	bic.w	r3, r3, #8
   11dca:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11dcc:	8b23      	ldrh	r3, [r4, #24]
   11dce:	06da      	lsls	r2, r3, #27
   11dd0:	d528      	bpl.n	11e24 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11dd2:	f023 0310 	bic.w	r3, r3, #16
   11dd6:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11dd8:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11dda:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   11dde:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   11de2:	2900      	cmp	r1, #0
   11de4:	f47f af5b 	bne.w	11c9e <process_event+0x32>
out:
   11de8:	e751      	b.n	11c8e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11dea:	68a1      	ldr	r1, [r4, #8]
   11dec:	2900      	cmp	r1, #0
   11dee:	d0db      	beq.n	11da8 <process_event+0x13c>
	return node->next;
   11df0:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   11df2:	f8d1 b004 	ldr.w	fp, [r1, #4]
   11df6:	2b00      	cmp	r3, #0
   11df8:	bf38      	it	cc
   11dfa:	2300      	movcc	r3, #0
   11dfc:	4699      	mov	r9, r3
   11dfe:	4652      	mov	r2, sl
   11e00:	463b      	mov	r3, r7
   11e02:	4620      	mov	r0, r4
   11e04:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11e06:	f1b9 0f00 	cmp.w	r9, #0
   11e0a:	d0cd      	beq.n	11da8 <process_event+0x13c>
   11e0c:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11e10:	4649      	mov	r1, r9
   11e12:	e7ee      	b.n	11df2 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11e14:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   11e16:	463b      	mov	r3, r7
   11e18:	4652      	mov	r2, sl
   11e1a:	4620      	mov	r0, r4
   11e1c:	682d      	ldr	r5, [r5, #0]
   11e1e:	f00d fb97 	bl	1f550 <notify_one>
   11e22:	e7c1      	b.n	11da8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11e24:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11e28:	bf1e      	ittt	ne
   11e2a:	f023 0320 	bicne.w	r3, r3, #32
   11e2e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   11e30:	2102      	movne	r1, #2
   11e32:	e7d2      	b.n	11dda <process_event+0x16e>
   11e34:	0001f57d 	.word	0x0001f57d

00011e38 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	b091      	sub	sp, #68	; 0x44
   11e3e:	468b      	mov	fp, r1
   11e40:	9002      	str	r0, [sp, #8]
   11e42:	4692      	mov	sl, r2
   11e44:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11e46:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11e48:	f89a 0000 	ldrb.w	r0, [sl]
   11e4c:	b908      	cbnz	r0, 11e52 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11e4e:	4628      	mov	r0, r5
   11e50:	e35e      	b.n	12510 <cbvprintf+0x6d8>
		if (*fp != '%') {
   11e52:	2825      	cmp	r0, #37	; 0x25
   11e54:	f10a 0701 	add.w	r7, sl, #1
   11e58:	d007      	beq.n	11e6a <cbvprintf+0x32>
			OUTC('%');
   11e5a:	9b02      	ldr	r3, [sp, #8]
   11e5c:	4659      	mov	r1, fp
   11e5e:	4798      	blx	r3
   11e60:	2800      	cmp	r0, #0
   11e62:	f2c0 8355 	blt.w	12510 <cbvprintf+0x6d8>
   11e66:	3501      	adds	r5, #1
			break;
   11e68:	e210      	b.n	1228c <cbvprintf+0x454>
		} state = {
   11e6a:	2218      	movs	r2, #24
   11e6c:	2100      	movs	r1, #0
   11e6e:	a80a      	add	r0, sp, #40	; 0x28
   11e70:	f00e fad4 	bl	2041c <memset>
	if (*sp == '%') {
   11e74:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11e78:	2b25      	cmp	r3, #37	; 0x25
   11e7a:	d078      	beq.n	11f6e <cbvprintf+0x136>
   11e7c:	2200      	movs	r2, #0
   11e7e:	4694      	mov	ip, r2
   11e80:	4616      	mov	r6, r2
   11e82:	4696      	mov	lr, r2
   11e84:	4610      	mov	r0, r2
   11e86:	4639      	mov	r1, r7
		switch (*sp) {
   11e88:	f817 3b01 	ldrb.w	r3, [r7], #1
   11e8c:	2b2b      	cmp	r3, #43	; 0x2b
   11e8e:	f000 809d 	beq.w	11fcc <cbvprintf+0x194>
   11e92:	f200 8094 	bhi.w	11fbe <cbvprintf+0x186>
   11e96:	2b20      	cmp	r3, #32
   11e98:	f000 809b 	beq.w	11fd2 <cbvprintf+0x19a>
   11e9c:	2b23      	cmp	r3, #35	; 0x23
   11e9e:	f000 809a 	beq.w	11fd6 <cbvprintf+0x19e>
   11ea2:	b128      	cbz	r0, 11eb0 <cbvprintf+0x78>
   11ea4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11ea8:	f040 0004 	orr.w	r0, r0, #4
   11eac:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11eb0:	f1be 0f00 	cmp.w	lr, #0
   11eb4:	d005      	beq.n	11ec2 <cbvprintf+0x8a>
   11eb6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11eba:	f040 0008 	orr.w	r0, r0, #8
   11ebe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11ec2:	b12e      	cbz	r6, 11ed0 <cbvprintf+0x98>
   11ec4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11ec8:	f040 0010 	orr.w	r0, r0, #16
   11ecc:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11ed0:	f1bc 0f00 	cmp.w	ip, #0
   11ed4:	d005      	beq.n	11ee2 <cbvprintf+0xaa>
   11ed6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11eda:	f040 0020 	orr.w	r0, r0, #32
   11ede:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11ee2:	b12a      	cbz	r2, 11ef0 <cbvprintf+0xb8>
   11ee4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11eec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11ef0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11ef4:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11ef8:	2844      	cmp	r0, #68	; 0x44
   11efa:	d103      	bne.n	11f04 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11efc:	f36f 1286 	bfc	r2, #6, #1
   11f00:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11f04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11f08:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11f0e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11f12:	d17b      	bne.n	1200c <cbvprintf+0x1d4>
		conv->width_star = true;
   11f14:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11f18:	f042 0201 	orr.w	r2, r2, #1
   11f1c:	1c4b      	adds	r3, r1, #1
   11f1e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11f22:	781a      	ldrb	r2, [r3, #0]
   11f24:	2a2e      	cmp	r2, #46	; 0x2e
   11f26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11f2a:	bf0c      	ite	eq
   11f2c:	2101      	moveq	r1, #1
   11f2e:	2100      	movne	r1, #0
   11f30:	f361 0241 	bfi	r2, r1, #1, #1
   11f34:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11f38:	d174      	bne.n	12024 <cbvprintf+0x1ec>
	if (*sp == '*') {
   11f3a:	785a      	ldrb	r2, [r3, #1]
   11f3c:	2a2a      	cmp	r2, #42	; 0x2a
   11f3e:	d06a      	beq.n	12016 <cbvprintf+0x1de>
   11f40:	3301      	adds	r3, #1
	size_t val = 0;
   11f42:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11f44:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11f46:	4618      	mov	r0, r3
   11f48:	f810 2b01 	ldrb.w	r2, [r0], #1
   11f4c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11f50:	2f09      	cmp	r7, #9
   11f52:	f240 808e 	bls.w	12072 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11f56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11f5a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11f5c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   11f60:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   11f64:	f361 0241 	bfi	r2, r1, #1, #1
   11f68:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11f6c:	e05a      	b.n	12024 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   11f6e:	f10a 0702 	add.w	r7, sl, #2
   11f72:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   11f76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11f7a:	07d9      	lsls	r1, r3, #31
   11f7c:	f140 8149 	bpl.w	12212 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   11f80:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11f84:	f1b9 0f00 	cmp.w	r9, #0
   11f88:	da07      	bge.n	11f9a <cbvprintf+0x162>
				conv->flag_dash = true;
   11f8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11f8e:	f042 0204 	orr.w	r2, r2, #4
   11f92:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   11f96:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   11f9a:	075a      	lsls	r2, r3, #29
   11f9c:	f140 8142 	bpl.w	12224 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11fa0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   11fa4:	f1b8 0f00 	cmp.w	r8, #0
   11fa8:	f280 8141 	bge.w	1222e <cbvprintf+0x3f6>
				conv->prec_present = false;
   11fac:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11fb0:	f36f 0341 	bfc	r3, #1, #1
   11fb4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   11fb8:	f04f 38ff 	mov.w	r8, #4294967295
   11fbc:	e137      	b.n	1222e <cbvprintf+0x3f6>
		switch (*sp) {
   11fbe:	2b2d      	cmp	r3, #45	; 0x2d
   11fc0:	d00c      	beq.n	11fdc <cbvprintf+0x1a4>
   11fc2:	2b30      	cmp	r3, #48	; 0x30
   11fc4:	f47f af6d 	bne.w	11ea2 <cbvprintf+0x6a>
			conv->flag_zero = true;
   11fc8:	2201      	movs	r2, #1
	} while (loop);
   11fca:	e75c      	b.n	11e86 <cbvprintf+0x4e>
			conv->flag_plus = true;
   11fcc:	f04f 0e01 	mov.w	lr, #1
   11fd0:	e759      	b.n	11e86 <cbvprintf+0x4e>
			conv->flag_space = true;
   11fd2:	2601      	movs	r6, #1
   11fd4:	e757      	b.n	11e86 <cbvprintf+0x4e>
			conv->flag_hash = true;
   11fd6:	f04f 0c01 	mov.w	ip, #1
   11fda:	e754      	b.n	11e86 <cbvprintf+0x4e>
		switch (*sp) {
   11fdc:	2001      	movs	r0, #1
   11fde:	e752      	b.n	11e86 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11fe0:	fb0c 0202 	mla	r2, ip, r2, r0
   11fe4:	3a30      	subs	r2, #48	; 0x30
   11fe6:	4633      	mov	r3, r6
   11fe8:	461e      	mov	r6, r3
   11fea:	f816 0b01 	ldrb.w	r0, [r6], #1
   11fee:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11ff2:	2f09      	cmp	r7, #9
   11ff4:	d9f4      	bls.n	11fe0 <cbvprintf+0x1a8>
	if (sp != wp) {
   11ff6:	4299      	cmp	r1, r3
   11ff8:	d093      	beq.n	11f22 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11ffa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11ffe:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12000:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12002:	f362 0141 	bfi	r1, r2, #1, #1
   12006:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1200a:	e78a      	b.n	11f22 <cbvprintf+0xea>
   1200c:	460b      	mov	r3, r1
	size_t val = 0;
   1200e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12010:	f04f 0c0a 	mov.w	ip, #10
   12014:	e7e8      	b.n	11fe8 <cbvprintf+0x1b0>
		conv->prec_star = true;
   12016:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1201a:	f042 0204 	orr.w	r2, r2, #4
   1201e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   12022:	3302      	adds	r3, #2
	switch (*sp) {
   12024:	461f      	mov	r7, r3
   12026:	f817 2b01 	ldrb.w	r2, [r7], #1
   1202a:	2a6c      	cmp	r2, #108	; 0x6c
   1202c:	d041      	beq.n	120b2 <cbvprintf+0x27a>
   1202e:	d825      	bhi.n	1207c <cbvprintf+0x244>
   12030:	2a68      	cmp	r2, #104	; 0x68
   12032:	d02b      	beq.n	1208c <cbvprintf+0x254>
   12034:	2a6a      	cmp	r2, #106	; 0x6a
   12036:	d046      	beq.n	120c6 <cbvprintf+0x28e>
   12038:	2a4c      	cmp	r2, #76	; 0x4c
   1203a:	d04c      	beq.n	120d6 <cbvprintf+0x29e>
   1203c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1203e:	f817 2b01 	ldrb.w	r2, [r7], #1
   12042:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12046:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1204a:	2a78      	cmp	r2, #120	; 0x78
   1204c:	f200 80d9 	bhi.w	12202 <cbvprintf+0x3ca>
   12050:	2a57      	cmp	r2, #87	; 0x57
   12052:	d84d      	bhi.n	120f0 <cbvprintf+0x2b8>
   12054:	2a41      	cmp	r2, #65	; 0x41
   12056:	d003      	beq.n	12060 <cbvprintf+0x228>
   12058:	3a45      	subs	r2, #69	; 0x45
   1205a:	2a02      	cmp	r2, #2
   1205c:	f200 80d1 	bhi.w	12202 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   12060:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12064:	2204      	movs	r2, #4
   12066:	f362 0302 	bfi	r3, r2, #0, #3
   1206a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   1206e:	2301      	movs	r3, #1
			break;
   12070:	e09e      	b.n	121b0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   12072:	fb06 2101 	mla	r1, r6, r1, r2
   12076:	3930      	subs	r1, #48	; 0x30
   12078:	4603      	mov	r3, r0
   1207a:	e764      	b.n	11f46 <cbvprintf+0x10e>
	switch (*sp) {
   1207c:	2a74      	cmp	r2, #116	; 0x74
   1207e:	d026      	beq.n	120ce <cbvprintf+0x296>
   12080:	2a7a      	cmp	r2, #122	; 0x7a
   12082:	d1db      	bne.n	1203c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   12084:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12088:	2206      	movs	r2, #6
   1208a:	e00d      	b.n	120a8 <cbvprintf+0x270>
		if (*++sp == 'h') {
   1208c:	785a      	ldrb	r2, [r3, #1]
   1208e:	2a68      	cmp	r2, #104	; 0x68
   12090:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12094:	d106      	bne.n	120a4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   12096:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12098:	f361 02c6 	bfi	r2, r1, #3, #4
   1209c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   120a0:	1c9f      	adds	r7, r3, #2
   120a2:	e7cc      	b.n	1203e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   120a4:	4613      	mov	r3, r2
   120a6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   120a8:	f362 03c6 	bfi	r3, r2, #3, #4
   120ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   120b0:	e7c5      	b.n	1203e <cbvprintf+0x206>
		if (*++sp == 'l') {
   120b2:	785a      	ldrb	r2, [r3, #1]
   120b4:	2a6c      	cmp	r2, #108	; 0x6c
   120b6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   120ba:	d101      	bne.n	120c0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   120bc:	2104      	movs	r1, #4
   120be:	e7eb      	b.n	12098 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   120c0:	4613      	mov	r3, r2
   120c2:	2203      	movs	r2, #3
   120c4:	e7f0      	b.n	120a8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   120c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   120ca:	2205      	movs	r2, #5
   120cc:	e7ec      	b.n	120a8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   120ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   120d2:	2207      	movs	r2, #7
   120d4:	e7e8      	b.n	120a8 <cbvprintf+0x270>
		conv->unsupported = true;
   120d6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   120da:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   120de:	f023 0302 	bic.w	r3, r3, #2
   120e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   120e6:	f043 0302 	orr.w	r3, r3, #2
   120ea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   120ee:	e7a6      	b.n	1203e <cbvprintf+0x206>
   120f0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   120f4:	2920      	cmp	r1, #32
   120f6:	f200 8084 	bhi.w	12202 <cbvprintf+0x3ca>
   120fa:	a001      	add	r0, pc, #4	; (adr r0, 12100 <cbvprintf+0x2c8>)
   120fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12100:	000121c5 	.word	0x000121c5
   12104:	00012203 	.word	0x00012203
   12108:	00012203 	.word	0x00012203
   1210c:	00012203 	.word	0x00012203
   12110:	00012203 	.word	0x00012203
   12114:	00012203 	.word	0x00012203
   12118:	00012203 	.word	0x00012203
   1211c:	00012203 	.word	0x00012203
   12120:	00012203 	.word	0x00012203
   12124:	00012061 	.word	0x00012061
   12128:	00012203 	.word	0x00012203
   1212c:	000121c5 	.word	0x000121c5
   12130:	00012185 	.word	0x00012185
   12134:	00012061 	.word	0x00012061
   12138:	00012061 	.word	0x00012061
   1213c:	00012061 	.word	0x00012061
   12140:	00012203 	.word	0x00012203
   12144:	00012185 	.word	0x00012185
   12148:	00012203 	.word	0x00012203
   1214c:	00012203 	.word	0x00012203
   12150:	00012203 	.word	0x00012203
   12154:	00012203 	.word	0x00012203
   12158:	000121cd 	.word	0x000121cd
   1215c:	000121c5 	.word	0x000121c5
   12160:	000121e9 	.word	0x000121e9
   12164:	00012203 	.word	0x00012203
   12168:	00012203 	.word	0x00012203
   1216c:	000121e9 	.word	0x000121e9
   12170:	00012203 	.word	0x00012203
   12174:	000121c5 	.word	0x000121c5
   12178:	00012203 	.word	0x00012203
   1217c:	00012203 	.word	0x00012203
   12180:	000121c5 	.word	0x000121c5
		conv->specifier_cat = SPECIFIER_SINT;
   12184:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12188:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1218a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1218e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12192:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12194:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   12198:	bf02      	ittt	eq
   1219a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1219e:	f041 0101 	orreq.w	r1, r1, #1
   121a2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   121a6:	2a63      	cmp	r2, #99	; 0x63
   121a8:	d131      	bne.n	1220e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   121aa:	3b00      	subs	r3, #0
   121ac:	bf18      	it	ne
   121ae:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   121b0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   121b4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   121b8:	430b      	orrs	r3, r1
   121ba:	f363 0241 	bfi	r2, r3, #1, #1
   121be:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   121c2:	e6d8      	b.n	11f76 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   121c4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   121c8:	2002      	movs	r0, #2
   121ca:	e7de      	b.n	1218a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   121cc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   121d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   121d4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   121d8:	2103      	movs	r1, #3
   121da:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   121de:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   121e0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   121e4:	4143      	adcs	r3, r0
   121e6:	e7e3      	b.n	121b0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   121e8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   121ec:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   121ee:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   121f2:	f361 0202 	bfi	r2, r1, #0, #3
   121f6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   121fa:	bf14      	ite	ne
   121fc:	2301      	movne	r3, #1
   121fe:	2300      	moveq	r3, #0
   12200:	e7d6      	b.n	121b0 <cbvprintf+0x378>
		conv->invalid = true;
   12202:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12206:	f043 0301 	orr.w	r3, r3, #1
   1220a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1220e:	2300      	movs	r3, #0
   12210:	e7ce      	b.n	121b0 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12212:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12216:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12218:	bfb4      	ite	lt
   1221a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1221e:	f04f 39ff 	movge.w	r9, #4294967295
   12222:	e6ba      	b.n	11f9a <cbvprintf+0x162>
		} else if (conv->prec_present) {
   12224:	079b      	lsls	r3, r3, #30
   12226:	f57f aec7 	bpl.w	11fb8 <cbvprintf+0x180>
			precision = conv->prec_value;
   1222a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1222e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   12232:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12234:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   12238:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   1223c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12240:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12242:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12246:	d136      	bne.n	122b6 <cbvprintf+0x47e>
			switch (length_mod) {
   12248:	1ed3      	subs	r3, r2, #3
   1224a:	2b04      	cmp	r3, #4
   1224c:	d820      	bhi.n	12290 <cbvprintf+0x458>
   1224e:	e8df f003 	tbb	[pc, r3]
   12252:	0703      	.short	0x0703
   12254:	1f07      	.short	0x1f07
   12256:	1f          	.byte	0x1f
   12257:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12258:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   1225c:	17c1      	asrs	r1, r0, #31
   1225e:	e004      	b.n	1226a <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   12260:	3407      	adds	r4, #7
   12262:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   12266:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1226a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   1226e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12272:	f013 0603 	ands.w	r6, r3, #3
   12276:	d054      	beq.n	12322 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   12278:	9802      	ldr	r0, [sp, #8]
   1227a:	463b      	mov	r3, r7
   1227c:	4652      	mov	r2, sl
   1227e:	4659      	mov	r1, fp
   12280:	f00d fc0f 	bl	1faa2 <outs>
   12284:	2800      	cmp	r0, #0
   12286:	f2c0 8143 	blt.w	12510 <cbvprintf+0x6d8>
   1228a:	4405      	add	r5, r0
			continue;
   1228c:	46ba      	mov	sl, r7
   1228e:	e5db      	b.n	11e48 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12290:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   12294:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12296:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1229a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1229e:	d105      	bne.n	122ac <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   122a0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   122a4:	930a      	str	r3, [sp, #40]	; 0x28
   122a6:	2300      	movs	r3, #0
   122a8:	930b      	str	r3, [sp, #44]	; 0x2c
   122aa:	e7e0      	b.n	1226e <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   122ac:	2a02      	cmp	r2, #2
   122ae:	d1de      	bne.n	1226e <cbvprintf+0x436>
				value->sint = (short)value->sint;
   122b0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   122b4:	e7d2      	b.n	1225c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   122b6:	2b02      	cmp	r3, #2
   122b8:	d123      	bne.n	12302 <cbvprintf+0x4ca>
			switch (length_mod) {
   122ba:	1ed3      	subs	r3, r2, #3
   122bc:	2b04      	cmp	r3, #4
   122be:	d813      	bhi.n	122e8 <cbvprintf+0x4b0>
   122c0:	e8df f003 	tbb	[pc, r3]
   122c4:	120a0a03 	.word	0x120a0a03
   122c8:	12          	.byte	0x12
   122c9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   122ca:	6820      	ldr	r0, [r4, #0]
   122cc:	900a      	str	r0, [sp, #40]	; 0x28
   122ce:	2100      	movs	r1, #0
   122d0:	1d23      	adds	r3, r4, #4
   122d2:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   122d4:	461c      	mov	r4, r3
   122d6:	e7ca      	b.n	1226e <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   122d8:	3407      	adds	r4, #7
   122da:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   122de:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   122e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   122e6:	e7f5      	b.n	122d4 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   122e8:	f854 3b04 	ldr.w	r3, [r4], #4
   122ec:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   122ee:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   122f0:	f04f 0300 	mov.w	r3, #0
   122f4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   122f6:	d0d3      	beq.n	122a0 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   122f8:	2a02      	cmp	r2, #2
   122fa:	d1b8      	bne.n	1226e <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   122fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12300:	e7d0      	b.n	122a4 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   12302:	2b04      	cmp	r3, #4
   12304:	d107      	bne.n	12316 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   12306:	3407      	adds	r4, #7
   12308:	f024 0407 	bic.w	r4, r4, #7
   1230c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   12310:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   12314:	e7ab      	b.n	1226e <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12316:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12318:	bf04      	itt	eq
   1231a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1231e:	930a      	streq	r3, [sp, #40]	; 0x28
   12320:	e7a5      	b.n	1226e <cbvprintf+0x436>
		switch (conv->specifier) {
   12322:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12326:	2878      	cmp	r0, #120	; 0x78
   12328:	d8b0      	bhi.n	1228c <cbvprintf+0x454>
   1232a:	2862      	cmp	r0, #98	; 0x62
   1232c:	d822      	bhi.n	12374 <cbvprintf+0x53c>
   1232e:	2825      	cmp	r0, #37	; 0x25
   12330:	f43f ad93 	beq.w	11e5a <cbvprintf+0x22>
   12334:	2858      	cmp	r0, #88	; 0x58
   12336:	d1a9      	bne.n	1228c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12338:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1233c:	9300      	str	r3, [sp, #0]
   1233e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12342:	ab04      	add	r3, sp, #16
   12344:	aa0c      	add	r2, sp, #48	; 0x30
   12346:	f00d fb61 	bl	1fa0c <encode_uint>
   1234a:	4682      	mov	sl, r0
			if (precision >= 0) {
   1234c:	f1b8 0f00 	cmp.w	r8, #0
   12350:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   12354:	db0c      	blt.n	12370 <cbvprintf+0x538>
				conv->flag_zero = false;
   12356:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1235a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1235e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12362:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   12364:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12368:	d902      	bls.n	12370 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1236a:	eba8 0303 	sub.w	r3, r8, r3
   1236e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   12370:	4680      	mov	r8, r0
   12372:	e03d      	b.n	123f0 <cbvprintf+0x5b8>
   12374:	3863      	subs	r0, #99	; 0x63
   12376:	2815      	cmp	r0, #21
   12378:	d888      	bhi.n	1228c <cbvprintf+0x454>
   1237a:	a101      	add	r1, pc, #4	; (adr r1, 12380 <cbvprintf+0x548>)
   1237c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   12380:	00012401 	.word	0x00012401
   12384:	00012465 	.word	0x00012465
   12388:	0001228d 	.word	0x0001228d
   1238c:	0001228d 	.word	0x0001228d
   12390:	0001228d 	.word	0x0001228d
   12394:	0001228d 	.word	0x0001228d
   12398:	00012465 	.word	0x00012465
   1239c:	0001228d 	.word	0x0001228d
   123a0:	0001228d 	.word	0x0001228d
   123a4:	0001228d 	.word	0x0001228d
   123a8:	0001228d 	.word	0x0001228d
   123ac:	000124c3 	.word	0x000124c3
   123b0:	00012491 	.word	0x00012491
   123b4:	00012495 	.word	0x00012495
   123b8:	0001228d 	.word	0x0001228d
   123bc:	0001228d 	.word	0x0001228d
   123c0:	000123d9 	.word	0x000123d9
   123c4:	0001228d 	.word	0x0001228d
   123c8:	00012491 	.word	0x00012491
   123cc:	0001228d 	.word	0x0001228d
   123d0:	0001228d 	.word	0x0001228d
   123d4:	00012491 	.word	0x00012491
			if (precision >= 0) {
   123d8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   123dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   123e0:	db0a      	blt.n	123f8 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   123e2:	4641      	mov	r1, r8
   123e4:	4650      	mov	r0, sl
   123e6:	f00d ffd2 	bl	2038e <strnlen>
			bpe = bps + len;
   123ea:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   123ee:	2600      	movs	r6, #0
		if (bps == NULL) {
   123f0:	f1ba 0f00 	cmp.w	sl, #0
   123f4:	d10c      	bne.n	12410 <cbvprintf+0x5d8>
   123f6:	e749      	b.n	1228c <cbvprintf+0x454>
				len = strlen(bps);
   123f8:	4650      	mov	r0, sl
   123fa:	f00d ffc1 	bl	20380 <strlen>
   123fe:	e7f4      	b.n	123ea <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12402:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   12406:	2600      	movs	r6, #0
			bpe = buf + 1;
   12408:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   1240c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   12410:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12414:	b106      	cbz	r6, 12418 <cbvprintf+0x5e0>
			nj_len += 1U;
   12416:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12418:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1241c:	06d0      	lsls	r0, r2, #27
   1241e:	d56b      	bpl.n	124f8 <cbvprintf+0x6c0>
			nj_len += 2U;
   12420:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12422:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12424:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12426:	bf48      	it	mi
   12428:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1242a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1242c:	bf48      	it	mi
   1242e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   12430:	f1b9 0f00 	cmp.w	r9, #0
   12434:	dd79      	ble.n	1252a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   12436:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1243a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1243e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12442:	9303      	str	r3, [sp, #12]
   12444:	0753      	lsls	r3, r2, #29
   12446:	d470      	bmi.n	1252a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   12448:	0650      	lsls	r0, r2, #25
   1244a:	d564      	bpl.n	12516 <cbvprintf+0x6de>
					if (sign != 0) {
   1244c:	b146      	cbz	r6, 12460 <cbvprintf+0x628>
						OUTC(sign);
   1244e:	9b02      	ldr	r3, [sp, #8]
   12450:	4659      	mov	r1, fp
   12452:	4630      	mov	r0, r6
   12454:	4798      	blx	r3
   12456:	2800      	cmp	r0, #0
   12458:	db5a      	blt.n	12510 <cbvprintf+0x6d8>
						sign = 0;
   1245a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1245c:	3501      	adds	r5, #1
						sign = 0;
   1245e:	461e      	mov	r6, r3
					pad = '0';
   12460:	2330      	movs	r3, #48	; 0x30
   12462:	e059      	b.n	12518 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   12464:	071e      	lsls	r6, r3, #28
   12466:	d411      	bmi.n	1248c <cbvprintf+0x654>
				sign = ' ';
   12468:	f013 0610 	ands.w	r6, r3, #16
   1246c:	bf18      	it	ne
   1246e:	2620      	movne	r6, #32
			sint = value->sint;
   12470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   12474:	2a00      	cmp	r2, #0
   12476:	f173 0100 	sbcs.w	r1, r3, #0
   1247a:	f6bf af5d 	bge.w	12338 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   1247e:	4252      	negs	r2, r2
   12480:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12484:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   12488:	262d      	movs	r6, #45	; 0x2d
   1248a:	e755      	b.n	12338 <cbvprintf+0x500>
				sign = '+';
   1248c:	262b      	movs	r6, #43	; 0x2b
   1248e:	e7ef      	b.n	12470 <cbvprintf+0x638>
		switch (conv->specifier) {
   12490:	2600      	movs	r6, #0
   12492:	e751      	b.n	12338 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   12494:	980a      	ldr	r0, [sp, #40]	; 0x28
   12496:	b348      	cbz	r0, 124ec <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12498:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1249c:	9300      	str	r3, [sp, #0]
   1249e:	aa0c      	add	r2, sp, #48	; 0x30
   124a0:	ab04      	add	r3, sp, #16
   124a2:	2100      	movs	r1, #0
   124a4:	f00d fab2 	bl	1fa0c <encode_uint>
				conv->altform_0c = true;
   124a8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   124ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   124b0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   124b4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   124b8:	4682      	mov	sl, r0
				conv->altform_0c = true;
   124ba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   124be:	2600      	movs	r6, #0
				goto prec_int_pad0;
   124c0:	e744      	b.n	1234c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   124c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   124c4:	2a07      	cmp	r2, #7
   124c6:	f63f aee1 	bhi.w	1228c <cbvprintf+0x454>
   124ca:	e8df f002 	tbb	[pc, r2]
   124ce:	040d      	.short	0x040d
   124d0:	08080d06 	.word	0x08080d06
   124d4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   124d6:	701d      	strb	r5, [r3, #0]
		break;
   124d8:	e6d8      	b.n	1228c <cbvprintf+0x454>
		*(short *)dp = (short)count;
   124da:	801d      	strh	r5, [r3, #0]
		break;
   124dc:	e6d6      	b.n	1228c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   124de:	4628      	mov	r0, r5
   124e0:	17e9      	asrs	r1, r5, #31
   124e2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   124e6:	e6d1      	b.n	1228c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   124e8:	601d      	str	r5, [r3, #0]
		break;
   124ea:	e6cf      	b.n	1228c <cbvprintf+0x454>
			bpe = bps + 5;
   124ec:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 125b4 <cbvprintf+0x77c>
   124f0:	4606      	mov	r6, r0
			bps = "(nil)";
   124f2:	f1a8 0a05 	sub.w	sl, r8, #5
   124f6:	e78b      	b.n	12410 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   124f8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   124fa:	bf48      	it	mi
   124fc:	3301      	addmi	r3, #1
   124fe:	e790      	b.n	12422 <cbvprintf+0x5ea>
					OUTC(pad);
   12500:	4618      	mov	r0, r3
   12502:	9303      	str	r3, [sp, #12]
   12504:	4659      	mov	r1, fp
   12506:	9b02      	ldr	r3, [sp, #8]
   12508:	4798      	blx	r3
   1250a:	2800      	cmp	r0, #0
   1250c:	9b03      	ldr	r3, [sp, #12]
   1250e:	da04      	bge.n	1251a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   12510:	b011      	add	sp, #68	; 0x44
   12512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12516:	2320      	movs	r3, #32
   12518:	444d      	add	r5, r9
   1251a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1251c:	2a00      	cmp	r2, #0
   1251e:	eba5 0109 	sub.w	r1, r5, r9
   12522:	f109 39ff 	add.w	r9, r9, #4294967295
   12526:	dceb      	bgt.n	12500 <cbvprintf+0x6c8>
   12528:	460d      	mov	r5, r1
		if (sign != 0) {
   1252a:	b136      	cbz	r6, 1253a <cbvprintf+0x702>
			OUTC(sign);
   1252c:	9b02      	ldr	r3, [sp, #8]
   1252e:	4659      	mov	r1, fp
   12530:	4630      	mov	r0, r6
   12532:	4798      	blx	r3
   12534:	2800      	cmp	r0, #0
   12536:	dbeb      	blt.n	12510 <cbvprintf+0x6d8>
   12538:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1253a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1253e:	06d9      	lsls	r1, r3, #27
   12540:	d401      	bmi.n	12546 <cbvprintf+0x70e>
   12542:	071a      	lsls	r2, r3, #28
   12544:	d506      	bpl.n	12554 <cbvprintf+0x71c>
				OUTC('0');
   12546:	9b02      	ldr	r3, [sp, #8]
   12548:	4659      	mov	r1, fp
   1254a:	2030      	movs	r0, #48	; 0x30
   1254c:	4798      	blx	r3
   1254e:	2800      	cmp	r0, #0
   12550:	dbde      	blt.n	12510 <cbvprintf+0x6d8>
   12552:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12554:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12558:	06db      	lsls	r3, r3, #27
   1255a:	d507      	bpl.n	1256c <cbvprintf+0x734>
				OUTC(conv->specifier);
   1255c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12560:	9b02      	ldr	r3, [sp, #8]
   12562:	4659      	mov	r1, fp
   12564:	4798      	blx	r3
   12566:	2800      	cmp	r0, #0
   12568:	dbd2      	blt.n	12510 <cbvprintf+0x6d8>
   1256a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1256c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1256e:	442e      	add	r6, r5
   12570:	1b73      	subs	r3, r6, r5
   12572:	2b00      	cmp	r3, #0
   12574:	dc16      	bgt.n	125a4 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   12576:	9802      	ldr	r0, [sp, #8]
   12578:	4643      	mov	r3, r8
   1257a:	4652      	mov	r2, sl
   1257c:	4659      	mov	r1, fp
   1257e:	f00d fa90 	bl	1faa2 <outs>
   12582:	2800      	cmp	r0, #0
   12584:	dbc4      	blt.n	12510 <cbvprintf+0x6d8>
   12586:	4405      	add	r5, r0
		while (width > 0) {
   12588:	44a9      	add	r9, r5
   1258a:	eba9 0305 	sub.w	r3, r9, r5
   1258e:	2b00      	cmp	r3, #0
   12590:	f77f ae7c 	ble.w	1228c <cbvprintf+0x454>
			OUTC(' ');
   12594:	9b02      	ldr	r3, [sp, #8]
   12596:	4659      	mov	r1, fp
   12598:	2020      	movs	r0, #32
   1259a:	4798      	blx	r3
   1259c:	2800      	cmp	r0, #0
   1259e:	dbb7      	blt.n	12510 <cbvprintf+0x6d8>
   125a0:	3501      	adds	r5, #1
			--width;
   125a2:	e7f2      	b.n	1258a <cbvprintf+0x752>
				OUTC('0');
   125a4:	9b02      	ldr	r3, [sp, #8]
   125a6:	4659      	mov	r1, fp
   125a8:	2030      	movs	r0, #48	; 0x30
   125aa:	4798      	blx	r3
   125ac:	2800      	cmp	r0, #0
   125ae:	dbaf      	blt.n	12510 <cbvprintf+0x6d8>
   125b0:	3501      	adds	r5, #1
   125b2:	e7dd      	b.n	12570 <cbvprintf+0x738>
   125b4:	00024dc8 	.word	0x00024dc8

000125b8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   125b8:	b508      	push	{r3, lr}
   125ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   125be:	f3ef 8311 	mrs	r3, BASEPRI
   125c2:	f382 8812 	msr	BASEPRI_MAX, r2
   125c6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   125ca:	f001 fa37 	bl	13a3c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   125ce:	4803      	ldr	r0, [pc, #12]	; (125dc <sys_reboot+0x24>)
   125d0:	f00c ff95 	bl	1f4fe <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   125d4:	f000 fe5e 	bl	13294 <arch_cpu_idle>
   125d8:	e7fc      	b.n	125d4 <sys_reboot+0x1c>
   125da:	bf00      	nop
   125dc:	00024dc9 	.word	0x00024dc9

000125e0 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   125e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   125e4:	460f      	mov	r7, r1
   125e6:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   125e8:	2108      	movs	r1, #8
   125ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   125ec:	f00d fb2c 	bl	1fc48 <nvs_al_size.isra.0>

	*addr -= ate_size;
   125f0:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   125f2:	4b13      	ldr	r3, [pc, #76]	; (12640 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   125f4:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   125f6:	4680      	mov	r8, r0
	*addr -= ate_size;
   125f8:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   125fa:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   125fe:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   12600:	42ac      	cmp	r4, r5
   12602:	d803      	bhi.n	1260c <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   12604:	2000      	movs	r0, #0
}
   12606:	b003      	add	sp, #12
   12608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1260c:	2308      	movs	r3, #8
   1260e:	466a      	mov	r2, sp
   12610:	4621      	mov	r1, r4
   12612:	4630      	mov	r0, r6
   12614:	f00d fa7b 	bl	1fb0e <nvs_flash_rd>
		if (rc) {
   12618:	2800      	cmp	r0, #0
   1261a:	d1f4      	bne.n	12606 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   1261c:	4669      	mov	r1, sp
   1261e:	4630      	mov	r0, r6
   12620:	f00d fb1c 	bl	1fc5c <nvs_ate_valid>
   12624:	b140      	cbz	r0, 12638 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   12626:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1262a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1262e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   12630:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12634:	4413      	add	r3, r2
   12636:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   12638:	eba4 0408 	sub.w	r4, r4, r8
   1263c:	e7e0      	b.n	12600 <nvs_recover_last_ate+0x20>
   1263e:	bf00      	nop
   12640:	ffff0000 	.word	0xffff0000

00012644 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   12644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12648:	4604      	mov	r4, r0
   1264a:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1264c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1264e:	2108      	movs	r1, #8
   12650:	f00d fafa 	bl	1fc48 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12654:	6863      	ldr	r3, [r4, #4]
   12656:	0c1b      	lsrs	r3, r3, #16
   12658:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1265a:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   1265c:	a903      	add	r1, sp, #12
   1265e:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12660:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   12662:	f00d fb15 	bl	1fc90 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12666:	9b03      	ldr	r3, [sp, #12]
   12668:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1266a:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1266c:	4419      	add	r1, r3
   1266e:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12670:	4632      	mov	r2, r6
   12672:	2308      	movs	r3, #8
   12674:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12676:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12678:	f00d fa49 	bl	1fb0e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   1267c:	1e02      	subs	r2, r0, #0
   1267e:	f2c0 80ab 	blt.w	127d8 <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   12682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12684:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12686:	2300      	movs	r3, #0
		if (data8[i] != value) {
   12688:	5cf1      	ldrb	r1, [r6, r3]
   1268a:	4291      	cmp	r1, r2
   1268c:	f040 8092 	bne.w	127b4 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12690:	3301      	adds	r3, #1
   12692:	2b08      	cmp	r3, #8
   12694:	d1f8      	bne.n	12688 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   12696:	68a0      	ldr	r0, [r4, #8]
   12698:	6863      	ldr	r3, [r4, #4]
   1269a:	4428      	add	r0, r5
   1269c:	4283      	cmp	r3, r0
   1269e:	f080 8081 	bcs.w	127a4 <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   126a2:	9903      	ldr	r1, [sp, #12]
   126a4:	4620      	mov	r0, r4
   126a6:	f00d fa8f 	bl	1fbc8 <nvs_flash_erase_sector>
   126aa:	4602      	mov	r2, r0
	if (rc) {
   126ac:	e094      	b.n	127d8 <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   126ae:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   126b0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   126b4:	0c1b      	lsrs	r3, r3, #16
   126b6:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   126b8:	4413      	add	r3, r2
   126ba:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   126bc:	f8df b120 	ldr.w	fp, [pc, #288]	; 127e0 <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   126c0:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   126c4:	aa08      	add	r2, sp, #32
   126c6:	a904      	add	r1, sp, #16
   126c8:	4620      	mov	r0, r4
   126ca:	f00d fb65 	bl	1fd98 <nvs_prev_ate>
		if (rc) {
   126ce:	4602      	mov	r2, r0
   126d0:	2800      	cmp	r0, #0
   126d2:	f040 8081 	bne.w	127d8 <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   126d6:	a908      	add	r1, sp, #32
   126d8:	4620      	mov	r0, r4
   126da:	f00d fabf 	bl	1fc5c <nvs_ate_valid>
   126de:	2800      	cmp	r0, #0
   126e0:	d036      	beq.n	12750 <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   126e2:	6863      	ldr	r3, [r4, #4]
   126e4:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   126e6:	aa0a      	add	r2, sp, #40	; 0x28
   126e8:	a905      	add	r1, sp, #20
   126ea:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   126ec:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   126ee:	f00d fb53 	bl	1fd98 <nvs_prev_ate>
			if (rc) {
   126f2:	4602      	mov	r2, r0
   126f4:	2800      	cmp	r0, #0
   126f6:	d16f      	bne.n	127d8 <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   126f8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   126fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12700:	429a      	cmp	r2, r3
   12702:	d028      	beq.n	12756 <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   12704:	6862      	ldr	r2, [r4, #4]
   12706:	9b05      	ldr	r3, [sp, #20]
   12708:	429a      	cmp	r2, r3
   1270a:	d1ec      	bne.n	126e6 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1270c:	4556      	cmp	r6, sl
   1270e:	d11f      	bne.n	12750 <nvs_gc+0x10c>
   12710:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12714:	b1e3      	cbz	r3, 12750 <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   12716:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1271a:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   1271e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   12720:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12722:	68a3      	ldr	r3, [r4, #8]
   12724:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   12728:	f00d fa85 	bl	1fc36 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1272c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1272e:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12732:	681e      	ldr	r6, [r3, #0]
   12734:	4276      	negs	r6, r6
	block_size =
   12736:	f006 0320 	and.w	r3, r6, #32
   1273a:	9301      	str	r3, [sp, #4]
	while (len) {
   1273c:	f1b8 0f00 	cmp.w	r8, #0
   12740:	d110      	bne.n	12764 <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   12742:	a908      	add	r1, sp, #32
   12744:	4620      	mov	r0, r4
   12746:	f00d fb01 	bl	1fd4c <nvs_flash_ate_wrt>
			if (rc) {
   1274a:	4602      	mov	r2, r0
   1274c:	2800      	cmp	r0, #0
   1274e:	d143      	bne.n	127d8 <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   12750:	45ca      	cmp	sl, r9
   12752:	d1b5      	bne.n	126c0 <nvs_gc+0x7c>
gc_done:
   12754:	e79f      	b.n	12696 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   12756:	a90a      	add	r1, sp, #40	; 0x28
   12758:	4620      	mov	r0, r4
   1275a:	f00d fa7f 	bl	1fc5c <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1275e:	2800      	cmp	r0, #0
   12760:	d0d0      	beq.n	12704 <nvs_gc+0xc0>
   12762:	e7d3      	b.n	1270c <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   12764:	9b01      	ldr	r3, [sp, #4]
   12766:	4543      	cmp	r3, r8
   12768:	bf28      	it	cs
   1276a:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1276c:	aa0c      	add	r2, sp, #48	; 0x30
   1276e:	4639      	mov	r1, r7
   12770:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   12772:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   12774:	f00d f9cb 	bl	1fb0e <nvs_flash_rd>
		if (rc) {
   12778:	4602      	mov	r2, r0
   1277a:	bb68      	cbnz	r0, 127d8 <nvs_gc+0x194>
	if (!len) {
   1277c:	b136      	cbz	r6, 1278c <nvs_gc+0x148>
   1277e:	aa0c      	add	r2, sp, #48	; 0x30
   12780:	68a1      	ldr	r1, [r4, #8]
   12782:	4633      	mov	r3, r6
   12784:	4620      	mov	r0, r4
   12786:	f00d faac 	bl	1fce2 <nvs_flash_al_wrt.part.0>
   1278a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1278c:	4631      	mov	r1, r6
   1278e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12790:	f00d fa5a 	bl	1fc48 <nvs_al_size.isra.0>
   12794:	68a1      	ldr	r1, [r4, #8]
   12796:	4401      	add	r1, r0
   12798:	60a1      	str	r1, [r4, #8]
		if (rc) {
   1279a:	b9ea      	cbnz	r2, 127d8 <nvs_gc+0x194>
		len -= bytes_to_copy;
   1279c:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   127a0:	4437      	add	r7, r6
   127a2:	e7cb      	b.n	1273c <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   127a4:	4620      	mov	r0, r4
   127a6:	f00d fae2 	bl	1fd6e <nvs_add_gc_done_ate>
		if (rc) {
   127aa:	4602      	mov	r2, r0
   127ac:	2800      	cmp	r0, #0
   127ae:	f43f af78 	beq.w	126a2 <nvs_gc+0x5e>
   127b2:	e011      	b.n	127d8 <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   127b4:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   127b6:	4631      	mov	r1, r6
   127b8:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   127ba:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   127be:	f00d fa72 	bl	1fca6 <nvs_close_ate_valid>
   127c2:	2800      	cmp	r0, #0
   127c4:	f47f af73 	bne.w	126ae <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   127c8:	a904      	add	r1, sp, #16
   127ca:	4620      	mov	r0, r4
   127cc:	f7ff ff08 	bl	125e0 <nvs_recover_last_ate>
		if (rc) {
   127d0:	4602      	mov	r2, r0
   127d2:	2800      	cmp	r0, #0
   127d4:	f43f af72 	beq.w	126bc <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   127d8:	4610      	mov	r0, r2
   127da:	b015      	add	sp, #84	; 0x54
   127dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e0:	ffff0000 	.word	0xffff0000

000127e4 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   127e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127e8:	4604      	mov	r4, r0
   127ea:	b088      	sub	sp, #32
   127ec:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   127ee:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   127f2:	4638      	mov	r0, r7
   127f4:	f010 ff2d 	bl	23652 <z_impl_k_mutex_init>
   127f8:	4628      	mov	r0, r5
   127fa:	f008 fdb9 	bl	1b370 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   127fe:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   12800:	2800      	cmp	r0, #0
   12802:	f000 811e 	beq.w	12a42 <nvs_init+0x25e>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12806:	6883      	ldr	r3, [r0, #8]
   12808:	691b      	ldr	r3, [r3, #16]
   1280a:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1280c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1280e:	b928      	cbnz	r0, 1281c <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   12810:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   12814:	4628      	mov	r0, r5
   12816:	b008      	add	sp, #32
   12818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1281c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   1281e:	6883      	ldr	r3, [r0, #8]
   12820:	691b      	ldr	r3, [r3, #16]
   12822:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12824:	6803      	ldr	r3, [r0, #0]
   12826:	3b01      	subs	r3, #1
   12828:	2b1f      	cmp	r3, #31
   1282a:	d8f1      	bhi.n	12810 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1282c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1282e:	6821      	ldr	r1, [r4, #0]
   12830:	aa05      	add	r2, sp, #20
   12832:	f010 fc13 	bl	2305c <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12836:	2800      	cmp	r0, #0
   12838:	d1ea      	bne.n	12810 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1283a:	89a3      	ldrh	r3, [r4, #12]
   1283c:	2b00      	cmp	r3, #0
   1283e:	d0e7      	beq.n	12810 <nvs_init+0x2c>
   12840:	9a06      	ldr	r2, [sp, #24]
   12842:	fbb3 f5f2 	udiv	r5, r3, r2
   12846:	fb02 3515 	mls	r5, r2, r5, r3
   1284a:	2d00      	cmp	r5, #0
   1284c:	d1e0      	bne.n	12810 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   1284e:	89e3      	ldrh	r3, [r4, #14]
   12850:	2b01      	cmp	r3, #1
   12852:	d9dd      	bls.n	12810 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   12856:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12858:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1285c:	f04f 32ff 	mov.w	r2, #4294967295
   12860:	f04f 33ff 	mov.w	r3, #4294967295
   12864:	4638      	mov	r0, r7
   12866:	f008 ffa9 	bl	1b7bc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1286a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1286c:	2108      	movs	r1, #8
   1286e:	f00d f9eb 	bl	1fc48 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   12872:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12874:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   12876:	89e3      	ldrh	r3, [r4, #14]
   12878:	fa1f fa85 	uxth.w	sl, r5
   1287c:	4553      	cmp	r3, sl
   1287e:	d844      	bhi.n	1290a <nvs_init+0x126>
	if (closed_sectors == fs->sector_count) {
   12880:	89e3      	ldrh	r3, [r4, #14]
   12882:	454b      	cmp	r3, r9
   12884:	f000 80d2 	beq.w	12a2c <nvs_init+0x248>
	if (i == fs->sector_count) {
   12888:	4553      	cmp	r3, sl
   1288a:	d10b      	bne.n	128a4 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1288c:	9900      	ldr	r1, [sp, #0]
   1288e:	2308      	movs	r3, #8
   12890:	4642      	mov	r2, r8
   12892:	1b89      	subs	r1, r1, r6
   12894:	4620      	mov	r0, r4
   12896:	f00d f972 	bl	1fb7e <nvs_flash_cmp_const>
		if (!rc) {
   1289a:	b918      	cbnz	r0, 128a4 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   1289c:	89e0      	ldrh	r0, [r4, #14]
   1289e:	4669      	mov	r1, sp
   128a0:	f00d f9f6 	bl	1fc90 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   128a4:	4669      	mov	r1, sp
   128a6:	4620      	mov	r0, r4
   128a8:	f7ff fe9a 	bl	125e0 <nvs_recover_last_ate>
	if (rc) {
   128ac:	4605      	mov	r5, r0
   128ae:	2800      	cmp	r0, #0
   128b0:	f040 80be 	bne.w	12a30 <nvs_init+0x24c>
	fs->ate_wra = addr;
   128b4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   128b6:	4a79      	ldr	r2, [pc, #484]	; (12a9c <nvs_init+0x2b8>)
	fs->ate_wra = addr;
   128b8:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   128ba:	4013      	ands	r3, r2
   128bc:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   128be:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   128c0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   128c4:	4299      	cmp	r1, r3
   128c6:	d30e      	bcc.n	128e6 <nvs_init+0x102>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   128c8:	2308      	movs	r3, #8
   128ca:	aa01      	add	r2, sp, #4
   128cc:	4620      	mov	r0, r4
   128ce:	f00d f91e 	bl	1fb0e <nvs_flash_rd>
		if (rc) {
   128d2:	b9c0      	cbnz	r0, 12906 <nvs_init+0x122>
   128d4:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   128d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   128da:	4590      	cmp	r8, r2
   128dc:	f040 80c1 	bne.w	12a62 <nvs_init+0x27e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   128e0:	3001      	adds	r0, #1
   128e2:	2808      	cmp	r0, #8
   128e4:	d1f7      	bne.n	128d6 <nvs_init+0xf2>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   128e6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   128e8:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   128ea:	0c1b      	lsrs	r3, r3, #16
   128ec:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   128ee:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   128f0:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   128f2:	f00d f9cd 	bl	1fc90 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   128f6:	89a3      	ldrh	r3, [r4, #12]
   128f8:	9900      	ldr	r1, [sp, #0]
   128fa:	4642      	mov	r2, r8
   128fc:	4620      	mov	r0, r4
   128fe:	f00d f93e 	bl	1fb7e <nvs_flash_cmp_const>
	if (rc < 0) {
   12902:	2800      	cmp	r0, #0
   12904:	da25      	bge.n	12952 <nvs_init+0x16e>
   12906:	4605      	mov	r5, r0
   12908:	e092      	b.n	12a30 <nvs_init+0x24c>
		       (uint16_t)(fs->sector_size - ate_size);
   1290a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1290c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1290e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   12910:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12914:	4642      	mov	r2, r8
   12916:	2308      	movs	r3, #8
   12918:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1291a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1291c:	f00d f92f 	bl	1fb7e <nvs_flash_cmp_const>
		if (rc) {
   12920:	b178      	cbz	r0, 12942 <nvs_init+0x15e>
			nvs_sector_advance(fs, &addr);
   12922:	89e0      	ldrh	r0, [r4, #14]
   12924:	4669      	mov	r1, sp
   12926:	f00d f9b3 	bl	1fc90 <nvs_sector_advance.isra.0>
			closed_sectors++;
   1292a:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1292e:	9900      	ldr	r1, [sp, #0]
   12930:	2308      	movs	r3, #8
   12932:	4642      	mov	r2, r8
   12934:	4620      	mov	r0, r4
			closed_sectors++;
   12936:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1293a:	f00d f920 	bl	1fb7e <nvs_flash_cmp_const>
			if (!rc) {
   1293e:	2800      	cmp	r0, #0
   12940:	d09e      	beq.n	12880 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   12942:	3501      	adds	r5, #1
   12944:	e797      	b.n	12876 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12946:	2a00      	cmp	r2, #0
   12948:	f000 80a3 	beq.w	12a92 <nvs_init+0x2ae>
				rc = -ESPIPE;
   1294c:	f06f 051c 	mvn.w	r5, #28
   12950:	e06e      	b.n	12a30 <nvs_init+0x24c>
	if (rc) {
   12952:	d046      	beq.n	129e2 <nvs_init+0x1fe>
		addr = fs->ate_wra + ate_size;
   12954:	6863      	ldr	r3, [r4, #4]
   12956:	4433      	add	r3, r6
   12958:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1295a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   1295e:	9900      	ldr	r1, [sp, #0]
   12960:	89a3      	ldrh	r3, [r4, #12]
   12962:	b28a      	uxth	r2, r1
   12964:	1b9b      	subs	r3, r3, r6
   12966:	429a      	cmp	r2, r3
   12968:	d316      	bcc.n	12998 <nvs_init+0x1b4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1296a:	6861      	ldr	r1, [r4, #4]
   1296c:	4620      	mov	r0, r4
   1296e:	f00d f92b 	bl	1fbc8 <nvs_flash_erase_sector>
		if (rc) {
   12972:	2800      	cmp	r0, #0
   12974:	d1c7      	bne.n	12906 <nvs_init+0x122>
		fs->ate_wra &= ADDR_SECT_MASK;
   12976:	6862      	ldr	r2, [r4, #4]
   12978:	4948      	ldr	r1, [pc, #288]	; (12a9c <nvs_init+0x2b8>)
   1297a:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1297e:	89a2      	ldrh	r2, [r4, #12]
   12980:	4413      	add	r3, r2
   12982:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   12986:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   12988:	400b      	ands	r3, r1
   1298a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1298c:	4620      	mov	r0, r4
   1298e:	f7ff fe59 	bl	12644 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12992:	2800      	cmp	r0, #0
   12994:	d040      	beq.n	12a18 <nvs_init+0x234>
   12996:	e7b6      	b.n	12906 <nvs_init+0x122>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12998:	2308      	movs	r3, #8
   1299a:	aa03      	add	r2, sp, #12
   1299c:	4620      	mov	r0, r4
   1299e:	f00d f8b6 	bl	1fb0e <nvs_flash_rd>
			if (rc) {
   129a2:	2800      	cmp	r0, #0
   129a4:	d1af      	bne.n	12906 <nvs_init+0x122>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   129a6:	a903      	add	r1, sp, #12
   129a8:	4620      	mov	r0, r4
   129aa:	f00d f957 	bl	1fc5c <nvs_ate_valid>
   129ae:	b138      	cbz	r0, 129c0 <nvs_init+0x1dc>
   129b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   129b4:	4543      	cmp	r3, r8
   129b6:	d103      	bne.n	129c0 <nvs_init+0x1dc>
			    (gc_done_ate.id == 0xffff) &&
   129b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   129bc:	2b00      	cmp	r3, #0
   129be:	d043      	beq.n	12a48 <nvs_init+0x264>
			addr += ate_size;
   129c0:	9b00      	ldr	r3, [sp, #0]
   129c2:	4433      	add	r3, r6
   129c4:	9300      	str	r3, [sp, #0]
   129c6:	e7ca      	b.n	1295e <nvs_init+0x17a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   129c8:	1a5b      	subs	r3, r3, r1
   129ca:	4642      	mov	r2, r8
   129cc:	4620      	mov	r0, r4
   129ce:	f00d f8d6 	bl	1fb7e <nvs_flash_cmp_const>
		if (rc < 0) {
   129d2:	2800      	cmp	r0, #0
   129d4:	db97      	blt.n	12906 <nvs_init+0x122>
		if (!rc) {
   129d6:	d008      	beq.n	129ea <nvs_init+0x206>
		fs->data_wra += fs->flash_parameters->write_block_size;
   129d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   129da:	68a3      	ldr	r3, [r4, #8]
   129dc:	6812      	ldr	r2, [r2, #0]
   129de:	4413      	add	r3, r2
   129e0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   129e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   129e6:	428b      	cmp	r3, r1
   129e8:	d8ee      	bhi.n	129c8 <nvs_init+0x1e4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   129ea:	6861      	ldr	r1, [r4, #4]
   129ec:	89a3      	ldrh	r3, [r4, #12]
   129ee:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   129f2:	429a      	cmp	r2, r3
   129f4:	d1cd      	bne.n	12992 <nvs_init+0x1ae>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   129f6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12a9c <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   129fa:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   129fc:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   12a00:	4293      	cmp	r3, r2
   12a02:	d0c6      	beq.n	12992 <nvs_init+0x1ae>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12a04:	4620      	mov	r0, r4
   12a06:	f00d f8df 	bl	1fbc8 <nvs_flash_erase_sector>
		if (rc) {
   12a0a:	2800      	cmp	r0, #0
   12a0c:	f47f af7b 	bne.w	12906 <nvs_init+0x122>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12a10:	6863      	ldr	r3, [r4, #4]
   12a12:	ea03 0308 	and.w	r3, r3, r8
   12a16:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   12a18:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12a1a:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   12a1c:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12a20:	42b3      	cmp	r3, r6
   12a22:	d105      	bne.n	12a30 <nvs_init+0x24c>
		rc = nvs_add_gc_done_ate(fs);
   12a24:	4620      	mov	r0, r4
   12a26:	f00d f9a2 	bl	1fd6e <nvs_add_gc_done_ate>
   12a2a:	e76c      	b.n	12906 <nvs_init+0x122>
		rc = -EDEADLK;
   12a2c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   12a30:	4638      	mov	r0, r7
   12a32:	f008 ff41 	bl	1b8b8 <z_impl_k_mutex_unlock>
	if (rc) {
   12a36:	2d00      	cmp	r5, #0
   12a38:	f47f aeec 	bne.w	12814 <nvs_init+0x30>
	fs->ready = true;
   12a3c:	2301      	movs	r3, #1
   12a3e:	7423      	strb	r3, [r4, #16]
	return 0;
   12a40:	e6e8      	b.n	12814 <nvs_init+0x30>
		return -ENXIO;
   12a42:	f06f 0505 	mvn.w	r5, #5
   12a46:	e6e5      	b.n	12814 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a48:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   12a4a:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a4c:	0c1b      	lsrs	r3, r3, #16
   12a4e:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   12a50:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   12a52:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   12a54:	f00d f91c 	bl	1fc90 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   12a58:	9900      	ldr	r1, [sp, #0]
   12a5a:	4620      	mov	r0, r4
   12a5c:	f00d f8b4 	bl	1fbc8 <nvs_flash_erase_sector>
			goto end;
   12a60:	e797      	b.n	12992 <nvs_init+0x1ae>
		if (nvs_ate_valid(fs, &last_ate)) {
   12a62:	a901      	add	r1, sp, #4
   12a64:	4620      	mov	r0, r4
   12a66:	f00d f8f9 	bl	1fc5c <nvs_ate_valid>
   12a6a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   12a6e:	b180      	cbz	r0, 12a92 <nvs_init+0x2ae>
			fs->data_wra = addr & ADDR_SECT_MASK;
   12a70:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a72:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12a76:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12a7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   12a7c:	ea03 0309 	and.w	r3, r3, r9
   12a80:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a82:	4411      	add	r1, r2
   12a84:	f00d f8e0 	bl	1fc48 <nvs_al_size.isra.0>
   12a88:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12a8a:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12a8c:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12a8e:	f43f af5a 	beq.w	12946 <nvs_init+0x162>
		fs->ate_wra -= ate_size;
   12a92:	ebaa 0306 	sub.w	r3, sl, r6
   12a96:	6063      	str	r3, [r4, #4]
   12a98:	e712      	b.n	128c0 <nvs_init+0xdc>
   12a9a:	bf00      	nop
   12a9c:	ffff0000 	.word	0xffff0000

00012aa0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   12aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aa4:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   12aa6:	7c03      	ldrb	r3, [r0, #16]
{
   12aa8:	b089      	sub	sp, #36	; 0x24
   12aaa:	4604      	mov	r4, r0
   12aac:	4689      	mov	r9, r1
   12aae:	4690      	mov	r8, r2
	if (!fs->ready) {
   12ab0:	2b00      	cmp	r3, #0
   12ab2:	f000 80bf 	beq.w	12c34 <nvs_write+0x194>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ab6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12ab8:	2108      	movs	r1, #8
   12aba:	4618      	mov	r0, r3
   12abc:	f00d f8c4 	bl	1fc48 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   12ac0:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ac2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   12ac4:	4618      	mov	r0, r3
   12ac6:	f00d f8bf 	bl	1fc48 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12aca:	89a3      	ldrh	r3, [r4, #12]
   12acc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   12ad0:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   12ad2:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   12ad4:	f200 80b1 	bhi.w	12c3a <nvs_write+0x19a>
   12ad8:	b116      	cbz	r6, 12ae0 <nvs_write+0x40>
	    ((len > 0) && (data == NULL))) {
   12ada:	2a00      	cmp	r2, #0
   12adc:	f000 80ad 	beq.w	12c3a <nvs_write+0x19a>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   12ae0:	6863      	ldr	r3, [r4, #4]
   12ae2:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12ae4:	aa04      	add	r2, sp, #16
   12ae6:	a903      	add	r1, sp, #12
   12ae8:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   12aea:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12aee:	f00d f953 	bl	1fd98 <nvs_prev_ate>
		if (rc) {
   12af2:	4605      	mov	r5, r0
   12af4:	2800      	cmp	r0, #0
   12af6:	d166      	bne.n	12bc6 <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12af8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   12afc:	454b      	cmp	r3, r9
   12afe:	d005      	beq.n	12b0c <nvs_write+0x6c>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   12b00:	6862      	ldr	r2, [r4, #4]
   12b02:	9b03      	ldr	r3, [sp, #12]
   12b04:	429a      	cmp	r2, r3
   12b06:	d1ed      	bne.n	12ae4 <nvs_write+0x44>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   12b08:	b9e6      	cbnz	r6, 12b44 <nvs_write+0xa4>
   12b0a:	e05c      	b.n	12bc6 <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   12b0c:	a904      	add	r1, sp, #16
   12b0e:	4620      	mov	r0, r4
   12b10:	f00d f8a4 	bl	1fc5c <nvs_ate_valid>
   12b14:	2800      	cmp	r0, #0
   12b16:	d0f3      	beq.n	12b00 <nvs_write+0x60>
		if (len == 0) {
   12b18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   12b1c:	b186      	cbz	r6, 12b40 <nvs_write+0xa0>
		} else if (len == wlk_ate.len) {
   12b1e:	429e      	cmp	r6, r3
   12b20:	d110      	bne.n	12b44 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   12b22:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   12b26:	ea4f 411b 	mov.w	r1, fp, lsr #16
   12b2a:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   12b2c:	4401      	add	r1, r0
   12b2e:	4633      	mov	r3, r6
   12b30:	4642      	mov	r2, r8
   12b32:	4620      	mov	r0, r4
   12b34:	f00c fff9 	bl	1fb2a <nvs_flash_block_cmp>
			if (rc <= 0) {
   12b38:	2800      	cmp	r0, #0
   12b3a:	dc03      	bgt.n	12b44 <nvs_write+0xa4>
   12b3c:	4605      	mov	r5, r0
   12b3e:	e042      	b.n	12bc6 <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   12b40:	2b00      	cmp	r3, #0
   12b42:	d040      	beq.n	12bc6 <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   12b44:	2f00      	cmp	r7, #0
   12b46:	d142      	bne.n	12bce <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   12b48:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   12b4c:	f04f 32ff 	mov.w	r2, #4294967295
   12b50:	f04f 33ff 	mov.w	r3, #4294967295
   12b54:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   12b56:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 12c44 <nvs_write+0x1a4>
   12b5a:	f008 fe2f 	bl	1b7bc <z_impl_k_mutex_lock>

	gc_count = 0;
   12b5e:	2200      	movs	r2, #0
	while (1) {
		if (gc_count == fs->sector_count) {
   12b60:	89e3      	ldrh	r3, [r4, #14]
   12b62:	429a      	cmp	r2, r3
   12b64:	d063      	beq.n	12c2e <nvs_write+0x18e>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   12b66:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   12b6a:	1878      	adds	r0, r7, r1
   12b6c:	4283      	cmp	r3, r0
   12b6e:	d331      	bcc.n	12bd4 <nvs_write+0x134>
	entry.part = 0xff;
   12b70:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   12b72:	a806      	add	r0, sp, #24
	entry.id = id;
   12b74:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   12b78:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   12b7c:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   12b80:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   12b84:	f00d f857 	bl	1fc36 <nvs_ate_crc8_update>
	if (!len) {
   12b88:	b136      	cbz	r6, 12b98 <nvs_write+0xf8>
   12b8a:	68a1      	ldr	r1, [r4, #8]
   12b8c:	4633      	mov	r3, r6
   12b8e:	4642      	mov	r2, r8
   12b90:	4620      	mov	r0, r4
   12b92:	f00d f8a6 	bl	1fce2 <nvs_flash_al_wrt.part.0>
   12b96:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   12b98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12b9a:	4631      	mov	r1, r6
   12b9c:	f00d f854 	bl	1fc48 <nvs_al_size.isra.0>
   12ba0:	68a3      	ldr	r3, [r4, #8]
   12ba2:	4403      	add	r3, r0
   12ba4:	60a3      	str	r3, [r4, #8]
	if (rc) {
   12ba6:	2d00      	cmp	r5, #0
   12ba8:	d14a      	bne.n	12c40 <nvs_write+0x1a0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   12baa:	a906      	add	r1, sp, #24
   12bac:	4620      	mov	r0, r4
   12bae:	f00d f8cd 	bl	1fd4c <nvs_flash_ate_wrt>
	if (rc) {
   12bb2:	4605      	mov	r5, r0
   12bb4:	2800      	cmp	r0, #0
   12bb6:	d143      	bne.n	12c40 <nvs_write+0x1a0>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   12bb8:	4633      	mov	r3, r6
   12bba:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   12bbc:	4650      	mov	r0, sl
   12bbe:	f008 fe7b 	bl	1b8b8 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   12bc2:	9b01      	ldr	r3, [sp, #4]
   12bc4:	461d      	mov	r5, r3
}
   12bc6:	4628      	mov	r0, r5
   12bc8:	b009      	add	sp, #36	; 0x24
   12bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   12bce:	4457      	add	r7, sl
   12bd0:	b2bf      	uxth	r7, r7
   12bd2:	e7b9      	b.n	12b48 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12bd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12bd6:	9201      	str	r2, [sp, #4]
   12bd8:	2108      	movs	r1, #8
   12bda:	f00d f835 	bl	1fc48 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   12bde:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12be2:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   12be6:	2100      	movs	r1, #0
   12be8:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   12bec:	1819      	adds	r1, r3, r0
   12bee:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   12bf2:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   12bf4:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   12bf8:	440b      	add	r3, r1
   12bfa:	1a18      	subs	r0, r3, r0
   12bfc:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   12bfe:	a806      	add	r0, sp, #24
   12c00:	f00d f819 	bl	1fc36 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   12c04:	a906      	add	r1, sp, #24
   12c06:	4620      	mov	r0, r4
   12c08:	f00d f8a0 	bl	1fd4c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   12c0c:	89e0      	ldrh	r0, [r4, #14]
   12c0e:	1d21      	adds	r1, r4, #4
   12c10:	f00d f83e 	bl	1fc90 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   12c14:	6863      	ldr	r3, [r4, #4]
   12c16:	ea03 030b 	and.w	r3, r3, fp
   12c1a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12c1c:	4620      	mov	r0, r4
   12c1e:	f7ff fd11 	bl	12644 <nvs_gc>
		if (rc) {
   12c22:	4603      	mov	r3, r0
   12c24:	2800      	cmp	r0, #0
   12c26:	d1c8      	bne.n	12bba <nvs_write+0x11a>
		gc_count++;
   12c28:	9a01      	ldr	r2, [sp, #4]
   12c2a:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   12c2c:	e798      	b.n	12b60 <nvs_write+0xc0>
			rc = -ENOSPC;
   12c2e:	f06f 031b 	mvn.w	r3, #27
   12c32:	e7c2      	b.n	12bba <nvs_write+0x11a>
		return -EACCES;
   12c34:	f06f 050c 	mvn.w	r5, #12
   12c38:	e7c5      	b.n	12bc6 <nvs_write+0x126>
		return -EINVAL;
   12c3a:	f06f 0515 	mvn.w	r5, #21
   12c3e:	e7c2      	b.n	12bc6 <nvs_write+0x126>
			if (rc) {
   12c40:	462b      	mov	r3, r5
   12c42:	e7ba      	b.n	12bba <nvs_write+0x11a>
   12c44:	ffff0000 	.word	0xffff0000

00012c48 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c4c:	4605      	mov	r5, r0
   12c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12c52:	f3ef 8611 	mrs	r6, BASEPRI
   12c56:	f383 8812 	msr	BASEPRI_MAX, r3
   12c5a:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12c5e:	4b10      	ldr	r3, [pc, #64]	; (12ca0 <pm_state_notify+0x58>)
   12c60:	681c      	ldr	r4, [r3, #0]
   12c62:	2c00      	cmp	r4, #0
   12c64:	bf38      	it	cc
   12c66:	2400      	movcc	r4, #0
   12c68:	b19c      	cbz	r4, 12c92 <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   12c6a:	4f0e      	ldr	r7, [pc, #56]	; (12ca4 <pm_state_notify+0x5c>)
   12c6c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12ca8 <pm_state_notify+0x60>
   12c70:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   12c74:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12c78:	2d00      	cmp	r5, #0
   12c7a:	bf08      	it	eq
   12c7c:	4613      	moveq	r3, r2
		if (callback) {
   12c7e:	b12b      	cbz	r3, 12c8c <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
   12c80:	f898 2014 	ldrb.w	r2, [r8, #20]
   12c84:	fb09 f202 	mul.w	r2, r9, r2
   12c88:	5cb8      	ldrb	r0, [r7, r2]
   12c8a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12c8c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12c8e:	2c00      	cmp	r4, #0
   12c90:	d1f0      	bne.n	12c74 <pm_state_notify+0x2c>
	__asm__ volatile(
   12c92:	f386 8811 	msr	BASEPRI, r6
   12c96:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12c9e:	bf00      	nop
   12ca0:	200021f0 	.word	0x200021f0
   12ca4:	200021fc 	.word	0x200021fc
   12ca8:	20002a50 	.word	0x20002a50

00012cac <pm_resume_devices>:
{
   12cac:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   12cae:	4d08      	ldr	r5, [pc, #32]	; (12cd0 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   12cb0:	4e08      	ldr	r6, [pc, #32]	; (12cd4 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   12cb2:	682c      	ldr	r4, [r5, #0]
   12cb4:	3c01      	subs	r4, #1
   12cb6:	2c00      	cmp	r4, #0
   12cb8:	da02      	bge.n	12cc0 <pm_resume_devices+0x14>
	num_susp = 0;
   12cba:	2300      	movs	r3, #0
   12cbc:	602b      	str	r3, [r5, #0]
}
   12cbe:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   12cc0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   12cc4:	2101      	movs	r1, #1
   12cc6:	f00d f93c 	bl	1ff42 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   12cca:	3c01      	subs	r4, #1
   12ccc:	e7f3      	b.n	12cb6 <pm_resume_devices+0xa>
   12cce:	bf00      	nop
   12cd0:	200021ec 	.word	0x200021ec
   12cd4:	20000a24 	.word	0x20000a24

00012cd8 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12cd8:	f000 031f 	and.w	r3, r0, #31
   12cdc:	2201      	movs	r2, #1
   12cde:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ce0:	4b0a      	ldr	r3, [pc, #40]	; (12d0c <atomic_test_and_set_bit.constprop.0+0x34>)
   12ce2:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12ce6:	0940      	lsrs	r0, r0, #5
   12ce8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12cec:	e850 3f00 	ldrex	r3, [r0]
   12cf0:	ea43 0102 	orr.w	r1, r3, r2
   12cf4:	e840 1c00 	strex	ip, r1, [r0]
   12cf8:	f1bc 0f00 	cmp.w	ip, #0
   12cfc:	d1f6      	bne.n	12cec <atomic_test_and_set_bit.constprop.0+0x14>
   12cfe:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   12d02:	421a      	tst	r2, r3
}
   12d04:	bf14      	ite	ne
   12d06:	2001      	movne	r0, #1
   12d08:	2000      	moveq	r0, #0
   12d0a:	4770      	bx	lr
   12d0c:	20002208 	.word	0x20002208

00012d10 <pm_system_resume>:

void pm_system_resume(void)
{
   12d10:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12d12:	4b1d      	ldr	r3, [pc, #116]	; (12d88 <pm_system_resume+0x78>)
   12d14:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d16:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12d1a:	f005 031f 	and.w	r3, r5, #31
   12d1e:	2201      	movs	r2, #1
   12d20:	409a      	lsls	r2, r3
   12d22:	4b1a      	ldr	r3, [pc, #104]	; (12d8c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12d24:	0969      	lsrs	r1, r5, #5
{
   12d26:	b085      	sub	sp, #20
   12d28:	43d0      	mvns	r0, r2
   12d2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12d2e:	e853 1f00 	ldrex	r1, [r3]
   12d32:	ea01 0400 	and.w	r4, r1, r0
   12d36:	e843 4c00 	strex	ip, r4, [r3]
   12d3a:	f1bc 0f00 	cmp.w	ip, #0
   12d3e:	d1f6      	bne.n	12d2e <pm_system_resume+0x1e>
   12d40:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12d44:	4211      	tst	r1, r2
   12d46:	d017      	beq.n	12d78 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   12d48:	4c11      	ldr	r4, [pc, #68]	; (12d90 <pm_system_resume+0x80>)
   12d4a:	220c      	movs	r2, #12
   12d4c:	fb02 4205 	mla	r2, r2, r5, r4
   12d50:	ca07      	ldmia	r2, {r0, r1, r2}
   12d52:	ab01      	add	r3, sp, #4
   12d54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12d58:	4a0e      	ldr	r2, [pc, #56]	; (12d94 <pm_system_resume+0x84>)
   12d5a:	b17a      	cbz	r2, 12d7c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   12d5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12d60:	f00d fbb2 	bl	204c8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   12d64:	2000      	movs	r0, #0
   12d66:	f7ff ff6f 	bl	12c48 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12d6a:	230c      	movs	r3, #12
   12d6c:	436b      	muls	r3, r5
   12d6e:	2200      	movs	r2, #0
   12d70:	18e1      	adds	r1, r4, r3
   12d72:	50e2      	str	r2, [r4, r3]
   12d74:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   12d78:	b005      	add	sp, #20
   12d7a:	bd30      	pop	{r4, r5, pc}
   12d7c:	f382 8811 	msr	BASEPRI, r2
   12d80:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12d84:	e7ee      	b.n	12d64 <pm_system_resume+0x54>
   12d86:	bf00      	nop
   12d88:	20002a50 	.word	0x20002a50
   12d8c:	200021f8 	.word	0x200021f8
   12d90:	200021fc 	.word	0x200021fc
   12d94:	000204c9 	.word	0x000204c9

00012d98 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12d9c:	4b6d      	ldr	r3, [pc, #436]	; (12f54 <pm_system_suspend+0x1bc>)
   12d9e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 12f74 <pm_system_suspend+0x1dc>
   12da2:	7d1c      	ldrb	r4, [r3, #20]
{
   12da4:	b089      	sub	sp, #36	; 0x24
   12da6:	4606      	mov	r6, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   12da8:	4620      	mov	r0, r4
   12daa:	f7ff ff95 	bl	12cd8 <atomic_test_and_set_bit.constprop.0>
   12dae:	b960      	cbnz	r0, 12dca <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12db0:	466f      	mov	r7, sp
   12db2:	4632      	mov	r2, r6
   12db4:	4621      	mov	r1, r4
   12db6:	4638      	mov	r0, r7
   12db8:	f00d f8f3 	bl	1ffa2 <pm_policy_next_state>
   12dbc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12dc0:	250c      	movs	r5, #12
   12dc2:	fb05 9504 	mla	r5, r5, r4, r9
   12dc6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   12dca:	230c      	movs	r3, #12
   12dcc:	4363      	muls	r3, r4
   12dce:	eb09 0203 	add.w	r2, r9, r3
   12dd2:	f819 5003 	ldrb.w	r5, [r9, r3]
   12dd6:	2d00      	cmp	r5, #0
   12dd8:	f000 80a3 	beq.w	12f22 <pm_system_suspend+0x18a>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   12ddc:	1c73      	adds	r3, r6, #1
   12dde:	d00e      	beq.n	12dfe <pm_system_suspend+0x66>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12de0:	6897      	ldr	r7, [r2, #8]
   12de2:	485d      	ldr	r0, [pc, #372]	; (12f58 <pm_system_suspend+0x1c0>)
   12de4:	4a5d      	ldr	r2, [pc, #372]	; (12f5c <pm_system_suspend+0x1c4>)
   12de6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12dea:	2100      	movs	r1, #0
   12dec:	2300      	movs	r3, #0
   12dee:	fbe5 0107 	umlal	r0, r1, r5, r7
   12df2:	f7ee fdc3 	bl	197c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12df6:	2101      	movs	r1, #1
   12df8:	1a30      	subs	r0, r6, r0
   12dfa:	f010 ff25 	bl	23c48 <z_set_timeout_expiry>
			     z_power_states[id].exit_latency_us),
				     true);
	}

#if CONFIG_PM_DEVICE
	if ((z_power_states[id].state != PM_STATE_RUNTIME_IDLE) &&
   12dfe:	230c      	movs	r3, #12
   12e00:	4363      	muls	r3, r4
   12e02:	4f57      	ldr	r7, [pc, #348]	; (12f60 <pm_system_suspend+0x1c8>)
   12e04:	f819 3003 	ldrb.w	r3, [r9, r3]
   12e08:	2b01      	cmp	r3, #1
   12e0a:	f10d 0814 	add.w	r8, sp, #20
   12e0e:	d01d      	beq.n	12e4c <pm_system_suspend+0xb4>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12e10:	f3bf 8f5b 	dmb	ish
   12e14:	e857 3f00 	ldrex	r3, [r7]
   12e18:	1e5a      	subs	r2, r3, #1
   12e1a:	e847 2100 	strex	r1, r2, [r7]
   12e1e:	2900      	cmp	r1, #0
   12e20:	d1f8      	bne.n	12e14 <pm_system_suspend+0x7c>
   12e22:	f3bf 8f5b 	dmb	ish
   12e26:	2b01      	cmp	r3, #1
   12e28:	d110      	bne.n	12e4c <pm_system_suspend+0xb4>
	devc = z_device_get_all_static(&devs);
   12e2a:	4640      	mov	r0, r8
   12e2c:	f008 fa92 	bl	1b354 <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   12e30:	261c      	movs	r6, #28
	num_susp = 0;
   12e32:	4b4c      	ldr	r3, [pc, #304]	; (12f64 <pm_system_suspend+0x1cc>)
		__pm_device_slots_start[num_susp] = dev;
   12e34:	f8df b140 	ldr.w	fp, [pc, #320]	; 12f78 <pm_system_suspend+0x1e0>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   12e38:	4346      	muls	r6, r0
   12e3a:	9805      	ldr	r0, [sp, #20]
	num_susp = 0;
   12e3c:	2200      	movs	r2, #0
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   12e3e:	3e1c      	subs	r6, #28
	num_susp = 0;
   12e40:	601a      	str	r2, [r3, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   12e42:	4406      	add	r6, r0
   12e44:	469a      	mov	sl, r3
   12e46:	9b05      	ldr	r3, [sp, #20]
   12e48:	429e      	cmp	r6, r3
   12e4a:	d236      	bcs.n	12eba <pm_system_suspend+0x122>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12e4c:	f009 f844 	bl	1bed8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12e50:	2001      	movs	r0, #1
   12e52:	f7ff fef9 	bl	12c48 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e56:	f3bf 8f5b 	dmb	ish
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12e5a:	f004 021f 	and.w	r2, r4, #31
   12e5e:	2101      	movs	r1, #1
   12e60:	4091      	lsls	r1, r2
   12e62:	4a41      	ldr	r2, [pc, #260]	; (12f68 <pm_system_suspend+0x1d0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12e64:	0963      	lsrs	r3, r4, #5
   12e66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e6a:	e853 2f00 	ldrex	r2, [r3]
   12e6e:	430a      	orrs	r2, r1
   12e70:	e843 2000 	strex	r0, r2, [r3]
   12e74:	2800      	cmp	r0, #0
   12e76:	d1f8      	bne.n	12e6a <pm_system_suspend+0xd2>
   12e78:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12e7c:	230c      	movs	r3, #12
   12e7e:	fb03 9904 	mla	r9, r3, r4, r9
   12e82:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12e86:	4b39      	ldr	r3, [pc, #228]	; (12f6c <pm_system_suspend+0x1d4>)
   12e88:	e888 0007 	stmia.w	r8, {r0, r1, r2}
   12e8c:	b10b      	cbz	r3, 12e92 <pm_system_suspend+0xfa>
		pm_power_state_set(info);
   12e8e:	f00d fb08 	bl	204a2 <pm_power_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12e92:	f3bf 8f5b 	dmb	ish
   12e96:	e857 3f00 	ldrex	r3, [r7]
   12e9a:	1c5a      	adds	r2, r3, #1
   12e9c:	e847 2100 	strex	r1, r2, [r7]
   12ea0:	2900      	cmp	r1, #0
   12ea2:	d1f8      	bne.n	12e96 <pm_system_suspend+0xfe>
   12ea4:	f3bf 8f5b 	dmb	ish
	pm_stats_stop();

	/* Wake up sequence starts here */
#if CONFIG_PM_DEVICE
	if (atomic_add(&z_cpus_active, 1) == 0) {
   12ea8:	b90b      	cbnz	r3, 12eae <pm_system_suspend+0x116>
		pm_resume_devices();
   12eaa:	f7ff feff 	bl	12cac <pm_resume_devices>
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   12eae:	f7ff ff2f 	bl	12d10 <pm_system_resume>
	bool ret = true;
   12eb2:	2501      	movs	r5, #1
	k_sched_unlock();
   12eb4:	f009 f9ea 	bl	1c28c <k_sched_unlock>
   12eb8:	e033      	b.n	12f22 <pm_system_suspend+0x18a>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   12eba:	4630      	mov	r0, r6
   12ebc:	f00d f823 	bl	1ff06 <pm_device_is_busy>
   12ec0:	b9e0      	cbnz	r0, 12efc <pm_system_suspend+0x164>
   12ec2:	4630      	mov	r0, r6
   12ec4:	f00d f833 	bl	1ff2e <pm_device_state_is_locked>
   12ec8:	b9c0      	cbnz	r0, 12efc <pm_system_suspend+0x164>
		    || pm_device_wakeup_is_enabled(dev) ||
   12eca:	4630      	mov	r0, r6
   12ecc:	f00d f825 	bl	1ff1a <pm_device_wakeup_is_enabled>
   12ed0:	4605      	mov	r5, r0
   12ed2:	b998      	cbnz	r0, 12efc <pm_system_suspend+0x164>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   12ed4:	4601      	mov	r1, r0
   12ed6:	4630      	mov	r0, r6
   12ed8:	f00d f833 	bl	1ff42 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   12edc:	f110 0f86 	cmn.w	r0, #134	; 0x86
   12ee0:	d00c      	beq.n	12efc <pm_system_suspend+0x164>
   12ee2:	f020 0320 	bic.w	r3, r0, #32
   12ee6:	3378      	adds	r3, #120	; 0x78
   12ee8:	d008      	beq.n	12efc <pm_system_suspend+0x164>
		} else if (ret < 0) {
   12eea:	2800      	cmp	r0, #0
   12eec:	db08      	blt.n	12f00 <pm_system_suspend+0x168>
		__pm_device_slots_start[num_susp] = dev;
   12eee:	f8da 3000 	ldr.w	r3, [sl]
   12ef2:	f84b 6023 	str.w	r6, [fp, r3, lsl #2]
		num_susp++;
   12ef6:	3301      	adds	r3, #1
   12ef8:	f8ca 3000 	str.w	r3, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   12efc:	3e1c      	subs	r6, #28
   12efe:	e7a2      	b.n	12e46 <pm_system_suspend+0xae>
			pm_resume_devices();
   12f00:	f7ff fed4 	bl	12cac <pm_resume_devices>
			z_power_states[id].state = PM_STATE_ACTIVE;
   12f04:	230c      	movs	r3, #12
   12f06:	4363      	muls	r3, r4
   12f08:	f809 5003 	strb.w	r5, [r9, r3]
   12f0c:	f3bf 8f5b 	dmb	ish
   12f10:	e857 3f00 	ldrex	r3, [r7]
   12f14:	3301      	adds	r3, #1
   12f16:	e847 3200 	strex	r2, r3, [r7]
   12f1a:	2a00      	cmp	r2, #0
   12f1c:	d1f8      	bne.n	12f10 <pm_system_suspend+0x178>
   12f1e:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f22:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f26:	0962      	lsrs	r2, r4, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f28:	2301      	movs	r3, #1
   12f2a:	f004 041f 	and.w	r4, r4, #31
   12f2e:	fa03 f404 	lsl.w	r4, r3, r4
   12f32:	4b0f      	ldr	r3, [pc, #60]	; (12f70 <pm_system_suspend+0x1d8>)
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f34:	43e4      	mvns	r4, r4
   12f36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12f3a:	e853 2f00 	ldrex	r2, [r3]
   12f3e:	4022      	ands	r2, r4
   12f40:	e843 2100 	strex	r1, r2, [r3]
   12f44:	2900      	cmp	r1, #0
   12f46:	d1f8      	bne.n	12f3a <pm_system_suspend+0x1a2>
   12f48:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12f4c:	4628      	mov	r0, r5
   12f4e:	b009      	add	sp, #36	; 0x24
   12f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f54:	20002a50 	.word	0x20002a50
   12f58:	000f423f 	.word	0x000f423f
   12f5c:	000f4240 	.word	0x000f4240
   12f60:	20000570 	.word	0x20000570
   12f64:	200021ec 	.word	0x200021ec
   12f68:	200021f8 	.word	0x200021f8
   12f6c:	000204a3 	.word	0x000204a3
   12f70:	20002208 	.word	0x20002208
   12f74:	200021fc 	.word	0x200021fc
   12f78:	20000a24 	.word	0x20000a24

00012f7c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12f7e:	4e26      	ldr	r6, [pc, #152]	; (13018 <tc_aes128_set_encrypt_key+0x9c>)
{
   12f80:	4607      	mov	r7, r0
   12f82:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12f84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12f86:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12f88:	ad01      	add	r5, sp, #4
   12f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12f90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12f94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12f98:	4638      	mov	r0, r7
   12f9a:	2f00      	cmp	r7, #0
   12f9c:	d038      	beq.n	13010 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   12f9e:	2c00      	cmp	r4, #0
   12fa0:	d038      	beq.n	13014 <tc_aes128_set_encrypt_key+0x98>
   12fa2:	1f38      	subs	r0, r7, #4
   12fa4:	4621      	mov	r1, r4
   12fa6:	4602      	mov	r2, r0
   12fa8:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12faa:	784b      	ldrb	r3, [r1, #1]
   12fac:	780d      	ldrb	r5, [r1, #0]
   12fae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12fb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12fb4:	78cd      	ldrb	r5, [r1, #3]
   12fb6:	432b      	orrs	r3, r5
   12fb8:	788d      	ldrb	r5, [r1, #2]
   12fba:	3104      	adds	r1, #4
   12fbc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12fc0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12fc2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12fc6:	d1f0      	bne.n	12faa <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12fc8:	4c14      	ldr	r4, [pc, #80]	; (1301c <tc_aes128_set_encrypt_key+0xa0>)
   12fca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12fcc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12fce:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12fd0:	d116      	bne.n	13000 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12fd2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12fd6:	5ca5      	ldrb	r5, [r4, r2]
   12fd8:	0e1a      	lsrs	r2, r3, #24
   12fda:	5ca2      	ldrb	r2, [r4, r2]
   12fdc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12fe0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12fe4:	b2db      	uxtb	r3, r3
   12fe6:	5d65      	ldrb	r5, [r4, r5]
   12fe8:	5ce3      	ldrb	r3, [r4, r3]
   12fea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12fee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12ff2:	ad0c      	add	r5, sp, #48	; 0x30
   12ff4:	f021 0303 	bic.w	r3, r1, #3
   12ff8:	442b      	add	r3, r5
   12ffa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12ffe:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   13000:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13004:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13006:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13008:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1300a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1300c:	d1de      	bne.n	12fcc <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1300e:	2001      	movs	r0, #1
}
   13010:	b00d      	add	sp, #52	; 0x34
   13012:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13014:	4620      	mov	r0, r4
   13016:	e7fb      	b.n	13010 <tc_aes128_set_encrypt_key+0x94>
   13018:	00024484 	.word	0x00024484
   1301c:	00024df2 	.word	0x00024df2

00013020 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13024:	4615      	mov	r5, r2
   13026:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13028:	4606      	mov	r6, r0
   1302a:	2800      	cmp	r0, #0
   1302c:	d058      	beq.n	130e0 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1302e:	2900      	cmp	r1, #0
   13030:	d059      	beq.n	130e6 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   13032:	2a00      	cmp	r2, #0
   13034:	d059      	beq.n	130ea <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13036:	2310      	movs	r3, #16
   13038:	460a      	mov	r2, r1
   1303a:	4668      	mov	r0, sp
   1303c:	4619      	mov	r1, r3
   1303e:	f00c ffb5 	bl	1ffac <_copy>
	add_round_key(state, s->words);
   13042:	4629      	mov	r1, r5
   13044:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   13046:	4c2a      	ldr	r4, [pc, #168]	; (130f0 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   13048:	f00c ffc8 	bl	1ffdc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1304c:	f105 0710 	add.w	r7, r5, #16
   13050:	46a1      	mov	r9, r4
   13052:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   13054:	46e8      	mov	r8, sp
{
   13056:	466a      	mov	r2, sp
   13058:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   1305a:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1305c:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   1305e:	5c61      	ldrb	r1, [r4, r1]
   13060:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13064:	d1f9      	bne.n	1305a <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   13066:	4668      	mov	r0, sp
   13068:	f00c fffd 	bl	20066 <shift_rows>
	mult_row_column(t, s);
   1306c:	4669      	mov	r1, sp
   1306e:	a804      	add	r0, sp, #16
   13070:	f00d f832 	bl	200d8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   13074:	a901      	add	r1, sp, #4
   13076:	a805      	add	r0, sp, #20
   13078:	f00d f82e 	bl	200d8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1307c:	a902      	add	r1, sp, #8
   1307e:	a806      	add	r0, sp, #24
   13080:	f00d f82a 	bl	200d8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   13084:	a903      	add	r1, sp, #12
   13086:	a807      	add	r0, sp, #28
   13088:	f00d f826 	bl	200d8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1308c:	2310      	movs	r3, #16
   1308e:	4619      	mov	r1, r3
   13090:	eb0d 0203 	add.w	r2, sp, r3
   13094:	4668      	mov	r0, sp
   13096:	f00c ff89 	bl	1ffac <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1309a:	4639      	mov	r1, r7
   1309c:	4668      	mov	r0, sp
   1309e:	3710      	adds	r7, #16
   130a0:	f00c ff9c 	bl	1ffdc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   130a4:	42af      	cmp	r7, r5
   130a6:	d1d5      	bne.n	13054 <tc_aes_encrypt+0x34>
   130a8:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   130aa:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   130ae:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   130b0:	f819 3003 	ldrb.w	r3, [r9, r3]
   130b4:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   130b8:	d1f7      	bne.n	130aa <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   130ba:	4668      	mov	r0, sp
   130bc:	f00c ffd3 	bl	20066 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   130c0:	4629      	mov	r1, r5
   130c2:	4668      	mov	r0, sp
   130c4:	f00c ff8a 	bl	1ffdc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   130c8:	2310      	movs	r3, #16
   130ca:	4619      	mov	r1, r3
   130cc:	466a      	mov	r2, sp
   130ce:	4630      	mov	r0, r6
   130d0:	f00c ff6c 	bl	1ffac <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   130d4:	4668      	mov	r0, sp
   130d6:	2210      	movs	r2, #16
   130d8:	4621      	mov	r1, r4
   130da:	f00c ff74 	bl	1ffc6 <_set>

	return TC_CRYPTO_SUCCESS;
   130de:	2001      	movs	r0, #1
}
   130e0:	b009      	add	sp, #36	; 0x24
   130e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   130e6:	4608      	mov	r0, r1
   130e8:	e7fa      	b.n	130e0 <tc_aes_encrypt+0xc0>
   130ea:	4610      	mov	r0, r2
   130ec:	e7f8      	b.n	130e0 <tc_aes_encrypt+0xc0>
   130ee:	bf00      	nop
   130f0:	00024df2 	.word	0x00024df2

000130f4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   130f4:	4801      	ldr	r0, [pc, #4]	; (130fc <nrf_cc3xx_platform_abort_init+0x8>)
   130f6:	f009 bd1f 	b.w	1cb38 <nrf_cc3xx_platform_set_abort>
   130fa:	bf00      	nop
   130fc:	000246f0 	.word	0x000246f0

00013100 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13100:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13102:	b1d0      	cbz	r0, 1313a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13104:	6843      	ldr	r3, [r0, #4]
   13106:	2b04      	cmp	r3, #4
   13108:	d111      	bne.n	1312e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1310a:	2200      	movs	r2, #0
   1310c:	6803      	ldr	r3, [r0, #0]
   1310e:	f3bf 8f5b 	dmb	ish
   13112:	e853 1f00 	ldrex	r1, [r3]
   13116:	2901      	cmp	r1, #1
   13118:	d103      	bne.n	13122 <mutex_unlock_platform+0x22>
   1311a:	e843 2000 	strex	r0, r2, [r3]
   1311e:	2800      	cmp	r0, #0
   13120:	d1f7      	bne.n	13112 <mutex_unlock_platform+0x12>
   13122:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13126:	4807      	ldr	r0, [pc, #28]	; (13144 <mutex_unlock_platform+0x44>)
   13128:	bf08      	it	eq
   1312a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1312c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1312e:	b13b      	cbz	r3, 13140 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13130:	6800      	ldr	r0, [r0, #0]
   13132:	f008 fbc1 	bl	1b8b8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13136:	2000      	movs	r0, #0
   13138:	e7f8      	b.n	1312c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1313a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1313e:	e7f5      	b.n	1312c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13140:	4801      	ldr	r0, [pc, #4]	; (13148 <mutex_unlock_platform+0x48>)
   13142:	e7f3      	b.n	1312c <mutex_unlock_platform+0x2c>
   13144:	ffff8fe9 	.word	0xffff8fe9
   13148:	ffff8fea 	.word	0xffff8fea

0001314c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1314c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1314e:	4604      	mov	r4, r0
   13150:	b918      	cbnz	r0, 1315a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   13152:	4b0d      	ldr	r3, [pc, #52]	; (13188 <mutex_free_platform+0x3c>)
   13154:	480d      	ldr	r0, [pc, #52]	; (1318c <mutex_free_platform+0x40>)
   13156:	685b      	ldr	r3, [r3, #4]
   13158:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1315a:	6861      	ldr	r1, [r4, #4]
   1315c:	2908      	cmp	r1, #8
   1315e:	d00d      	beq.n	1317c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13160:	f031 0304 	bics.w	r3, r1, #4
   13164:	d00a      	beq.n	1317c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   13166:	f011 0102 	ands.w	r1, r1, #2
   1316a:	d008      	beq.n	1317e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1316c:	4808      	ldr	r0, [pc, #32]	; (13190 <mutex_free_platform+0x44>)
   1316e:	4621      	mov	r1, r4
   13170:	f010 fa34 	bl	235dc <k_mem_slab_free>
        mutex->mutex = NULL;
   13174:	2300      	movs	r3, #0
   13176:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13178:	2300      	movs	r3, #0
   1317a:	6063      	str	r3, [r4, #4]
}
   1317c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1317e:	6820      	ldr	r0, [r4, #0]
   13180:	2214      	movs	r2, #20
   13182:	f00d f94b 	bl	2041c <memset>
   13186:	e7f7      	b.n	13178 <mutex_free_platform+0x2c>
   13188:	20000834 	.word	0x20000834
   1318c:	00024ef2 	.word	0x00024ef2
   13190:	2000220c 	.word	0x2000220c

00013194 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13194:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13196:	4604      	mov	r4, r0
   13198:	b918      	cbnz	r0, 131a2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1319a:	4b16      	ldr	r3, [pc, #88]	; (131f4 <mutex_init_platform+0x60>)
   1319c:	4816      	ldr	r0, [pc, #88]	; (131f8 <mutex_init_platform+0x64>)
   1319e:	685b      	ldr	r3, [r3, #4]
   131a0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   131a2:	6863      	ldr	r3, [r4, #4]
   131a4:	2b04      	cmp	r3, #4
   131a6:	d023      	beq.n	131f0 <mutex_init_platform+0x5c>
   131a8:	2b08      	cmp	r3, #8
   131aa:	d021      	beq.n	131f0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   131ac:	b9cb      	cbnz	r3, 131e2 <mutex_init_platform+0x4e>
   131ae:	6823      	ldr	r3, [r4, #0]
   131b0:	b9bb      	cbnz	r3, 131e2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   131b2:	4812      	ldr	r0, [pc, #72]	; (131fc <mutex_init_platform+0x68>)
   131b4:	f04f 32ff 	mov.w	r2, #4294967295
   131b8:	f04f 33ff 	mov.w	r3, #4294967295
   131bc:	4621      	mov	r1, r4
   131be:	f008 f9fb 	bl	1b5b8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   131c2:	b908      	cbnz	r0, 131c8 <mutex_init_platform+0x34>
   131c4:	6823      	ldr	r3, [r4, #0]
   131c6:	b91b      	cbnz	r3, 131d0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   131c8:	4b0a      	ldr	r3, [pc, #40]	; (131f4 <mutex_init_platform+0x60>)
   131ca:	480d      	ldr	r0, [pc, #52]	; (13200 <mutex_init_platform+0x6c>)
   131cc:	685b      	ldr	r3, [r3, #4]
   131ce:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   131d0:	6820      	ldr	r0, [r4, #0]
   131d2:	2214      	movs	r2, #20
   131d4:	2100      	movs	r1, #0
   131d6:	f00d f921 	bl	2041c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   131da:	6863      	ldr	r3, [r4, #4]
   131dc:	f043 0302 	orr.w	r3, r3, #2
   131e0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   131e2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   131e4:	f010 fa35 	bl	23652 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   131e8:	6863      	ldr	r3, [r4, #4]
   131ea:	f043 0301 	orr.w	r3, r3, #1
   131ee:	6063      	str	r3, [r4, #4]
}
   131f0:	bd10      	pop	{r4, pc}
   131f2:	bf00      	nop
   131f4:	20000834 	.word	0x20000834
   131f8:	00024ef2 	.word	0x00024ef2
   131fc:	2000220c 	.word	0x2000220c
   13200:	00024f18 	.word	0x00024f18

00013204 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13204:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   13206:	b308      	cbz	r0, 1324c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   13208:	6843      	ldr	r3, [r0, #4]
   1320a:	2b04      	cmp	r3, #4
   1320c:	d110      	bne.n	13230 <mutex_lock_platform+0x2c>
   1320e:	2201      	movs	r2, #1
   13210:	6803      	ldr	r3, [r0, #0]
   13212:	f3bf 8f5b 	dmb	ish
   13216:	e853 1f00 	ldrex	r1, [r3]
   1321a:	2900      	cmp	r1, #0
   1321c:	d103      	bne.n	13226 <mutex_lock_platform+0x22>
   1321e:	e843 2000 	strex	r0, r2, [r3]
   13222:	2800      	cmp	r0, #0
   13224:	d1f7      	bne.n	13216 <mutex_lock_platform+0x12>
   13226:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1322a:	d10b      	bne.n	13244 <mutex_lock_platform+0x40>
   1322c:	2000      	movs	r0, #0
}
   1322e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13230:	b153      	cbz	r3, 13248 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13232:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13234:	f04f 32ff 	mov.w	r2, #4294967295
   13238:	f04f 33ff 	mov.w	r3, #4294967295
   1323c:	f008 fabe 	bl	1b7bc <z_impl_k_mutex_lock>
        if (ret == 0) {
   13240:	2800      	cmp	r0, #0
   13242:	d0f3      	beq.n	1322c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13244:	4803      	ldr	r0, [pc, #12]	; (13254 <mutex_lock_platform+0x50>)
   13246:	e7f2      	b.n	1322e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13248:	4803      	ldr	r0, [pc, #12]	; (13258 <mutex_lock_platform+0x54>)
   1324a:	e7f0      	b.n	1322e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1324c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13250:	e7ed      	b.n	1322e <mutex_lock_platform+0x2a>
   13252:	bf00      	nop
   13254:	ffff8fe9 	.word	0xffff8fe9
   13258:	ffff8fea 	.word	0xffff8fea

0001325c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1325c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1325e:	4906      	ldr	r1, [pc, #24]	; (13278 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13260:	4806      	ldr	r0, [pc, #24]	; (1327c <nrf_cc3xx_platform_mutex_init+0x20>)
   13262:	2340      	movs	r3, #64	; 0x40
   13264:	2214      	movs	r2, #20
   13266:	f010 f99e 	bl	235a6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1326a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1326e:	4904      	ldr	r1, [pc, #16]	; (13280 <nrf_cc3xx_platform_mutex_init+0x24>)
   13270:	4804      	ldr	r0, [pc, #16]	; (13284 <nrf_cc3xx_platform_mutex_init+0x28>)
   13272:	f009 bd19 	b.w	1cca8 <nrf_cc3xx_platform_set_mutexes>
   13276:	bf00      	nop
   13278:	20002228 	.word	0x20002228
   1327c:	2000220c 	.word	0x2000220c
   13280:	00024708 	.word	0x00024708
   13284:	000246f8 	.word	0x000246f8

00013288 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13288:	4901      	ldr	r1, [pc, #4]	; (13290 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1328a:	2210      	movs	r2, #16
	str	r2, [r1]
   1328c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1328e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13290:	e000ed10 	.word	0xe000ed10

00013294 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13294:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13296:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13298:	f380 8811 	msr	BASEPRI, r0
	isb
   1329c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   132a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   132a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   132a6:	b662      	cpsie	i
	isb
   132a8:	f3bf 8f6f 	isb	sy

	bx	lr
   132ac:	4770      	bx	lr
   132ae:	bf00      	nop

000132b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   132b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   132b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   132b4:	f381 8811 	msr	BASEPRI, r1

	wfe
   132b8:	bf20      	wfe

	msr	BASEPRI, r0
   132ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   132be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   132c0:	4770      	bx	lr
   132c2:	bf00      	nop

000132c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   132c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   132c6:	2b00      	cmp	r3, #0
   132c8:	db08      	blt.n	132dc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132ca:	2201      	movs	r2, #1
   132cc:	f000 001f 	and.w	r0, r0, #31
   132d0:	fa02 f000 	lsl.w	r0, r2, r0
   132d4:	095b      	lsrs	r3, r3, #5
   132d6:	4a02      	ldr	r2, [pc, #8]	; (132e0 <arch_irq_enable+0x1c>)
   132d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   132dc:	4770      	bx	lr
   132de:	bf00      	nop
   132e0:	e000e100 	.word	0xe000e100

000132e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   132e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   132e6:	2b00      	cmp	r3, #0
   132e8:	db0d      	blt.n	13306 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132ea:	2201      	movs	r2, #1
   132ec:	095b      	lsrs	r3, r3, #5
   132ee:	f000 001f 	and.w	r0, r0, #31
   132f2:	fa02 f000 	lsl.w	r0, r2, r0
   132f6:	3320      	adds	r3, #32
   132f8:	4a03      	ldr	r2, [pc, #12]	; (13308 <arch_irq_disable+0x24>)
   132fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   132fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13302:	f3bf 8f6f 	isb	sy
}
   13306:	4770      	bx	lr
   13308:	e000e100 	.word	0xe000e100

0001330c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1330c:	4b05      	ldr	r3, [pc, #20]	; (13324 <arch_irq_is_enabled+0x18>)
   1330e:	0942      	lsrs	r2, r0, #5
   13310:	f000 001f 	and.w	r0, r0, #31
   13314:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13318:	2301      	movs	r3, #1
   1331a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1331e:	4010      	ands	r0, r2
   13320:	4770      	bx	lr
   13322:	bf00      	nop
   13324:	e000e100 	.word	0xe000e100

00013328 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13328:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1332a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   1332c:	bf54      	ite	pl
   1332e:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13330:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13332:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13334:	bfac      	ite	ge
   13336:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1333a:	4a07      	ldrlt	r2, [pc, #28]	; (13358 <z_arm_irq_priority_set+0x30>)
   1333c:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13340:	bfac      	ite	ge
   13342:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13346:	f000 000f 	andlt.w	r0, r0, #15
   1334a:	b2db      	uxtb	r3, r3
   1334c:	bfb4      	ite	lt
   1334e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13350:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13354:	4770      	bx	lr
   13356:	bf00      	nop
   13358:	e000ed14 	.word	0xe000ed14

0001335c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1335c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1335e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13360:	4b04      	ldr	r3, [pc, #16]	; (13374 <_arch_isr_direct_pm+0x18>)
   13362:	699a      	ldr	r2, [r3, #24]
   13364:	b11a      	cbz	r2, 1336e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13366:	2200      	movs	r2, #0
   13368:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1336a:	f010 f96b 	bl	23644 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1336e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13370:	bd08      	pop	{r3, pc}
   13372:	bf00      	nop
   13374:	20002a50 	.word	0x20002a50

00013378 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13378:	bf30      	wfi
    b z_SysNmiOnReset
   1337a:	f7ff bffd 	b.w	13378 <z_SysNmiOnReset>
   1337e:	bf00      	nop

00013380 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13380:	4a0b      	ldr	r2, [pc, #44]	; (133b0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13382:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13384:	4b0b      	ldr	r3, [pc, #44]	; (133b4 <z_arm_prep_c+0x34>)
   13386:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1338a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1338c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13390:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13394:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13398:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1339c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   133a0:	f008 f858 	bl	1b454 <z_bss_zero>
	z_data_copy();
   133a4:	f009 f8bc 	bl	1c520 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   133a8:	f000 f9d0 	bl	1374c <z_arm_interrupt_init>
	z_cstart();
   133ac:	f008 f85c 	bl	1b468 <z_cstart>
   133b0:	00001000 	.word	0x00001000
   133b4:	e000ed00 	.word	0xe000ed00

000133b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   133b8:	4a09      	ldr	r2, [pc, #36]	; (133e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   133ba:	490a      	ldr	r1, [pc, #40]	; (133e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   133bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   133be:	6809      	ldr	r1, [r1, #0]
   133c0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   133c2:	4909      	ldr	r1, [pc, #36]	; (133e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   133c4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   133c6:	684b      	ldr	r3, [r1, #4]
   133c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   133cc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   133ce:	2300      	movs	r3, #0
   133d0:	f383 8811 	msr	BASEPRI, r3
   133d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   133d8:	6893      	ldr	r3, [r2, #8]
}
   133da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   133dc:	4770      	bx	lr
   133de:	bf00      	nop
   133e0:	20002a50 	.word	0x20002a50
   133e4:	00024bc4 	.word	0x00024bc4
   133e8:	e000ed00 	.word	0xe000ed00

000133ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   133ec:	4912      	ldr	r1, [pc, #72]	; (13438 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   133ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   133f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   133f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   133f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   133fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   133fe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13400:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13404:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13408:	4f0c      	ldr	r7, [pc, #48]	; (1343c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1340a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1340e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13410:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13412:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13414:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13416:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13418:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1341a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1341e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13420:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13422:	f000 fa29 	bl	13878 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13426:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1342a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1342e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13432:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13436:	4770      	bx	lr
    ldr r1, =_kernel
   13438:	20002a50 	.word	0x20002a50
    ldr v4, =_SCS_ICSR
   1343c:	e000ed04 	.word	0xe000ed04

00013440 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13440:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13444:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13446:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1344a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1344e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13450:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13454:	2902      	cmp	r1, #2
    beq _oops
   13456:	d0ff      	beq.n	13458 <_oops>

00013458 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13458:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1345a:	f00c ff82 	bl	20362 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1345e:	bd01      	pop	{r0, pc}

00013460 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13460:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13464:	9b00      	ldr	r3, [sp, #0]
   13466:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1346a:	490a      	ldr	r1, [pc, #40]	; (13494 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1346c:	9b01      	ldr	r3, [sp, #4]
   1346e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13472:	9b02      	ldr	r3, [sp, #8]
   13474:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13478:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1347c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13480:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13484:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13488:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1348a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1348c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1348e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13490:	4770      	bx	lr
   13492:	bf00      	nop
   13494:	0001f66f 	.word	0x0001f66f

00013498 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13498:	4a0b      	ldr	r2, [pc, #44]	; (134c8 <z_check_thread_stack_fail+0x30>)
{
   1349a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1349c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1349e:	b190      	cbz	r0, 134c6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   134a0:	f113 0f16 	cmn.w	r3, #22
   134a4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   134a6:	d005      	beq.n	134b4 <z_check_thread_stack_fail+0x1c>
   134a8:	f1a0 0220 	sub.w	r2, r0, #32
   134ac:	429a      	cmp	r2, r3
   134ae:	d806      	bhi.n	134be <z_check_thread_stack_fail+0x26>
   134b0:	4283      	cmp	r3, r0
   134b2:	d204      	bcs.n	134be <z_check_thread_stack_fail+0x26>
   134b4:	4281      	cmp	r1, r0
   134b6:	bf2c      	ite	cs
   134b8:	2100      	movcs	r1, #0
   134ba:	2101      	movcc	r1, #1
   134bc:	e000      	b.n	134c0 <z_check_thread_stack_fail+0x28>
   134be:	2100      	movs	r1, #0
   134c0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   134c2:	bf08      	it	eq
   134c4:	2000      	moveq	r0, #0
}
   134c6:	4770      	bx	lr
   134c8:	20002a50 	.word	0x20002a50

000134cc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   134cc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   134ce:	4b09      	ldr	r3, [pc, #36]	; (134f4 <arch_switch_to_main_thread+0x28>)
   134d0:	6098      	str	r0, [r3, #8]
{
   134d2:	460d      	mov	r5, r1
   134d4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   134d6:	f000 f9cf 	bl	13878 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   134da:	4620      	mov	r0, r4
   134dc:	f385 8809 	msr	PSP, r5
   134e0:	2100      	movs	r1, #0
   134e2:	b663      	cpsie	if
   134e4:	f381 8811 	msr	BASEPRI, r1
   134e8:	f3bf 8f6f 	isb	sy
   134ec:	2200      	movs	r2, #0
   134ee:	2300      	movs	r3, #0
   134f0:	f00c f8bd 	bl	1f66e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   134f4:	20002a50 	.word	0x20002a50

000134f8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   134f8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   134fa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   134fc:	4a0b      	ldr	r2, [pc, #44]	; (1352c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   134fe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13500:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13502:	bf1e      	ittt	ne
	movne	r1, #0
   13504:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13506:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13508:	f010 f89c 	blne	23644 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1350c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1350e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13512:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13516:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1351a:	4905      	ldr	r1, [pc, #20]	; (13530 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1351c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1351e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13520:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13522:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13526:	4903      	ldr	r1, [pc, #12]	; (13534 <_isr_wrapper+0x3c>)
	bx r1
   13528:	4708      	bx	r1
   1352a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1352c:	20002a50 	.word	0x20002a50
	ldr r1, =_sw_isr_table
   13530:	00024248 	.word	0x00024248
	ldr r1, =z_arm_int_exit
   13534:	00013539 	.word	0x00013539

00013538 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13538:	4b04      	ldr	r3, [pc, #16]	; (1354c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1353a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1353c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1353e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13540:	d003      	beq.n	1354a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13542:	4903      	ldr	r1, [pc, #12]	; (13550 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13548:	600a      	str	r2, [r1, #0]

0001354a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1354a:	4770      	bx	lr
	ldr r3, =_kernel
   1354c:	20002a50 	.word	0x20002a50
	ldr r1, =_SCS_ICSR
   13550:	e000ed04 	.word	0xe000ed04

00013554 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13554:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13556:	4b19      	ldr	r3, [pc, #100]	; (135bc <mem_manage_fault+0x68>)
{
   13558:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1355a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1355c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   13560:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13562:	0790      	lsls	r0, r2, #30
   13564:	d519      	bpl.n	1359a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   13566:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1356a:	0612      	lsls	r2, r2, #24
   1356c:	d515      	bpl.n	1359a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   1356e:	b119      	cbz	r1, 13578 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   13576:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1357a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1357e:	06d1      	lsls	r1, r2, #27
   13580:	d40e      	bmi.n	135a0 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13584:	079a      	lsls	r2, r3, #30
   13586:	d40b      	bmi.n	135a0 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13588:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1358a:	4a0c      	ldr	r2, [pc, #48]	; (135bc <mem_manage_fault+0x68>)
   1358c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1358e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13592:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13594:	2300      	movs	r3, #0
   13596:	7023      	strb	r3, [r4, #0]

	return reason;
}
   13598:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   1359a:	f06f 0015 	mvn.w	r0, #21
   1359e:	e7eb      	b.n	13578 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   135a0:	4b06      	ldr	r3, [pc, #24]	; (135bc <mem_manage_fault+0x68>)
   135a2:	685b      	ldr	r3, [r3, #4]
   135a4:	051b      	lsls	r3, r3, #20
   135a6:	d5ef      	bpl.n	13588 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   135a8:	4629      	mov	r1, r5
   135aa:	f7ff ff75 	bl	13498 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   135ae:	2800      	cmp	r0, #0
   135b0:	d0ea      	beq.n	13588 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   135b2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   135b6:	2002      	movs	r0, #2
   135b8:	e7e7      	b.n	1358a <mem_manage_fault+0x36>
   135ba:	bf00      	nop
   135bc:	e000ed00 	.word	0xe000ed00

000135c0 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   135c0:	4b0d      	ldr	r3, [pc, #52]	; (135f8 <bus_fault.isra.0+0x38>)
   135c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   135c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   135c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135c8:	0592      	lsls	r2, r2, #22
   135ca:	d508      	bpl.n	135de <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   135cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   135ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135d0:	0412      	lsls	r2, r2, #16
   135d2:	d504      	bpl.n	135de <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   135d4:	b118      	cbz	r0, 135de <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   135d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   135dc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   135de:	4b06      	ldr	r3, [pc, #24]	; (135f8 <bus_fault.isra.0+0x38>)
   135e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   135e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135e4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   135e6:	bf58      	it	pl
   135e8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   135ec:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135ee:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   135f2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   135f4:	7008      	strb	r0, [r1, #0]

	return reason;
}
   135f6:	4770      	bx	lr
   135f8:	e000ed00 	.word	0xe000ed00

000135fc <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   135fc:	4b07      	ldr	r3, [pc, #28]	; (1361c <usage_fault.isra.0+0x20>)
   135fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1360a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1360c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   13610:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13614:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   13616:	2000      	movs	r0, #0
   13618:	4770      	bx	lr
   1361a:	bf00      	nop
   1361c:	e000ed00 	.word	0xe000ed00

00013620 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13620:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13622:	4b3e      	ldr	r3, [pc, #248]	; (1371c <z_arm_fault+0xfc>)
   13624:	685b      	ldr	r3, [r3, #4]
{
   13626:	b08a      	sub	sp, #40	; 0x28
   13628:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1362e:	2600      	movs	r6, #0
   13630:	f386 8811 	msr	BASEPRI, r6
   13634:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13638:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   1363c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   13640:	d111      	bne.n	13666 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13642:	f002 010c 	and.w	r1, r2, #12
   13646:	2908      	cmp	r1, #8
   13648:	d00d      	beq.n	13666 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1364a:	0712      	lsls	r2, r2, #28
   1364c:	d401      	bmi.n	13652 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1364e:	4605      	mov	r5, r0
			*nested_exc = true;
   13650:	2601      	movs	r6, #1
	*recoverable = false;
   13652:	2200      	movs	r2, #0
   13654:	3b03      	subs	r3, #3
   13656:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1365a:	2b03      	cmp	r3, #3
   1365c:	d857      	bhi.n	1370e <z_arm_fault+0xee>
   1365e:	e8df f003 	tbb	[pc, r3]
   13662:	4e04      	.short	0x4e04
   13664:	4b52      	.short	0x4b52
		return NULL;
   13666:	4635      	mov	r5, r6
   13668:	e7f3      	b.n	13652 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1366a:	4b2c      	ldr	r3, [pc, #176]	; (1371c <z_arm_fault+0xfc>)
   1366c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1366e:	f014 0402 	ands.w	r4, r4, #2
   13672:	d14c      	bne.n	1370e <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13676:	2a00      	cmp	r2, #0
   13678:	db18      	blt.n	136ac <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1367c:	005b      	lsls	r3, r3, #1
   1367e:	d515      	bpl.n	136ac <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
   13680:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13682:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   13686:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1368a:	429a      	cmp	r2, r3
   1368c:	d00d      	beq.n	136aa <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
   1368e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13692:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13696:	781b      	ldrb	r3, [r3, #0]
   13698:	b303      	cbz	r3, 136dc <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
   1369a:	f10d 0207 	add.w	r2, sp, #7
   1369e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   136a0:	4628      	mov	r0, r5
   136a2:	f7ff ff57 	bl	13554 <mem_manage_fault>
   136a6:	4604      	mov	r4, r0
		break;
   136a8:	e000      	b.n	136ac <z_arm_fault+0x8c>
			reason = esf->basic.r0;
   136aa:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   136ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   136b0:	b993      	cbnz	r3, 136d8 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   136b2:	2220      	movs	r2, #32
   136b4:	4629      	mov	r1, r5
   136b6:	a802      	add	r0, sp, #8
   136b8:	f00c fea5 	bl	20406 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   136bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   136be:	b346      	cbz	r6, 13712 <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   136c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   136c4:	b922      	cbnz	r2, 136d0 <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   136c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   136ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   136ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   136d0:	a902      	add	r1, sp, #8
   136d2:	4620      	mov	r0, r4
   136d4:	f00c fe43 	bl	2035e <z_arm_fatal_error>
}
   136d8:	b00a      	add	sp, #40	; 0x28
   136da:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   136dc:	4b10      	ldr	r3, [pc, #64]	; (13720 <z_arm_fault+0x100>)
   136de:	781b      	ldrb	r3, [r3, #0]
   136e0:	b12b      	cbz	r3, 136ee <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
   136e2:	f10d 0107 	add.w	r1, sp, #7
   136e6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   136e8:	f7ff ff6a 	bl	135c0 <bus_fault.isra.0>
   136ec:	e7db      	b.n	136a6 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
   136ee:	4b0d      	ldr	r3, [pc, #52]	; (13724 <z_arm_fault+0x104>)
   136f0:	881b      	ldrh	r3, [r3, #0]
   136f2:	b29b      	uxth	r3, r3
   136f4:	2b00      	cmp	r3, #0
   136f6:	d0d9      	beq.n	136ac <z_arm_fault+0x8c>
		reason = usage_fault(esf);
   136f8:	f7ff ff80 	bl	135fc <usage_fault.isra.0>
   136fc:	e7d3      	b.n	136a6 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   136fe:	f10d 0207 	add.w	r2, sp, #7
   13702:	2100      	movs	r1, #0
   13704:	e7cc      	b.n	136a0 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
   13706:	f10d 0107 	add.w	r1, sp, #7
   1370a:	2000      	movs	r0, #0
   1370c:	e7ec      	b.n	136e8 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1370e:	2400      	movs	r4, #0
   13710:	e7cc      	b.n	136ac <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13712:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13716:	f023 0301 	bic.w	r3, r3, #1
   1371a:	e7d8      	b.n	136ce <z_arm_fault+0xae>
   1371c:	e000ed00 	.word	0xe000ed00
   13720:	e000ed29 	.word	0xe000ed29
   13724:	e000ed2a 	.word	0xe000ed2a

00013728 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13728:	4a02      	ldr	r2, [pc, #8]	; (13734 <z_arm_fault_init+0xc>)
   1372a:	6953      	ldr	r3, [r2, #20]
   1372c:	f043 0310 	orr.w	r3, r3, #16
   13730:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13732:	4770      	bx	lr
   13734:	e000ed00 	.word	0xe000ed00

00013738 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13738:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1373c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13740:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13742:	4672      	mov	r2, lr
	bl z_arm_fault
   13744:	f7ff ff6c 	bl	13620 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13748:	bd01      	pop	{r0, pc}
   1374a:	bf00      	nop

0001374c <z_arm_interrupt_init>:
   1374c:	4804      	ldr	r0, [pc, #16]	; (13760 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1374e:	2300      	movs	r3, #0
   13750:	2140      	movs	r1, #64	; 0x40
   13752:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13754:	3301      	adds	r3, #1
   13756:	2b30      	cmp	r3, #48	; 0x30
   13758:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1375c:	d1f9      	bne.n	13752 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1375e:	4770      	bx	lr
   13760:	e000e100 	.word	0xe000e100

00013764 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13764:	2000      	movs	r0, #0
    msr CONTROL, r0
   13766:	f380 8814 	msr	CONTROL, r0
    isb
   1376a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1376e:	f010 fc4f 	bl	24010 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13772:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13774:	490d      	ldr	r1, [pc, #52]	; (137ac <__start+0x48>)
    str r0, [r1]
   13776:	6008      	str	r0, [r1, #0]
    dsb
   13778:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1377c:	480c      	ldr	r0, [pc, #48]	; (137b0 <__start+0x4c>)
    msr msp, r0
   1377e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13782:	f000 f829 	bl	137d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13786:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13788:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1378c:	4809      	ldr	r0, [pc, #36]	; (137b4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1378e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13792:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13794:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13798:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1379c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1379e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   137a0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   137a4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   137a8:	f7ff fdea 	bl	13380 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   137ac:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   137b0:	20005cc0 	.word	0x20005cc0
    ldr r0, =z_interrupt_stacks
   137b4:	20005e40 	.word	0x20005e40

000137b8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   137b8:	4a06      	ldr	r2, [pc, #24]	; (137d4 <z_arm_clear_arm_mpu_config+0x1c>)
   137ba:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   137bc:	2300      	movs	r3, #0
	int num_regions =
   137be:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   137c2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   137c4:	428b      	cmp	r3, r1
   137c6:	d100      	bne.n	137ca <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   137c8:	4770      	bx	lr
  MPU->RNR = rnr;
   137ca:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   137cc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   137ce:	3301      	adds	r3, #1
   137d0:	e7f8      	b.n	137c4 <z_arm_clear_arm_mpu_config+0xc>
   137d2:	bf00      	nop
   137d4:	e000ed90 	.word	0xe000ed90

000137d8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   137d8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   137da:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   137dc:	2300      	movs	r3, #0
   137de:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   137e2:	f7ff ffe9 	bl	137b8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   137e6:	4b14      	ldr	r3, [pc, #80]	; (13838 <z_arm_init_arch_hw_at_boot+0x60>)
   137e8:	f04f 32ff 	mov.w	r2, #4294967295
   137ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   137f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   137f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   137f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   137fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13804:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1380c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13810:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13814:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13818:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1381c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13820:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   13824:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13828:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   1382c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1382e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13832:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13836:	bd08      	pop	{r3, pc}
   13838:	e000e100 	.word	0xe000e100

0001383c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1383c:	4b06      	ldr	r3, [pc, #24]	; (13858 <z_impl_k_thread_abort+0x1c>)
   1383e:	689b      	ldr	r3, [r3, #8]
   13840:	4283      	cmp	r3, r0
   13842:	d107      	bne.n	13854 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13844:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13848:	b123      	cbz	r3, 13854 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1384a:	4a04      	ldr	r2, [pc, #16]	; (1385c <z_impl_k_thread_abort+0x20>)
   1384c:	6853      	ldr	r3, [r2, #4]
   1384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13852:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   13854:	f008 be00 	b.w	1c458 <z_thread_abort>
   13858:	20002a50 	.word	0x20002a50
   1385c:	e000ed00 	.word	0xe000ed00

00013860 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13860:	4b02      	ldr	r3, [pc, #8]	; (1386c <z_arm_configure_static_mpu_regions+0xc>)
   13862:	4a03      	ldr	r2, [pc, #12]	; (13870 <z_arm_configure_static_mpu_regions+0x10>)
   13864:	4803      	ldr	r0, [pc, #12]	; (13874 <z_arm_configure_static_mpu_regions+0x14>)
   13866:	2101      	movs	r1, #1
   13868:	f000 b868 	b.w	1393c <arm_core_mpu_configure_static_mpu_regions>
   1386c:	20040000 	.word	0x20040000
   13870:	20000000 	.word	0x20000000
   13874:	0002471c 	.word	0x0002471c

00013878 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13878:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1387a:	4b05      	ldr	r3, [pc, #20]	; (13890 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1387c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1387e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13880:	4a04      	ldr	r2, [pc, #16]	; (13894 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13882:	2120      	movs	r1, #32
   13884:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13888:	4618      	mov	r0, r3
   1388a:	2101      	movs	r1, #1
   1388c:	f000 b860 	b.w	13950 <arm_core_mpu_configure_dynamic_mpu_regions>
   13890:	20002728 	.word	0x20002728
   13894:	150b0000 	.word	0x150b0000

00013898 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13898:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1389a:	4f1e      	ldr	r7, [pc, #120]	; (13914 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1389c:	2600      	movs	r6, #0
   1389e:	428e      	cmp	r6, r1
   138a0:	db01      	blt.n	138a6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   138a2:	4610      	mov	r0, r2
   138a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   138a6:	6844      	ldr	r4, [r0, #4]
   138a8:	b384      	cbz	r4, 1390c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   138aa:	b153      	cbz	r3, 138c2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   138ac:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   138b0:	ea14 0f0c 	tst.w	r4, ip
   138b4:	d118      	bne.n	138e8 <mpu_configure_regions+0x50>
		&&
   138b6:	2c1f      	cmp	r4, #31
   138b8:	d916      	bls.n	138e8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   138ba:	6805      	ldr	r5, [r0, #0]
		&&
   138bc:	ea1c 0f05 	tst.w	ip, r5
   138c0:	d112      	bne.n	138e8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   138c2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   138c4:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   138c6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   138ca:	b2d2      	uxtb	r2, r2
   138cc:	d90f      	bls.n	138ee <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   138ce:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   138d2:	d80e      	bhi.n	138f2 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   138d4:	3c01      	subs	r4, #1
   138d6:	fab4 f484 	clz	r4, r4
   138da:	f1c4 041f 	rsb	r4, r4, #31
   138de:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   138e0:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   138e2:	ea4c 0404 	orr.w	r4, ip, r4
   138e6:	d906      	bls.n	138f6 <mpu_configure_regions+0x5e>
			return -EINVAL;
   138e8:	f06f 0215 	mvn.w	r2, #21
   138ec:	e7d9      	b.n	138a2 <mpu_configure_regions+0xa>
		return REGION_32B;
   138ee:	2408      	movs	r4, #8
   138f0:	e7f6      	b.n	138e0 <mpu_configure_regions+0x48>
		return REGION_4G;
   138f2:	243e      	movs	r4, #62	; 0x3e
   138f4:	e7f4      	b.n	138e0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   138f6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   138fa:	4315      	orrs	r5, r2
   138fc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13900:	f044 0401 	orr.w	r4, r4, #1
   13904:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13906:	60fd      	str	r5, [r7, #12]
		reg_index++;
   13908:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1390a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   1390c:	3601      	adds	r6, #1
   1390e:	300c      	adds	r0, #12
   13910:	e7c5      	b.n	1389e <mpu_configure_regions+0x6>
   13912:	bf00      	nop
   13914:	e000ed90 	.word	0xe000ed90

00013918 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13918:	4b03      	ldr	r3, [pc, #12]	; (13928 <arm_core_mpu_enable+0x10>)
   1391a:	2205      	movs	r2, #5
   1391c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1391e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13922:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13926:	4770      	bx	lr
   13928:	e000ed90 	.word	0xe000ed90

0001392c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1392c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13930:	4b01      	ldr	r3, [pc, #4]	; (13938 <arm_core_mpu_disable+0xc>)
   13932:	2200      	movs	r2, #0
   13934:	605a      	str	r2, [r3, #4]
}
   13936:	4770      	bx	lr
   13938:	e000ed90 	.word	0xe000ed90

0001393c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1393c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1393e:	4c03      	ldr	r4, [pc, #12]	; (1394c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13940:	2301      	movs	r3, #1
   13942:	7822      	ldrb	r2, [r4, #0]
   13944:	f7ff ffa8 	bl	13898 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13948:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1394a:	bd10      	pop	{r4, pc}
   1394c:	2000347a 	.word	0x2000347a

00013950 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13950:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13952:	4a08      	ldr	r2, [pc, #32]	; (13974 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   13954:	2300      	movs	r3, #0
   13956:	7812      	ldrb	r2, [r2, #0]
   13958:	f7ff ff9e 	bl	13898 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1395c:	f110 0f16 	cmn.w	r0, #22
   13960:	d003      	beq.n	1396a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   13962:	4b05      	ldr	r3, [pc, #20]	; (13978 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   13964:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13966:	2807      	cmp	r0, #7
   13968:	dd00      	ble.n	1396c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1396a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   1396c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   1396e:	611a      	str	r2, [r3, #16]
   13970:	3001      	adds	r0, #1
   13972:	e7f8      	b.n	13966 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13974:	2000347a 	.word	0x2000347a
   13978:	e000ed90 	.word	0xe000ed90

0001397c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1397c:	4913      	ldr	r1, [pc, #76]	; (139cc <z_arm_mpu_init+0x50>)
   1397e:	6808      	ldr	r0, [r1, #0]
   13980:	2808      	cmp	r0, #8
{
   13982:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13984:	d81e      	bhi.n	139c4 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13986:	f7ff ffd1 	bl	1392c <arm_core_mpu_disable>
   1398a:	4c11      	ldr	r4, [pc, #68]	; (139d0 <z_arm_mpu_init+0x54>)
   1398c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1398e:	2200      	movs	r2, #0
   13990:	4290      	cmp	r0, r2
   13992:	f101 010c 	add.w	r1, r1, #12
   13996:	d105      	bne.n	139a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13998:	4b0e      	ldr	r3, [pc, #56]	; (139d4 <z_arm_mpu_init+0x58>)
   1399a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1399c:	f7ff ffbc 	bl	13918 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   139a0:	2000      	movs	r0, #0
}
   139a2:	bd10      	pop	{r4, pc}
   139a4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   139a6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   139aa:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   139ae:	4313      	orrs	r3, r2
   139b0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   139b4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   139b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   139ba:	f043 0301 	orr.w	r3, r3, #1
   139be:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   139c0:	3201      	adds	r2, #1
   139c2:	e7e5      	b.n	13990 <z_arm_mpu_init+0x14>
		return -1;
   139c4:	f04f 30ff 	mov.w	r0, #4294967295
   139c8:	e7eb      	b.n	139a2 <z_arm_mpu_init+0x26>
   139ca:	bf00      	nop
   139cc:	00024728 	.word	0x00024728
   139d0:	e000ed90 	.word	0xe000ed90
   139d4:	2000347a 	.word	0x2000347a

000139d8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   139d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   139dc:	f3ef 8111 	mrs	r1, BASEPRI
   139e0:	f383 8812 	msr	BASEPRI_MAX, r3
   139e4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   139e8:	4a0f      	ldr	r2, [pc, #60]	; (13a28 <nordicsemi_nrf52_init+0x50>)
   139ea:	2301      	movs	r3, #1
   139ec:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   139f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   139f4:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   139f8:	4a0c      	ldr	r2, [pc, #48]	; (13a2c <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   139fa:	6812      	ldr	r2, [r2, #0]
   139fc:	2a08      	cmp	r2, #8
   139fe:	d108      	bne.n	13a12 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   13a00:	4a0b      	ldr	r2, [pc, #44]	; (13a30 <nordicsemi_nrf52_init+0x58>)
   13a02:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   13a04:	2a05      	cmp	r2, #5
   13a06:	d804      	bhi.n	13a12 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13a08:	480a      	ldr	r0, [pc, #40]	; (13a34 <nordicsemi_nrf52_init+0x5c>)
   13a0a:	5c82      	ldrb	r2, [r0, r2]
   13a0c:	b10a      	cbz	r2, 13a12 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13a0e:	4a0a      	ldr	r2, [pc, #40]	; (13a38 <nordicsemi_nrf52_init+0x60>)
   13a10:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   13a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13a16:	2201      	movs	r2, #1
   13a18:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   13a1c:	f381 8811 	msr	BASEPRI, r1
   13a20:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13a24:	2000      	movs	r0, #0
   13a26:	4770      	bx	lr
   13a28:	4001e000 	.word	0x4001e000
   13a2c:	10000130 	.word	0x10000130
   13a30:	10000134 	.word	0x10000134
   13a34:	00024f54 	.word	0x00024f54
   13a38:	40000638 	.word	0x40000638

00013a3c <sys_arch_reboot>:
    *p_gpregret = val;
   13a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13a40:	b2c0      	uxtb	r0, r0
   13a42:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13a46:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13a4a:	4905      	ldr	r1, [pc, #20]	; (13a60 <sys_arch_reboot+0x24>)
   13a4c:	4b05      	ldr	r3, [pc, #20]	; (13a64 <sys_arch_reboot+0x28>)
   13a4e:	68ca      	ldr	r2, [r1, #12]
   13a50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13a54:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13a56:	60cb      	str	r3, [r1, #12]
   13a58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13a5c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13a5e:	e7fd      	b.n	13a5c <sys_arch_reboot+0x20>
   13a60:	e000ed00 	.word	0xe000ed00
   13a64:	05fa0004 	.word	0x05fa0004

00013a68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13a68:	b120      	cbz	r0, 13a74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13a6a:	4b03      	ldr	r3, [pc, #12]	; (13a78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13a6c:	0180      	lsls	r0, r0, #6
   13a6e:	f043 0301 	orr.w	r3, r3, #1
   13a72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13a74:	4770      	bx	lr
   13a76:	bf00      	nop
   13a78:	000244d0 	.word	0x000244d0

00013a7c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   13a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13a80:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   13a84:	07db      	lsls	r3, r3, #31
   13a86:	d52e      	bpl.n	13ae6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   13a88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   13a8c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   13a90:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   13a94:	2b07      	cmp	r3, #7
   13a96:	d126      	bne.n	13ae6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   13a98:	4b14      	ldr	r3, [pc, #80]	; (13aec <board_nrf52840dongle_nrf52840_init+0x70>)
   13a9a:	2201      	movs	r2, #1
   13a9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   13aa0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13aa4:	2a00      	cmp	r2, #0
   13aa6:	d0fb      	beq.n	13aa0 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   13aa8:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   13aac:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   13ab0:	f022 0207 	bic.w	r2, r2, #7
   13ab4:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
   13ab8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   13abc:	2200      	movs	r2, #0
   13abe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   13ac2:	4a0a      	ldr	r2, [pc, #40]	; (13aec <board_nrf52840dongle_nrf52840_init+0x70>)
   13ac4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13ac8:	2b00      	cmp	r3, #0
   13aca:	d0fb      	beq.n	13ac4 <board_nrf52840dongle_nrf52840_init+0x48>
   13acc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13ad0:	4907      	ldr	r1, [pc, #28]	; (13af0 <board_nrf52840dongle_nrf52840_init+0x74>)
   13ad2:	4b08      	ldr	r3, [pc, #32]	; (13af4 <board_nrf52840dongle_nrf52840_init+0x78>)
   13ad4:	68ca      	ldr	r2, [r1, #12]
   13ad6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13ada:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13adc:	60cb      	str	r3, [r1, #12]
   13ade:	f3bf 8f4f 	dsb	sy
    __NOP();
   13ae2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13ae4:	e7fd      	b.n	13ae2 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   13ae6:	2000      	movs	r0, #0
   13ae8:	4770      	bx	lr
   13aea:	bf00      	nop
   13aec:	4001e000 	.word	0x4001e000
   13af0:	e000ed00 	.word	0xe000ed00
   13af4:	05fa0004 	.word	0x05fa0004

00013af8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13af8:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   13afa:	7802      	ldrb	r2, [r0, #0]
   13afc:	2a01      	cmp	r2, #1
{
   13afe:	4604      	mov	r4, r0
   13b00:	460b      	mov	r3, r1
	switch (src->type) {
   13b02:	d016      	beq.n	13b32 <uuid_to_uuid128+0x3a>
   13b04:	2a02      	cmp	r2, #2
   13b06:	d02c      	beq.n	13b62 <uuid_to_uuid128+0x6a>
   13b08:	b98a      	cbnz	r2, 13b2e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13b0a:	4a19      	ldr	r2, [pc, #100]	; (13b70 <uuid_to_uuid128+0x78>)
   13b0c:	460d      	mov	r5, r1
   13b0e:	f102 0710 	add.w	r7, r2, #16
   13b12:	6810      	ldr	r0, [r2, #0]
   13b14:	6851      	ldr	r1, [r2, #4]
   13b16:	462e      	mov	r6, r5
   13b18:	c603      	stmia	r6!, {r0, r1}
   13b1a:	3208      	adds	r2, #8
   13b1c:	42ba      	cmp	r2, r7
   13b1e:	4635      	mov	r5, r6
   13b20:	d1f7      	bne.n	13b12 <uuid_to_uuid128+0x1a>
   13b22:	7812      	ldrb	r2, [r2, #0]
   13b24:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13b26:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13b28:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   13b2a:	0a12      	lsrs	r2, r2, #8
   13b2c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13b2e:	bcf0      	pop	{r4, r5, r6, r7}
   13b30:	4770      	bx	lr
		*dst = uuid128_base;
   13b32:	4a0f      	ldr	r2, [pc, #60]	; (13b70 <uuid_to_uuid128+0x78>)
   13b34:	460d      	mov	r5, r1
   13b36:	f102 0710 	add.w	r7, r2, #16
   13b3a:	6810      	ldr	r0, [r2, #0]
   13b3c:	6851      	ldr	r1, [r2, #4]
   13b3e:	462e      	mov	r6, r5
   13b40:	c603      	stmia	r6!, {r0, r1}
   13b42:	3208      	adds	r2, #8
   13b44:	42ba      	cmp	r2, r7
   13b46:	4635      	mov	r5, r6
   13b48:	d1f7      	bne.n	13b3a <uuid_to_uuid128+0x42>
   13b4a:	7812      	ldrb	r2, [r2, #0]
   13b4c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13b4e:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   13b50:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   13b52:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13b56:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   13b58:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   13b5a:	0a12      	lsrs	r2, r2, #8
   13b5c:	7399      	strb	r1, [r3, #14]
   13b5e:	741a      	strb	r2, [r3, #16]
}
   13b60:	e7e5      	b.n	13b2e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   13b62:	4601      	mov	r1, r0
}
   13b64:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   13b66:	2211      	movs	r2, #17
   13b68:	4618      	mov	r0, r3
   13b6a:	f00c bc4c 	b.w	20406 <memcpy>
   13b6e:	bf00      	nop
   13b70:	00024f5a 	.word	0x00024f5a

00013b74 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13b74:	b538      	push	{r3, r4, r5, lr}
   13b76:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13b78:	4805      	ldr	r0, [pc, #20]	; (13b90 <bt_buf_get_rx+0x1c>)
   13b7a:	f00e fb84 	bl	22286 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13b7e:	4604      	mov	r4, r0
   13b80:	b120      	cbz	r0, 13b8c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13b82:	2100      	movs	r1, #0
   13b84:	3008      	adds	r0, #8
   13b86:	f00e fb9d 	bl	222c4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13b8a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13b8c:	4620      	mov	r0, r4
   13b8e:	bd38      	pop	{r3, r4, r5, pc}
   13b90:	20000c70 	.word	0x20000c70

00013b94 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13b94:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13b96:	490b      	ldr	r1, [pc, #44]	; (13bc4 <bt_buf_get_cmd_complete+0x30>)
{
   13b98:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13b9a:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   13b9e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   13ba0:	b920      	cbnz	r0, 13bac <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13ba6:	2001      	movs	r0, #1
   13ba8:	f7ff bfe4 	b.w	13b74 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13bac:	f00e fb9b 	bl	222e6 <net_buf_ref>
   13bb0:	2301      	movs	r3, #1
		buf->len = 0U;
   13bb2:	2100      	movs	r1, #0
   13bb4:	7503      	strb	r3, [r0, #20]
   13bb6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13bb8:	4604      	mov	r4, r0
   13bba:	3008      	adds	r0, #8
   13bbc:	f00e fb82 	bl	222c4 <net_buf_simple_reserve>
}
   13bc0:	4620      	mov	r0, r4
   13bc2:	bd10      	pop	{r4, pc}
   13bc4:	200002b0 	.word	0x200002b0

00013bc8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13bc8:	b570      	push	{r4, r5, r6, lr}
   13bca:	4604      	mov	r4, r0
	switch (evt) {
   13bcc:	2c0f      	cmp	r4, #15
{
   13bce:	460d      	mov	r5, r1
   13bd0:	4610      	mov	r0, r2
   13bd2:	4619      	mov	r1, r3
	switch (evt) {
   13bd4:	d805      	bhi.n	13be2 <bt_buf_get_evt+0x1a>
   13bd6:	2c0d      	cmp	r4, #13
   13bd8:	d912      	bls.n	13c00 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13bde:	f7ff bfd9 	b.w	13b94 <bt_buf_get_cmd_complete>
	switch (evt) {
   13be2:	2c13      	cmp	r4, #19
   13be4:	d10c      	bne.n	13c00 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   13be6:	480b      	ldr	r0, [pc, #44]	; (13c14 <bt_buf_get_evt+0x4c>)
   13be8:	f00e fb4d 	bl	22286 <net_buf_alloc_fixed>
			if (buf) {
   13bec:	4604      	mov	r4, r0
   13bee:	b128      	cbz	r0, 13bfc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13bf0:	2100      	movs	r1, #0
   13bf2:	3008      	adds	r0, #8
   13bf4:	f00e fb66 	bl	222c4 <net_buf_simple_reserve>
   13bf8:	2301      	movs	r3, #1
   13bfa:	7523      	strb	r3, [r4, #20]
}
   13bfc:	4620      	mov	r0, r4
   13bfe:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13c00:	4602      	mov	r2, r0
   13c02:	460b      	mov	r3, r1
		if (discardable) {
   13c04:	b10d      	cbz	r5, 13c0a <bt_buf_get_evt+0x42>
   13c06:	4804      	ldr	r0, [pc, #16]	; (13c18 <bt_buf_get_evt+0x50>)
   13c08:	e7ee      	b.n	13be8 <bt_buf_get_evt+0x20>
}
   13c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13c0e:	2001      	movs	r0, #1
   13c10:	f7ff bfb0 	b.w	13b74 <bt_buf_get_rx>
   13c14:	20000c9c 	.word	0x20000c9c
   13c18:	20000bec 	.word	0x20000bec

00013c1c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13c1c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13c1e:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   13c20:	781a      	ldrb	r2, [r3, #0]
   13c22:	b972      	cbnz	r2, 13c42 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13c24:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13c28:	4620      	mov	r0, r4
   13c2a:	f001 fcb7 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   13c2e:	4605      	mov	r5, r0
   13c30:	b940      	cbnz	r0, 13c44 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13c32:	4b08      	ldr	r3, [pc, #32]	; (13c54 <hci_disconn_complete_prio+0x38>)
   13c34:	881a      	ldrh	r2, [r3, #0]
   13c36:	b922      	cbnz	r2, 13c42 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13c38:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13c3c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13c40:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   13c42:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13c44:	2101      	movs	r1, #1
   13c46:	f001 fcb5 	bl	155b4 <bt_conn_set_state>
	bt_conn_unref(conn);
   13c4a:	4628      	mov	r0, r5
}
   13c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13c50:	f00d b93f 	b.w	20ed2 <bt_conn_unref>
   13c54:	2000346a 	.word	0x2000346a

00013c58 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   13c58:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13c5a:	2101      	movs	r1, #1
   13c5c:	4604      	mov	r4, r0
   13c5e:	3008      	adds	r0, #8
   13c60:	f00e fb8e 	bl	22380 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c64:	4621      	mov	r1, r4
   13c66:	4a03      	ldr	r2, [pc, #12]	; (13c74 <hci_le_meta_event+0x1c>)
   13c68:	7800      	ldrb	r0, [r0, #0]
}
   13c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c6e:	2307      	movs	r3, #7
   13c70:	f00c bca7 	b.w	205c2 <handle_event>
   13c74:	00024778 	.word	0x00024778

00013c78 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c78:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c7a:	4c0c      	ldr	r4, [pc, #48]	; (13cac <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c7c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c7e:	2205      	movs	r2, #5
   13c80:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13c84:	f001 fe22 	bl	158cc <bt_conn_lookup_state_le>
		if (!conn) {
   13c88:	b970      	cbnz	r0, 13ca8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13c8a:	4b09      	ldr	r3, [pc, #36]	; (13cb0 <find_pending_connect.part.0+0x38>)
   13c8c:	6818      	ldr	r0, [r3, #0]
   13c8e:	889a      	ldrh	r2, [r3, #4]
   13c90:	9000      	str	r0, [sp, #0]
   13c92:	799b      	ldrb	r3, [r3, #6]
   13c94:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13c98:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   13c9c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13ca0:	2204      	movs	r2, #4
   13ca2:	4669      	mov	r1, sp
   13ca4:	f001 fe12 	bl	158cc <bt_conn_lookup_state_le>
}
   13ca8:	b002      	add	sp, #8
   13caa:	bd10      	pop	{r4, pc}
   13cac:	200002b0 	.word	0x200002b0
   13cb0:	000244bc 	.word	0x000244bc

00013cb4 <hci_cmd_done>:
{
   13cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cb6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13cb8:	7990      	ldrb	r0, [r2, #6]
{
   13cba:	460e      	mov	r6, r1
   13cbc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13cbe:	f003 f9e7 	bl	17090 <net_buf_pool_get>
   13cc2:	4b30      	ldr	r3, [pc, #192]	; (13d84 <hci_cmd_done+0xd0>)
   13cc4:	4283      	cmp	r3, r0
   13cc6:	d15b      	bne.n	13d80 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   13cc8:	4620      	mov	r0, r4
   13cca:	f003 f9e9 	bl	170a0 <net_buf_id>
   13cce:	4d2e      	ldr	r5, [pc, #184]	; (13d88 <hci_cmd_done+0xd4>)
   13cd0:	230c      	movs	r3, #12
   13cd2:	fb03 5300 	mla	r3, r3, r0, r5
   13cd6:	885b      	ldrh	r3, [r3, #2]
   13cd8:	42bb      	cmp	r3, r7
   13cda:	d151      	bne.n	13d80 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   13cdc:	4f2b      	ldr	r7, [pc, #172]	; (13d8c <hci_cmd_done+0xd8>)
   13cde:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13ce2:	b120      	cbz	r0, 13cee <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   13ce4:	f003 fa94 	bl	17210 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13ce8:	2300      	movs	r3, #0
   13cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   13cee:	4620      	mov	r0, r4
   13cf0:	f003 f9d6 	bl	170a0 <net_buf_id>
   13cf4:	270c      	movs	r7, #12
   13cf6:	fb07 5000 	mla	r0, r7, r0, r5
   13cfa:	6843      	ldr	r3, [r0, #4]
   13cfc:	b1e3      	cbz	r3, 13d38 <hci_cmd_done+0x84>
   13cfe:	b9de      	cbnz	r6, 13d38 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13d00:	4620      	mov	r0, r4
   13d02:	f003 f9cd 	bl	170a0 <net_buf_id>
   13d06:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d0a:	2201      	movs	r2, #1
   13d0c:	6840      	ldr	r0, [r0, #4]
   13d0e:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   13d12:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d14:	f001 071f 	and.w	r7, r1, #31
   13d18:	40ba      	lsls	r2, r7
	if (val) {
   13d1a:	0949      	lsrs	r1, r1, #5
   13d1c:	b318      	cbz	r0, 13d66 <hci_cmd_done+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d1e:	f3bf 8f5b 	dmb	ish
   13d22:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13d26:	e853 1f00 	ldrex	r1, [r3]
   13d2a:	4311      	orrs	r1, r2
   13d2c:	e843 1000 	strex	r0, r1, [r3]
   13d30:	2800      	cmp	r0, #0
   13d32:	d1f8      	bne.n	13d26 <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d34:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   13d38:	4620      	mov	r0, r4
   13d3a:	f003 f9b1 	bl	170a0 <net_buf_id>
   13d3e:	270c      	movs	r7, #12
   13d40:	fb07 5000 	mla	r0, r7, r0, r5
   13d44:	6883      	ldr	r3, [r0, #8]
   13d46:	b1db      	cbz	r3, 13d80 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   13d48:	4620      	mov	r0, r4
   13d4a:	f003 f9a9 	bl	170a0 <net_buf_id>
   13d4e:	4378      	muls	r0, r7
   13d50:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13d52:	4620      	mov	r0, r4
   13d54:	f003 f9a4 	bl	170a0 <net_buf_id>
   13d58:	fb07 5500 	mla	r5, r7, r0, r5
   13d5c:	68a8      	ldr	r0, [r5, #8]
}
   13d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   13d62:	f007 be23 	b.w	1b9ac <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13d66:	43d2      	mvns	r2, r2
   13d68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13d6c:	f3bf 8f5b 	dmb	ish
   13d70:	e853 1f00 	ldrex	r1, [r3]
   13d74:	4011      	ands	r1, r2
   13d76:	e843 1000 	strex	r0, r1, [r3]
   13d7a:	2800      	cmp	r0, #0
   13d7c:	d0da      	beq.n	13d34 <hci_cmd_done+0x80>
   13d7e:	e7f7      	b.n	13d70 <hci_cmd_done+0xbc>
   13d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d82:	bf00      	nop
   13d84:	20000c44 	.word	0x20000c44
   13d88:	20002734 	.word	0x20002734
   13d8c:	200002b0 	.word	0x200002b0

00013d90 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   13d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13d94:	4f3b      	ldr	r7, [pc, #236]	; (13e84 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13d96:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13e98 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13d9a:	4e3b      	ldr	r6, [pc, #236]	; (13e88 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13d9c:	f04f 33ff 	mov.w	r3, #4294967295
   13da0:	f04f 32ff 	mov.w	r2, #4294967295
   13da4:	4638      	mov	r0, r7
   13da6:	f00e fa73 	bl	22290 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13daa:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   13dac:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   13dae:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   13db0:	d039      	beq.n	13e26 <hci_rx_thread+0x96>
   13db2:	2b03      	cmp	r3, #3
   13db4:	d120      	bne.n	13df8 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13db6:	8983      	ldrh	r3, [r0, #12]
   13db8:	2b03      	cmp	r3, #3
   13dba:	d80c      	bhi.n	13dd6 <hci_rx_thread+0x46>
   13dbc:	4933      	ldr	r1, [pc, #204]	; (13e8c <hci_rx_thread+0xfc>)
   13dbe:	4834      	ldr	r0, [pc, #208]	; (13e90 <hci_rx_thread+0x100>)
   13dc0:	f240 13b5 	movw	r3, #437	; 0x1b5
   13dc4:	4632      	mov	r2, r6
   13dc6:	f00b fb9a 	bl	1f4fe <printk>
   13dca:	4040      	eors	r0, r0
   13dcc:	f380 8811 	msr	BASEPRI, r0
   13dd0:	f04f 0003 	mov.w	r0, #3
   13dd4:	df02      	svc	2
   13dd6:	2104      	movs	r1, #4
   13dd8:	f104 0008 	add.w	r0, r4, #8
   13ddc:	f00e fad0 	bl	22380 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13de0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13de2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13de4:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13de8:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13dea:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13dec:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   13df0:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13df2:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13df4:	d003      	beq.n	13dfe <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   13df6:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   13df8:	f003 fa0a 	bl	17210 <net_buf_unref>
			break;
   13dfc:	e010      	b.n	13e20 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13dfe:	f001 fbcd 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   13e02:	4605      	mov	r5, r0
   13e04:	2800      	cmp	r0, #0
   13e06:	d0f6      	beq.n	13df6 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   13e08:	f001 fc7c 	bl	15704 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13e0c:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   13e10:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13e12:	4621      	mov	r1, r4
   13e14:	4628      	mov	r0, r5
   13e16:	f00c fff1 	bl	20dfc <bt_conn_recv>
	bt_conn_unref(conn);
   13e1a:	4628      	mov	r0, r5
   13e1c:	f00d f859 	bl	20ed2 <bt_conn_unref>
	z_impl_k_yield();
   13e20:	f008 fa5c 	bl	1c2dc <z_impl_k_yield>
	while (1) {
   13e24:	e7ba      	b.n	13d9c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13e26:	8983      	ldrh	r3, [r0, #12]
   13e28:	2b01      	cmp	r3, #1
   13e2a:	d80c      	bhi.n	13e46 <hci_rx_thread+0xb6>
   13e2c:	4917      	ldr	r1, [pc, #92]	; (13e8c <hci_rx_thread+0xfc>)
   13e2e:	4818      	ldr	r0, [pc, #96]	; (13e90 <hci_rx_thread+0x100>)
   13e30:	f640 1317 	movw	r3, #2327	; 0x917
   13e34:	4632      	mov	r2, r6
   13e36:	f00b fb62 	bl	1f4fe <printk>
   13e3a:	4040      	eors	r0, r0
   13e3c:	f380 8811 	msr	BASEPRI, r0
   13e40:	f04f 0003 	mov.w	r0, #3
   13e44:	df02      	svc	2
   13e46:	2102      	movs	r1, #2
   13e48:	f104 0008 	add.w	r0, r4, #8
   13e4c:	f00e fa98 	bl	22380 <net_buf_simple_pull_mem>
   13e50:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13e52:	7800      	ldrb	r0, [r0, #0]
   13e54:	f00c fba3 	bl	2059e <bt_hci_evt_get_flags>
   13e58:	0783      	lsls	r3, r0, #30
   13e5a:	d40c      	bmi.n	13e76 <hci_rx_thread+0xe6>
   13e5c:	490d      	ldr	r1, [pc, #52]	; (13e94 <hci_rx_thread+0x104>)
   13e5e:	480c      	ldr	r0, [pc, #48]	; (13e90 <hci_rx_thread+0x100>)
   13e60:	f640 131b 	movw	r3, #2331	; 0x91b
   13e64:	4632      	mov	r2, r6
   13e66:	f00b fb4a 	bl	1f4fe <printk>
   13e6a:	4040      	eors	r0, r0
   13e6c:	f380 8811 	msr	BASEPRI, r0
   13e70:	f04f 0003 	mov.w	r0, #3
   13e74:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13e76:	7828      	ldrb	r0, [r5, #0]
   13e78:	2304      	movs	r3, #4
   13e7a:	4642      	mov	r2, r8
   13e7c:	4621      	mov	r1, r4
   13e7e:	f00c fba0 	bl	205c2 <handle_event>
   13e82:	e7b8      	b.n	13df6 <hci_rx_thread+0x66>
   13e84:	200003e4 	.word	0x200003e4
   13e88:	00024f6b 	.word	0x00024f6b
   13e8c:	00024f9f 	.word	0x00024f9f
   13e90:	00024fb8 	.word	0x00024fb8
   13e94:	00024fd5 	.word	0x00024fd5
   13e98:	000247c0 	.word	0x000247c0

00013e9c <hci_cmd_status>:
{
   13e9c:	b538      	push	{r3, r4, r5, lr}
   13e9e:	2104      	movs	r1, #4
   13ea0:	4604      	mov	r4, r0
   13ea2:	3008      	adds	r0, #8
   13ea4:	f00e fa6c 	bl	22380 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13ea8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13eaa:	7801      	ldrb	r1, [r0, #0]
   13eac:	8840      	ldrh	r0, [r0, #2]
   13eae:	4622      	mov	r2, r4
   13eb0:	f7ff ff00 	bl	13cb4 <hci_cmd_done>
	if (ncmd) {
   13eb4:	b125      	cbz	r5, 13ec0 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   13eb6:	4803      	ldr	r0, [pc, #12]	; (13ec4 <hci_cmd_status+0x28>)
}
   13eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13ebc:	f007 bd76 	b.w	1b9ac <z_impl_k_sem_give>
   13ec0:	bd38      	pop	{r3, r4, r5, pc}
   13ec2:	bf00      	nop
   13ec4:	200003c8 	.word	0x200003c8

00013ec8 <hci_cmd_complete>:
{
   13ec8:	b538      	push	{r3, r4, r5, lr}
   13eca:	2103      	movs	r1, #3
   13ecc:	4604      	mov	r4, r0
   13ece:	3008      	adds	r0, #8
   13ed0:	f00e fa56 	bl	22380 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13ed4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13ed6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13ed8:	7819      	ldrb	r1, [r3, #0]
   13eda:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13ede:	4622      	mov	r2, r4
   13ee0:	f7ff fee8 	bl	13cb4 <hci_cmd_done>
	if (ncmd) {
   13ee4:	b125      	cbz	r5, 13ef0 <hci_cmd_complete+0x28>
   13ee6:	4803      	ldr	r0, [pc, #12]	; (13ef4 <hci_cmd_complete+0x2c>)
}
   13ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13eec:	f007 bd5e 	b.w	1b9ac <z_impl_k_sem_give>
   13ef0:	bd38      	pop	{r3, r4, r5, pc}
   13ef2:	bf00      	nop
   13ef4:	200003c8 	.word	0x200003c8

00013ef8 <bt_hci_cmd_state_set_init>:
{
   13ef8:	b510      	push	{r4, lr}
	state->bit = bit;
   13efa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13efe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13f02:	720b      	strb	r3, [r1, #8]
{
   13f04:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13f06:	f003 f8cb 	bl	170a0 <net_buf_id>
   13f0a:	4b03      	ldr	r3, [pc, #12]	; (13f18 <bt_hci_cmd_state_set_init+0x20>)
   13f0c:	220c      	movs	r2, #12
   13f0e:	fb02 3000 	mla	r0, r2, r0, r3
   13f12:	6044      	str	r4, [r0, #4]
}
   13f14:	bd10      	pop	{r4, pc}
   13f16:	bf00      	nop
   13f18:	20002734 	.word	0x20002734

00013f1c <bt_hci_cmd_create>:
{
   13f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13f20:	f04f 32ff 	mov.w	r2, #4294967295
   13f24:	f04f 33ff 	mov.w	r3, #4294967295
   13f28:	4605      	mov	r5, r0
   13f2a:	4816      	ldr	r0, [pc, #88]	; (13f84 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   13f2c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13f88 <bt_hci_cmd_create+0x6c>
{
   13f30:	460e      	mov	r6, r1
   13f32:	f00e f9a8 	bl	22286 <net_buf_alloc_fixed>
   13f36:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13f38:	f100 0b08 	add.w	fp, r0, #8
   13f3c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13f3e:	2700      	movs	r7, #0
   13f40:	4658      	mov	r0, fp
   13f42:	f00e f9bf 	bl	222c4 <net_buf_simple_reserve>
   13f46:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   13f48:	4620      	mov	r0, r4
   13f4a:	f003 f8a9 	bl	170a0 <net_buf_id>
   13f4e:	f04f 0a0c 	mov.w	sl, #12
   13f52:	fb0a 8000 	mla	r0, sl, r0, r8
   13f56:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   13f58:	4620      	mov	r0, r4
   13f5a:	f003 f8a1 	bl	170a0 <net_buf_id>
   13f5e:	fb0a 8000 	mla	r0, sl, r0, r8
   13f62:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   13f64:	4620      	mov	r0, r4
   13f66:	f003 f89b 	bl	170a0 <net_buf_id>
   13f6a:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   13f6e:	2103      	movs	r1, #3
   13f70:	6047      	str	r7, [r0, #4]
   13f72:	4658      	mov	r0, fp
   13f74:	f00e f9dd 	bl	22332 <net_buf_simple_add>
	hdr->param_len = param_len;
   13f78:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13f7a:	8005      	strh	r5, [r0, #0]
}
   13f7c:	4620      	mov	r0, r4
   13f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f82:	bf00      	nop
   13f84:	20000c44 	.word	0x20000c44
   13f88:	20002734 	.word	0x20002734

00013f8c <bt_hci_cmd_send_sync>:
{
   13f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f8e:	4615      	mov	r5, r2
   13f90:	b087      	sub	sp, #28
	if (!buf) {
   13f92:	460c      	mov	r4, r1
   13f94:	b921      	cbnz	r1, 13fa0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   13f96:	f7ff ffc1 	bl	13f1c <bt_hci_cmd_create>
		if (!buf) {
   13f9a:	4604      	mov	r4, r0
   13f9c:	2800      	cmp	r0, #0
   13f9e:	d048      	beq.n	14032 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13fa0:	2201      	movs	r2, #1
   13fa2:	2100      	movs	r1, #0
   13fa4:	4668      	mov	r0, sp
   13fa6:	f00f fc28 	bl	237fa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13faa:	4620      	mov	r0, r4
   13fac:	f003 f878 	bl	170a0 <net_buf_id>
   13fb0:	4e21      	ldr	r6, [pc, #132]	; (14038 <bt_hci_cmd_send_sync+0xac>)
   13fb2:	230c      	movs	r3, #12
   13fb4:	fb03 6000 	mla	r0, r3, r0, r6
   13fb8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13fbc:	4620      	mov	r0, r4
   13fbe:	f00e f992 	bl	222e6 <net_buf_ref>
   13fc2:	4601      	mov	r1, r0
   13fc4:	481d      	ldr	r0, [pc, #116]	; (1403c <bt_hci_cmd_send_sync+0xb0>)
   13fc6:	f00e f981 	bl	222cc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13fca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13fce:	2300      	movs	r3, #0
   13fd0:	4668      	mov	r0, sp
   13fd2:	f007 fd11 	bl	1b9f8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13fd6:	4607      	mov	r7, r0
   13fd8:	b180      	cbz	r0, 13ffc <bt_hci_cmd_send_sync+0x70>
   13fda:	4a19      	ldr	r2, [pc, #100]	; (14040 <bt_hci_cmd_send_sync+0xb4>)
   13fdc:	4919      	ldr	r1, [pc, #100]	; (14044 <bt_hci_cmd_send_sync+0xb8>)
   13fde:	481a      	ldr	r0, [pc, #104]	; (14048 <bt_hci_cmd_send_sync+0xbc>)
   13fe0:	f240 1331 	movw	r3, #305	; 0x131
   13fe4:	f00b fa8b 	bl	1f4fe <printk>
   13fe8:	4818      	ldr	r0, [pc, #96]	; (1404c <bt_hci_cmd_send_sync+0xc0>)
   13fea:	4639      	mov	r1, r7
   13fec:	f00b fa87 	bl	1f4fe <printk>
   13ff0:	4040      	eors	r0, r0
   13ff2:	f380 8811 	msr	BASEPRI, r0
   13ff6:	f04f 0003 	mov.w	r0, #3
   13ffa:	df02      	svc	2
	status = cmd(buf)->status;
   13ffc:	4620      	mov	r0, r4
   13ffe:	f003 f84f 	bl	170a0 <net_buf_id>
   14002:	230c      	movs	r3, #12
   14004:	4343      	muls	r3, r0
   14006:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   14008:	b156      	cbz	r6, 14020 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   1400a:	4620      	mov	r0, r4
   1400c:	f003 f900 	bl	17210 <net_buf_unref>
			return -EIO;
   14010:	2e09      	cmp	r6, #9
   14012:	bf0c      	ite	eq
   14014:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   14018:	f06f 0004 	mvnne.w	r0, #4
}
   1401c:	b007      	add	sp, #28
   1401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   14020:	b115      	cbz	r5, 14028 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   14022:	602c      	str	r4, [r5, #0]
	return 0;
   14024:	4630      	mov	r0, r6
   14026:	e7f9      	b.n	1401c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   14028:	4620      	mov	r0, r4
   1402a:	f003 f8f1 	bl	17210 <net_buf_unref>
	return 0;
   1402e:	4628      	mov	r0, r5
   14030:	e7f4      	b.n	1401c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   14032:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14036:	e7f1      	b.n	1401c <bt_hci_cmd_send_sync+0x90>
   14038:	20002734 	.word	0x20002734
   1403c:	200003fc 	.word	0x200003fc
   14040:	00024f6b 	.word	0x00024f6b
   14044:	00025003 	.word	0x00025003
   14048:	00024fb8 	.word	0x00024fb8
   1404c:	0002500c 	.word	0x0002500c

00014050 <hci_init>:
{
   14050:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14052:	4d3e      	ldr	r5, [pc, #248]	; (1414c <hci_init+0xfc>)
   14054:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   14058:	6899      	ldr	r1, [r3, #8]
   1405a:	f011 0101 	ands.w	r1, r1, #1
   1405e:	d121      	bne.n	140a4 <hci_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14060:	aa01      	add	r2, sp, #4
   14062:	f640 4003 	movw	r0, #3075	; 0xc03
   14066:	f7ff ff91 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   1406a:	4604      	mov	r4, r0
   1406c:	2800      	cmp	r0, #0
   1406e:	d169      	bne.n	14144 <hci_init+0xf4>
	uint8_t status = buf->data[0];
   14070:	9b01      	ldr	r3, [sp, #4]
   14072:	689b      	ldr	r3, [r3, #8]
	if (status) {
   14074:	781b      	ldrb	r3, [r3, #0]
   14076:	b993      	cbnz	r3, 1409e <hci_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14078:	f3bf 8f5b 	dmb	ish
   1407c:	462b      	mov	r3, r5
   1407e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   14082:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   14086:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1408a:	f3bf 8f5b 	dmb	ish
   1408e:	e853 1f00 	ldrex	r1, [r3]
   14092:	e843 2000 	strex	r0, r2, [r3]
   14096:	2800      	cmp	r0, #0
   14098:	d1f9      	bne.n	1408e <hci_init+0x3e>
   1409a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1409e:	9801      	ldr	r0, [sp, #4]
   140a0:	f003 f8b6 	bl	17210 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   140a4:	aa01      	add	r2, sp, #4
   140a6:	2100      	movs	r1, #0
   140a8:	f241 0003 	movw	r0, #4099	; 0x1003
   140ac:	f7ff ff6e 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   140b0:	4604      	mov	r4, r0
   140b2:	2800      	cmp	r0, #0
   140b4:	d146      	bne.n	14144 <hci_init+0xf4>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   140b6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   140b8:	4825      	ldr	r0, [pc, #148]	; (14150 <hci_init+0x100>)
   140ba:	6899      	ldr	r1, [r3, #8]
   140bc:	2208      	movs	r2, #8
   140be:	3101      	adds	r1, #1
   140c0:	f00c f9a1 	bl	20406 <memcpy>
	net_buf_unref(rsp);
   140c4:	9801      	ldr	r0, [sp, #4]
   140c6:	f003 f8a3 	bl	17210 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   140ca:	4621      	mov	r1, r4
   140cc:	aa01      	add	r2, sp, #4
   140ce:	f241 0001 	movw	r0, #4097	; 0x1001
   140d2:	f7ff ff5b 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   140d6:	4604      	mov	r4, r0
   140d8:	2800      	cmp	r0, #0
   140da:	d133      	bne.n	14144 <hci_init+0xf4>
	read_local_ver_complete(rsp);
   140dc:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   140de:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   140e0:	785a      	ldrb	r2, [r3, #1]
   140e2:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   140e6:	78d9      	ldrb	r1, [r3, #3]
   140e8:	789a      	ldrb	r2, [r3, #2]
   140ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   140ee:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   140f2:	791a      	ldrb	r2, [r3, #4]
   140f4:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   140f8:	7a19      	ldrb	r1, [r3, #8]
   140fa:	79da      	ldrb	r2, [r3, #7]
   140fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14100:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14104:	795a      	ldrb	r2, [r3, #5]
   14106:	799b      	ldrb	r3, [r3, #6]
   14108:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1410c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   14110:	f003 f87e 	bl	17210 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14114:	4621      	mov	r1, r4
   14116:	aa01      	add	r2, sp, #4
   14118:	f241 0002 	movw	r0, #4098	; 0x1002
   1411c:	f7ff ff36 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14120:	4604      	mov	r4, r0
   14122:	b978      	cbnz	r0, 14144 <hci_init+0xf4>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14124:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   14126:	480b      	ldr	r0, [pc, #44]	; (14154 <hci_init+0x104>)
   14128:	6899      	ldr	r1, [r3, #8]
   1412a:	2240      	movs	r2, #64	; 0x40
   1412c:	3101      	adds	r1, #1
   1412e:	f00c f96a 	bl	20406 <memcpy>
	net_buf_unref(rsp);
   14132:	9801      	ldr	r0, [sp, #4]
   14134:	f003 f86c 	bl	17210 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   14138:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1413c:	065e      	lsls	r6, r3, #25
   1413e:	d40b      	bmi.n	14158 <hci_init+0x108>
		return -ENODEV;
   14140:	f06f 0412 	mvn.w	r4, #18
}
   14144:	4620      	mov	r0, r4
   14146:	b002      	add	sp, #8
   14148:	bd70      	pop	{r4, r5, r6, pc}
   1414a:	bf00      	nop
   1414c:	200002b0 	.word	0x200002b0
   14150:	20000320 	.word	0x20000320
   14154:	20000328 	.word	0x20000328
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14158:	4621      	mov	r1, r4
   1415a:	aa01      	add	r2, sp, #4
   1415c:	f242 0003 	movw	r0, #8195	; 0x2003
   14160:	f7ff ff14 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14164:	4604      	mov	r4, r0
   14166:	2800      	cmp	r0, #0
   14168:	d1ec      	bne.n	14144 <hci_init+0xf4>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1416a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1416c:	489a      	ldr	r0, [pc, #616]	; (143d8 <hci_init+0x388>)
   1416e:	6899      	ldr	r1, [r3, #8]
   14170:	2208      	movs	r2, #8
   14172:	3101      	adds	r1, #1
   14174:	f00c f947 	bl	20406 <memcpy>
	net_buf_unref(rsp);
   14178:	9801      	ldr	r0, [sp, #4]
   1417a:	f003 f849 	bl	17210 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1417e:	4621      	mov	r1, r4
   14180:	aa01      	add	r2, sp, #4
   14182:	f242 0002 	movw	r0, #8194	; 0x2002
   14186:	f7ff ff01 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   1418a:	4604      	mov	r4, r0
   1418c:	2800      	cmp	r0, #0
   1418e:	d1d9      	bne.n	14144 <hci_init+0xf4>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   14190:	9b01      	ldr	r3, [sp, #4]
   14192:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14194:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14198:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1419c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1419e:	b121      	cbz	r1, 141aa <hci_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   141a0:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   141a2:	488e      	ldr	r0, [pc, #568]	; (143dc <hci_init+0x38c>)
   141a4:	4611      	mov	r1, r2
   141a6:	f00f fb28 	bl	237fa <z_impl_k_sem_init>
		net_buf_unref(rsp);
   141aa:	9801      	ldr	r0, [sp, #4]
   141ac:	f003 f830 	bl	17210 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   141b0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   141b4:	f016 0620 	ands.w	r6, r6, #32
   141b8:	f000 80ed 	beq.w	14396 <hci_init+0x346>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   141bc:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   141c0:	071c      	lsls	r4, r3, #28
   141c2:	d511      	bpl.n	141e8 <hci_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   141c4:	aa01      	add	r2, sp, #4
   141c6:	2100      	movs	r1, #0
   141c8:	f242 001c 	movw	r0, #8220	; 0x201c
   141cc:	f7ff fede 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   141d0:	4604      	mov	r4, r0
   141d2:	2800      	cmp	r0, #0
   141d4:	d1b6      	bne.n	14144 <hci_init+0xf4>
		le_read_supp_states_complete(rsp);
   141d6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   141d8:	6883      	ldr	r3, [r0, #8]
   141da:	f853 2f01 	ldr.w	r2, [r3, #1]!
   141de:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   141e0:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   141e4:	f003 f814 	bl	17210 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   141e8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   141ec:	0698      	lsls	r0, r3, #26
   141ee:	d523      	bpl.n	14238 <hci_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   141f0:	f10d 0102 	add.w	r1, sp, #2
   141f4:	4668      	mov	r0, sp
   141f6:	f00c fabd 	bl	20774 <hci_le_read_max_data_len>
		if (err) {
   141fa:	4604      	mov	r4, r0
   141fc:	2800      	cmp	r0, #0
   141fe:	d1a1      	bne.n	14144 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14200:	2104      	movs	r1, #4
   14202:	f242 0024 	movw	r0, #8228	; 0x2024
   14206:	f7ff fe89 	bl	13f1c <bt_hci_cmd_create>
		if (!buf) {
   1420a:	4606      	mov	r6, r0
   1420c:	2800      	cmp	r0, #0
   1420e:	f000 80c9 	beq.w	143a4 <hci_init+0x354>
   14212:	2104      	movs	r1, #4
   14214:	3008      	adds	r0, #8
   14216:	f00e f88c 	bl	22332 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1421a:	f8bd 3000 	ldrh.w	r3, [sp]
   1421e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   14220:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14224:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14226:	4622      	mov	r2, r4
   14228:	4631      	mov	r1, r6
   1422a:	f242 0024 	movw	r0, #8228	; 0x2024
   1422e:	f7ff fead 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   14232:	4604      	mov	r4, r0
   14234:	2800      	cmp	r0, #0
   14236:	d185      	bne.n	14144 <hci_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14238:	2108      	movs	r1, #8
   1423a:	f242 0001 	movw	r0, #8193	; 0x2001
   1423e:	f7ff fe6d 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   14242:	4604      	mov	r4, r0
   14244:	2800      	cmp	r0, #0
   14246:	f000 80ad 	beq.w	143a4 <hci_init+0x354>
   1424a:	2108      	movs	r1, #8
   1424c:	4408      	add	r0, r1
   1424e:	f00e f870 	bl	22332 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14252:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14256:	f012 0f02 	tst.w	r2, #2
   1425a:	bf14      	ite	ne
   1425c:	232f      	movne	r3, #47	; 0x2f
   1425e:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   14260:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14262:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14266:	bf48      	it	mi
   14268:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1426c:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14270:	bf18      	it	ne
   14272:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   14276:	2200      	movs	r2, #0
   14278:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1427a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1427e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14280:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14282:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   14284:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14286:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14288:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1428a:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1428c:	4621      	mov	r1, r4
   1428e:	f242 0001 	movw	r0, #8193	; 0x2001
   14292:	f7ff fe7b 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14296:	4604      	mov	r4, r0
   14298:	2800      	cmp	r0, #0
   1429a:	f47f af53 	bne.w	14144 <hci_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1429e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   142a2:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   142a6:	069a      	lsls	r2, r3, #26
   142a8:	f100 8091 	bmi.w	143ce <hci_init+0x37e>
	if (bt_dev.le.acl_mtu) {
   142ac:	b9d9      	cbnz	r1, 142e6 <hci_init+0x296>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   142ae:	aa01      	add	r2, sp, #4
   142b0:	f241 0005 	movw	r0, #4101	; 0x1005
   142b4:	f7ff fe6a 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   142b8:	4604      	mov	r4, r0
   142ba:	2800      	cmp	r0, #0
   142bc:	f47f af42 	bne.w	14144 <hci_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   142c0:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   142c4:	b963      	cbnz	r3, 142e0 <hci_init+0x290>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   142c6:	9b01      	ldr	r3, [sp, #4]
   142c8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   142ca:	785a      	ldrb	r2, [r3, #1]
   142cc:	7899      	ldrb	r1, [r3, #2]
   142ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   142d2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   142d6:	889a      	ldrh	r2, [r3, #4]
   142d8:	4840      	ldr	r0, [pc, #256]	; (143dc <hci_init+0x38c>)
   142da:	4611      	mov	r1, r2
   142dc:	f00f fa8d 	bl	237fa <z_impl_k_sem_init>
	net_buf_unref(rsp);
   142e0:	9801      	ldr	r0, [sp, #4]
   142e2:	f002 ff95 	bl	17210 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   142e6:	2108      	movs	r1, #8
   142e8:	f640 4001 	movw	r0, #3073	; 0xc01
   142ec:	f7ff fe16 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   142f0:	4604      	mov	r4, r0
   142f2:	2800      	cmp	r0, #0
   142f4:	d056      	beq.n	143a4 <hci_init+0x354>
   142f6:	2108      	movs	r1, #8
   142f8:	4408      	add	r0, r1
   142fa:	f00e f81a 	bl	22332 <net_buf_simple_add>
	dst[0] = val;
   142fe:	2310      	movs	r3, #16
   14300:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14302:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   14304:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14306:	7043      	strb	r3, [r0, #1]
   14308:	2602      	movs	r6, #2
   1430a:	2320      	movs	r3, #32
	dst[0] = val;
   1430c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1430e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   14310:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14312:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14314:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14316:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14318:	4621      	mov	r1, r4
   1431a:	f640 4001 	movw	r0, #3073	; 0xc01
   1431e:	f7ff fe35 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14322:	4604      	mov	r4, r0
   14324:	2800      	cmp	r0, #0
   14326:	f47f af0d 	bne.w	14144 <hci_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1432a:	4601      	mov	r1, r0
   1432c:	aa01      	add	r2, sp, #4
   1432e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14332:	f7ff fe2b 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14336:	4604      	mov	r4, r0
   14338:	bb48      	cbnz	r0, 1438e <hci_init+0x33e>
	net_buf_unref(rsp);
   1433a:	9801      	ldr	r0, [sp, #4]
   1433c:	f002 ff68 	bl	17210 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14340:	4621      	mov	r1, r4
   14342:	aa01      	add	r2, sp, #4
   14344:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14348:	f7ff fe20 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   1434c:	4604      	mov	r4, r0
   1434e:	b9f0      	cbnz	r0, 1438e <hci_init+0x33e>
	rp.cmds = (void *)rsp->data;
   14350:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14352:	4823      	ldr	r0, [pc, #140]	; (143e0 <hci_init+0x390>)
   14354:	6899      	ldr	r1, [r3, #8]
   14356:	4632      	mov	r2, r6
   14358:	3101      	adds	r1, #1
   1435a:	f00c f854 	bl	20406 <memcpy>
	net_buf_unref(rsp);
   1435e:	9801      	ldr	r0, [sp, #4]
   14360:	f002 ff56 	bl	17210 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14364:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14368:	075b      	lsls	r3, r3, #29
   1436a:	d510      	bpl.n	1438e <hci_init+0x33e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1436c:	aa01      	add	r2, sp, #4
   1436e:	4621      	mov	r1, r4
   14370:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14374:	f7ff fe0a 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   14378:	b948      	cbnz	r0, 1438e <hci_init+0x33e>
		rp.feat = (void *)rsp->data;
   1437a:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1437c:	4819      	ldr	r0, [pc, #100]	; (143e4 <hci_init+0x394>)
   1437e:	6899      	ldr	r1, [r3, #8]
   14380:	2201      	movs	r2, #1
   14382:	4411      	add	r1, r2
   14384:	f00c f83f 	bl	20406 <memcpy>
		net_buf_unref(rsp);
   14388:	9801      	ldr	r0, [sp, #4]
   1438a:	f002 ff41 	bl	17210 <net_buf_unref>
	err = bt_id_init();
   1438e:	f000 fd17 	bl	14dc0 <bt_id_init>
   14392:	4604      	mov	r4, r0
	if (err) {
   14394:	e6d6      	b.n	14144 <hci_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14396:	2102      	movs	r1, #2
   14398:	f640 406d 	movw	r0, #3181	; 0xc6d
   1439c:	f7ff fdbe 	bl	13f1c <bt_hci_cmd_create>
		if (!buf) {
   143a0:	4604      	mov	r4, r0
   143a2:	b910      	cbnz	r0, 143aa <hci_init+0x35a>
		return -ENOBUFS;
   143a4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   143a8:	e6cc      	b.n	14144 <hci_init+0xf4>
   143aa:	2102      	movs	r1, #2
   143ac:	3008      	adds	r0, #8
   143ae:	f00d ffc0 	bl	22332 <net_buf_simple_add>
		cp_le->le = 0x01;
   143b2:	2301      	movs	r3, #1
   143b4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   143b6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   143b8:	4621      	mov	r1, r4
   143ba:	4632      	mov	r2, r6
   143bc:	f640 406d 	movw	r0, #3181	; 0xc6d
   143c0:	f7ff fde4 	bl	13f8c <bt_hci_cmd_send_sync>
		if (err) {
   143c4:	4604      	mov	r4, r0
   143c6:	2800      	cmp	r0, #0
   143c8:	f43f aef8 	beq.w	141bc <hci_init+0x16c>
   143cc:	e6ba      	b.n	14144 <hci_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
   143ce:	2900      	cmp	r1, #0
   143d0:	d189      	bne.n	142e6 <hci_init+0x296>
		return -EIO;
   143d2:	f06f 0404 	mvn.w	r4, #4
   143d6:	e6b5      	b.n	14144 <hci_init+0xf4>
   143d8:	20000380 	.word	0x20000380
   143dc:	200003b0 	.word	0x200003b0
   143e0:	20000369 	.word	0x20000369
   143e4:	20000368 	.word	0x20000368

000143e8 <bt_send>:
	return bt_dev.drv->send(buf);
   143e8:	4b02      	ldr	r3, [pc, #8]	; (143f4 <bt_send+0xc>)
   143ea:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   143ee:	691b      	ldr	r3, [r3, #16]
   143f0:	4718      	bx	r3
   143f2:	bf00      	nop
   143f4:	200002b0 	.word	0x200002b0

000143f8 <bt_hci_cmd_send>:
{
   143f8:	b538      	push	{r3, r4, r5, lr}
   143fa:	4605      	mov	r5, r0
	if (!buf) {
   143fc:	460c      	mov	r4, r1
   143fe:	b919      	cbnz	r1, 14408 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14400:	f7ff fd8c 	bl	13f1c <bt_hci_cmd_create>
		if (!buf) {
   14404:	4604      	mov	r4, r0
   14406:	b198      	cbz	r0, 14430 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14408:	f640 4335 	movw	r3, #3125	; 0xc35
   1440c:	429d      	cmp	r5, r3
   1440e:	d109      	bne.n	14424 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   14410:	4620      	mov	r0, r4
   14412:	f7ff ffe9 	bl	143e8 <bt_send>
		if (err) {
   14416:	4605      	mov	r5, r0
   14418:	b110      	cbz	r0, 14420 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1441a:	4620      	mov	r0, r4
   1441c:	f002 fef8 	bl	17210 <net_buf_unref>
}
   14420:	4628      	mov	r0, r5
   14422:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14424:	4804      	ldr	r0, [pc, #16]	; (14438 <bt_hci_cmd_send+0x40>)
   14426:	4621      	mov	r1, r4
   14428:	f00d ff50 	bl	222cc <net_buf_put>
	return 0;
   1442c:	2500      	movs	r5, #0
   1442e:	e7f7      	b.n	14420 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   14430:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14434:	e7f4      	b.n	14420 <bt_hci_cmd_send+0x28>
   14436:	bf00      	nop
   14438:	200003fc 	.word	0x200003fc

0001443c <conn_auto_initiate>:
{
   1443c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1443e:	7a83      	ldrb	r3, [r0, #10]
   14440:	2b07      	cmp	r3, #7
{
   14442:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14444:	d121      	bne.n	1448a <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14446:	f3bf 8f5b 	dmb	ish
   1444a:	6843      	ldr	r3, [r0, #4]
   1444c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14450:	049b      	lsls	r3, r3, #18
   14452:	f100 0604 	add.w	r6, r0, #4
   14456:	d41a      	bmi.n	1448e <conn_auto_initiate+0x52>
   14458:	78c3      	ldrb	r3, [r0, #3]
   1445a:	b123      	cbz	r3, 14466 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1445c:	4b29      	ldr	r3, [pc, #164]	; (14504 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1445e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14462:	071d      	lsls	r5, r3, #28
   14464:	d513      	bpl.n	1448e <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14466:	2102      	movs	r1, #2
   14468:	f242 0016 	movw	r0, #8214	; 0x2016
   1446c:	f7ff fd56 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   14470:	4605      	mov	r5, r0
   14472:	b160      	cbz	r0, 1448e <conn_auto_initiate+0x52>
   14474:	2102      	movs	r1, #2
   14476:	3008      	adds	r0, #8
   14478:	f00d ff5b 	bl	22332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1447c:	8823      	ldrh	r3, [r4, #0]
   1447e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   14480:	4629      	mov	r1, r5
   14482:	f242 0016 	movw	r0, #8214	; 0x2016
   14486:	f7ff ffb7 	bl	143f8 <bt_hci_cmd_send>
}
   1448a:	b004      	add	sp, #16
   1448c:	bd70      	pop	{r4, r5, r6, pc}
   1448e:	f3bf 8f5b 	dmb	ish
   14492:	6863      	ldr	r3, [r4, #4]
   14494:	4d1b      	ldr	r5, [pc, #108]	; (14504 <conn_auto_initiate+0xc8>)
   14496:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1449a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1449e:	f3c3 3100 	ubfx	r1, r3, #12, #1
   144a2:	d117      	bne.n	144d4 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   144a4:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   144a8:	07d8      	lsls	r0, r3, #31
   144aa:	d513      	bpl.n	144d4 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   144ac:	2302      	movs	r3, #2
   144ae:	9100      	str	r1, [sp, #0]
   144b0:	461a      	mov	r2, r3
   144b2:	4620      	mov	r0, r4
   144b4:	f00c f9ce 	bl	20854 <bt_le_set_phy>
		if (!err) {
   144b8:	b960      	cbnz	r0, 144d4 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144ba:	f3bf 8f5b 	dmb	ish
   144be:	e856 3f00 	ldrex	r3, [r6]
   144c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   144c6:	e846 3200 	strex	r2, r3, [r6]
   144ca:	2a00      	cmp	r2, #0
   144cc:	d1f7      	bne.n	144be <conn_auto_initiate+0x82>
   144ce:	f3bf 8f5b 	dmb	ish
			return;
   144d2:	e7da      	b.n	1448a <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   144d4:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   144d8:	069a      	lsls	r2, r3, #26
   144da:	d5d6      	bpl.n	1448a <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   144dc:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   144e0:	689b      	ldr	r3, [r3, #8]
   144e2:	079b      	lsls	r3, r3, #30
   144e4:	d5d1      	bpl.n	1448a <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   144e6:	f10d 010e 	add.w	r1, sp, #14
   144ea:	a803      	add	r0, sp, #12
   144ec:	f00c f942 	bl	20774 <hci_le_read_max_data_len>
			if (!err) {
   144f0:	2800      	cmp	r0, #0
   144f2:	d1ca      	bne.n	1448a <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   144f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   144f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   144fc:	4620      	mov	r0, r4
   144fe:	f00c f98c 	bl	2081a <bt_le_set_data_len>
		}
   14502:	e7c2      	b.n	1448a <conn_auto_initiate+0x4e>
   14504:	200002b0 	.word	0x200002b0

00014508 <bt_hci_le_enh_conn_complete>:
{
   14508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1450c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14510:	4a68      	ldr	r2, [pc, #416]	; (146b4 <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
   14512:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   14514:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14516:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   1451a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1451e:	b29b      	uxth	r3, r3
   14520:	4299      	cmp	r1, r3
   14522:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   14526:	bf08      	it	eq
   14528:	8016      	strheq	r6, [r2, #0]
{
   1452a:	b085      	sub	sp, #20
   1452c:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1452e:	fa1f f887 	uxth.w	r8, r7
			return true;
   14532:	bf08      	it	eq
   14534:	2601      	moveq	r6, #1
	if (evt->status) {
   14536:	b1f4      	cbz	r4, 14576 <bt_hci_le_enh_conn_complete+0x6e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14538:	2c3c      	cmp	r4, #60	; 0x3c
   1453a:	d157      	bne.n	145ec <bt_hci_le_enh_conn_complete+0xe4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1453c:	f000 fce0 	bl	14f00 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14540:	f3bf 8f5b 	dmb	ish
   14544:	3010      	adds	r0, #16
   14546:	e850 3f00 	ldrex	r3, [r0]
   1454a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1454e:	e840 3200 	strex	r2, r3, [r0]
   14552:	2a00      	cmp	r2, #0
   14554:	d1f7      	bne.n	14546 <bt_hci_le_enh_conn_complete+0x3e>
   14556:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1455a:	2000      	movs	r0, #0
   1455c:	f7ff fb8c 	bl	13c78 <find_pending_connect.part.0>
		if (!conn) {
   14560:	4605      	mov	r5, r0
   14562:	2800      	cmp	r0, #0
   14564:	d042      	beq.n	145ec <bt_hci_le_enh_conn_complete+0xe4>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14566:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14568:	2100      	movs	r1, #0
   1456a:	f001 f823 	bl	155b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1456e:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   14570:	f00c fcaf 	bl	20ed2 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14574:	e03a      	b.n	145ec <bt_hci_le_enh_conn_complete+0xe4>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14576:	7903      	ldrb	r3, [r0, #4]
   14578:	3b02      	subs	r3, #2
   1457a:	2b01      	cmp	r3, #1
   1457c:	f100 0904 	add.w	r9, r0, #4
   14580:	d837      	bhi.n	145f2 <bt_hci_le_enh_conn_complete+0xea>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   14582:	2207      	movs	r2, #7
   14584:	4649      	mov	r1, r9
   14586:	a802      	add	r0, sp, #8
   14588:	f00b ff3d 	bl	20406 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1458c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   14590:	2206      	movs	r2, #6
   14592:	3b02      	subs	r3, #2
   14594:	f105 0111 	add.w	r1, r5, #17
   14598:	f10d 0001 	add.w	r0, sp, #1
   1459c:	f88d 3008 	strb.w	r3, [sp, #8]
   145a0:	f00b ff31 	bl	20406 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   145a4:	2301      	movs	r3, #1
   145a6:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   145aa:	78eb      	ldrb	r3, [r5, #3]
   145ac:	2b01      	cmp	r3, #1
   145ae:	d119      	bne.n	145e4 <bt_hci_le_enh_conn_complete+0xdc>
   145b0:	a802      	add	r0, sp, #8
   145b2:	f7ff fb61 	bl	13c78 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   145b6:	78eb      	ldrb	r3, [r5, #3]
   145b8:	2b01      	cmp	r3, #1
   145ba:	4604      	mov	r4, r0
   145bc:	d111      	bne.n	145e2 <bt_hci_le_enh_conn_complete+0xda>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   145be:	f000 fc9f 	bl	14f00 <bt_le_adv_lookup_legacy>
   145c2:	f3bf 8f5b 	dmb	ish
   145c6:	f100 0310 	add.w	r3, r0, #16
   145ca:	e853 2f00 	ldrex	r2, [r3]
   145ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   145d2:	e843 2100 	strex	r1, r2, [r3]
   145d6:	2900      	cmp	r1, #0
   145d8:	d1f7      	bne.n	145ca <bt_hci_le_enh_conn_complete+0xc2>
   145da:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   145de:	f00c fbbb 	bl	20d58 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   145e2:	b9dc      	cbnz	r4, 1461c <bt_hci_le_enh_conn_complete+0x114>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   145e4:	211f      	movs	r1, #31
   145e6:	4640      	mov	r0, r8
   145e8:	f00c f8dc 	bl	207a4 <bt_hci_disconnect>
}
   145ec:	b005      	add	sp, #20
   145ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   145f2:	78c3      	ldrb	r3, [r0, #3]
   145f4:	2b01      	cmp	r3, #1
   145f6:	bf04      	itt	eq
   145f8:	4b2f      	ldreq	r3, [pc, #188]	; (146b8 <bt_hci_le_enh_conn_complete+0x1b0>)
   145fa:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   145fe:	4649      	mov	r1, r9
   14600:	4620      	mov	r0, r4
   14602:	f00c fa4b 	bl	20a9c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   14606:	2207      	movs	r2, #7
   14608:	4601      	mov	r1, r0
   1460a:	a802      	add	r0, sp, #8
   1460c:	f00b fefb 	bl	20406 <memcpy>
   14610:	2207      	movs	r2, #7
   14612:	4649      	mov	r1, r9
   14614:	4668      	mov	r0, sp
   14616:	f00b fef6 	bl	20406 <memcpy>
}
   1461a:	e7c6      	b.n	145aa <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   1461c:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1461e:	2207      	movs	r2, #7
   14620:	f820 7b88 	strh.w	r7, [r0], #136
   14624:	a902      	add	r1, sp, #8
   14626:	f00b feee 	bl	20406 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1462a:	7e2a      	ldrb	r2, [r5, #24]
   1462c:	7deb      	ldrb	r3, [r5, #23]
   1462e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14632:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14636:	7eaa      	ldrb	r2, [r5, #26]
   14638:	7e6b      	ldrb	r3, [r5, #25]
   1463a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1463e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14642:	7eeb      	ldrb	r3, [r5, #27]
   14644:	7f2a      	ldrb	r2, [r5, #28]
   14646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1464a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1464e:	78eb      	ldrb	r3, [r5, #3]
   14650:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   14652:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14654:	2b01      	cmp	r3, #1
	conn->err = 0U;
   14656:	7265      	strb	r5, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14658:	d11a      	bne.n	14690 <bt_hci_le_enh_conn_complete+0x188>
   1465a:	2207      	movs	r2, #7
   1465c:	4669      	mov	r1, sp
   1465e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   14662:	f00b fed0 	bl	20406 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14666:	f000 fc4b 	bl	14f00 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1466a:	7a21      	ldrb	r1, [r4, #8]
   1466c:	4f12      	ldr	r7, [pc, #72]	; (146b8 <bt_hci_le_enh_conn_complete+0x1b0>)
   1466e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   14672:	2207      	movs	r2, #7
   14674:	4439      	add	r1, r7
   14676:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1467a:	f00b fec4 	bl	20406 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1467e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
   14682:	462a      	mov	r2, r5
   14684:	f001 0340 	and.w	r3, r1, #64	; 0x40
   14688:	4313      	orrs	r3, r2
   1468a:	d001      	beq.n	14690 <bt_hci_le_enh_conn_complete+0x188>
			bt_le_adv_resume();
   1468c:	f000 fde2 	bl	15254 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14690:	2107      	movs	r1, #7
   14692:	4620      	mov	r0, r4
   14694:	f000 ff8e 	bl	155b4 <bt_conn_set_state>
	if (is_disconnected) {
   14698:	b11e      	cbz	r6, 146a2 <bt_hci_le_enh_conn_complete+0x19a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1469a:	2101      	movs	r1, #1
   1469c:	4620      	mov	r0, r4
   1469e:	f000 ff89 	bl	155b4 <bt_conn_set_state>
	bt_conn_connected(conn);
   146a2:	4620      	mov	r0, r4
   146a4:	f00c fc51 	bl	20f4a <bt_conn_connected>
	conn_auto_initiate(conn);
   146a8:	4620      	mov	r0, r4
   146aa:	f7ff fec7 	bl	1443c <conn_auto_initiate>
	bt_conn_unref(conn);
   146ae:	4620      	mov	r0, r4
   146b0:	e75e      	b.n	14570 <bt_hci_le_enh_conn_complete+0x68>
   146b2:	bf00      	nop
   146b4:	2000346a 	.word	0x2000346a
   146b8:	200002b0 	.word	0x200002b0

000146bc <hci_tx_thread>:
{
   146bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   146c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 147d0 <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   146c4:	f8df a120 	ldr.w	sl, [pc, #288]	; 147e8 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   146c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   146cc:	483f      	ldr	r0, [pc, #252]	; (147cc <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   146ce:	f36f 3352 	bfc	r3, #13, #6
   146d2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   146d6:	f000 ff23 	bl	15520 <bt_conn_prepare_events>
   146da:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   146dc:	483c      	ldr	r0, [pc, #240]	; (147d0 <hci_tx_thread+0x114>)
   146de:	f04f 32ff 	mov.w	r2, #4294967295
   146e2:	f04f 33ff 	mov.w	r3, #4294967295
   146e6:	4629      	mov	r1, r5
   146e8:	f008 f936 	bl	1c958 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   146ec:	b160      	cbz	r0, 14708 <hci_tx_thread+0x4c>
   146ee:	4939      	ldr	r1, [pc, #228]	; (147d4 <hci_tx_thread+0x118>)
   146f0:	4839      	ldr	r0, [pc, #228]	; (147d8 <hci_tx_thread+0x11c>)
   146f2:	f640 1393 	movw	r3, #2451	; 0x993
   146f6:	4652      	mov	r2, sl
   146f8:	f00a ff01 	bl	1f4fe <printk>
   146fc:	4040      	eors	r0, r0
   146fe:	f380 8811 	msr	BASEPRI, r0
   14702:	f04f 0003 	mov.w	r0, #3
   14706:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14708:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 147ec <hci_tx_thread+0x130>
{
   1470c:	4e30      	ldr	r6, [pc, #192]	; (147d0 <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   1470e:	f5a9 77a6 	sub.w	r7, r9, #332	; 0x14c
   14712:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   14716:	b915      	cbnz	r5, 1471e <hci_tx_thread+0x62>
	z_impl_k_yield();
   14718:	f007 fde0 	bl	1c2dc <z_impl_k_yield>
	while (1) {
   1471c:	e7d4      	b.n	146c8 <hci_tx_thread+0xc>
		switch (ev->state) {
   1471e:	68f3      	ldr	r3, [r6, #12]
   14720:	f3c3 3345 	ubfx	r3, r3, #13, #6
   14724:	2b04      	cmp	r3, #4
   14726:	d147      	bne.n	147b8 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14728:	7b33      	ldrb	r3, [r6, #12]
   1472a:	2b00      	cmp	r3, #0
   1472c:	d147      	bne.n	147be <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1472e:	2200      	movs	r2, #0
   14730:	2300      	movs	r3, #0
   14732:	4648      	mov	r0, r9
   14734:	f00d fdac 	bl	22290 <net_buf_get>
	BT_ASSERT(buf);
   14738:	4604      	mov	r4, r0
   1473a:	b960      	cbnz	r0, 14756 <hci_tx_thread+0x9a>
   1473c:	4927      	ldr	r1, [pc, #156]	; (147dc <hci_tx_thread+0x120>)
   1473e:	4826      	ldr	r0, [pc, #152]	; (147d8 <hci_tx_thread+0x11c>)
   14740:	f640 132a 	movw	r3, #2346	; 0x92a
   14744:	4652      	mov	r2, sl
   14746:	f00a feda 	bl	1f4fe <printk>
   1474a:	4040      	eors	r0, r0
   1474c:	f380 8811 	msr	BASEPRI, r0
   14750:	f04f 0003 	mov.w	r0, #3
   14754:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   14756:	f04f 32ff 	mov.w	r2, #4294967295
   1475a:	f04f 33ff 	mov.w	r3, #4294967295
   1475e:	4658      	mov	r0, fp
   14760:	f007 f94a 	bl	1b9f8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14764:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14768:	b120      	cbz	r0, 14774 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1476a:	f002 fd51 	bl	17210 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1476e:	2300      	movs	r3, #0
   14770:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14774:	4620      	mov	r0, r4
   14776:	f00d fdb6 	bl	222e6 <net_buf_ref>
   1477a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1477e:	4620      	mov	r0, r4
   14780:	f7ff fe32 	bl	143e8 <bt_send>
	if (err) {
   14784:	b1c0      	cbz	r0, 147b8 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   14786:	4816      	ldr	r0, [pc, #88]	; (147e0 <hci_tx_thread+0x124>)
   14788:	f007 f910 	bl	1b9ac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1478c:	4620      	mov	r0, r4
   1478e:	f002 fc87 	bl	170a0 <net_buf_id>
   14792:	4b14      	ldr	r3, [pc, #80]	; (147e4 <hci_tx_thread+0x128>)
   14794:	220c      	movs	r2, #12
   14796:	fb02 3000 	mla	r0, r2, r0, r3
   1479a:	211f      	movs	r1, #31
   1479c:	8840      	ldrh	r0, [r0, #2]
   1479e:	4622      	mov	r2, r4
   147a0:	f7ff fa88 	bl	13cb4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   147a4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   147a8:	f002 fd32 	bl	17210 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   147ac:	2300      	movs	r3, #0
		net_buf_unref(buf);
   147ae:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   147b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   147b4:	f002 fd2c 	bl	17210 <net_buf_unref>
	for (; count; ev++, count--) {
   147b8:	3614      	adds	r6, #20
   147ba:	3d01      	subs	r5, #1
   147bc:	e7ab      	b.n	14716 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   147be:	2b01      	cmp	r3, #1
   147c0:	d1fa      	bne.n	147b8 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   147c2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   147c4:	3838      	subs	r0, #56	; 0x38
   147c6:	f001 f997 	bl	15af8 <bt_conn_process_tx>
   147ca:	e7f5      	b.n	147b8 <hci_tx_thread+0xfc>
   147cc:	200005a8 	.word	0x200005a8
   147d0:	20000594 	.word	0x20000594
   147d4:	00025003 	.word	0x00025003
   147d8:	00024fb8 	.word	0x00024fb8
   147dc:	0002502c 	.word	0x0002502c
   147e0:	200003c8 	.word	0x200003c8
   147e4:	20002734 	.word	0x20002734
   147e8:	00024f6b 	.word	0x00024f6b
   147ec:	200003fc 	.word	0x200003fc

000147f0 <hci_event_prio>:
{
   147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147f4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   147f6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   147fa:	4630      	mov	r0, r6
   147fc:	f00d fdd0 	bl	223a0 <net_buf_simple_headroom>
	state->len = buf->len;
   14800:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14804:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14808:	4605      	mov	r5, r0
   1480a:	d80c      	bhi.n	14826 <hci_event_prio+0x36>
   1480c:	4a1c      	ldr	r2, [pc, #112]	; (14880 <hci_event_prio+0x90>)
   1480e:	491d      	ldr	r1, [pc, #116]	; (14884 <hci_event_prio+0x94>)
   14810:	481d      	ldr	r0, [pc, #116]	; (14888 <hci_event_prio+0x98>)
   14812:	f640 5327 	movw	r3, #3367	; 0xd27
   14816:	f00a fe72 	bl	1f4fe <printk>
   1481a:	4040      	eors	r0, r0
   1481c:	f380 8811 	msr	BASEPRI, r0
   14820:	f04f 0003 	mov.w	r0, #3
   14824:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14826:	2102      	movs	r1, #2
   14828:	4630      	mov	r0, r6
   1482a:	f00d fda9 	bl	22380 <net_buf_simple_pull_mem>
   1482e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14830:	7800      	ldrb	r0, [r0, #0]
   14832:	f00b feb4 	bl	2059e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14836:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14838:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1483a:	d40c      	bmi.n	14856 <hci_event_prio+0x66>
   1483c:	4a10      	ldr	r2, [pc, #64]	; (14880 <hci_event_prio+0x90>)
   1483e:	4913      	ldr	r1, [pc, #76]	; (1488c <hci_event_prio+0x9c>)
   14840:	4811      	ldr	r0, [pc, #68]	; (14888 <hci_event_prio+0x98>)
   14842:	f640 532b 	movw	r3, #3371	; 0xd2b
   14846:	f00a fe5a 	bl	1f4fe <printk>
   1484a:	4040      	eors	r0, r0
   1484c:	f380 8811 	msr	BASEPRI, r0
   14850:	f04f 0003 	mov.w	r0, #3
   14854:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14856:	2305      	movs	r3, #5
   14858:	4a0d      	ldr	r2, [pc, #52]	; (14890 <hci_event_prio+0xa0>)
   1485a:	7838      	ldrb	r0, [r7, #0]
   1485c:	4621      	mov	r1, r4
   1485e:	f00b feb0 	bl	205c2 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14862:	07b3      	lsls	r3, r6, #30
   14864:	d507      	bpl.n	14876 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14866:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14868:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1486c:	fa10 f585 	uxtah	r5, r0, r5
   14870:	60a5      	str	r5, [r4, #8]
}
   14872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14876:	4620      	mov	r0, r4
}
   14878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1487c:	f002 bcc8 	b.w	17210 <net_buf_unref>
   14880:	00024f6b 	.word	0x00024f6b
   14884:	00024f9f 	.word	0x00024f9f
   14888:	00024fb8 	.word	0x00024fb8
   1488c:	00025030 	.word	0x00025030
   14890:	000247e0 	.word	0x000247e0

00014894 <bt_recv>:
{
   14894:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14896:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14898:	2b01      	cmp	r3, #1
{
   1489a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1489c:	d007      	beq.n	148ae <bt_recv+0x1a>
   1489e:	2b03      	cmp	r3, #3
   148a0:	d113      	bne.n	148ca <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   148a2:	480c      	ldr	r0, [pc, #48]	; (148d4 <bt_recv+0x40>)
   148a4:	4629      	mov	r1, r5
   148a6:	f00d fd11 	bl	222cc <net_buf_put>
		return 0;
   148aa:	2000      	movs	r0, #0
   148ac:	e00c      	b.n	148c8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   148ae:	6883      	ldr	r3, [r0, #8]
   148b0:	7818      	ldrb	r0, [r3, #0]
   148b2:	f00b fe74 	bl	2059e <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   148b6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   148b8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   148ba:	d502      	bpl.n	148c2 <bt_recv+0x2e>
			hci_event_prio(buf);
   148bc:	4628      	mov	r0, r5
   148be:	f7ff ff97 	bl	147f0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   148c2:	f014 0002 	ands.w	r0, r4, #2
   148c6:	d1ec      	bne.n	148a2 <bt_recv+0xe>
}
   148c8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   148ca:	f002 fca1 	bl	17210 <net_buf_unref>
		return -EINVAL;
   148ce:	f06f 0015 	mvn.w	r0, #21
   148d2:	e7f9      	b.n	148c8 <bt_recv+0x34>
   148d4:	200003e4 	.word	0x200003e4

000148d8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   148d8:	4a08      	ldr	r2, [pc, #32]	; (148fc <bt_hci_driver_register+0x24>)
{
   148da:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   148dc:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   148e0:	b930      	cbnz	r0, 148f0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   148e2:	68d9      	ldr	r1, [r3, #12]
   148e4:	b139      	cbz	r1, 148f6 <bt_hci_driver_register+0x1e>
   148e6:	6919      	ldr	r1, [r3, #16]
   148e8:	b129      	cbz	r1, 148f6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   148ea:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   148ee:	4770      	bx	lr
		return -EALREADY;
   148f0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   148f4:	4770      	bx	lr
		return -EINVAL;
   148f6:	f06f 0015 	mvn.w	r0, #21
}
   148fa:	4770      	bx	lr
   148fc:	200002b0 	.word	0x200002b0

00014900 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14900:	4b06      	ldr	r3, [pc, #24]	; (1491c <bt_finalize_init+0x1c>)
   14902:	f3bf 8f5b 	dmb	ish
   14906:	e853 2f00 	ldrex	r2, [r3]
   1490a:	f042 0202 	orr.w	r2, r2, #2
   1490e:	e843 2100 	strex	r1, r2, [r3]
   14912:	2900      	cmp	r1, #0
   14914:	d1f7      	bne.n	14906 <bt_finalize_init+0x6>
   14916:	f3bf 8f5b 	dmb	ish
}
   1491a:	4770      	bx	lr
   1491c:	2000037c 	.word	0x2000037c

00014920 <init_work>:
{
   14920:	b510      	push	{r4, lr}
	err = hci_init();
   14922:	f7ff fb95 	bl	14050 <hci_init>
	if (err) {
   14926:	b920      	cbnz	r0, 14932 <init_work+0x12>
		err = bt_conn_init();
   14928:	f001 f94e 	bl	15bc8 <bt_conn_init>
		if (err) {
   1492c:	b908      	cbnz	r0, 14932 <init_work+0x12>
	bt_finalize_init();
   1492e:	f7ff ffe7 	bl	14900 <bt_finalize_init>
	if (ready_cb) {
   14932:	4b03      	ldr	r3, [pc, #12]	; (14940 <init_work+0x20>)
   14934:	681b      	ldr	r3, [r3, #0]
   14936:	b113      	cbz	r3, 1493e <init_work+0x1e>
}
   14938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1493c:	4718      	bx	r3
}
   1493e:	bd10      	pop	{r4, pc}
   14940:	2000274c 	.word	0x2000274c

00014944 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   14944:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   14948:	4d32      	ldr	r5, [pc, #200]	; (14a14 <bt_enable+0xd0>)
   1494a:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1494e:	b088      	sub	sp, #32
   14950:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14952:	2b00      	cmp	r3, #0
   14954:	d058      	beq.n	14a08 <bt_enable+0xc4>
   14956:	f3bf 8f5b 	dmb	ish
   1495a:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1495e:	e853 4f00 	ldrex	r4, [r3]
   14962:	f044 0201 	orr.w	r2, r4, #1
   14966:	e843 2100 	strex	r1, r2, [r3]
   1496a:	2900      	cmp	r1, #0
   1496c:	d1f7      	bne.n	1495e <bt_enable+0x1a>
   1496e:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14972:	f014 0401 	ands.w	r4, r4, #1
   14976:	d14a      	bne.n	14a0e <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   14978:	4b27      	ldr	r3, [pc, #156]	; (14a18 <bt_enable+0xd4>)
   1497a:	f04f 0800 	mov.w	r8, #0
   1497e:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   14980:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14984:	f06f 0308 	mvn.w	r3, #8
   14988:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1498c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   14990:	e9cd 4400 	strd	r4, r4, [sp]
   14994:	4b21      	ldr	r3, [pc, #132]	; (14a1c <bt_enable+0xd8>)
   14996:	4922      	ldr	r1, [pc, #136]	; (14a20 <bt_enable+0xdc>)
   14998:	9404      	str	r4, [sp, #16]
   1499a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1499e:	4821      	ldr	r0, [pc, #132]	; (14a24 <bt_enable+0xe0>)
   149a0:	f006 fe6c 	bl	1b67c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   149a4:	4920      	ldr	r1, [pc, #128]	; (14a28 <bt_enable+0xe4>)
   149a6:	481f      	ldr	r0, [pc, #124]	; (14a24 <bt_enable+0xe0>)
   149a8:	f00e fe47 	bl	2363a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   149ac:	f06f 0307 	mvn.w	r3, #7
   149b0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   149b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   149b8:	e9cd 4400 	strd	r4, r4, [sp]
   149bc:	4b1b      	ldr	r3, [pc, #108]	; (14a2c <bt_enable+0xe8>)
   149be:	491c      	ldr	r1, [pc, #112]	; (14a30 <bt_enable+0xec>)
   149c0:	9404      	str	r4, [sp, #16]
   149c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   149c6:	481b      	ldr	r0, [pc, #108]	; (14a34 <bt_enable+0xf0>)
   149c8:	f006 fe58 	bl	1b67c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   149cc:	491a      	ldr	r1, [pc, #104]	; (14a38 <bt_enable+0xf4>)
   149ce:	4819      	ldr	r0, [pc, #100]	; (14a34 <bt_enable+0xf0>)
   149d0:	f00e fe33 	bl	2363a <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   149d4:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   149d8:	68db      	ldr	r3, [r3, #12]
   149da:	4798      	blx	r3
	if (err) {
   149dc:	4604      	mov	r4, r0
   149de:	b950      	cbnz	r0, 149f6 <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   149e0:	b96e      	cbnz	r6, 149fe <bt_enable+0xba>
	err = hci_init();
   149e2:	f7ff fb35 	bl	14050 <hci_init>
	if (err) {
   149e6:	4604      	mov	r4, r0
   149e8:	b928      	cbnz	r0, 149f6 <bt_enable+0xb2>
		err = bt_conn_init();
   149ea:	f001 f8ed 	bl	15bc8 <bt_conn_init>
		if (err) {
   149ee:	4604      	mov	r4, r0
   149f0:	b908      	cbnz	r0, 149f6 <bt_enable+0xb2>
	bt_finalize_init();
   149f2:	f7ff ff85 	bl	14900 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   149f6:	4620      	mov	r0, r4
   149f8:	b008      	add	sp, #32
   149fa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   149fe:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14a02:	f007 f96b 	bl	1bcdc <k_work_submit>
	return 0;
   14a06:	e7f6      	b.n	149f6 <bt_enable+0xb2>
		return -ENODEV;
   14a08:	f06f 0412 	mvn.w	r4, #18
   14a0c:	e7f3      	b.n	149f6 <bt_enable+0xb2>
		return -EALREADY;
   14a0e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14a12:	e7f0      	b.n	149f6 <bt_enable+0xb2>
   14a14:	200002b0 	.word	0x200002b0
   14a18:	2000274c 	.word	0x2000274c
   14a1c:	000146bd 	.word	0x000146bd
   14a20:	20004660 	.word	0x20004660
   14a24:	20001a90 	.word	0x20001a90
   14a28:	00025049 	.word	0x00025049
   14a2c:	00013d91 	.word	0x00013d91
   14a30:	20004240 	.word	0x20004240
   14a34:	20001a10 	.word	0x20001a10
   14a38:	0002504f 	.word	0x0002504f

00014a3c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14a3c:	4800      	ldr	r0, [pc, #0]	; (14a40 <bt_get_name+0x4>)
   14a3e:	4770      	bx	lr
   14a40:	00024d76 	.word	0x00024d76

00014a44 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14a46:	4f0b      	ldr	r7, [pc, #44]	; (14a74 <id_find+0x30>)
{
   14a48:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14a4a:	2500      	movs	r5, #0
   14a4c:	79fb      	ldrb	r3, [r7, #7]
   14a4e:	b2ec      	uxtb	r4, r5
   14a50:	42a3      	cmp	r3, r4
   14a52:	d802      	bhi.n	14a5a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14a54:	f06f 0401 	mvn.w	r4, #1
   14a58:	e009      	b.n	14a6e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14a5a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14a5e:	2207      	movs	r2, #7
   14a60:	4439      	add	r1, r7
   14a62:	4630      	mov	r0, r6
   14a64:	f00b fca8 	bl	203b8 <memcmp>
   14a68:	3501      	adds	r5, #1
   14a6a:	2800      	cmp	r0, #0
   14a6c:	d1ee      	bne.n	14a4c <id_find+0x8>
}
   14a6e:	4620      	mov	r0, r4
   14a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a72:	bf00      	nop
   14a74:	200002b0 	.word	0x200002b0

00014a78 <set_random_address>:
{
   14a78:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14a7a:	4914      	ldr	r1, [pc, #80]	; (14acc <set_random_address+0x54>)
   14a7c:	2206      	movs	r2, #6
   14a7e:	4605      	mov	r5, r0
   14a80:	f00b fc9a 	bl	203b8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14a84:	4604      	mov	r4, r0
   14a86:	b1e0      	cbz	r0, 14ac2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14a88:	2106      	movs	r1, #6
   14a8a:	f242 0005 	movw	r0, #8197	; 0x2005
   14a8e:	f7ff fa45 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   14a92:	4604      	mov	r4, r0
   14a94:	b1b8      	cbz	r0, 14ac6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14a96:	2206      	movs	r2, #6
   14a98:	4629      	mov	r1, r5
   14a9a:	3008      	adds	r0, #8
   14a9c:	f00d fc4f 	bl	2233e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14aa0:	4621      	mov	r1, r4
   14aa2:	2200      	movs	r2, #0
   14aa4:	f242 0005 	movw	r0, #8197	; 0x2005
   14aa8:	f7ff fa70 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14aac:	4604      	mov	r4, r0
   14aae:	b940      	cbnz	r0, 14ac2 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   14ab0:	2206      	movs	r2, #6
   14ab2:	4806      	ldr	r0, [pc, #24]	; (14acc <set_random_address+0x54>)
   14ab4:	4629      	mov	r1, r5
   14ab6:	f00b fca6 	bl	20406 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14aba:	4b05      	ldr	r3, [pc, #20]	; (14ad0 <set_random_address+0x58>)
   14abc:	2201      	movs	r2, #1
   14abe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   14ac2:	4620      	mov	r0, r4
   14ac4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14ac6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14aca:	e7fa      	b.n	14ac2 <set_random_address+0x4a>
   14acc:	20000311 	.word	0x20000311
   14ad0:	200002b0 	.word	0x200002b0

00014ad4 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14ad4:	b530      	push	{r4, r5, lr}
   14ad6:	4604      	mov	r4, r0
   14ad8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14ada:	460d      	mov	r5, r1
   14adc:	b1a1      	cbz	r1, 14b08 <id_create.isra.0+0x34>
   14ade:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14ae0:	2207      	movs	r2, #7
   14ae2:	a902      	add	r1, sp, #8
   14ae4:	4628      	mov	r0, r5
   14ae6:	9302      	str	r3, [sp, #8]
   14ae8:	f8cd 300b 	str.w	r3, [sp, #11]
   14aec:	f00b fc64 	bl	203b8 <memcmp>
   14af0:	b150      	cbz	r0, 14b08 <id_create.isra.0+0x34>
	memcpy(dst, src, sizeof(*dst));
   14af2:	4812      	ldr	r0, [pc, #72]	; (14b3c <id_create.isra.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14af4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14af8:	2207      	movs	r2, #7
   14afa:	4629      	mov	r1, r5
   14afc:	4420      	add	r0, r4
   14afe:	f00b fc82 	bl	20406 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14b02:	2000      	movs	r0, #0
}
   14b04:	b005      	add	sp, #20
   14b06:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14b08:	4668      	mov	r0, sp
   14b0a:	f00b fd3a 	bl	20582 <bt_addr_le_create_static>
			if (err) {
   14b0e:	2800      	cmp	r0, #0
   14b10:	d1f8      	bne.n	14b04 <id_create.isra.0+0x30>
		} while (id_find(&new_addr) >= 0);
   14b12:	4668      	mov	r0, sp
   14b14:	f7ff ff96 	bl	14a44 <id_find>
   14b18:	2800      	cmp	r0, #0
   14b1a:	daf5      	bge.n	14b08 <id_create.isra.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14b1c:	4807      	ldr	r0, [pc, #28]	; (14b3c <id_create.isra.0+0x68>)
   14b1e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14b22:	4404      	add	r4, r0
   14b24:	2207      	movs	r2, #7
   14b26:	4669      	mov	r1, sp
   14b28:	4620      	mov	r0, r4
   14b2a:	f00b fc6c 	bl	20406 <memcpy>
		if (addr) {
   14b2e:	2d00      	cmp	r5, #0
   14b30:	d0e7      	beq.n	14b02 <id_create.isra.0+0x2e>
   14b32:	2207      	movs	r2, #7
   14b34:	4621      	mov	r1, r4
   14b36:	4628      	mov	r0, r5
   14b38:	e7e1      	b.n	14afe <id_create.isra.0+0x2a>
   14b3a:	bf00      	nop
   14b3c:	200002b0 	.word	0x200002b0

00014b40 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14b42:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14b44:	4604      	mov	r4, r0
   14b46:	b918      	cbnz	r0, 14b50 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14b48:	b1ee      	cbz	r6, 14b86 <bt_id_create+0x46>
		return -EINVAL;
   14b4a:	f06f 0015 	mvn.w	r0, #21
   14b4e:	e018      	b.n	14b82 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14b50:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14b52:	2207      	movs	r2, #7
   14b54:	4669      	mov	r1, sp
   14b56:	9300      	str	r3, [sp, #0]
   14b58:	f8cd 3003 	str.w	r3, [sp, #3]
   14b5c:	f00b fc2c 	bl	203b8 <memcmp>
   14b60:	2800      	cmp	r0, #0
   14b62:	d0f1      	beq.n	14b48 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14b64:	7823      	ldrb	r3, [r4, #0]
   14b66:	2b01      	cmp	r3, #1
   14b68:	d1ef      	bne.n	14b4a <bt_id_create+0xa>
   14b6a:	79a3      	ldrb	r3, [r4, #6]
   14b6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14b70:	2bc0      	cmp	r3, #192	; 0xc0
   14b72:	d1ea      	bne.n	14b4a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14b74:	4620      	mov	r0, r4
   14b76:	f7ff ff65 	bl	14a44 <id_find>
   14b7a:	2800      	cmp	r0, #0
   14b7c:	dbe4      	blt.n	14b48 <bt_id_create+0x8>
			return -EALREADY;
   14b7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   14b82:	b002      	add	sp, #8
   14b84:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14b86:	4d13      	ldr	r5, [pc, #76]	; (14bd4 <bt_id_create+0x94>)
   14b88:	79eb      	ldrb	r3, [r5, #7]
   14b8a:	2b01      	cmp	r3, #1
   14b8c:	d01e      	beq.n	14bcc <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b8e:	f3bf 8f5b 	dmb	ish
   14b92:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   14b96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14b9a:	07db      	lsls	r3, r3, #31
   14b9c:	d40b      	bmi.n	14bb6 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   14b9e:	2c00      	cmp	r4, #0
   14ba0:	d0d3      	beq.n	14b4a <bt_id_create+0xa>
   14ba2:	2207      	movs	r2, #7
   14ba4:	4669      	mov	r1, sp
   14ba6:	4620      	mov	r0, r4
   14ba8:	9600      	str	r6, [sp, #0]
   14baa:	f8cd 6003 	str.w	r6, [sp, #3]
   14bae:	f00b fc03 	bl	203b8 <memcmp>
   14bb2:	2800      	cmp	r0, #0
   14bb4:	d0c9      	beq.n	14b4a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   14bb6:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   14bb8:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   14bba:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   14bbc:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   14bbe:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   14bc0:	f7ff ff88 	bl	14ad4 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   14bc4:	2800      	cmp	r0, #0
   14bc6:	bf08      	it	eq
   14bc8:	4630      	moveq	r0, r6
   14bca:	e7da      	b.n	14b82 <bt_id_create+0x42>
		return -ENOMEM;
   14bcc:	f06f 000b 	mvn.w	r0, #11
   14bd0:	e7d7      	b.n	14b82 <bt_id_create+0x42>
   14bd2:	bf00      	nop
   14bd4:	200002b0 	.word	0x200002b0

00014bd8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14bd8:	b570      	push	{r4, r5, r6, lr}
   14bda:	b086      	sub	sp, #24
   14bdc:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14bde:	aa01      	add	r2, sp, #4
   14be0:	2100      	movs	r1, #0
   14be2:	f241 0009 	movw	r0, #4105	; 0x1009
   14be6:	f7ff f9d1 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14bea:	4604      	mov	r4, r0
   14bec:	b970      	cbnz	r0, 14c0c <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   14bee:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14bf0:	9002      	str	r0, [sp, #8]
   14bf2:	689d      	ldr	r5, [r3, #8]
   14bf4:	f8ad 000c 	strh.w	r0, [sp, #12]
   14bf8:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   14bfa:	2206      	movs	r2, #6
   14bfc:	a902      	add	r1, sp, #8
   14bfe:	4628      	mov	r0, r5
   14c00:	f00b fbda 	bl	203b8 <memcmp>
   14c04:	b920      	cbnz	r0, 14c10 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14c06:	9801      	ldr	r0, [sp, #4]
   14c08:	f002 fb02 	bl	17210 <net_buf_unref>
		return 0U;
   14c0c:	2000      	movs	r0, #0
   14c0e:	e016      	b.n	14c3e <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   14c10:	4b0c      	ldr	r3, [pc, #48]	; (14c44 <bt_id_read_public_addr+0x6c>)
   14c12:	6818      	ldr	r0, [r3, #0]
   14c14:	9004      	str	r0, [sp, #16]
   14c16:	889b      	ldrh	r3, [r3, #4]
   14c18:	f8ad 3014 	strh.w	r3, [sp, #20]
   14c1c:	2206      	movs	r2, #6
   14c1e:	a904      	add	r1, sp, #16
   14c20:	4628      	mov	r0, r5
   14c22:	f00b fbc9 	bl	203b8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14c26:	2800      	cmp	r0, #0
   14c28:	d0ed      	beq.n	14c06 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   14c2a:	2206      	movs	r2, #6
   14c2c:	4629      	mov	r1, r5
   14c2e:	1c70      	adds	r0, r6, #1
   14c30:	f00b fbe9 	bl	20406 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   14c34:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14c36:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   14c38:	f002 faea 	bl	17210 <net_buf_unref>
	return 1U;
   14c3c:	2001      	movs	r0, #1
}
   14c3e:	b006      	add	sp, #24
   14c40:	bd70      	pop	{r4, r5, r6, pc}
   14c42:	bf00      	nop
   14c44:	000244c3 	.word	0x000244c3

00014c48 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14c48:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14c4a:	4668      	mov	r0, sp
   14c4c:	f7ff ffc4 	bl	14bd8 <bt_id_read_public_addr>
   14c50:	4b04      	ldr	r3, [pc, #16]	; (14c64 <bt_setup_public_id_addr+0x1c>)
   14c52:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14c54:	b118      	cbz	r0, 14c5e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14c56:	4669      	mov	r1, sp
   14c58:	2000      	movs	r0, #0
   14c5a:	f7ff ff3b 	bl	14ad4 <id_create.isra.0>
}
   14c5e:	b003      	add	sp, #12
   14c60:	f85d fb04 	ldr.w	pc, [sp], #4
   14c64:	200002b0 	.word	0x200002b0

00014c68 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14c68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14c6c:	4b15      	ldr	r3, [pc, #84]	; (14cc4 <bt_read_static_addr+0x5c>)
   14c6e:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14c72:	f014 0401 	ands.w	r4, r4, #1
{
   14c76:	4607      	mov	r7, r0
   14c78:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14c7a:	d015      	beq.n	14ca8 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14c7c:	aa01      	add	r2, sp, #4
   14c7e:	2100      	movs	r1, #0
   14c80:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14c84:	f7ff f982 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   14c88:	4605      	mov	r5, r0
   14c8a:	b9c8      	cbnz	r0, 14cc0 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14c8c:	9b01      	ldr	r3, [sp, #4]
   14c8e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   14c90:	785c      	ldrb	r4, [r3, #1]
   14c92:	42b4      	cmp	r4, r6
   14c94:	bf28      	it	cs
   14c96:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14c98:	f04f 0816 	mov.w	r8, #22
   14c9c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   14c9e:	42a5      	cmp	r5, r4
   14ca0:	db06      	blt.n	14cb0 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   14ca2:	9801      	ldr	r0, [sp, #4]
   14ca4:	f002 fab4 	bl	17210 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14ca8:	4620      	mov	r0, r4
   14caa:	b002      	add	sp, #8
   14cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14cb0:	fb08 7005 	mla	r0, r8, r5, r7
   14cb4:	2216      	movs	r2, #22
   14cb6:	4631      	mov	r1, r6
   14cb8:	f00b fba5 	bl	20406 <memcpy>
	for (i = 0; i < cnt; i++) {
   14cbc:	3501      	adds	r5, #1
   14cbe:	e7ee      	b.n	14c9e <bt_read_static_addr+0x36>
		return 0;
   14cc0:	2400      	movs	r4, #0
   14cc2:	e7f1      	b.n	14ca8 <bt_read_static_addr+0x40>
   14cc4:	200002b0 	.word	0x200002b0

00014cc8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14cca:	4d14      	ldr	r5, [pc, #80]	; (14d1c <bt_setup_random_id_addr+0x54>)
   14ccc:	79ec      	ldrb	r4, [r5, #7]
{
   14cce:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14cd0:	b92c      	cbnz	r4, 14cde <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14cd2:	2101      	movs	r1, #1
   14cd4:	a802      	add	r0, sp, #8
   14cd6:	f7ff ffc7 	bl	14c68 <bt_read_static_addr>
   14cda:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   14cdc:	b9b8      	cbnz	r0, 14d0e <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   14cde:	2100      	movs	r1, #0
   14ce0:	4608      	mov	r0, r1
   14ce2:	f7ff ff2d 	bl	14b40 <bt_id_create>
   14ce6:	e010      	b.n	14d0a <bt_setup_random_id_addr+0x42>
   14ce8:	ab02      	add	r3, sp, #8
   14cea:	fb07 3106 	mla	r1, r7, r6, r3
   14cee:	2206      	movs	r2, #6
   14cf0:	f10d 0001 	add.w	r0, sp, #1
   14cf4:	f00b fb87 	bl	20406 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   14cf8:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   14cfa:	4669      	mov	r1, sp
   14cfc:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   14cfe:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14d02:	f7ff fee7 	bl	14ad4 <id_create.isra.0>
				if (err) {
   14d06:	3401      	adds	r4, #1
   14d08:	b110      	cbz	r0, 14d10 <bt_setup_random_id_addr+0x48>
}
   14d0a:	b009      	add	sp, #36	; 0x24
   14d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14d0e:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14d10:	79eb      	ldrb	r3, [r5, #7]
   14d12:	b2e6      	uxtb	r6, r4
   14d14:	42b3      	cmp	r3, r6
   14d16:	d8e7      	bhi.n	14ce8 <bt_setup_random_id_addr+0x20>
			return 0;
   14d18:	2000      	movs	r0, #0
   14d1a:	e7f6      	b.n	14d0a <bt_setup_random_id_addr+0x42>
   14d1c:	200002b0 	.word	0x200002b0

00014d20 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14d24:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   14d28:	7805      	ldrb	r5, [r0, #0]
{
   14d2a:	460e      	mov	r6, r1
   14d2c:	4690      	mov	r8, r2
   14d2e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14d30:	d026      	beq.n	14d80 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14d32:	4c22      	ldr	r4, [pc, #136]	; (14dbc <bt_id_set_adv_own_addr+0x9c>)
   14d34:	b12a      	cbz	r2, 14d42 <bt_id_set_adv_own_addr+0x22>
   14d36:	0688      	lsls	r0, r1, #26
   14d38:	d503      	bpl.n	14d42 <bt_id_set_adv_own_addr+0x22>
   14d3a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14d3e:	0659      	lsls	r1, r3, #25
   14d40:	d539      	bpl.n	14db6 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14d42:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14d46:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   14d4a:	5ce3      	ldrb	r3, [r4, r3]
   14d4c:	2b01      	cmp	r3, #1
   14d4e:	d008      	beq.n	14d62 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14d50:	eba9 0505 	sub.w	r5, r9, r5
   14d54:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14d56:	f1b8 0f00 	cmp.w	r8, #0
   14d5a:	d10c      	bne.n	14d76 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14d5c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14d5e:	2000      	movs	r0, #0
   14d60:	e007      	b.n	14d72 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14d62:	2007      	movs	r0, #7
   14d64:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14d68:	4420      	add	r0, r4
   14d6a:	f7ff fe85 	bl	14a78 <set_random_address>
				if (err) {
   14d6e:	2800      	cmp	r0, #0
   14d70:	d0ee      	beq.n	14d50 <bt_id_set_adv_own_addr+0x30>
}
   14d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14d76:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14d78:	bf48      	it	mi
   14d7a:	f043 0302 	orrmi.w	r3, r3, #2
   14d7e:	e7ed      	b.n	14d5c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14d80:	074b      	lsls	r3, r1, #29
   14d82:	d514      	bpl.n	14dae <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14d84:	4e0d      	ldr	r6, [pc, #52]	; (14dbc <bt_id_set_adv_own_addr+0x9c>)
   14d86:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14d8a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   14d8e:	5cf3      	ldrb	r3, [r6, r3]
   14d90:	2b01      	cmp	r3, #1
   14d92:	d10a      	bne.n	14daa <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14d94:	2007      	movs	r0, #7
   14d96:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14d9a:	4430      	add	r0, r6
   14d9c:	f7ff fe6c 	bl	14a78 <set_random_address>
			*own_addr_type = id_addr->type;
   14da0:	eba8 0505 	sub.w	r5, r8, r5
   14da4:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14da6:	703b      	strb	r3, [r7, #0]
		if (err) {
   14da8:	e7e3      	b.n	14d72 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   14daa:	4620      	mov	r0, r4
   14dac:	e7f8      	b.n	14da0 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   14dae:	f00b fe77 	bl	20aa0 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14db2:	2301      	movs	r3, #1
   14db4:	e7f7      	b.n	14da6 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   14db6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14dba:	e7da      	b.n	14d72 <bt_id_set_adv_own_addr+0x52>
   14dbc:	200002b0 	.word	0x200002b0

00014dc0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14dc0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14dc2:	4c0a      	ldr	r4, [pc, #40]	; (14dec <bt_id_init+0x2c>)
   14dc4:	79e3      	ldrb	r3, [r4, #7]
   14dc6:	b10b      	cbz	r3, 14dcc <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14dc8:	2000      	movs	r0, #0
}
   14dca:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   14dcc:	f7ff ff3c 	bl	14c48 <bt_setup_public_id_addr>
		if (err) {
   14dd0:	2800      	cmp	r0, #0
   14dd2:	d1fa      	bne.n	14dca <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14dd4:	79e3      	ldrb	r3, [r4, #7]
   14dd6:	2b00      	cmp	r3, #0
   14dd8:	d1f6      	bne.n	14dc8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   14dda:	f7ff ff75 	bl	14cc8 <bt_setup_random_id_addr>
		if (err) {
   14dde:	2800      	cmp	r0, #0
   14de0:	d1f3      	bne.n	14dca <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14de2:	1c60      	adds	r0, r4, #1
}
   14de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   14de8:	f7ff be46 	b.w	14a78 <set_random_address>
   14dec:	200002b0 	.word	0x200002b0

00014df0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14df0:	6843      	ldr	r3, [r0, #4]
{
   14df2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14df4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14df6:	0558      	lsls	r0, r3, #21
   14df8:	d502      	bpl.n	14e00 <valid_adv_param+0x10>
		return false;
   14dfa:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   14dfc:	b003      	add	sp, #12
   14dfe:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14e00:	6922      	ldr	r2, [r4, #16]
   14e02:	b10a      	cbz	r2, 14e08 <valid_adv_param+0x18>
   14e04:	07d9      	lsls	r1, r3, #31
   14e06:	d5f8      	bpl.n	14dfa <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14e08:	4d1a      	ldr	r5, [pc, #104]	; (14e74 <valid_adv_param+0x84>)
   14e0a:	7820      	ldrb	r0, [r4, #0]
   14e0c:	79eb      	ldrb	r3, [r5, #7]
   14e0e:	4283      	cmp	r3, r0
   14e10:	d9f3      	bls.n	14dfa <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14e12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14e16:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14e18:	2207      	movs	r2, #7
   14e1a:	4669      	mov	r1, sp
   14e1c:	4428      	add	r0, r5
   14e1e:	9300      	str	r3, [sp, #0]
   14e20:	f8cd 3003 	str.w	r3, [sp, #3]
   14e24:	f00b fac8 	bl	203b8 <memcmp>
	if (param->id >= bt_dev.id_count ||
   14e28:	2800      	cmp	r0, #0
   14e2a:	d0e6      	beq.n	14dfa <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14e2c:	6860      	ldr	r0, [r4, #4]
   14e2e:	07c2      	lsls	r2, r0, #31
   14e30:	d406      	bmi.n	14e40 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14e32:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14e36:	2b08      	cmp	r3, #8
   14e38:	d802      	bhi.n	14e40 <valid_adv_param+0x50>
   14e3a:	68a3      	ldr	r3, [r4, #8]
   14e3c:	2b9f      	cmp	r3, #159	; 0x9f
   14e3e:	d9dc      	bls.n	14dfa <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14e40:	f010 0f30 	tst.w	r0, #48	; 0x30
   14e44:	d002      	beq.n	14e4c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14e46:	6923      	ldr	r3, [r4, #16]
   14e48:	2b00      	cmp	r3, #0
   14e4a:	d0d6      	beq.n	14dfa <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14e4c:	06c3      	lsls	r3, r0, #27
   14e4e:	d401      	bmi.n	14e54 <valid_adv_param+0x64>
   14e50:	6923      	ldr	r3, [r4, #16]
   14e52:	b943      	cbnz	r3, 14e66 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14e54:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14e58:	429a      	cmp	r2, r3
   14e5a:	d8ce      	bhi.n	14dfa <valid_adv_param+0xa>
   14e5c:	2a1f      	cmp	r2, #31
   14e5e:	d9cc      	bls.n	14dfa <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14e64:	d8c9      	bhi.n	14dfa <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14e66:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14e6a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14e6e:	bf18      	it	ne
   14e70:	2001      	movne	r0, #1
   14e72:	e7c3      	b.n	14dfc <valid_adv_param+0xc>
   14e74:	200002b0 	.word	0x200002b0

00014e78 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14e78:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14e7a:	4606      	mov	r6, r0
   14e7c:	4b1e      	ldr	r3, [pc, #120]	; (14ef8 <le_adv_start_add_conn+0x80>)
   14e7e:	f816 2b09 	ldrb.w	r2, [r6], #9
   14e82:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   14e86:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14e88:	2300      	movs	r3, #0
{
   14e8a:	4605      	mov	r5, r0
   14e8c:	2207      	movs	r2, #7
   14e8e:	460f      	mov	r7, r1
   14e90:	4630      	mov	r0, r6
   14e92:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14e94:	9300      	str	r3, [sp, #0]
   14e96:	f8cd 3003 	str.w	r3, [sp, #3]
   14e9a:	f00b fa8d 	bl	203b8 <memcmp>
   14e9e:	782a      	ldrb	r2, [r5, #0]
   14ea0:	4604      	mov	r4, r0
   14ea2:	b9a8      	cbnz	r0, 14ed0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14ea4:	4b15      	ldr	r3, [pc, #84]	; (14efc <le_adv_start_add_conn+0x84>)
   14ea6:	6818      	ldr	r0, [r3, #0]
   14ea8:	8899      	ldrh	r1, [r3, #4]
   14eaa:	9002      	str	r0, [sp, #8]
   14eac:	799b      	ldrb	r3, [r3, #6]
   14eae:	f8ad 100c 	strh.w	r1, [sp, #12]
   14eb2:	4610      	mov	r0, r2
   14eb4:	a902      	add	r1, sp, #8
   14eb6:	f88d 300e 	strb.w	r3, [sp, #14]
   14eba:	f000 fccf 	bl	1585c <bt_conn_add_le>
		if (!conn) {
   14ebe:	4605      	mov	r5, r0
   14ec0:	b1b8      	cbz	r0, 14ef2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   14ec2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14ec4:	f000 fb76 	bl	155b4 <bt_conn_set_state>
	*out_conn = conn;
   14ec8:	603d      	str	r5, [r7, #0]
	return 0;
}
   14eca:	4620      	mov	r0, r4
   14ecc:	b005      	add	sp, #20
   14ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14ed0:	4631      	mov	r1, r6
   14ed2:	4610      	mov	r0, r2
   14ed4:	f00c f864 	bl	20fa0 <bt_conn_exists_le>
   14ed8:	4604      	mov	r4, r0
   14eda:	b938      	cbnz	r0, 14eec <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14edc:	7828      	ldrb	r0, [r5, #0]
   14ede:	4631      	mov	r1, r6
   14ee0:	f000 fcbc 	bl	1585c <bt_conn_add_le>
	if (!conn) {
   14ee4:	4605      	mov	r5, r0
   14ee6:	b120      	cbz	r0, 14ef2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   14ee8:	2105      	movs	r1, #5
   14eea:	e7eb      	b.n	14ec4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   14eec:	f06f 0415 	mvn.w	r4, #21
   14ef0:	e7eb      	b.n	14eca <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   14ef2:	f06f 040b 	mvn.w	r4, #11
   14ef6:	e7e8      	b.n	14eca <le_adv_start_add_conn+0x52>
   14ef8:	200002b0 	.word	0x200002b0
   14efc:	000244c9 	.word	0x000244c9

00014f00 <bt_le_adv_lookup_legacy>:
}
   14f00:	4800      	ldr	r0, [pc, #0]	; (14f04 <bt_le_adv_lookup_legacy+0x4>)
   14f02:	4770      	bx	lr
   14f04:	200002c8 	.word	0x200002c8

00014f08 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14f0c:	690e      	ldr	r6, [r1, #16]
{
   14f0e:	b08f      	sub	sp, #60	; 0x3c
   14f10:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   14f12:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14f14:	ebb6 0903 	subs.w	r9, r6, r3
{
   14f18:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14f1a:	488c      	ldr	r0, [pc, #560]	; (1514c <bt_le_adv_start_legacy+0x244>)
   14f1c:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   14f1e:	bf18      	it	ne
   14f20:	f04f 0901 	movne.w	r9, #1
{
   14f24:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   14f26:	9307      	str	r3, [sp, #28]
   14f28:	f00b fddd 	bl	20ae6 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14f2c:	0787      	lsls	r7, r0, #30
   14f2e:	f140 8102 	bpl.w	15136 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14f32:	4608      	mov	r0, r1
   14f34:	f7ff ff5c 	bl	14df0 <valid_adv_param>
   14f38:	b928      	cbnz	r0, 14f46 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   14f3a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14f3e:	4658      	mov	r0, fp
   14f40:	b00f      	add	sp, #60	; 0x3c
   14f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14f46:	4620      	mov	r0, r4
   14f48:	f00b fdbc 	bl	20ac4 <bt_id_adv_random_addr_check>
   14f4c:	4680      	mov	r8, r0
   14f4e:	2800      	cmp	r0, #0
   14f50:	d0f3      	beq.n	14f3a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14f52:	f105 0710 	add.w	r7, r5, #16
   14f56:	4638      	mov	r0, r7
   14f58:	f00b fdc5 	bl	20ae6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14f5c:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   14f60:	0640      	lsls	r0, r0, #25
   14f62:	f100 80eb 	bmi.w	1513c <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
   14f66:	220f      	movs	r2, #15
   14f68:	4659      	mov	r1, fp
   14f6a:	a80a      	add	r0, sp, #40	; 0x28
   14f6c:	f00b fa56 	bl	2041c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14f70:	68a3      	ldr	r3, [r4, #8]
   14f72:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   14f76:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14f78:	68e3      	ldr	r3, [r4, #12]
   14f7a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   14f7e:	f00b fda3 	bl	20ac8 <get_adv_channel_map>
	if (adv->id != param->id) {
   14f82:	782a      	ldrb	r2, [r5, #0]
   14f84:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14f86:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   14f8a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   14f8c:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   14f90:	d004      	beq.n	14f9c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14f92:	486e      	ldr	r0, [pc, #440]	; (1514c <bt_le_adv_start_legacy+0x244>)
   14f94:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14f98:	f00b fdab 	bl	20af2 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   14f9c:	4a6c      	ldr	r2, [pc, #432]	; (15150 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
   14f9e:	7823      	ldrb	r3, [r4, #0]
   14fa0:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14fa2:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14fa6:	6861      	ldr	r1, [r4, #4]
   14fa8:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   14fac:	464a      	mov	r2, r9
   14fae:	4628      	mov	r0, r5
   14fb0:	f7ff feb6 	bl	14d20 <bt_id_set_adv_own_addr>
	if (err) {
   14fb4:	4683      	mov	fp, r0
   14fb6:	2800      	cmp	r0, #0
   14fb8:	d1c1      	bne.n	14f3e <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   14fba:	f105 0009 	add.w	r0, r5, #9
   14fbe:	2e00      	cmp	r6, #0
   14fc0:	d049      	beq.n	15056 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   14fc2:	6921      	ldr	r1, [r4, #16]
   14fc4:	2207      	movs	r2, #7
   14fc6:	f00b fa1e 	bl	20406 <memcpy>
	name_type = get_adv_name_type_param(param);
   14fca:	4620      	mov	r0, r4
   14fcc:	f00b fe8f 	bl	20cee <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14fd0:	6863      	ldr	r3, [r4, #4]
   14fd2:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   14fd4:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14fd6:	d547      	bpl.n	15068 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   14fd8:	2e00      	cmp	r6, #0
   14fda:	d042      	beq.n	15062 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   14fdc:	f013 0f10 	tst.w	r3, #16
   14fe0:	bf14      	ite	ne
   14fe2:	2304      	movne	r3, #4
   14fe4:	2301      	moveq	r3, #1
   14fe6:	6921      	ldr	r1, [r4, #16]
   14fe8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14fec:	2207      	movs	r2, #7
   14fee:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   14ff2:	f00b fa08 	bl	20406 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   14ff6:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14ffa:	210f      	movs	r1, #15
   14ffc:	f242 0006 	movw	r0, #8198	; 0x2006
   15000:	f7fe ff8c 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   15004:	4683      	mov	fp, r0
   15006:	2800      	cmp	r0, #0
   15008:	f000 809b 	beq.w	15142 <bt_le_adv_start_legacy+0x23a>
   1500c:	220f      	movs	r2, #15
   1500e:	a90a      	add	r1, sp, #40	; 0x28
   15010:	3008      	adds	r0, #8
   15012:	f00d f994 	bl	2233e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15016:	2200      	movs	r2, #0
   15018:	4659      	mov	r1, fp
   1501a:	f242 0006 	movw	r0, #8198	; 0x2006
   1501e:	f7fe ffb5 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   15022:	2800      	cmp	r0, #0
   15024:	f040 8090 	bne.w	15148 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
   15028:	b376      	cbz	r6, 15088 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1502a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1502c:	07db      	lsls	r3, r3, #31
   1502e:	d439      	bmi.n	150a4 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15030:	2101      	movs	r1, #1
   15032:	4628      	mov	r0, r5
   15034:	f00b fe6b 	bl	20d0e <bt_le_adv_set_enable_legacy>
	if (err) {
   15038:	4683      	mov	fp, r0
   1503a:	9807      	ldr	r0, [sp, #28]
   1503c:	f1bb 0f00 	cmp.w	fp, #0
   15040:	d073      	beq.n	1512a <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15042:	2800      	cmp	r0, #0
   15044:	f43f af7b 	beq.w	14f3e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15048:	2100      	movs	r1, #0
   1504a:	f000 fab3 	bl	155b4 <bt_conn_set_state>
			bt_conn_unref(conn);
   1504e:	9807      	ldr	r0, [sp, #28]
   15050:	f00b ff3f 	bl	20ed2 <bt_conn_unref>
   15054:	e773      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15056:	9608      	str	r6, [sp, #32]
   15058:	2207      	movs	r2, #7
   1505a:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   1505e:	a908      	add	r1, sp, #32
   15060:	e7b1      	b.n	14fc6 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   15062:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   15066:	e7c8      	b.n	14ffa <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15068:	059a      	lsls	r2, r3, #22
   1506a:	d403      	bmi.n	15074 <bt_le_adv_start_legacy+0x16c>
   1506c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1506e:	b90b      	cbnz	r3, 15074 <bt_le_adv_start_legacy+0x16c>
   15070:	2802      	cmp	r0, #2
   15072:	d103      	bne.n	1507c <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   15074:	2302      	movs	r3, #2
   15076:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1507a:	e7be      	b.n	14ffa <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1507c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1507e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15082:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15086:	e7b8      	b.n	14ffa <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15088:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1508a:	9300      	str	r3, [sp, #0]
   1508c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   15090:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15092:	9905      	ldr	r1, [sp, #20]
   15094:	4652      	mov	r2, sl
   15096:	4628      	mov	r0, r5
   15098:	f00b fdb2 	bl	20c00 <le_adv_update.constprop.0>
		if (err) {
   1509c:	4683      	mov	fp, r0
   1509e:	2800      	cmp	r0, #0
   150a0:	d0c3      	beq.n	1502a <bt_le_adv_start_legacy+0x122>
   150a2:	e74c      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   150a4:	a907      	add	r1, sp, #28
   150a6:	4628      	mov	r0, r5
   150a8:	f7ff fee6 	bl	14e78 <le_adv_start_add_conn>
		if (err) {
   150ac:	4683      	mov	fp, r0
   150ae:	2800      	cmp	r0, #0
   150b0:	d0be      	beq.n	15030 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   150b2:	f110 0f0c 	cmn.w	r0, #12
   150b6:	f47f af42 	bne.w	14f3e <bt_le_adv_start_legacy+0x36>
   150ba:	2e00      	cmp	r6, #0
   150bc:	f47f af3f 	bne.w	14f3e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   150c0:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   150c2:	0798      	lsls	r0, r3, #30
   150c4:	f53f af3b 	bmi.w	14f3e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   150c8:	6862      	ldr	r2, [r4, #4]
   150ca:	f082 0202 	eor.w	r2, r2, #2
   150ce:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   150d2:	f00b 0201 	and.w	r2, fp, #1
   150d6:	210d      	movs	r1, #13
   150d8:	4638      	mov	r0, r7
   150da:	f00b fd7a 	bl	20bd2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   150de:	f109 33ff 	add.w	r3, r9, #4294967295
   150e2:	425a      	negs	r2, r3
   150e4:	415a      	adcs	r2, r3
   150e6:	2107      	movs	r1, #7
   150e8:	4638      	mov	r0, r7
   150ea:	f00b fd72 	bl	20bd2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   150ee:	f1a9 0102 	sub.w	r1, r9, #2
   150f2:	424a      	negs	r2, r1
   150f4:	414a      	adcs	r2, r1
   150f6:	4638      	mov	r0, r7
   150f8:	2108      	movs	r1, #8
   150fa:	f00b fd6a 	bl	20bd2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   150fe:	6862      	ldr	r2, [r4, #4]
   15100:	2109      	movs	r1, #9
   15102:	f002 0201 	and.w	r2, r2, #1
   15106:	4638      	mov	r0, r7
   15108:	f00b fd63 	bl	20bd2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1510c:	4642      	mov	r2, r8
   1510e:	210a      	movs	r1, #10
   15110:	4638      	mov	r0, r7
   15112:	f00b fd5e 	bl	20bd2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15116:	6862      	ldr	r2, [r4, #4]
   15118:	210c      	movs	r1, #12
   1511a:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1511e:	4638      	mov	r0, r7
   15120:	f00b fd57 	bl	20bd2 <atomic_set_bit_to>
	return 0;
   15124:	f04f 0b00 	mov.w	fp, #0
   15128:	e709      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1512a:	b108      	cbz	r0, 15130 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
   1512c:	f00b fed1 	bl	20ed2 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15130:	2e00      	cmp	r6, #0
   15132:	d1ce      	bne.n	150d2 <bt_le_adv_start_legacy+0x1ca>
   15134:	e7c8      	b.n	150c8 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   15136:	f06f 0b0a 	mvn.w	fp, #10
   1513a:	e700      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1513c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15140:	e6fd      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15142:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15146:	e6fa      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
   15148:	4683      	mov	fp, r0
   1514a:	e6f8      	b.n	14f3e <bt_le_adv_start_legacy+0x36>
   1514c:	2000037c 	.word	0x2000037c
   15150:	200002b0 	.word	0x200002b0

00015154 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15156:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15158:	9a06      	ldr	r2, [sp, #24]
{
   1515a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1515c:	e9cd 3200 	strd	r3, r2, [sp]
   15160:	462b      	mov	r3, r5
   15162:	460a      	mov	r2, r1
   15164:	4601      	mov	r1, r0
   15166:	4811      	ldr	r0, [pc, #68]	; (151ac <bt_le_adv_start+0x58>)
   15168:	f7ff fece 	bl	14f08 <bt_le_adv_start_legacy>
   1516c:	4621      	mov	r1, r4
   1516e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15170:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   15172:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   15176:	429d      	cmp	r5, r3
   15178:	d102      	bne.n	15180 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1517a:	4630      	mov	r0, r6
   1517c:	b002      	add	sp, #8
   1517e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15180:	880a      	ldrh	r2, [r1, #0]
   15182:	4282      	cmp	r2, r0
   15184:	d104      	bne.n	15190 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   15186:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15188:	b112      	cbz	r2, 15190 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1518a:	7812      	ldrb	r2, [r2, #0]
   1518c:	07d2      	lsls	r2, r2, #31
   1518e:	d402      	bmi.n	15196 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15190:	3301      	adds	r3, #1
   15192:	3108      	adds	r1, #8
   15194:	e7ef      	b.n	15176 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   15196:	4906      	ldr	r1, [pc, #24]	; (151b0 <bt_le_adv_start+0x5c>)
   15198:	4806      	ldr	r0, [pc, #24]	; (151b4 <bt_le_adv_start+0x60>)
   1519a:	f00e fbcb 	bl	23934 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1519e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   151a2:	2300      	movs	r3, #0
   151a4:	4803      	ldr	r0, [pc, #12]	; (151b4 <bt_le_adv_start+0x60>)
   151a6:	f006 fe37 	bl	1be18 <k_work_reschedule>
   151aa:	e7e6      	b.n	1517a <bt_le_adv_start+0x26>
   151ac:	200002c8 	.word	0x200002c8
   151b0:	00020d5f 	.word	0x00020d5f
   151b4:	200002e0 	.word	0x200002e0

000151b8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   151b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   151ba:	4821      	ldr	r0, [pc, #132]	; (15240 <bt_le_adv_stop+0x88>)
   151bc:	f00b fdcc 	bl	20d58 <bt_le_lim_adv_cancel_timeout>
   151c0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   151c4:	481f      	ldr	r0, [pc, #124]	; (15244 <bt_le_adv_stop+0x8c>)
   151c6:	f00b fc94 	bl	20af2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   151ca:	481e      	ldr	r0, [pc, #120]	; (15244 <bt_le_adv_stop+0x8c>)
   151cc:	f00b fc8b 	bl	20ae6 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   151d0:	0642      	lsls	r2, r0, #25
   151d2:	f3c0 1380 	ubfx	r3, r0, #6, #1
   151d6:	d530      	bpl.n	1523a <bt_le_adv_stop+0x82>
   151d8:	481a      	ldr	r0, [pc, #104]	; (15244 <bt_le_adv_stop+0x8c>)
   151da:	f00b fc84 	bl	20ae6 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   151de:	0583      	lsls	r3, r0, #22
   151e0:	d521      	bpl.n	15226 <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   151e2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   151e4:	4818      	ldr	r0, [pc, #96]	; (15248 <bt_le_adv_stop+0x90>)
   151e6:	9300      	str	r3, [sp, #0]
   151e8:	2207      	movs	r2, #7
   151ea:	4669      	mov	r1, sp
   151ec:	f8cd 3003 	str.w	r3, [sp, #3]
   151f0:	f00b f8e2 	bl	203b8 <memcmp>
   151f4:	4b15      	ldr	r3, [pc, #84]	; (1524c <bt_le_adv_stop+0x94>)
   151f6:	b9e0      	cbnz	r0, 15232 <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   151f8:	4a15      	ldr	r2, [pc, #84]	; (15250 <bt_le_adv_stop+0x98>)
   151fa:	8891      	ldrh	r1, [r2, #4]
   151fc:	6810      	ldr	r0, [r2, #0]
   151fe:	7992      	ldrb	r2, [r2, #6]
   15200:	f8ad 100c 	strh.w	r1, [sp, #12]
   15204:	f88d 200e 	strb.w	r2, [sp, #14]
   15208:	9002      	str	r0, [sp, #8]
   1520a:	2204      	movs	r2, #4
   1520c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1520e:	7e18      	ldrb	r0, [r3, #24]
   15210:	f000 fb5c 	bl	158cc <bt_conn_lookup_state_le>
   15214:	4604      	mov	r4, r0
	if (conn) {
   15216:	b130      	cbz	r0, 15226 <bt_le_adv_stop+0x6e>
		conn->err = status;
   15218:	2100      	movs	r1, #0
   1521a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1521c:	f000 f9ca 	bl	155b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   15220:	4620      	mov	r0, r4
   15222:	f00b fe56 	bl	20ed2 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   15226:	4806      	ldr	r0, [pc, #24]	; (15240 <bt_le_adv_stop+0x88>)
   15228:	2100      	movs	r1, #0
   1522a:	f00b fd70 	bl	20d0e <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1522e:	b004      	add	sp, #16
   15230:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15232:	2205      	movs	r2, #5
   15234:	f103 0121 	add.w	r1, r3, #33	; 0x21
   15238:	e7e9      	b.n	1520e <bt_le_adv_stop+0x56>
		return 0;
   1523a:	4618      	mov	r0, r3
   1523c:	e7f7      	b.n	1522e <bt_le_adv_stop+0x76>
   1523e:	bf00      	nop
   15240:	200002c8 	.word	0x200002c8
   15244:	200002d8 	.word	0x200002d8
   15248:	200002d1 	.word	0x200002d1
   1524c:	200002b0 	.word	0x200002b0
   15250:	000244c9 	.word	0x000244c9

00015254 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15256:	481e      	ldr	r0, [pc, #120]	; (152d0 <bt_le_adv_resume+0x7c>)
   15258:	4c1d      	ldr	r4, [pc, #116]	; (152d0 <bt_le_adv_resume+0x7c>)
   1525a:	f00b fc44 	bl	20ae6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1525e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   15262:	d032      	beq.n	152ca <bt_le_adv_resume+0x76>
   15264:	4620      	mov	r0, r4
   15266:	f00b fc3e 	bl	20ae6 <atomic_get>
   1526a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1526c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   15270:	d42b      	bmi.n	152ca <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15272:	4620      	mov	r0, r4
   15274:	f00b fc37 	bl	20ae6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15278:	0583      	lsls	r3, r0, #22
   1527a:	d526      	bpl.n	152ca <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   1527c:	a901      	add	r1, sp, #4
   1527e:	f1a4 0010 	sub.w	r0, r4, #16
   15282:	f7ff fdf9 	bl	14e78 <le_adv_start_add_conn>
	if (err) {
   15286:	bb00      	cbnz	r0, 152ca <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15288:	2101      	movs	r1, #1
   1528a:	f1a4 0010 	sub.w	r0, r4, #16
   1528e:	f00b fd3e 	bl	20d0e <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   15292:	b150      	cbz	r0, 152aa <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15294:	4629      	mov	r1, r5
   15296:	9801      	ldr	r0, [sp, #4]
   15298:	f000 f98c 	bl	155b4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1529c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   152a0:	4620      	mov	r0, r4
   152a2:	f00b fc26 	bl	20af2 <atomic_and>
	return (old & mask) != 0;
   152a6:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   152aa:	9801      	ldr	r0, [sp, #4]
   152ac:	f00b fe11 	bl	20ed2 <bt_conn_unref>
	if (persist_paused) {
   152b0:	b15d      	cbz	r5, 152ca <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152b2:	f3bf 8f5b 	dmb	ish
   152b6:	e854 3f00 	ldrex	r3, [r4]
   152ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   152be:	e844 3200 	strex	r2, r3, [r4]
   152c2:	2a00      	cmp	r2, #0
   152c4:	d1f7      	bne.n	152b6 <bt_le_adv_resume+0x62>
   152c6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   152ca:	b003      	add	sp, #12
   152cc:	bd30      	pop	{r4, r5, pc}
   152ce:	bf00      	nop
   152d0:	200002d8 	.word	0x200002d8

000152d4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   152d4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   152d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   152da:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   152dc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   152de:	4801      	ldr	r0, [pc, #4]	; (152e4 <tx_free+0x10>)
   152e0:	f00e ba3a 	b.w	23758 <k_queue_append>
   152e4:	20000ba8 	.word	0x20000ba8

000152e8 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   152e8:	4b0e      	ldr	r3, [pc, #56]	; (15324 <notify_connected+0x3c>)
{
   152ea:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   152ec:	681d      	ldr	r5, [r3, #0]
{
   152ee:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   152f0:	b955      	cbnz	r5, 15308 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152f2:	4d0d      	ldr	r5, [pc, #52]	; (15328 <notify_connected+0x40>)
   152f4:	4e0d      	ldr	r6, [pc, #52]	; (1532c <notify_connected+0x44>)
   152f6:	7a61      	ldrb	r1, [r4, #9]
   152f8:	42b5      	cmp	r5, r6
   152fa:	d30c      	bcc.n	15316 <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   152fc:	b989      	cbnz	r1, 15322 <notify_connected+0x3a>
		bt_gatt_connected(conn);
   152fe:	4620      	mov	r0, r4
	}
}
   15300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   15304:	f001 be2e 	b.w	16f64 <bt_gatt_connected>
		if (cb->connected) {
   15308:	682b      	ldr	r3, [r5, #0]
   1530a:	b113      	cbz	r3, 15312 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   1530c:	7a61      	ldrb	r1, [r4, #9]
   1530e:	4620      	mov	r0, r4
   15310:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15312:	692d      	ldr	r5, [r5, #16]
   15314:	e7ec      	b.n	152f0 <notify_connected+0x8>
		if (cb->connected) {
   15316:	682b      	ldr	r3, [r5, #0]
   15318:	b10b      	cbz	r3, 1531e <notify_connected+0x36>
			cb->connected(conn, conn->err);
   1531a:	4620      	mov	r0, r4
   1531c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1531e:	3514      	adds	r5, #20
   15320:	e7e9      	b.n	152f6 <notify_connected+0xe>
}
   15322:	bd70      	pop	{r4, r5, r6, pc}
   15324:	20002750 	.word	0x20002750
   15328:	000243ec 	.word	0x000243ec
   1532c:	000243ec 	.word	0x000243ec

00015330 <send_frag>:
{
   15330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15334:	694d      	ldr	r5, [r1, #20]
{
   15336:	4604      	mov	r4, r0
   15338:	460e      	mov	r6, r1
   1533a:	4690      	mov	r8, r2
   1533c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1533e:	f04f 33ff 	mov.w	r3, #4294967295
   15342:	483f      	ldr	r0, [pc, #252]	; (15440 <send_frag+0x110>)
   15344:	f04f 32ff 	mov.w	r2, #4294967295
   15348:	f006 fb56 	bl	1b9f8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1534c:	7aa3      	ldrb	r3, [r4, #10]
   1534e:	2b07      	cmp	r3, #7
   15350:	d146      	bne.n	153e0 <send_frag+0xb0>
	__asm__ volatile(
   15352:	f04f 0340 	mov.w	r3, #64	; 0x40
   15356:	f3ef 8211 	mrs	r2, BASEPRI
   1535a:	f383 8812 	msr	BASEPRI_MAX, r3
   1535e:	f3bf 8f6f 	isb	sy
	if (tx) {
   15362:	2d00      	cmp	r5, #0
   15364:	d04e      	beq.n	15404 <send_frag+0xd4>
	parent->next = child;
   15366:	2300      	movs	r3, #0
   15368:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1536a:	69a3      	ldr	r3, [r4, #24]
   1536c:	2b00      	cmp	r3, #0
   1536e:	d146      	bne.n	153fe <send_frag+0xce>
	list->head = node;
   15370:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   15374:	f382 8811 	msr	BASEPRI, r2
   15378:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1537c:	2104      	movs	r1, #4
   1537e:	f106 0008 	add.w	r0, r6, #8
   15382:	f00c ffed 	bl	22360 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15386:	8823      	ldrh	r3, [r4, #0]
   15388:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1538c:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15390:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15392:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15396:	3b04      	subs	r3, #4
   15398:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1539a:	2302      	movs	r3, #2
   1539c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1539e:	4630      	mov	r0, r6
   153a0:	f7ff f822 	bl	143e8 <bt_send>
	if (err) {
   153a4:	2800      	cmp	r0, #0
   153a6:	d049      	beq.n	1543c <send_frag+0x10c>
	__asm__ volatile(
   153a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   153ac:	f3ef 8111 	mrs	r1, BASEPRI
   153b0:	f383 8812 	msr	BASEPRI_MAX, r3
   153b4:	f3bf 8f6f 	isb	sy
		if (tx) {
   153b8:	2d00      	cmp	r5, #0
   153ba:	d039      	beq.n	15430 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   153bc:	6963      	ldr	r3, [r4, #20]
   153be:	2200      	movs	r2, #0
   153c0:	b153      	cbz	r3, 153d8 <send_frag+0xa8>
   153c2:	429d      	cmp	r5, r3
   153c4:	d131      	bne.n	1542a <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   153c6:	682b      	ldr	r3, [r5, #0]
   153c8:	bb4a      	cbnz	r2, 1541e <send_frag+0xee>
   153ca:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   153cc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   153ce:	4295      	cmp	r5, r2
   153d0:	d100      	bne.n	153d4 <send_frag+0xa4>
	list->tail = node;
   153d2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   153d4:	2300      	movs	r3, #0
   153d6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   153d8:	f381 8811 	msr	BASEPRI, r1
   153dc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   153e0:	4817      	ldr	r0, [pc, #92]	; (15440 <send_frag+0x110>)
   153e2:	f006 fae3 	bl	1b9ac <z_impl_k_sem_give>
	if (tx) {
   153e6:	b115      	cbz	r5, 153ee <send_frag+0xbe>
		tx_free(tx);
   153e8:	4628      	mov	r0, r5
   153ea:	f7ff ff73 	bl	152d4 <tx_free>
	if (always_consume) {
   153ee:	b11f      	cbz	r7, 153f8 <send_frag+0xc8>
		net_buf_unref(buf);
   153f0:	4630      	mov	r0, r6
   153f2:	f001 ff0d 	bl	17210 <net_buf_unref>
	return false;
   153f6:	2700      	movs	r7, #0
}
   153f8:	4638      	mov	r0, r7
   153fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   153fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15400:	61a5      	str	r5, [r4, #24]
}
   15402:	e7b7      	b.n	15374 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   15404:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15406:	b133      	cbz	r3, 15416 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   15408:	f103 090c 	add.w	r9, r3, #12
   1540c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1540e:	3301      	adds	r3, #1
   15410:	f8c9 3000 	str.w	r3, [r9]
   15414:	e7ae      	b.n	15374 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15416:	69e3      	ldr	r3, [r4, #28]
   15418:	f104 091c 	add.w	r9, r4, #28
   1541c:	e7f7      	b.n	1540e <send_frag+0xde>
	parent->next = child;
   1541e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   15420:	69a3      	ldr	r3, [r4, #24]
   15422:	429d      	cmp	r5, r3
	list->tail = node;
   15424:	bf08      	it	eq
   15426:	61a2      	streq	r2, [r4, #24]
}
   15428:	e7d4      	b.n	153d4 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1542a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1542c:	681b      	ldr	r3, [r3, #0]
   1542e:	e7c7      	b.n	153c0 <send_frag+0x90>
			(*pending_no_cb)--;
   15430:	f8d9 3000 	ldr.w	r3, [r9]
   15434:	3b01      	subs	r3, #1
   15436:	f8c9 3000 	str.w	r3, [r9]
   1543a:	e7cd      	b.n	153d8 <send_frag+0xa8>
	return true;
   1543c:	2701      	movs	r7, #1
   1543e:	e7db      	b.n	153f8 <send_frag+0xc8>
   15440:	200003b0 	.word	0x200003b0

00015444 <bt_conn_get_pkts>:
}
   15444:	4800      	ldr	r0, [pc, #0]	; (15448 <bt_conn_get_pkts+0x4>)
   15446:	4770      	bx	lr
   15448:	200003b0 	.word	0x200003b0

0001544c <bt_conn_new>:
{
   1544c:	b538      	push	{r3, r4, r5, lr}
   1544e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   15450:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15452:	2501      	movs	r5, #1
   15454:	428b      	cmp	r3, r1
   15456:	d102      	bne.n	1545e <bt_conn_new+0x12>
		return NULL;
   15458:	2400      	movs	r4, #0
}
   1545a:	4620      	mov	r0, r4
   1545c:	bd38      	pop	{r3, r4, r5, pc}
   1545e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   15462:	f3bf 8f5b 	dmb	ish
   15466:	e852 0f00 	ldrex	r0, [r2]
   1546a:	2800      	cmp	r0, #0
   1546c:	d104      	bne.n	15478 <bt_conn_new+0x2c>
   1546e:	e842 5c00 	strex	ip, r5, [r2]
   15472:	f1bc 0f00 	cmp.w	ip, #0
   15476:	d1f6      	bne.n	15466 <bt_conn_new+0x1a>
   15478:	f3bf 8f5b 	dmb	ish
   1547c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15480:	d002      	beq.n	15488 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   15482:	3301      	adds	r3, #1
   15484:	4604      	mov	r4, r0
   15486:	e7e5      	b.n	15454 <bt_conn_new+0x8>
	if (!conn) {
   15488:	2c00      	cmp	r4, #0
   1548a:	d0e6      	beq.n	1545a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1548c:	22b8      	movs	r2, #184	; 0xb8
   1548e:	2100      	movs	r1, #0
   15490:	4620      	mov	r0, r4
   15492:	f00a ffc3 	bl	2041c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15496:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1549a:	4904      	ldr	r1, [pc, #16]	; (154ac <bt_conn_new+0x60>)
   1549c:	f00e fa4a 	bl	23934 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   154a0:	4903      	ldr	r1, [pc, #12]	; (154b0 <bt_conn_new+0x64>)
   154a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   154a6:	f00e fa1f 	bl	238e8 <k_work_init>
	return conn;
   154aa:	e7d6      	b.n	1545a <bt_conn_new+0xe>
   154ac:	000159d5 	.word	0x000159d5
   154b0:	00020da9 	.word	0x00020da9

000154b4 <bt_conn_send_cb>:
{
   154b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154b6:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   154b8:	7a83      	ldrb	r3, [r0, #10]
   154ba:	2b07      	cmp	r3, #7
{
   154bc:	4604      	mov	r4, r0
   154be:	460d      	mov	r5, r1
   154c0:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   154c2:	d114      	bne.n	154ee <bt_conn_send_cb+0x3a>
	if (cb) {
   154c4:	b312      	cbz	r2, 1550c <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   154c6:	f006 ffb1 	bl	1c42c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   154ca:	4b13      	ldr	r3, [pc, #76]	; (15518 <bt_conn_send_cb+0x64>)
   154cc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   154ce:	4813      	ldr	r0, [pc, #76]	; (1551c <bt_conn_send_cb+0x68>)
   154d0:	bf07      	ittee	eq
   154d2:	2200      	moveq	r2, #0
   154d4:	2300      	moveq	r3, #0
   154d6:	f04f 32ff 	movne.w	r2, #4294967295
   154da:	f04f 33ff 	movne.w	r3, #4294967295
   154de:	f006 fa31 	bl	1b944 <z_impl_k_queue_get>
		if (!tx) {
   154e2:	b1a8      	cbz	r0, 15510 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   154e4:	7aa3      	ldrb	r3, [r4, #10]
   154e6:	2b07      	cmp	r3, #7
   154e8:	d004      	beq.n	154f4 <bt_conn_send_cb+0x40>
			tx_free(tx);
   154ea:	f7ff fef3 	bl	152d4 <tx_free>
		return -ENOTCONN;
   154ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   154f2:	e00a      	b.n	1550a <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   154f4:	2300      	movs	r3, #0
		tx->user_data = user_data;
   154f6:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   154fa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   154fc:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   154fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15502:	4629      	mov	r1, r5
   15504:	f00c fee2 	bl	222cc <net_buf_put>
	return 0;
   15508:	2000      	movs	r0, #0
}
   1550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   1550c:	614a      	str	r2, [r1, #20]
   1550e:	e7f6      	b.n	154fe <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   15510:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15514:	e7f9      	b.n	1550a <bt_conn_send_cb+0x56>
   15516:	bf00      	nop
   15518:	20002080 	.word	0x20002080
   1551c:	20000ba8 	.word	0x20000ba8

00015520 <bt_conn_prepare_events>:
{
   15520:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   15522:	4b1b      	ldr	r3, [pc, #108]	; (15590 <bt_conn_prepare_events+0x70>)
   15524:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15526:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   15528:	609a      	str	r2, [r3, #8]
{
   1552a:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1552c:	f00e fd35 	bl	23f9a <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15530:	f3bf 8f5b 	dmb	ish
   15534:	4b17      	ldr	r3, [pc, #92]	; (15594 <bt_conn_prepare_events+0x74>)
   15536:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1553a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1553e:	f104 0014 	add.w	r0, r4, #20
   15542:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   15544:	b90a      	cbnz	r2, 1554a <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   15546:	2001      	movs	r0, #1
}
   15548:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1554a:	7a9a      	ldrb	r2, [r3, #10]
   1554c:	b99a      	cbnz	r2, 15576 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1554e:	f3bf 8f5b 	dmb	ish
   15552:	1d1a      	adds	r2, r3, #4
   15554:	e852 5f00 	ldrex	r5, [r2]
   15558:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   1555c:	e842 ce00 	strex	lr, ip, [r2]
   15560:	f1be 0f00 	cmp.w	lr, #0
   15564:	d1f6      	bne.n	15554 <bt_conn_prepare_events+0x34>
   15566:	f3bf 8f5b 	dmb	ish
   1556a:	066a      	lsls	r2, r5, #25
   1556c:	d503      	bpl.n	15576 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   1556e:	4618      	mov	r0, r3
   15570:	f00b fc26 	bl	20dc0 <conn_cleanup>
   15574:	e7e7      	b.n	15546 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   15576:	7a8b      	ldrb	r3, [r1, #10]
   15578:	2b07      	cmp	r3, #7
   1557a:	d1e4      	bne.n	15546 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   1557c:	4b06      	ldr	r3, [pc, #24]	; (15598 <bt_conn_prepare_events+0x78>)
   1557e:	2200      	movs	r2, #0
   15580:	2104      	movs	r1, #4
   15582:	f00e fd0a 	bl	23f9a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15586:	2301      	movs	r3, #1
   15588:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1558c:	2002      	movs	r0, #2
	return ev_count;
   1558e:	e7db      	b.n	15548 <bt_conn_prepare_events+0x28>
   15590:	200005d0 	.word	0x200005d0
   15594:	20001b10 	.word	0x20001b10
   15598:	20001b48 	.word	0x20001b48

0001559c <bt_conn_lookup_handle>:
{
   1559c:	4602      	mov	r2, r0
   1559e:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   155a0:	2101      	movs	r1, #1
   155a2:	4803      	ldr	r0, [pc, #12]	; (155b0 <bt_conn_lookup_handle+0x14>)
   155a4:	f00b fcaf 	bl	20f06 <conn_lookup_handle>
}
   155a8:	2800      	cmp	r0, #0
   155aa:	bf38      	it	cc
   155ac:	2000      	movcc	r0, #0
   155ae:	bd08      	pop	{r3, pc}
   155b0:	20001b10 	.word	0x20001b10

000155b4 <bt_conn_set_state>:
{
   155b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   155b6:	7a85      	ldrb	r5, [r0, #10]
   155b8:	428d      	cmp	r5, r1
{
   155ba:	4604      	mov	r4, r0
	if (conn->state == state) {
   155bc:	f000 809d 	beq.w	156fa <bt_conn_set_state+0x146>
	conn->state = state;
   155c0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   155c2:	b925      	cbnz	r5, 155ce <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   155c4:	7883      	ldrb	r3, [r0, #2]
   155c6:	2b08      	cmp	r3, #8
   155c8:	d001      	beq.n	155ce <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   155ca:	f00b fc67 	bl	20e9c <bt_conn_ref>
	switch (conn->state) {
   155ce:	7aa3      	ldrb	r3, [r4, #10]
   155d0:	2b01      	cmp	r3, #1
   155d2:	d116      	bne.n	15602 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   155d4:	4d49      	ldr	r5, [pc, #292]	; (156fc <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
   155d6:	2600      	movs	r6, #0
	__asm__ volatile(
   155d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   155dc:	f3ef 8211 	mrs	r2, BASEPRI
   155e0:	f383 8812 	msr	BASEPRI_MAX, r3
   155e4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   155e8:	69e3      	ldr	r3, [r4, #28]
   155ea:	2b00      	cmp	r3, #0
   155ec:	d066      	beq.n	156bc <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   155ee:	3b01      	subs	r3, #1
   155f0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   155f2:	f382 8811 	msr	BASEPRI, r2
   155f6:	f3bf 8f6f 	isb	sy
   155fa:	4628      	mov	r0, r5
   155fc:	f006 f9d6 	bl	1b9ac <z_impl_k_sem_give>
}
   15600:	e7ea      	b.n	155d8 <bt_conn_set_state+0x24>
	switch (conn->state) {
   15602:	2b07      	cmp	r3, #7
   15604:	d009      	beq.n	1561a <bt_conn_set_state+0x66>
   15606:	2b00      	cmp	r3, #0
   15608:	d177      	bne.n	156fa <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1560a:	78a3      	ldrb	r3, [r4, #2]
   1560c:	2b04      	cmp	r3, #4
   1560e:	d11e      	bne.n	1564e <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   15610:	4620      	mov	r0, r4
}
   15612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15616:	f00b bc5c 	b.w	20ed2 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1561a:	78a3      	ldrb	r3, [r4, #2]
   1561c:	2b04      	cmp	r3, #4
   1561e:	d06c      	beq.n	156fa <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
   15620:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15624:	f00e f88c 	bl	23740 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15628:	4835      	ldr	r0, [pc, #212]	; (15700 <bt_conn_set_state+0x14c>)
   1562a:	2100      	movs	r1, #0
   1562c:	f007 f9f0 	bl	1ca10 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15630:	2300      	movs	r3, #0
	list->tail = NULL;
   15632:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15636:	78e3      	ldrb	r3, [r4, #3]
   15638:	2b01      	cmp	r3, #1
   1563a:	d15e      	bne.n	156fa <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
   1563c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15640:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15648:	2300      	movs	r3, #0
   1564a:	f006 bbb1 	b.w	1bdb0 <k_work_schedule>
		switch (old_state) {
   1564e:	3d01      	subs	r5, #1
   15650:	2d05      	cmp	r5, #5
   15652:	d852      	bhi.n	156fa <bt_conn_set_state+0x146>
   15654:	a301      	add	r3, pc, #4	; (adr r3, 1565c <bt_conn_set_state+0xa8>)
   15656:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1565a:	bf00      	nop
   1565c:	00015675 	.word	0x00015675
   15660:	000156af 	.word	0x000156af
   15664:	00015611 	.word	0x00015611
   15668:	00015611 	.word	0x00015611
   1566c:	000156af 	.word	0x000156af
   15670:	000156af 	.word	0x000156af
			tx_notify(conn);
   15674:	4620      	mov	r0, r4
   15676:	f00b fb74 	bl	20d62 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1567a:	78a3      	ldrb	r3, [r4, #2]
   1567c:	2b01      	cmp	r3, #1
   1567e:	d103      	bne.n	15688 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   15680:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15684:	f00e f962 	bl	2394c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15688:	f3bf 8f5b 	dmb	ish
   1568c:	3404      	adds	r4, #4
   1568e:	e854 3f00 	ldrex	r3, [r4]
   15692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15696:	e844 3200 	strex	r2, r3, [r4]
   1569a:	2a00      	cmp	r2, #0
   1569c:	d1f7      	bne.n	1568e <bt_conn_set_state+0xda>
   1569e:	f3bf 8f5b 	dmb	ish
   156a2:	4817      	ldr	r0, [pc, #92]	; (15700 <bt_conn_set_state+0x14c>)
}
   156a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   156a8:	2100      	movs	r1, #0
   156aa:	f007 b9b1 	b.w	1ca10 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   156ae:	7a63      	ldrb	r3, [r4, #9]
   156b0:	2b00      	cmp	r3, #0
   156b2:	d0ad      	beq.n	15610 <bt_conn_set_state+0x5c>
				notify_connected(conn);
   156b4:	4620      	mov	r0, r4
   156b6:	f7ff fe17 	bl	152e8 <notify_connected>
   156ba:	e7a9      	b.n	15610 <bt_conn_set_state+0x5c>
Z_GENLIST_IS_EMPTY(slist)
   156bc:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   156be:	b128      	cbz	r0, 156cc <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   156c0:	69a1      	ldr	r1, [r4, #24]
   156c2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   156c4:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   156c6:	4288      	cmp	r0, r1
	list->tail = node;
   156c8:	bf08      	it	eq
   156ca:	61a3      	streq	r3, [r4, #24]
   156cc:	f382 8811 	msr	BASEPRI, r2
   156d0:	f3bf 8f6f 	isb	sy
		if (!node) {
   156d4:	b188      	cbz	r0, 156fa <bt_conn_set_state+0x146>
	__asm__ volatile(
   156d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   156da:	f3ef 8311 	mrs	r3, BASEPRI
   156de:	f382 8812 	msr	BASEPRI_MAX, r2
   156e2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   156e6:	68c2      	ldr	r2, [r0, #12]
   156e8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   156ea:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   156ec:	f383 8811 	msr	BASEPRI, r3
   156f0:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   156f4:	f7ff fdee 	bl	152d4 <tx_free>
   156f8:	e77f      	b.n	155fa <bt_conn_set_state+0x46>
}
   156fa:	bd70      	pop	{r4, r5, r6, pc}
   156fc:	200003b0 	.word	0x200003b0
   15700:	200005d0 	.word	0x200005d0

00015704 <bt_conn_index>:
		index = conn - acl_conns;
   15704:	4b03      	ldr	r3, [pc, #12]	; (15714 <bt_conn_index+0x10>)
   15706:	1ac0      	subs	r0, r0, r3
   15708:	4b03      	ldr	r3, [pc, #12]	; (15718 <bt_conn_index+0x14>)
   1570a:	1180      	asrs	r0, r0, #6
   1570c:	4358      	muls	r0, r3
}
   1570e:	b2c0      	uxtb	r0, r0
   15710:	4770      	bx	lr
   15712:	bf00      	nop
   15714:	20001b10 	.word	0x20001b10
   15718:	aaaaaaab 	.word	0xaaaaaaab

0001571c <bt_conn_create_pdu_timeout>:
{
   1571c:	b538      	push	{r3, r4, r5, lr}
   1571e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   15720:	4906      	ldr	r1, [pc, #24]	; (1573c <bt_conn_create_pdu_timeout+0x20>)
   15722:	2800      	cmp	r0, #0
   15724:	bf08      	it	eq
   15726:	4608      	moveq	r0, r1
   15728:	f00c fdad 	bl	22286 <net_buf_alloc_fixed>
	if (!buf) {
   1572c:	4604      	mov	r4, r0
   1572e:	b118      	cbz	r0, 15738 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   15730:	1d29      	adds	r1, r5, #4
   15732:	3008      	adds	r0, #8
   15734:	f00c fdc6 	bl	222c4 <net_buf_simple_reserve>
}
   15738:	4620      	mov	r0, r4
   1573a:	bd38      	pop	{r3, r4, r5, pc}
   1573c:	20000bc0 	.word	0x20000bc0

00015740 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15742:	f3bf 8f5b 	dmb	ish
   15746:	6842      	ldr	r2, [r0, #4]
   15748:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1574c:	0592      	lsls	r2, r2, #22
{
   1574e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15750:	f100 0304 	add.w	r3, r0, #4
   15754:	d519      	bpl.n	1578a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15756:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1575a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1575e:	4291      	cmp	r1, r2
   15760:	d813      	bhi.n	1578a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15762:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   15766:	4291      	cmp	r1, r2
   15768:	d30f      	bcc.n	1578a <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1576a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   1576e:	4291      	cmp	r1, r2
   15770:	d10b      	bne.n	1578a <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15772:	f3bf 8f5b 	dmb	ish
   15776:	e853 2f00 	ldrex	r2, [r3]
   1577a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1577e:	e843 2100 	strex	r1, r2, [r3]
   15782:	2900      	cmp	r1, #0
   15784:	d1f7      	bne.n	15776 <notify_le_param_updated+0x36>
   15786:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1578a:	4b10      	ldr	r3, [pc, #64]	; (157cc <notify_le_param_updated+0x8c>)
   1578c:	681d      	ldr	r5, [r3, #0]
   1578e:	b925      	cbnz	r5, 1579a <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15790:	4d0f      	ldr	r5, [pc, #60]	; (157d0 <notify_le_param_updated+0x90>)
   15792:	4f10      	ldr	r7, [pc, #64]	; (157d4 <notify_le_param_updated+0x94>)
   15794:	42bd      	cmp	r5, r7
   15796:	d30c      	bcc.n	157b2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1579a:	68ee      	ldr	r6, [r5, #12]
   1579c:	b13e      	cbz	r6, 157ae <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1579e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   157a2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   157a6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   157aa:	4620      	mov	r0, r4
   157ac:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   157ae:	692d      	ldr	r5, [r5, #16]
   157b0:	e7ed      	b.n	1578e <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   157b2:	68ee      	ldr	r6, [r5, #12]
   157b4:	b13e      	cbz	r6, 157c6 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   157b6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   157ba:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   157be:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   157c2:	4620      	mov	r0, r4
   157c4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   157c6:	3514      	adds	r5, #20
   157c8:	e7e4      	b.n	15794 <notify_le_param_updated+0x54>
   157ca:	bf00      	nop
   157cc:	20002750 	.word	0x20002750
   157d0:	000243ec 	.word	0x000243ec
   157d4:	000243ec 	.word	0x000243ec

000157d8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   157d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157dc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   157de:	4608      	mov	r0, r1
{
   157e0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   157e2:	f00a fffa 	bl	207da <bt_le_conn_params_valid>
   157e6:	4605      	mov	r5, r0
   157e8:	b918      	cbnz	r0, 157f2 <le_param_req+0x1a>
		return false;
   157ea:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   157ec:	4628      	mov	r0, r5
   157ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   157f2:	4b13      	ldr	r3, [pc, #76]	; (15840 <le_param_req+0x68>)
   157f4:	681e      	ldr	r6, [r3, #0]
   157f6:	b946      	cbnz	r6, 1580a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   157f8:	4e12      	ldr	r6, [pc, #72]	; (15844 <le_param_req+0x6c>)
   157fa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15848 <le_param_req+0x70>
   157fe:	4546      	cmp	r6, r8
   15800:	d2f4      	bcs.n	157ec <le_param_req+0x14>
		if (!cb->le_param_req) {
   15802:	68b3      	ldr	r3, [r6, #8]
   15804:	b983      	cbnz	r3, 15828 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15806:	3614      	adds	r6, #20
   15808:	e7f9      	b.n	157fe <le_param_req+0x26>
		if (!cb->le_param_req) {
   1580a:	68b3      	ldr	r3, [r6, #8]
   1580c:	b90b      	cbnz	r3, 15812 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1580e:	6936      	ldr	r6, [r6, #16]
   15810:	e7f1      	b.n	157f6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15812:	4621      	mov	r1, r4
   15814:	4638      	mov	r0, r7
   15816:	4798      	blx	r3
   15818:	2800      	cmp	r0, #0
   1581a:	d0e6      	beq.n	157ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1581c:	4620      	mov	r0, r4
   1581e:	f00a ffdc 	bl	207da <bt_le_conn_params_valid>
   15822:	2800      	cmp	r0, #0
   15824:	d1f3      	bne.n	1580e <le_param_req+0x36>
   15826:	e7e0      	b.n	157ea <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15828:	4621      	mov	r1, r4
   1582a:	4638      	mov	r0, r7
   1582c:	4798      	blx	r3
   1582e:	2800      	cmp	r0, #0
   15830:	d0db      	beq.n	157ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15832:	4620      	mov	r0, r4
   15834:	f00a ffd1 	bl	207da <bt_le_conn_params_valid>
   15838:	2800      	cmp	r0, #0
   1583a:	d1e4      	bne.n	15806 <le_param_req+0x2e>
   1583c:	e7d5      	b.n	157ea <le_param_req+0x12>
   1583e:	bf00      	nop
   15840:	20002750 	.word	0x20002750
   15844:	000243ec 	.word	0x000243ec
   15848:	000243ec 	.word	0x000243ec

0001584c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1584c:	4b02      	ldr	r3, [pc, #8]	; (15858 <bt_conn_cb_register+0xc>)
   1584e:	681a      	ldr	r2, [r3, #0]
   15850:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   15852:	6018      	str	r0, [r3, #0]
}
   15854:	4770      	bx	lr
   15856:	bf00      	nop
   15858:	20002750 	.word	0x20002750

0001585c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1585c:	b570      	push	{r4, r5, r6, lr}
   1585e:	4606      	mov	r6, r0
   15860:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15862:	4809      	ldr	r0, [pc, #36]	; (15888 <bt_conn_add_le+0x2c>)
   15864:	2101      	movs	r1, #1
   15866:	f7ff fdf1 	bl	1544c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1586a:	4604      	mov	r4, r0
   1586c:	b150      	cbz	r0, 15884 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   1586e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   15870:	2207      	movs	r2, #7
   15872:	4629      	mov	r1, r5
   15874:	3088      	adds	r0, #136	; 0x88
   15876:	f00a fdc6 	bl	20406 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1587a:	2301      	movs	r3, #1
   1587c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1587e:	4b03      	ldr	r3, [pc, #12]	; (1588c <bt_conn_add_le+0x30>)
   15880:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15884:	4620      	mov	r0, r4
   15886:	bd70      	pop	{r4, r5, r6, pc}
   15888:	20001b10 	.word	0x20001b10
   1588c:	00280018 	.word	0x00280018

00015890 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15890:	b570      	push	{r4, r5, r6, lr}
   15892:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15894:	480c      	ldr	r0, [pc, #48]	; (158c8 <bt_conn_lookup_addr_le+0x38>)
{
   15896:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15898:	f00b fb00 	bl	20e9c <bt_conn_ref>

		if (!conn) {
   1589c:	4604      	mov	r4, r0
   1589e:	b128      	cbz	r0, 158ac <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   158a0:	7883      	ldrb	r3, [r0, #2]
   158a2:	2b01      	cmp	r3, #1
   158a4:	d004      	beq.n	158b0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   158a6:	f00b fb14 	bl	20ed2 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   158aa:	2400      	movs	r4, #0
}
   158ac:	4620      	mov	r0, r4
   158ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   158b0:	4629      	mov	r1, r5
   158b2:	4632      	mov	r2, r6
   158b4:	f00b fb54 	bl	20f60 <bt_conn_is_peer_addr_le>
   158b8:	4605      	mov	r5, r0
   158ba:	2800      	cmp	r0, #0
   158bc:	d1f6      	bne.n	158ac <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   158be:	4620      	mov	r0, r4
   158c0:	f00b fb07 	bl	20ed2 <bt_conn_unref>
	return NULL;
   158c4:	462c      	mov	r4, r5
			continue;
   158c6:	e7f1      	b.n	158ac <bt_conn_lookup_addr_le+0x1c>
   158c8:	20001b10 	.word	0x20001b10

000158cc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   158cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158ce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   158d0:	480e      	ldr	r0, [pc, #56]	; (1590c <bt_conn_lookup_state_le+0x40>)
{
   158d2:	460e      	mov	r6, r1
   158d4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   158d6:	f00b fae1 	bl	20e9c <bt_conn_ref>

		if (!conn) {
   158da:	4604      	mov	r4, r0
   158dc:	b1a0      	cbz	r0, 15908 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   158de:	7883      	ldrb	r3, [r0, #2]
   158e0:	2b01      	cmp	r3, #1
   158e2:	d003      	beq.n	158ec <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   158e4:	f00b faf5 	bl	20ed2 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   158e8:	2400      	movs	r4, #0
			continue;
   158ea:	e00d      	b.n	15908 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   158ec:	b136      	cbz	r6, 158fc <bt_conn_lookup_state_le+0x30>
   158ee:	4632      	mov	r2, r6
   158f0:	4629      	mov	r1, r5
   158f2:	f00b fb35 	bl	20f60 <bt_conn_is_peer_addr_le>
   158f6:	b908      	cbnz	r0, 158fc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   158f8:	4620      	mov	r0, r4
   158fa:	e7f3      	b.n	158e4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   158fc:	7aa3      	ldrb	r3, [r4, #10]
   158fe:	42bb      	cmp	r3, r7
   15900:	d1fa      	bne.n	158f8 <bt_conn_lookup_state_le+0x2c>
   15902:	7a23      	ldrb	r3, [r4, #8]
   15904:	42ab      	cmp	r3, r5
   15906:	d1f7      	bne.n	158f8 <bt_conn_lookup_state_le+0x2c>
}
   15908:	4620      	mov	r0, r4
   1590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1590c:	20001b10 	.word	0x20001b10

00015910 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   15910:	b510      	push	{r4, lr}
	info->type = conn->type;
   15912:	7882      	ldrb	r2, [r0, #2]
   15914:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   15916:	78c4      	ldrb	r4, [r0, #3]
   15918:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1591a:	7a03      	ldrb	r3, [r0, #8]
   1591c:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   1591e:	2a01      	cmp	r2, #1
   15920:	d11c      	bne.n	1595c <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   15922:	f100 0288 	add.w	r2, r0, #136	; 0x88
   15926:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   15928:	4a0e      	ldr	r2, [pc, #56]	; (15964 <bt_conn_get_info+0x54>)
   1592a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1592e:	4413      	add	r3, r2
   15930:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   15932:	f100 0296 	add.w	r2, r0, #150	; 0x96
   15936:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   1593a:	b964      	cbnz	r4, 15956 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1593c:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   15940:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   15944:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   15946:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   1594a:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   1594c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   15950:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   15952:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   15954:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   15956:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1595a:	e7f1      	b.n	15940 <bt_conn_get_info+0x30>
	return -EINVAL;
   1595c:	f06f 0015 	mvn.w	r0, #21
   15960:	e7f8      	b.n	15954 <bt_conn_get_info+0x44>
   15962:	bf00      	nop
   15964:	200002b0 	.word	0x200002b0

00015968 <send_conn_le_param_update>:
{
   15968:	b538      	push	{r3, r4, r5, lr}
   1596a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1596c:	4608      	mov	r0, r1
{
   1596e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15970:	f00a ff33 	bl	207da <bt_le_conn_params_valid>
   15974:	b348      	cbz	r0, 159ca <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15976:	4b16      	ldr	r3, [pc, #88]	; (159d0 <send_conn_le_param_update+0x68>)
   15978:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1597c:	0799      	lsls	r1, r3, #30
   1597e:	d407      	bmi.n	15990 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15980:	78e3      	ldrb	r3, [r4, #3]
   15982:	b183      	cbz	r3, 159a6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15984:	4629      	mov	r1, r5
   15986:	4620      	mov	r0, r4
}
   15988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1598c:	f000 b9b2 	b.w	15cf4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15990:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15994:	079a      	lsls	r2, r3, #30
   15996:	d5f3      	bpl.n	15980 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15998:	f3bf 8f5b 	dmb	ish
   1599c:	6863      	ldr	r3, [r4, #4]
   1599e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   159a2:	055b      	lsls	r3, r3, #21
   159a4:	d4ec      	bmi.n	15980 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   159a6:	4629      	mov	r1, r5
   159a8:	4620      	mov	r0, r4
   159aa:	f00b fb01 	bl	20fb0 <bt_conn_le_conn_update>
		if (rc == 0) {
   159ae:	b958      	cbnz	r0, 159c8 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   159b0:	882b      	ldrh	r3, [r5, #0]
   159b2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   159b6:	886b      	ldrh	r3, [r5, #2]
   159b8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   159bc:	88ab      	ldrh	r3, [r5, #4]
   159be:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   159c2:	88eb      	ldrh	r3, [r5, #6]
   159c4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   159c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   159ca:	f06f 0015 	mvn.w	r0, #21
   159ce:	e7fb      	b.n	159c8 <send_conn_le_param_update+0x60>
   159d0:	200002b0 	.word	0x200002b0

000159d4 <deferred_work>:
{
   159d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   159d6:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   159da:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   159dc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   159e0:	b9f3      	cbnz	r3, 15a20 <deferred_work+0x4c>
		bt_l2cap_disconnected(conn);
   159e2:	4630      	mov	r0, r6
   159e4:	f00b fb69 	bl	210ba <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   159e8:	4b22      	ldr	r3, [pc, #136]	; (15a74 <deferred_work+0xa0>)
   159ea:	681d      	ldr	r5, [r3, #0]
   159ec:	b945      	cbnz	r5, 15a00 <deferred_work+0x2c>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   159ee:	4d22      	ldr	r5, [pc, #136]	; (15a78 <deferred_work+0xa4>)
   159f0:	4f22      	ldr	r7, [pc, #136]	; (15a7c <deferred_work+0xa8>)
   159f2:	42bd      	cmp	r5, r7
   159f4:	d30c      	bcc.n	15a10 <deferred_work+0x3c>
		bt_conn_unref(conn);
   159f6:	4630      	mov	r0, r6
   159f8:	f00b fa6b 	bl	20ed2 <bt_conn_unref>
}
   159fc:	b003      	add	sp, #12
   159fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   15a00:	686b      	ldr	r3, [r5, #4]
   15a02:	b11b      	cbz	r3, 15a0c <deferred_work+0x38>
			cb->disconnected(conn, conn->err);
   15a04:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15a08:	4630      	mov	r0, r6
   15a0a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15a0c:	692d      	ldr	r5, [r5, #16]
   15a0e:	e7ed      	b.n	159ec <deferred_work+0x18>
		if (cb->disconnected) {
   15a10:	686b      	ldr	r3, [r5, #4]
   15a12:	b11b      	cbz	r3, 15a1c <deferred_work+0x48>
			cb->disconnected(conn, conn->err);
   15a14:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15a18:	4630      	mov	r0, r6
   15a1a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15a1c:	3514      	adds	r5, #20
   15a1e:	e7e8      	b.n	159f2 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   15a20:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15a24:	2b01      	cmp	r3, #1
   15a26:	d1e9      	bne.n	159fc <deferred_work+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15a2c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   15a30:	e855 3f00 	ldrex	r3, [r5]
   15a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   15a38:	e845 2100 	strex	r1, r2, [r5]
   15a3c:	2900      	cmp	r1, #0
   15a3e:	d1f7      	bne.n	15a30 <deferred_work+0x5c>
   15a40:	f3bf 8f5b 	dmb	ish
   15a44:	059b      	lsls	r3, r3, #22
   15a46:	d507      	bpl.n	15a58 <deferred_work+0x84>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15a48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15a4a:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   15a4c:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15a4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15a50:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15a52:	4630      	mov	r0, r6
   15a54:	f7ff ff88 	bl	15968 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15a58:	f3bf 8f5b 	dmb	ish
   15a5c:	e855 3f00 	ldrex	r3, [r5]
   15a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15a64:	e845 3200 	strex	r2, r3, [r5]
   15a68:	2a00      	cmp	r2, #0
   15a6a:	d1f7      	bne.n	15a5c <deferred_work+0x88>
   15a6c:	f3bf 8f5b 	dmb	ish
   15a70:	e7c4      	b.n	159fc <deferred_work+0x28>
   15a72:	bf00      	nop
   15a74:	20002750 	.word	0x20002750
   15a78:	000243ec 	.word	0x000243ec
   15a7c:	000243ec 	.word	0x000243ec

00015a80 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15a80:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15a82:	4801      	ldr	r0, [pc, #4]	; (15a88 <bt_conn_create_frag_timeout+0x8>)
   15a84:	f7ff be4a 	b.w	1571c <bt_conn_create_pdu_timeout>
   15a88:	20000c18 	.word	0x20000c18

00015a8c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   15a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a90:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15a92:	f04f 33ff 	mov.w	r3, #4294967295
   15a96:	f04f 32ff 	mov.w	r2, #4294967295
   15a9a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   15a9c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15a9e:	f7ff ffef 	bl	15a80 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15aa2:	7833      	ldrb	r3, [r6, #0]
   15aa4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15aa6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15aa8:	f04f 0600 	mov.w	r6, #0
   15aac:	d005      	beq.n	15aba <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   15aae:	f001 fbaf 	bl	17210 <net_buf_unref>
		return NULL;
   15ab2:	4635      	mov	r5, r6
}
   15ab4:	4628      	mov	r0, r5
   15ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15aba:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15abc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15ac0:	4e0c      	ldr	r6, [pc, #48]	; (15af4 <create_frag.isra.0+0x68>)
   15ac2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15ac4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15ac8:	f00c fc6e 	bl	223a8 <net_buf_simple_tailroom>
   15acc:	4580      	cmp	r8, r0
   15ace:	d20c      	bcs.n	15aea <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   15ad0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15ad4:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15ad8:	4632      	mov	r2, r6
   15ada:	4638      	mov	r0, r7
   15adc:	f00c fc2f 	bl	2233e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15ae0:	4631      	mov	r1, r6
   15ae2:	4620      	mov	r0, r4
   15ae4:	f00c fc44 	bl	22370 <net_buf_simple_pull>
   15ae8:	e7e4      	b.n	15ab4 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15aea:	4638      	mov	r0, r7
   15aec:	f00c fc5c 	bl	223a8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15af0:	b286      	uxth	r6, r0
   15af2:	e7ef      	b.n	15ad4 <create_frag.isra.0+0x48>
   15af4:	200002b0 	.word	0x200002b0

00015af8 <bt_conn_process_tx>:
{
   15af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15afa:	7a83      	ldrb	r3, [r0, #10]
{
   15afc:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15afe:	b993      	cbnz	r3, 15b26 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b00:	f3bf 8f5b 	dmb	ish
   15b04:	1d03      	adds	r3, r0, #4
   15b06:	e853 2f00 	ldrex	r2, [r3]
   15b0a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15b0e:	e843 1400 	strex	r4, r1, [r3]
   15b12:	2c00      	cmp	r4, #0
   15b14:	d1f7      	bne.n	15b06 <bt_conn_process_tx+0xe>
   15b16:	f3bf 8f5b 	dmb	ish
   15b1a:	0653      	lsls	r3, r2, #25
   15b1c:	d503      	bpl.n	15b26 <bt_conn_process_tx+0x2e>
}
   15b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   15b22:	f00b b94d 	b.w	20dc0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15b26:	2200      	movs	r2, #0
   15b28:	2300      	movs	r3, #0
   15b2a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   15b2e:	f00c fbaf 	bl	22290 <net_buf_get>
	BT_ASSERT(buf);
   15b32:	4604      	mov	r4, r0
   15b34:	b960      	cbnz	r0, 15b50 <bt_conn_process_tx+0x58>
   15b36:	4a20      	ldr	r2, [pc, #128]	; (15bb8 <bt_conn_process_tx+0xc0>)
   15b38:	4920      	ldr	r1, [pc, #128]	; (15bbc <bt_conn_process_tx+0xc4>)
   15b3a:	4821      	ldr	r0, [pc, #132]	; (15bc0 <bt_conn_process_tx+0xc8>)
   15b3c:	f240 23e7 	movw	r3, #743	; 0x2e7
   15b40:	f009 fcdd 	bl	1f4fe <printk>
   15b44:	4040      	eors	r0, r0
   15b46:	f380 8811 	msr	BASEPRI, r0
   15b4a:	f04f 0003 	mov.w	r0, #3
   15b4e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15b50:	4f1c      	ldr	r7, [pc, #112]	; (15bc4 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   15b52:	89a1      	ldrh	r1, [r4, #12]
   15b54:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   15b58:	4291      	cmp	r1, r2
   15b5a:	d807      	bhi.n	15b6c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15b5c:	2300      	movs	r3, #0
   15b5e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15b60:	4621      	mov	r1, r4
   15b62:	4628      	mov	r0, r5
   15b64:	f7ff fbe4 	bl	15330 <send_frag>
	if (!send_buf(conn, buf)) {
   15b68:	b140      	cbz	r0, 15b7c <bt_conn_process_tx+0x84>
}
   15b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   15b6c:	f105 060a 	add.w	r6, r5, #10
   15b70:	4621      	mov	r1, r4
   15b72:	4630      	mov	r0, r6
   15b74:	f7ff ff8a 	bl	15a8c <create_frag.isra.0>
	if (!frag) {
   15b78:	4601      	mov	r1, r0
   15b7a:	b920      	cbnz	r0, 15b86 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   15b7c:	4620      	mov	r0, r4
}
   15b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   15b82:	f001 bb45 	b.w	17210 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15b86:	2301      	movs	r3, #1
   15b88:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15b8a:	4628      	mov	r0, r5
   15b8c:	f7ff fbd0 	bl	15330 <send_frag>
   15b90:	2800      	cmp	r0, #0
   15b92:	d0f3      	beq.n	15b7c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   15b94:	89a2      	ldrh	r2, [r4, #12]
   15b96:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   15b9a:	429a      	cmp	r2, r3
   15b9c:	d802      	bhi.n	15ba4 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   15b9e:	2300      	movs	r3, #0
   15ba0:	2203      	movs	r2, #3
   15ba2:	e7dd      	b.n	15b60 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15ba4:	4621      	mov	r1, r4
   15ba6:	4630      	mov	r0, r6
   15ba8:	f7ff ff70 	bl	15a8c <create_frag.isra.0>
		if (!frag) {
   15bac:	4601      	mov	r1, r0
   15bae:	2800      	cmp	r0, #0
   15bb0:	d0e4      	beq.n	15b7c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15bb2:	2301      	movs	r3, #1
   15bb4:	461a      	mov	r2, r3
   15bb6:	e7e8      	b.n	15b8a <bt_conn_process_tx+0x92>
   15bb8:	00025055 	.word	0x00025055
   15bbc:	0002502c 	.word	0x0002502c
   15bc0:	00024fb8 	.word	0x00024fb8
   15bc4:	200002b0 	.word	0x200002b0

00015bc8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15bc8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15bca:	490f      	ldr	r1, [pc, #60]	; (15c08 <bt_conn_init+0x40>)
   15bcc:	480f      	ldr	r0, [pc, #60]	; (15c0c <bt_conn_init+0x44>)
   15bce:	f00d fdc3 	bl	23758 <k_queue_append>
   15bd2:	490f      	ldr	r1, [pc, #60]	; (15c10 <bt_conn_init+0x48>)
   15bd4:	480d      	ldr	r0, [pc, #52]	; (15c0c <bt_conn_init+0x44>)
   15bd6:	f00d fdbf 	bl	23758 <k_queue_append>
   15bda:	490e      	ldr	r1, [pc, #56]	; (15c14 <bt_conn_init+0x4c>)
   15bdc:	480b      	ldr	r0, [pc, #44]	; (15c0c <bt_conn_init+0x44>)
   15bde:	f00d fdbb 	bl	23758 <k_queue_append>
   15be2:	490d      	ldr	r1, [pc, #52]	; (15c18 <bt_conn_init+0x50>)
   15be4:	4809      	ldr	r0, [pc, #36]	; (15c0c <bt_conn_init+0x44>)
   15be6:	f00d fdb7 	bl	23758 <k_queue_append>
   15bea:	490c      	ldr	r1, [pc, #48]	; (15c1c <bt_conn_init+0x54>)
   15bec:	4807      	ldr	r0, [pc, #28]	; (15c0c <bt_conn_init+0x44>)
   15bee:	f00d fdb3 	bl	23758 <k_queue_append>
	}

	bt_att_init();
   15bf2:	f00b ff4a 	bl	21a8a <bt_att_init>

	err = bt_smp_init();
   15bf6:	f00c fb43 	bl	22280 <bt_smp_init>
	if (err) {
   15bfa:	4604      	mov	r4, r0
   15bfc:	b908      	cbnz	r0, 15c02 <bt_conn_init+0x3a>
		return err;
	}

	bt_l2cap_init();
   15bfe:	f00b fafa 	bl	211f6 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15c02:	4620      	mov	r0, r4
   15c04:	bd10      	pop	{r4, pc}
   15c06:	bf00      	nop
   15c08:	20002754 	.word	0x20002754
   15c0c:	20000ba8 	.word	0x20000ba8
   15c10:	20002764 	.word	0x20002764
   15c14:	20002774 	.word	0x20002774
   15c18:	20002784 	.word	0x20002784
   15c1c:	20002794 	.word	0x20002794

00015c20 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15c20:	4b04      	ldr	r3, [pc, #16]	; (15c34 <l2cap_accept+0x14>)
   15c22:	6818      	ldr	r0, [r3, #0]
   15c24:	b918      	cbnz	r0, 15c2e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   15c26:	4a04      	ldr	r2, [pc, #16]	; (15c38 <l2cap_accept+0x18>)
   15c28:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   15c2a:	600b      	str	r3, [r1, #0]

		return 0;
   15c2c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15c2e:	f06f 000b 	mvn.w	r0, #11
}
   15c32:	4770      	bx	lr
   15c34:	20001bd0 	.word	0x20001bd0
   15c38:	00024828 	.word	0x00024828

00015c3c <bt_l2cap_connected>:
{
   15c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15c40:	4e29      	ldr	r6, [pc, #164]	; (15ce8 <bt_l2cap_connected+0xac>)
   15c42:	4f2a      	ldr	r7, [pc, #168]	; (15cec <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15c44:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 15cf0 <bt_l2cap_connected+0xb4>
{
   15c48:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15c4a:	42be      	cmp	r6, r7
   15c4c:	d302      	bcc.n	15c54 <bt_l2cap_connected+0x18>
}
   15c4e:	b003      	add	sp, #12
   15c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15c54:	6873      	ldr	r3, [r6, #4]
   15c56:	a901      	add	r1, sp, #4
   15c58:	4620      	mov	r0, r4
   15c5a:	4798      	blx	r3
   15c5c:	2800      	cmp	r0, #0
   15c5e:	db3d      	blt.n	15cdc <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   15c60:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   15c62:	8833      	ldrh	r3, [r6, #0]
   15c64:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   15c68:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15c6c:	4641      	mov	r1, r8
   15c6e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15c72:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   15c76:	f00d fe5d 	bl	23934 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15c7a:	f3bf 8f5b 	dmb	ish
   15c7e:	f105 0368 	add.w	r3, r5, #104	; 0x68
   15c82:	2200      	movs	r2, #0
   15c84:	e853 1f00 	ldrex	r1, [r3]
   15c88:	e843 2000 	strex	r0, r2, [r3]
   15c8c:	2800      	cmp	r0, #0
   15c8e:	d1f9      	bne.n	15c84 <bt_l2cap_connected+0x48>
   15c90:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   15c94:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   15c96:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   15c98:	f105 0308 	add.w	r3, r5, #8
   15c9c:	bb02      	cbnz	r2, 15ce0 <bt_l2cap_connected+0xa4>
	list->head = node;
   15c9e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   15ca2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15ca4:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   15ca6:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   15ca8:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   15cac:	681b      	ldr	r3, [r3, #0]
   15cae:	b103      	cbz	r3, 15cb2 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   15cb0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15cb2:	9b01      	ldr	r3, [sp, #4]
   15cb4:	f3bf 8f5b 	dmb	ish
   15cb8:	3368      	adds	r3, #104	; 0x68
   15cba:	e853 2f00 	ldrex	r2, [r3]
   15cbe:	f042 0201 	orr.w	r2, r2, #1
   15cc2:	e843 2100 	strex	r1, r2, [r3]
   15cc6:	2900      	cmp	r1, #0
   15cc8:	d1f7      	bne.n	15cba <bt_l2cap_connected+0x7e>
   15cca:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   15cce:	9801      	ldr	r0, [sp, #4]
   15cd0:	6843      	ldr	r3, [r0, #4]
   15cd2:	699b      	ldr	r3, [r3, #24]
   15cd4:	b113      	cbz	r3, 15cdc <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   15cd6:	f100 0168 	add.w	r1, r0, #104	; 0x68
   15cda:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15cdc:	360c      	adds	r6, #12
   15cde:	e7b4      	b.n	15c4a <bt_l2cap_connected+0xe>
	parent->next = child;
   15ce0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15ce2:	6563      	str	r3, [r4, #84]	; 0x54
}
   15ce4:	e7dd      	b.n	15ca2 <bt_l2cap_connected+0x66>
   15ce6:	bf00      	nop
   15ce8:	000243c8 	.word	0x000243c8
   15cec:	000243ec 	.word	0x000243ec
   15cf0:	000210a3 	.word	0x000210a3

00015cf4 <bt_l2cap_update_conn_param>:
{
   15cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15cf6:	4b17      	ldr	r3, [pc, #92]	; (15d54 <bt_l2cap_update_conn_param+0x60>)
   15cf8:	781a      	ldrb	r2, [r3, #0]
   15cfa:	3201      	adds	r2, #1
	if (!ident) {
   15cfc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   15d00:	bf08      	it	eq
   15d02:	2201      	moveq	r2, #1
   15d04:	701a      	strb	r2, [r3, #0]
{
   15d06:	4606      	mov	r6, r0
   15d08:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15d0a:	2208      	movs	r2, #8
   15d0c:	7819      	ldrb	r1, [r3, #0]
   15d0e:	2012      	movs	r0, #18
   15d10:	f00b f97a 	bl	21008 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   15d14:	4604      	mov	r4, r0
   15d16:	b1d0      	cbz	r0, 15d4e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15d18:	2108      	movs	r1, #8
   15d1a:	4408      	add	r0, r1
   15d1c:	f00c fb09 	bl	22332 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15d20:	882b      	ldrh	r3, [r5, #0]
   15d22:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15d24:	886b      	ldrh	r3, [r5, #2]
   15d26:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15d28:	88ab      	ldrh	r3, [r5, #4]
   15d2a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15d2c:	88eb      	ldrh	r3, [r5, #6]
   15d2e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15d30:	2300      	movs	r3, #0
   15d32:	9300      	str	r3, [sp, #0]
   15d34:	4622      	mov	r2, r4
   15d36:	2105      	movs	r1, #5
   15d38:	4630      	mov	r0, r6
   15d3a:	f00b f9d7 	bl	210ec <bt_l2cap_send_cb>
	if (err) {
   15d3e:	4605      	mov	r5, r0
   15d40:	b110      	cbz	r0, 15d48 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   15d42:	4620      	mov	r0, r4
   15d44:	f001 fa64 	bl	17210 <net_buf_unref>
}
   15d48:	4628      	mov	r0, r5
   15d4a:	b002      	add	sp, #8
   15d4c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15d4e:	f06f 050b 	mvn.w	r5, #11
   15d52:	e7f9      	b.n	15d48 <bt_l2cap_update_conn_param+0x54>
   15d54:	2000347b 	.word	0x2000347b

00015d58 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15d58:	4b02      	ldr	r3, [pc, #8]	; (15d64 <att_cfm_sent+0xc>)
   15d5a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   15d5e:	f00b ba78 	b.w	21252 <att_sent>
   15d62:	bf00      	nop
   15d64:	00021701 	.word	0x00021701

00015d68 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15d68:	4b02      	ldr	r3, [pc, #8]	; (15d74 <att_rsp_sent+0xc>)
   15d6a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   15d6e:	f00b ba70 	b.w	21252 <att_sent>
   15d72:	bf00      	nop
   15d74:	000216e5 	.word	0x000216e5

00015d78 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15d78:	4b02      	ldr	r3, [pc, #8]	; (15d84 <att_req_sent+0xc>)
   15d7a:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   15d7e:	f00b ba68 	b.w	21252 <att_sent>
   15d82:	bf00      	nop
   15d84:	000216cb 	.word	0x000216cb

00015d88 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15d88:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15d8a:	3808      	subs	r0, #8
   15d8c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15d8e:	a901      	add	r1, sp, #4
   15d90:	4802      	ldr	r0, [pc, #8]	; (15d9c <bt_att_released+0x14>)
   15d92:	f00d fc23 	bl	235dc <k_mem_slab_free>
}
   15d96:	b003      	add	sp, #12
   15d98:	f85d fb04 	ldr.w	pc, [sp], #4
   15d9c:	20000ab0 	.word	0x20000ab0

00015da0 <chan_send>:
{
   15da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15da4:	688b      	ldr	r3, [r1, #8]
   15da6:	781b      	ldrb	r3, [r3, #0]
   15da8:	2bd2      	cmp	r3, #210	; 0xd2
{
   15daa:	4606      	mov	r6, r0
   15dac:	460c      	mov	r4, r1
   15dae:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15db0:	d10c      	bne.n	15dcc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   15db2:	6803      	ldr	r3, [r0, #0]
   15db4:	6818      	ldr	r0, [r3, #0]
   15db6:	f00c fa60 	bl	2227a <bt_smp_sign>
		if (err) {
   15dba:	4605      	mov	r5, r0
   15dbc:	b130      	cbz	r0, 15dcc <chan_send+0x2c>
			net_buf_unref(buf);
   15dbe:	4620      	mov	r0, r4
   15dc0:	f001 fa26 	bl	17210 <net_buf_unref>
}
   15dc4:	4628      	mov	r0, r5
   15dc6:	b003      	add	sp, #12
   15dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15dcc:	f104 0008 	add.w	r0, r4, #8
   15dd0:	f00c fae6 	bl	223a0 <net_buf_simple_headroom>
	state->len = buf->len;
   15dd4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15dd8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15dda:	b957      	cbnz	r7, 15df2 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   15ddc:	68a3      	ldr	r3, [r4, #8]
   15dde:	7818      	ldrb	r0, [r3, #0]
   15de0:	f00b fa4f 	bl	21282 <att_op_get_type>
   15de4:	3801      	subs	r0, #1
   15de6:	b2c0      	uxtb	r0, r0
   15de8:	2804      	cmp	r0, #4
   15dea:	bf9c      	itt	ls
   15dec:	4b13      	ldrls	r3, [pc, #76]	; (15e3c <chan_send+0x9c>)
   15dee:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15df2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15df4:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15df8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15dfa:	4b11      	ldr	r3, [pc, #68]	; (15e40 <chan_send+0xa0>)
   15dfc:	429f      	cmp	r7, r3
   15dfe:	d018      	beq.n	15e32 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   15e00:	4b10      	ldr	r3, [pc, #64]	; (15e44 <chan_send+0xa4>)
   15e02:	429f      	cmp	r7, r3
   15e04:	d017      	beq.n	15e36 <chan_send+0x96>
		return att_sent;
   15e06:	4910      	ldr	r1, [pc, #64]	; (15e48 <chan_send+0xa8>)
   15e08:	4b10      	ldr	r3, [pc, #64]	; (15e4c <chan_send+0xac>)
   15e0a:	4a11      	ldr	r2, [pc, #68]	; (15e50 <chan_send+0xb0>)
   15e0c:	428f      	cmp	r7, r1
   15e0e:	bf18      	it	ne
   15e10:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15e12:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e14:	9600      	str	r6, [sp, #0]
   15e16:	4622      	mov	r2, r4
   15e18:	2104      	movs	r1, #4
   15e1a:	f00b f967 	bl	210ec <bt_l2cap_send_cb>
	if (err) {
   15e1e:	4605      	mov	r5, r0
   15e20:	2800      	cmp	r0, #0
   15e22:	d0cf      	beq.n	15dc4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   15e24:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15e26:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15e2a:	fa10 f088 	uxtah	r0, r0, r8
   15e2e:	60a0      	str	r0, [r4, #8]
}
   15e30:	e7c8      	b.n	15dc4 <chan_send+0x24>
		return att_rsp_sent;
   15e32:	4b08      	ldr	r3, [pc, #32]	; (15e54 <chan_send+0xb4>)
   15e34:	e7ed      	b.n	15e12 <chan_send+0x72>
		return att_cfm_sent;
   15e36:	4b08      	ldr	r3, [pc, #32]	; (15e58 <chan_send+0xb8>)
   15e38:	e7eb      	b.n	15e12 <chan_send+0x72>
   15e3a:	bf00      	nop
   15e3c:	0002484c 	.word	0x0002484c
   15e40:	000216e5 	.word	0x000216e5
   15e44:	00021701 	.word	0x00021701
   15e48:	000216cb 	.word	0x000216cb
   15e4c:	00015d79 	.word	0x00015d79
   15e50:	00021253 	.word	0x00021253
   15e54:	00015d69 	.word	0x00015d69
   15e58:	00015d59 	.word	0x00015d59

00015e5c <read_group_cb>:
{
   15e5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15e60:	4606      	mov	r6, r0
   15e62:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e64:	f04f 0800 	mov.w	r8, #0
   15e68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15e6c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   15e6e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e70:	f88d 8008 	strb.w	r8, [sp, #8]
   15e74:	a902      	add	r1, sp, #8
{
   15e76:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e78:	f8ad 300a 	strh.w	r3, [sp, #10]
   15e7c:	f00a fb2f 	bl	204de <bt_uuid_cmp>
   15e80:	b1a0      	cbz	r0, 15eac <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15e82:	f642 0301 	movw	r3, #10241	; 0x2801
   15e86:	6830      	ldr	r0, [r6, #0]
   15e88:	f88d 800c 	strb.w	r8, [sp, #12]
   15e8c:	a903      	add	r1, sp, #12
   15e8e:	f8ad 300e 	strh.w	r3, [sp, #14]
   15e92:	f00a fb24 	bl	204de <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15e96:	b148      	cbz	r0, 15eac <read_group_cb+0x50>
		if (data->group &&
   15e98:	6923      	ldr	r3, [r4, #16]
   15e9a:	b11b      	cbz	r3, 15ea4 <read_group_cb+0x48>
   15e9c:	885a      	ldrh	r2, [r3, #2]
   15e9e:	42aa      	cmp	r2, r5
   15ea0:	d200      	bcs.n	15ea4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15ea2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15ea4:	2001      	movs	r0, #1
}
   15ea6:	b004      	add	sp, #16
   15ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15eac:	6861      	ldr	r1, [r4, #4]
   15eae:	6830      	ldr	r0, [r6, #0]
   15eb0:	f00a fb15 	bl	204de <bt_uuid_cmp>
   15eb4:	b110      	cbz	r0, 15ebc <read_group_cb+0x60>
		data->group = NULL;
   15eb6:	2300      	movs	r3, #0
   15eb8:	6123      	str	r3, [r4, #16]
   15eba:	e7f3      	b.n	15ea4 <read_group_cb+0x48>
	if (data->rsp->len &&
   15ebc:	68e3      	ldr	r3, [r4, #12]
   15ebe:	68a0      	ldr	r0, [r4, #8]
   15ec0:	781a      	ldrb	r2, [r3, #0]
   15ec2:	b13a      	cbz	r2, 15ed4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15ec4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   15ec8:	8981      	ldrh	r1, [r0, #12]
   15eca:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15ecc:	4293      	cmp	r3, r2
   15ece:	da01      	bge.n	15ed4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   15ed0:	2000      	movs	r0, #0
   15ed2:	e7e8      	b.n	15ea6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   15ed4:	2104      	movs	r1, #4
   15ed6:	3008      	adds	r0, #8
   15ed8:	f00c fa2b 	bl	22332 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15edc:	4b09      	ldr	r3, [pc, #36]	; (15f04 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15ede:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15ee0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15ee2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15ee4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15ee6:	4631      	mov	r1, r6
   15ee8:	9300      	str	r3, [sp, #0]
   15eea:	9401      	str	r4, [sp, #4]
   15eec:	2300      	movs	r3, #0
   15eee:	4638      	mov	r0, r7
   15ef0:	f00b fa35 	bl	2135e <att_chan_read>
	if (read < 0) {
   15ef4:	2800      	cmp	r0, #0
   15ef6:	dbeb      	blt.n	15ed0 <read_group_cb+0x74>
	if (!data->group) {
   15ef8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15efa:	3800      	subs	r0, #0
   15efc:	bf18      	it	ne
   15efe:	2001      	movne	r0, #1
   15f00:	e7d1      	b.n	15ea6 <read_group_cb+0x4a>
   15f02:	bf00      	nop
   15f04:	000216ab 	.word	0x000216ab

00015f08 <read_type_cb>:
{
   15f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15f0c:	f8d2 8000 	ldr.w	r8, [r2]
{
   15f10:	4606      	mov	r6, r0
   15f12:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15f14:	6800      	ldr	r0, [r0, #0]
   15f16:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15f18:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   15f1c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15f1e:	f00a fade 	bl	204de <bt_uuid_cmp>
   15f22:	4607      	mov	r7, r0
   15f24:	2800      	cmp	r0, #0
   15f26:	d13e      	bne.n	15fa6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15f28:	4628      	mov	r0, r5
   15f2a:	2215      	movs	r2, #21
   15f2c:	4631      	mov	r1, r6
   15f2e:	f00c f8f6 	bl	2211e <bt_gatt_check_perm>
   15f32:	4605      	mov	r5, r0
   15f34:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15f36:	b148      	cbz	r0, 15f4c <read_type_cb+0x44>
		if (data->rsp->len) {
   15f38:	68e3      	ldr	r3, [r4, #12]
   15f3a:	781b      	ldrb	r3, [r3, #0]
   15f3c:	b923      	cbnz	r3, 15f48 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   15f3e:	2500      	movs	r5, #0
}
   15f40:	4628      	mov	r0, r5
   15f42:	b003      	add	sp, #12
   15f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15f48:	7527      	strb	r7, [r4, #20]
   15f4a:	e7f8      	b.n	15f3e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15f4c:	68a0      	ldr	r0, [r4, #8]
   15f4e:	f00c f9ce 	bl	222ee <net_buf_frag_last>
   15f52:	2102      	movs	r1, #2
   15f54:	3008      	adds	r0, #8
   15f56:	f00c f9ec 	bl	22332 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f5a:	4b14      	ldr	r3, [pc, #80]	; (15fac <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15f5c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f5e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15f60:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f64:	4631      	mov	r1, r6
   15f66:	9300      	str	r3, [sp, #0]
   15f68:	9401      	str	r4, [sp, #4]
   15f6a:	462b      	mov	r3, r5
   15f6c:	4640      	mov	r0, r8
   15f6e:	f00b f9f6 	bl	2135e <att_chan_read>
	if (read < 0) {
   15f72:	2800      	cmp	r0, #0
   15f74:	da07      	bge.n	15f86 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15f76:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15f7a:	bf26      	itte	cs
   15f7c:	4240      	negcs	r0, r0
   15f7e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15f80:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15f82:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15f84:	e7dc      	b.n	15f40 <read_type_cb+0x38>
	if (!data->item) {
   15f86:	6923      	ldr	r3, [r4, #16]
   15f88:	2b00      	cmp	r3, #0
   15f8a:	d0d8      	beq.n	15f3e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15f8c:	68a0      	ldr	r0, [r4, #8]
   15f8e:	f00b f958 	bl	21242 <net_buf_frags_len>
   15f92:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15f96:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15f98:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15f9a:	7818      	ldrb	r0, [r3, #0]
   15f9c:	4285      	cmp	r5, r0
   15f9e:	bf94      	ite	ls
   15fa0:	2500      	movls	r5, #0
   15fa2:	2501      	movhi	r5, #1
   15fa4:	e7cc      	b.n	15f40 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15fa6:	2501      	movs	r5, #1
   15fa8:	e7ca      	b.n	15f40 <read_type_cb+0x38>
   15faa:	bf00      	nop
   15fac:	0002125f 	.word	0x0002125f

00015fb0 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15fb0:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   15fb2:	4a07      	ldr	r2, [pc, #28]	; (15fd0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15fb4:	4604      	mov	r4, r0
   15fb6:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15fb8:	f7ff fef2 	bl	15da0 <chan_send>
	if (err) {
   15fbc:	b130      	cbz	r0, 15fcc <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15fbe:	4629      	mov	r1, r5
   15fc0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   15fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15fc8:	f00c b980 	b.w	222cc <net_buf_put>
}
   15fcc:	bd38      	pop	{r3, r4, r5, pc}
   15fce:	bf00      	nop
   15fd0:	000216e5 	.word	0x000216e5

00015fd4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15fd6:	2300      	movs	r3, #0
{
   15fd8:	4607      	mov	r7, r0
   15fda:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15fdc:	481e      	ldr	r0, [pc, #120]	; (16058 <bt_att_accept+0x84>)
   15fde:	2200      	movs	r2, #0
   15fe0:	4669      	mov	r1, sp
   15fe2:	f005 fae9 	bl	1b5b8 <k_mem_slab_alloc>
   15fe6:	4604      	mov	r4, r0
   15fe8:	b120      	cbz	r0, 15ff4 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15fea:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15fee:	4620      	mov	r0, r4
   15ff0:	b003      	add	sp, #12
   15ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   15ff4:	4601      	mov	r1, r0
   15ff6:	222c      	movs	r2, #44	; 0x2c
   15ff8:	9800      	ldr	r0, [sp, #0]
   15ffa:	f00a fa0f 	bl	2041c <memset>
	att->conn = conn;
   15ffe:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16000:	4816      	ldr	r0, [pc, #88]	; (1605c <bt_att_accept+0x88>)
	list->tail = NULL;
   16002:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   16004:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   16008:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   1600c:	2200      	movs	r2, #0
   1600e:	2300      	movs	r3, #0
   16010:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16012:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16014:	f005 fad0 	bl	1b5b8 <k_mem_slab_alloc>
   16018:	4604      	mov	r4, r0
   1601a:	2800      	cmp	r0, #0
   1601c:	d1e5      	bne.n	15fea <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   1601e:	4601      	mov	r1, r0
   16020:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16024:	9801      	ldr	r0, [sp, #4]
   16026:	f00a f9f9 	bl	2041c <memset>
	chan->chan.chan.ops = &ops;
   1602a:	9801      	ldr	r0, [sp, #4]
   1602c:	4b0c      	ldr	r3, [pc, #48]	; (16060 <bt_att_accept+0x8c>)
   1602e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   16030:	30f8      	adds	r0, #248	; 0xf8
   16032:	f00d fb85 	bl	23740 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16036:	9b01      	ldr	r3, [sp, #4]
   16038:	f3bf 8f5b 	dmb	ish
   1603c:	33f0      	adds	r3, #240	; 0xf0
   1603e:	e853 2f00 	ldrex	r2, [r3]
   16042:	e843 4100 	strex	r1, r4, [r3]
   16046:	2900      	cmp	r1, #0
   16048:	d1f9      	bne.n	1603e <bt_att_accept+0x6a>
   1604a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1604e:	9b01      	ldr	r3, [sp, #4]
   16050:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   16054:	6033      	str	r3, [r6, #0]
	return 0;
   16056:	e7ca      	b.n	15fee <bt_att_accept+0x1a>
   16058:	20000a94 	.word	0x20000a94
   1605c:	20000ab0 	.word	0x20000ab0
   16060:	200005e0 	.word	0x200005e0

00016064 <bt_att_connected>:
{
   16064:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16066:	4606      	mov	r6, r0
{
   16068:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1606a:	2104      	movs	r1, #4
   1606c:	f856 0908 	ldr.w	r0, [r6], #-8
   16070:	f00b f886 	bl	21180 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   16074:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   16078:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1607a:	b91b      	cbnz	r3, 16084 <bt_att_connected+0x20>
   1607c:	f105 000c 	add.w	r0, r5, #12
   16080:	f00d fb5e 	bl	23740 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   16084:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   16086:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   1608a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1608c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   16090:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16092:	b902      	cbnz	r2, 16096 <bt_att_connected+0x32>
	list->tail = node;
   16094:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16096:	f3bf 8f5b 	dmb	ish
   1609a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1609e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   160a2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   160a4:	bf58      	it	pl
   160a6:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   160a8:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   160aa:	bf5c      	itt	pl
   160ac:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   160b0:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   160b4:	f00b fabe 	bl	21634 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   160b8:	f504 7084 	add.w	r0, r4, #264	; 0x108
   160bc:	4902      	ldr	r1, [pc, #8]	; (160c8 <bt_att_connected+0x64>)
}
   160be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   160c2:	f00d bc37 	b.w	23934 <k_work_init_delayable>
   160c6:	bf00      	nop
   160c8:	00021a99 	.word	0x00021a99

000160cc <att_write_cmd>:
{
   160cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   160ce:	4604      	mov	r4, r0
   160d0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   160d2:	f101 0008 	add.w	r0, r1, #8
   160d6:	460d      	mov	r5, r1
   160d8:	f00c f95a 	bl	22390 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   160dc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   160de:	68af      	ldr	r7, [r5, #8]
   160e0:	89ad      	ldrh	r5, [r5, #12]
   160e2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   160e4:	2100      	movs	r1, #0
   160e6:	6818      	ldr	r0, [r3, #0]
   160e8:	f00c f86f 	bl	221ca <bt_gatt_change_aware>
   160ec:	b320      	cbz	r0, 16138 <att_write_cmd+0x6c>
	if (!handle) {
   160ee:	b32e      	cbz	r6, 1613c <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   160f0:	2218      	movs	r2, #24
   160f2:	2100      	movs	r1, #0
   160f4:	4668      	mov	r0, sp
   160f6:	f00a f991 	bl	2041c <memset>
	data.conn = chan->att->conn;
   160fa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   160fc:	4a10      	ldr	r2, [pc, #64]	; (16140 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   160fe:	681b      	ldr	r3, [r3, #0]
   16100:	9300      	str	r3, [sp, #0]
	data.req = req;
   16102:	2300      	movs	r3, #0
   16104:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   16108:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1610c:	2301      	movs	r3, #1
   1610e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16112:	4631      	mov	r1, r6
   16114:	466b      	mov	r3, sp
   16116:	4630      	mov	r0, r6
	data.value = value;
   16118:	9703      	str	r7, [sp, #12]
	data.len = len;
   1611a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1611e:	f00b f913 	bl	21348 <bt_gatt_foreach_attr>
	if (data.err) {
   16122:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16126:	b923      	cbnz	r3, 16132 <att_write_cmd+0x66>
	if (data.buf) {
   16128:	9901      	ldr	r1, [sp, #4]
   1612a:	b111      	cbz	r1, 16132 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1612c:	4620      	mov	r0, r4
   1612e:	f7ff ff3f 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
   16132:	2000      	movs	r0, #0
}
   16134:	b007      	add	sp, #28
   16136:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16138:	2012      	movs	r0, #18
   1613a:	e7fb      	b.n	16134 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   1613c:	2001      	movs	r0, #1
   1613e:	e7f9      	b.n	16134 <att_write_cmd+0x68>
   16140:	000217e9 	.word	0x000217e9

00016144 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16144:	898b      	ldrh	r3, [r1, #12]
{
   16146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1614a:	4604      	mov	r4, r0
   1614c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1614e:	2b00      	cmp	r3, #0
   16150:	d060      	beq.n	16214 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
   16152:	2101      	movs	r1, #1
   16154:	f105 0008 	add.w	r0, r5, #8
   16158:	f00c f912 	bl	22380 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1615c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   16160:	4607      	mov	r7, r0
   16162:	2b00      	cmp	r3, #0
   16164:	d056      	beq.n	16214 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
   16166:	4a2f      	ldr	r2, [pc, #188]	; (16224 <bt_att_recv+0xe0>)
   16168:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1616a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1616e:	2300      	movs	r3, #0
   16170:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   16172:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   16176:	4288      	cmp	r0, r1
   16178:	d11a      	bne.n	161b0 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   1617a:	00d9      	lsls	r1, r3, #3
   1617c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16180:	f893 8002 	ldrb.w	r8, [r3, #2]
   16184:	f1b8 0f01 	cmp.w	r8, #1
   16188:	d022      	beq.n	161d0 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
   1618a:	f1b8 0f05 	cmp.w	r8, #5
   1618e:	d12f      	bne.n	161f0 <bt_att_recv+0xac>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16190:	f3bf 8f5b 	dmb	ish
   16194:	34e8      	adds	r4, #232	; 0xe8
   16196:	e854 2f00 	ldrex	r2, [r4]
   1619a:	f042 0302 	orr.w	r3, r2, #2
   1619e:	e844 3000 	strex	r0, r3, [r4]
   161a2:	2800      	cmp	r0, #0
   161a4:	d1f7      	bne.n	16196 <bt_att_recv+0x52>
   161a6:	f3bf 8f5b 	dmb	ish
   161aa:	f012 0f02 	tst.w	r2, #2
   161ae:	e01e      	b.n	161ee <bt_att_recv+0xaa>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   161b0:	3301      	adds	r3, #1
   161b2:	2b0d      	cmp	r3, #13
   161b4:	d1dd      	bne.n	16172 <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   161b6:	4608      	mov	r0, r1
   161b8:	f00b f863 	bl	21282 <att_op_get_type>
   161bc:	b350      	cbz	r0, 16214 <bt_att_recv+0xd0>
   161be:	2805      	cmp	r0, #5
   161c0:	d028      	beq.n	16214 <bt_att_recv+0xd0>
	if (!req) {
   161c2:	b339      	cbz	r1, 16214 <bt_att_recv+0xd0>
   161c4:	2306      	movs	r3, #6
   161c6:	2200      	movs	r2, #0
   161c8:	4630      	mov	r0, r6
   161ca:	f00b fbcb 	bl	21964 <send_err_rsp.part.0>
   161ce:	e021      	b.n	16214 <bt_att_recv+0xd0>
   161d0:	34e8      	adds	r4, #232	; 0xe8
   161d2:	f3bf 8f5b 	dmb	ish
   161d6:	e854 3f00 	ldrex	r3, [r4]
   161da:	f043 0201 	orr.w	r2, r3, #1
   161de:	e844 2000 	strex	r0, r2, [r4]
   161e2:	2800      	cmp	r0, #0
   161e4:	d1f7      	bne.n	161d6 <bt_att_recv+0x92>
   161e6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   161ea:	f013 0f01 	tst.w	r3, #1
   161ee:	d111      	bne.n	16214 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
   161f0:	eb0c 0301 	add.w	r3, ip, r1
   161f4:	89a9      	ldrh	r1, [r5, #12]
   161f6:	785a      	ldrb	r2, [r3, #1]
   161f8:	4291      	cmp	r1, r2
   161fa:	d30e      	bcc.n	1621a <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
   161fc:	685b      	ldr	r3, [r3, #4]
   161fe:	4629      	mov	r1, r5
   16200:	4630      	mov	r0, r6
   16202:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16204:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   16208:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1620a:	d103      	bne.n	16214 <bt_att_recv+0xd0>
   1620c:	b110      	cbz	r0, 16214 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1620e:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   16210:	2900      	cmp	r1, #0
   16212:	d1d8      	bne.n	161c6 <bt_att_recv+0x82>
}
   16214:	2000      	movs	r0, #0
   16216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   1621a:	f1b8 0f01 	cmp.w	r8, #1
   1621e:	d1f9      	bne.n	16214 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
   16220:	2304      	movs	r3, #4
   16222:	e7f4      	b.n	1620e <bt_att_recv+0xca>
   16224:	00024860 	.word	0x00024860

00016228 <att_write_req>:
{
   16228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1622c:	4604      	mov	r4, r0
   1622e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   16230:	f101 0008 	add.w	r0, r1, #8
   16234:	460d      	mov	r5, r1
   16236:	f00c f8ab 	bl	22390 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1623a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1623c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   16240:	89ad      	ldrh	r5, [r5, #12]
   16242:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16244:	2101      	movs	r1, #1
   16246:	6818      	ldr	r0, [r3, #0]
   16248:	f00b ffbf 	bl	221ca <bt_gatt_change_aware>
   1624c:	2800      	cmp	r0, #0
   1624e:	d03f      	beq.n	162d0 <att_write_req+0xa8>
	if (!handle) {
   16250:	2e00      	cmp	r6, #0
   16252:	d03f      	beq.n	162d4 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   16254:	2218      	movs	r2, #24
   16256:	2100      	movs	r1, #0
   16258:	4668      	mov	r0, sp
   1625a:	f00a f8df 	bl	2041c <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1625e:	2200      	movs	r2, #0
   16260:	2113      	movs	r1, #19
   16262:	4620      	mov	r0, r4
   16264:	f00b fb59 	bl	2191a <bt_att_chan_create_pdu>
   16268:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1626a:	b378      	cbz	r0, 162cc <att_write_req+0xa4>
	data.conn = chan->att->conn;
   1626c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1626e:	4a1a      	ldr	r2, [pc, #104]	; (162d8 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   16270:	681b      	ldr	r3, [r3, #0]
   16272:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16274:	2301      	movs	r3, #1
   16276:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1627a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1627e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16280:	466b      	mov	r3, sp
   16282:	4631      	mov	r1, r6
   16284:	4630      	mov	r0, r6
	data.len = len;
   16286:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1628a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1628e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   16292:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16296:	f00b f857 	bl	21348 <bt_gatt_foreach_attr>
	if (data.err) {
   1629a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1629e:	b175      	cbz	r5, 162be <att_write_req+0x96>
			net_buf_unref(data.buf);
   162a0:	9801      	ldr	r0, [sp, #4]
   162a2:	f000 ffb5 	bl	17210 <net_buf_unref>
	if (!req) {
   162a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   162aa:	4632      	mov	r2, r6
   162ac:	4641      	mov	r1, r8
   162ae:	4620      	mov	r0, r4
   162b0:	f00b fb58 	bl	21964 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   162b4:	463d      	mov	r5, r7
}
   162b6:	4628      	mov	r0, r5
   162b8:	b007      	add	sp, #28
   162ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   162be:	9901      	ldr	r1, [sp, #4]
   162c0:	2900      	cmp	r1, #0
   162c2:	d0f8      	beq.n	162b6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   162c4:	4620      	mov	r0, r4
   162c6:	f7ff fe73 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
   162ca:	e7f4      	b.n	162b6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   162cc:	250e      	movs	r5, #14
   162ce:	e7f2      	b.n	162b6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   162d0:	2512      	movs	r5, #18
   162d2:	e7f0      	b.n	162b6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   162d4:	2501      	movs	r5, #1
   162d6:	e7ee      	b.n	162b6 <att_write_req+0x8e>
   162d8:	000217e9 	.word	0x000217e9

000162dc <att_read_group_req>:
{
   162dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   162e0:	7b0c      	ldrb	r4, [r1, #12]
   162e2:	3c04      	subs	r4, #4
   162e4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   162e6:	2c02      	cmp	r4, #2
{
   162e8:	4605      	mov	r5, r0
   162ea:	b08c      	sub	sp, #48	; 0x30
   162ec:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   162ee:	d001      	beq.n	162f4 <att_read_group_req+0x18>
   162f0:	2c10      	cmp	r4, #16
   162f2:	d16e      	bne.n	163d2 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   162f4:	2104      	movs	r1, #4
   162f6:	3008      	adds	r0, #8
   162f8:	f00c f842 	bl	22380 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   162fc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16300:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16302:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16304:	1d01      	adds	r1, r0, #4
   16306:	4622      	mov	r2, r4
   16308:	4640      	mov	r0, r8
   1630a:	f00a f912 	bl	20532 <bt_uuid_create>
   1630e:	2800      	cmp	r0, #0
   16310:	d061      	beq.n	163d6 <att_read_group_req+0xfa>
	if (!start || !end) {
   16312:	2e00      	cmp	r6, #0
   16314:	d03a      	beq.n	1638c <att_read_group_req+0xb0>
   16316:	2400      	movs	r4, #0
   16318:	2f00      	cmp	r7, #0
   1631a:	d036      	beq.n	1638a <att_read_group_req+0xae>
	if (start > end) {
   1631c:	42be      	cmp	r6, r7
   1631e:	d835      	bhi.n	1638c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16324:	a901      	add	r1, sp, #4
   16326:	4640      	mov	r0, r8
   16328:	f88d 4004 	strb.w	r4, [sp, #4]
   1632c:	f8ad 3006 	strh.w	r3, [sp, #6]
   16330:	f00a f8d5 	bl	204de <bt_uuid_cmp>
   16334:	2800      	cmp	r0, #0
   16336:	d134      	bne.n	163a2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   16338:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1633a:	2214      	movs	r2, #20
   1633c:	2100      	movs	r1, #0
   1633e:	a807      	add	r0, sp, #28
   16340:	f00a f86c 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16344:	2201      	movs	r2, #1
   16346:	2111      	movs	r1, #17
   16348:	4620      	mov	r0, r4
   1634a:	f00b fb28 	bl	2199e <bt_att_create_pdu>
   1634e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16350:	2800      	cmp	r0, #0
   16352:	d040      	beq.n	163d6 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   16354:	2101      	movs	r1, #1
   16356:	3008      	adds	r0, #8
	data.uuid = uuid;
   16358:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1635c:	f00b ffe9 	bl	22332 <net_buf_simple_add>
	data.rsp->len = 0U;
   16360:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16364:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16366:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   16368:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1636c:	4a1b      	ldr	r2, [pc, #108]	; (163dc <att_read_group_req+0x100>)
	data.group = NULL;
   1636e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16372:	4639      	mov	r1, r7
   16374:	4630      	mov	r0, r6
   16376:	f00a ffe7 	bl	21348 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1637a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1637c:	781c      	ldrb	r4, [r3, #0]
   1637e:	bb1c      	cbnz	r4, 163c8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   16380:	9809      	ldr	r0, [sp, #36]	; 0x24
   16382:	f000 ff45 	bl	17210 <net_buf_unref>
	if (!req) {
   16386:	230a      	movs	r3, #10
   16388:	e018      	b.n	163bc <att_read_group_req+0xe0>
			*err = 0U;
   1638a:	463e      	mov	r6, r7
	if (!req) {
   1638c:	2301      	movs	r3, #1
   1638e:	4632      	mov	r2, r6
   16390:	2110      	movs	r1, #16
   16392:	4628      	mov	r0, r5
   16394:	f00b fae6 	bl	21964 <send_err_rsp.part.0>
		return 0;
   16398:	2400      	movs	r4, #0
}
   1639a:	4620      	mov	r0, r4
   1639c:	b00c      	add	sp, #48	; 0x30
   1639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   163a2:	f642 0301 	movw	r3, #10241	; 0x2801
   163a6:	a907      	add	r1, sp, #28
   163a8:	4640      	mov	r0, r8
   163aa:	f88d 401c 	strb.w	r4, [sp, #28]
   163ae:	f8ad 301e 	strh.w	r3, [sp, #30]
   163b2:	f00a f894 	bl	204de <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   163b6:	2800      	cmp	r0, #0
   163b8:	d0be      	beq.n	16338 <att_read_group_req+0x5c>
	if (!req) {
   163ba:	2310      	movs	r3, #16
   163bc:	4632      	mov	r2, r6
   163be:	2110      	movs	r1, #16
   163c0:	4628      	mov	r0, r5
   163c2:	f00b facf 	bl	21964 <send_err_rsp.part.0>
		return 0;
   163c6:	e7e8      	b.n	1639a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   163c8:	9909      	ldr	r1, [sp, #36]	; 0x24
   163ca:	4628      	mov	r0, r5
   163cc:	f7ff fdf0 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   163d0:	e7e2      	b.n	16398 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   163d2:	2404      	movs	r4, #4
   163d4:	e7e1      	b.n	1639a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   163d6:	240e      	movs	r4, #14
   163d8:	e7df      	b.n	1639a <att_read_group_req+0xbe>
   163da:	bf00      	nop
   163dc:	00015e5d 	.word	0x00015e5d

000163e0 <att_read_mult_req>:
{
   163e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   163e4:	6886      	ldr	r6, [r0, #8]
{
   163e6:	b085      	sub	sp, #20
   163e8:	4604      	mov	r4, r0
   163ea:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   163ec:	4630      	mov	r0, r6
   163ee:	2101      	movs	r1, #1
   163f0:	f00b feeb 	bl	221ca <bt_gatt_change_aware>
   163f4:	b3b8      	cbz	r0, 16466 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   163f6:	2210      	movs	r2, #16
   163f8:	2100      	movs	r1, #0
   163fa:	4668      	mov	r0, sp
   163fc:	f00a f80e 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16400:	2200      	movs	r2, #0
   16402:	210f      	movs	r1, #15
   16404:	4630      	mov	r0, r6
   16406:	f00b faca 	bl	2199e <bt_att_create_pdu>
   1640a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1640c:	b368      	cbz	r0, 1646a <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1640e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 16470 <att_read_mult_req+0x90>
	data.chan = chan;
   16412:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   16414:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16418:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1641c:	89ab      	ldrh	r3, [r5, #12]
   1641e:	2b01      	cmp	r3, #1
   16420:	d804      	bhi.n	1642c <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16422:	9902      	ldr	r1, [sp, #8]
   16424:	4620      	mov	r0, r4
   16426:	f7ff fdc3 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
   1642a:	e018      	b.n	1645e <att_read_mult_req+0x7e>
   1642c:	4638      	mov	r0, r7
   1642e:	f00b ffaf 	bl	22390 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16432:	466b      	mov	r3, sp
   16434:	464a      	mov	r2, r9
   16436:	4601      	mov	r1, r0
   16438:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1643a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1643e:	f00a ff83 	bl	21348 <bt_gatt_foreach_attr>
		if (data.err) {
   16442:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16446:	2b00      	cmp	r3, #0
   16448:	d0e8      	beq.n	1641c <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1644a:	9802      	ldr	r0, [sp, #8]
   1644c:	f000 fee0 	bl	17210 <net_buf_unref>
	if (!req) {
   16450:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16454:	4632      	mov	r2, r6
   16456:	210e      	movs	r1, #14
   16458:	4620      	mov	r0, r4
   1645a:	f00b fa83 	bl	21964 <send_err_rsp.part.0>
	return 0;
   1645e:	2000      	movs	r0, #0
}
   16460:	b005      	add	sp, #20
   16462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16466:	2012      	movs	r0, #18
   16468:	e7fa      	b.n	16460 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   1646a:	200e      	movs	r0, #14
   1646c:	e7f8      	b.n	16460 <att_read_mult_req+0x80>
   1646e:	bf00      	nop
   16470:	000218c7 	.word	0x000218c7

00016474 <att_read_rsp>:
{
   16474:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16478:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1647c:	4605      	mov	r5, r0
   1647e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16480:	4640      	mov	r0, r8
   16482:	2101      	movs	r1, #1
{
   16484:	4614      	mov	r4, r2
   16486:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16488:	f00b fe9f 	bl	221ca <bt_gatt_change_aware>
   1648c:	b388      	cbz	r0, 164f2 <att_read_rsp+0x7e>
	if (!handle) {
   1648e:	b396      	cbz	r6, 164f6 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   16490:	2210      	movs	r2, #16
   16492:	2100      	movs	r1, #0
   16494:	4668      	mov	r0, sp
   16496:	f009 ffc1 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1649a:	2200      	movs	r2, #0
   1649c:	4621      	mov	r1, r4
   1649e:	4640      	mov	r0, r8
   164a0:	f00b fa7d 	bl	2199e <bt_att_create_pdu>
   164a4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   164a6:	b340      	cbz	r0, 164fa <att_read_rsp+0x86>
	data.offset = offset;
   164a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   164ac:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   164b0:	2301      	movs	r3, #1
   164b2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164b6:	4a12      	ldr	r2, [pc, #72]	; (16500 <att_read_rsp+0x8c>)
	data.chan = chan;
   164b8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   164ba:	466b      	mov	r3, sp
   164bc:	4631      	mov	r1, r6
   164be:	4630      	mov	r0, r6
   164c0:	f00a ff42 	bl	21348 <bt_gatt_foreach_attr>
	if (data.err) {
   164c4:	f89d 400c 	ldrb.w	r4, [sp, #12]
   164c8:	b174      	cbz	r4, 164e8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   164ca:	9802      	ldr	r0, [sp, #8]
   164cc:	f000 fea0 	bl	17210 <net_buf_unref>
	if (!req) {
   164d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   164d4:	4632      	mov	r2, r6
   164d6:	4639      	mov	r1, r7
   164d8:	4628      	mov	r0, r5
   164da:	f00b fa43 	bl	21964 <send_err_rsp.part.0>
		return 0;
   164de:	2400      	movs	r4, #0
}
   164e0:	4620      	mov	r0, r4
   164e2:	b004      	add	sp, #16
   164e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   164e8:	9902      	ldr	r1, [sp, #8]
   164ea:	4628      	mov	r0, r5
   164ec:	f7ff fd60 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   164f0:	e7f6      	b.n	164e0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   164f2:	2412      	movs	r4, #18
   164f4:	e7f4      	b.n	164e0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   164f6:	2401      	movs	r4, #1
   164f8:	e7f2      	b.n	164e0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   164fa:	240e      	movs	r4, #14
   164fc:	e7f0      	b.n	164e0 <att_read_rsp+0x6c>
   164fe:	bf00      	nop
   16500:	000218c7 	.word	0x000218c7

00016504 <att_read_type_req>:
{
   16504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16508:	7b0c      	ldrb	r4, [r1, #12]
   1650a:	3c04      	subs	r4, #4
   1650c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1650e:	2c02      	cmp	r4, #2
{
   16510:	4605      	mov	r5, r0
   16512:	b08c      	sub	sp, #48	; 0x30
   16514:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16516:	d001      	beq.n	1651c <att_read_type_req+0x18>
   16518:	2c10      	cmp	r4, #16
   1651a:	d14f      	bne.n	165bc <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1651c:	2104      	movs	r1, #4
   1651e:	3008      	adds	r0, #8
   16520:	f00b ff2e 	bl	22380 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16524:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16528:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1652a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1652c:	1d01      	adds	r1, r0, #4
   1652e:	4622      	mov	r2, r4
   16530:	4640      	mov	r0, r8
   16532:	f009 fffe 	bl	20532 <bt_uuid_create>
   16536:	b188      	cbz	r0, 1655c <att_read_type_req+0x58>
	if (!start || !end) {
   16538:	b19e      	cbz	r6, 16562 <att_read_type_req+0x5e>
   1653a:	b18f      	cbz	r7, 16560 <att_read_type_req+0x5c>
	if (start > end) {
   1653c:	42b7      	cmp	r7, r6
   1653e:	d310      	bcc.n	16562 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16540:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   16542:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16544:	2100      	movs	r1, #0
   16546:	eb0d 0002 	add.w	r0, sp, r2
   1654a:	f009 ff67 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1654e:	2201      	movs	r2, #1
   16550:	2109      	movs	r1, #9
   16552:	4620      	mov	r0, r4
   16554:	f00b fa23 	bl	2199e <bt_att_create_pdu>
   16558:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1655a:	b968      	cbnz	r0, 16578 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1655c:	240e      	movs	r4, #14
   1655e:	e007      	b.n	16570 <att_read_type_req+0x6c>
			*err = 0U;
   16560:	463e      	mov	r6, r7
	if (!req) {
   16562:	2301      	movs	r3, #1
   16564:	4632      	mov	r2, r6
   16566:	2108      	movs	r1, #8
   16568:	4628      	mov	r0, r5
   1656a:	f00b f9fb 	bl	21964 <send_err_rsp.part.0>
		return 0;
   1656e:	2400      	movs	r4, #0
}
   16570:	4620      	mov	r0, r4
   16572:	b00c      	add	sp, #48	; 0x30
   16574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16578:	2101      	movs	r1, #1
   1657a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1657c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   16580:	f00b fed7 	bl	22332 <net_buf_simple_add>
	data.rsp->len = 0U;
   16584:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16588:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1658a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1658c:	4a0c      	ldr	r2, [pc, #48]	; (165c0 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   1658e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16592:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16594:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16598:	4630      	mov	r0, r6
   1659a:	ab06      	add	r3, sp, #24
   1659c:	f00a fed4 	bl	21348 <bt_gatt_foreach_attr>
	if (data.err) {
   165a0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   165a4:	b12c      	cbz	r4, 165b2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   165a6:	9808      	ldr	r0, [sp, #32]
   165a8:	f000 fe32 	bl	17210 <net_buf_unref>
	if (!req) {
   165ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   165b0:	e7d8      	b.n	16564 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   165b2:	9908      	ldr	r1, [sp, #32]
   165b4:	4628      	mov	r0, r5
   165b6:	f7ff fcfb 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   165ba:	e7d9      	b.n	16570 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   165bc:	2404      	movs	r4, #4
   165be:	e7d7      	b.n	16570 <att_read_type_req+0x6c>
   165c0:	00015f09 	.word	0x00015f09

000165c4 <att_find_type_req>:
{
   165c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165c8:	4688      	mov	r8, r1
   165ca:	b086      	sub	sp, #24
   165cc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   165ce:	2106      	movs	r1, #6
   165d0:	f108 0008 	add.w	r0, r8, #8
   165d4:	f00b fed4 	bl	22380 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   165d8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   165da:	b317      	cbz	r7, 16622 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   165dc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   165e0:	f1b9 0f00 	cmp.w	r9, #0
   165e4:	d01c      	beq.n	16620 <att_find_type_req+0x5c>
	if (start > end) {
   165e6:	454f      	cmp	r7, r9
   165e8:	d81b      	bhi.n	16622 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   165ea:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   165ec:	f8ad 3002 	strh.w	r3, [sp, #2]
   165f0:	2400      	movs	r4, #0
   165f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   165f6:	a901      	add	r1, sp, #4
   165f8:	4668      	mov	r0, sp
	value = buf->data;
   165fa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   165fe:	f88d 4000 	strb.w	r4, [sp]
   16602:	f88d 4004 	strb.w	r4, [sp, #4]
   16606:	f8ad 3006 	strh.w	r3, [sp, #6]
   1660a:	f009 ff68 	bl	204de <bt_uuid_cmp>
   1660e:	4606      	mov	r6, r0
   16610:	b190      	cbz	r0, 16638 <att_find_type_req+0x74>
	if (!req) {
   16612:	230a      	movs	r3, #10
   16614:	463a      	mov	r2, r7
   16616:	2106      	movs	r1, #6
   16618:	4628      	mov	r0, r5
   1661a:	f00b f9a3 	bl	21964 <send_err_rsp.part.0>
		return 0;
   1661e:	e007      	b.n	16630 <att_find_type_req+0x6c>
			*err = 0U;
   16620:	464f      	mov	r7, r9
	if (!req) {
   16622:	2301      	movs	r3, #1
   16624:	463a      	mov	r2, r7
   16626:	2106      	movs	r1, #6
   16628:	4628      	mov	r0, r5
   1662a:	f00b f99b 	bl	21964 <send_err_rsp.part.0>
		return 0;
   1662e:	2400      	movs	r4, #0
}
   16630:	4620      	mov	r0, r4
   16632:	b006      	add	sp, #24
   16634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16638:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1663c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16640:	4601      	mov	r1, r0
   16642:	2214      	movs	r2, #20
   16644:	a801      	add	r0, sp, #4
   16646:	f009 fee9 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1664a:	4632      	mov	r2, r6
   1664c:	2107      	movs	r1, #7
   1664e:	4640      	mov	r0, r8
   16650:	f00b f9a5 	bl	2199e <bt_att_create_pdu>
   16654:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16656:	b1d8      	cbz	r0, 16690 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16658:	230a      	movs	r3, #10
   1665a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1665e:	4a0d      	ldr	r2, [pc, #52]	; (16694 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   16660:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16664:	ab01      	add	r3, sp, #4
   16666:	4649      	mov	r1, r9
   16668:	4638      	mov	r0, r7
	data.value = value;
   1666a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1666e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16670:	f00a fe6a 	bl	21348 <bt_gatt_foreach_attr>
	if (data.err) {
   16674:	f89d 4015 	ldrb.w	r4, [sp, #21]
   16678:	b12c      	cbz	r4, 16686 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1667a:	9802      	ldr	r0, [sp, #8]
   1667c:	f000 fdc8 	bl	17210 <net_buf_unref>
	if (!req) {
   16680:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16684:	e7ce      	b.n	16624 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16686:	9902      	ldr	r1, [sp, #8]
   16688:	4628      	mov	r0, r5
   1668a:	f7ff fc91 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1668e:	e7cf      	b.n	16630 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16690:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16692:	e7cd      	b.n	16630 <att_find_type_req+0x6c>
   16694:	00021475 	.word	0x00021475

00016698 <att_find_info_req>:
{
   16698:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1669a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1669c:	881e      	ldrh	r6, [r3, #0]
{
   1669e:	b085      	sub	sp, #20
   166a0:	4605      	mov	r5, r0
	if (!start || !end) {
   166a2:	b19e      	cbz	r6, 166cc <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   166a4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   166a6:	b184      	cbz	r4, 166ca <att_find_info_req+0x32>
	if (start > end) {
   166a8:	42b4      	cmp	r4, r6
   166aa:	d30f      	bcc.n	166cc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   166ac:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   166ae:	2210      	movs	r2, #16
   166b0:	2100      	movs	r1, #0
   166b2:	4668      	mov	r0, sp
   166b4:	f009 feb2 	bl	2041c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   166b8:	2200      	movs	r2, #0
   166ba:	2105      	movs	r1, #5
   166bc:	4638      	mov	r0, r7
   166be:	f00b f96e 	bl	2199e <bt_att_create_pdu>
   166c2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   166c4:	b958      	cbnz	r0, 166de <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   166c6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   166c8:	e007      	b.n	166da <att_find_info_req+0x42>
			*err = 0U;
   166ca:	4626      	mov	r6, r4
	if (!req) {
   166cc:	2301      	movs	r3, #1
   166ce:	4632      	mov	r2, r6
   166d0:	2104      	movs	r1, #4
   166d2:	4628      	mov	r0, r5
   166d4:	f00b f946 	bl	21964 <send_err_rsp.part.0>
	return 0;
   166d8:	2000      	movs	r0, #0
}
   166da:	b005      	add	sp, #20
   166dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   166de:	4621      	mov	r1, r4
   166e0:	4a08      	ldr	r2, [pc, #32]	; (16704 <att_find_info_req+0x6c>)
	data.chan = chan;
   166e2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   166e4:	466b      	mov	r3, sp
   166e6:	4630      	mov	r0, r6
   166e8:	f00a fe2e 	bl	21348 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   166ec:	9c02      	ldr	r4, [sp, #8]
   166ee:	b924      	cbnz	r4, 166fa <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   166f0:	9801      	ldr	r0, [sp, #4]
   166f2:	f000 fd8d 	bl	17210 <net_buf_unref>
	if (!req) {
   166f6:	230a      	movs	r3, #10
   166f8:	e7e9      	b.n	166ce <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   166fa:	9901      	ldr	r1, [sp, #4]
   166fc:	4628      	mov	r0, r5
   166fe:	f7ff fc57 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
   16702:	e7e9      	b.n	166d8 <att_find_info_req+0x40>
   16704:	0002159d 	.word	0x0002159d

00016708 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16708:	b513      	push	{r0, r1, r4, lr}
   1670a:	4602      	mov	r2, r0
   1670c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1670e:	4808      	ldr	r0, [pc, #32]	; (16730 <bt_att_req_alloc+0x28>)
   16710:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   16712:	2400      	movs	r4, #0
   16714:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16716:	f004 ff4f 	bl	1b5b8 <k_mem_slab_alloc>
   1671a:	4601      	mov	r1, r0
   1671c:	b930      	cbnz	r0, 1672c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1671e:	9801      	ldr	r0, [sp, #4]
   16720:	2210      	movs	r2, #16
   16722:	f009 fe7b 	bl	2041c <memset>

	return req;
   16726:	9801      	ldr	r0, [sp, #4]
}
   16728:	b002      	add	sp, #8
   1672a:	bd10      	pop	{r4, pc}
		return NULL;
   1672c:	4620      	mov	r0, r4
   1672e:	e7fb      	b.n	16728 <bt_att_req_alloc+0x20>
   16730:	20000acc 	.word	0x20000acc

00016734 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16734:	b507      	push	{r0, r1, r2, lr}
   16736:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   16738:	6880      	ldr	r0, [r0, #8]
   1673a:	b120      	cbz	r0, 16746 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1673c:	f000 fd68 	bl	17210 <net_buf_unref>
		req->buf = NULL;
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	2200      	movs	r2, #0
   16744:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16746:	4803      	ldr	r0, [pc, #12]	; (16754 <bt_att_req_free+0x20>)
   16748:	a901      	add	r1, sp, #4
   1674a:	f00c ff47 	bl	235dc <k_mem_slab_free>
}
   1674e:	b003      	add	sp, #12
   16750:	f85d fb04 	ldr.w	pc, [sp], #4
   16754:	20000acc 	.word	0x20000acc

00016758 <att_handle_rsp>:
{
   16758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1675c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1675e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   16762:	4688      	mov	r8, r1
   16764:	4691      	mov	r9, r2
   16766:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16768:	f00d f8f0 	bl	2394c <k_work_cancel_delayable>
	if (!chan->req) {
   1676c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   16770:	2600      	movs	r6, #0
   16772:	b1f0      	cbz	r0, 167b2 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   16774:	4b10      	ldr	r3, [pc, #64]	; (167b8 <att_handle_rsp+0x60>)
   16776:	4298      	cmp	r0, r3
   16778:	d112      	bne.n	167a0 <att_handle_rsp+0x48>
		chan->req = NULL;
   1677a:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1677e:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   16780:	6820      	ldr	r0, [r4, #0]
   16782:	f00b f805 	bl	21790 <att_req_send_process>
	if (func) {
   16786:	b13d      	cbz	r5, 16798 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   16788:	6820      	ldr	r0, [r4, #0]
   1678a:	f8cd a000 	str.w	sl, [sp]
   1678e:	6800      	ldr	r0, [r0, #0]
   16790:	464b      	mov	r3, r9
   16792:	4642      	mov	r2, r8
   16794:	4639      	mov	r1, r7
   16796:	47a8      	blx	r5
}
   16798:	2000      	movs	r0, #0
   1679a:	b002      	add	sp, #8
   1679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   167a0:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   167a2:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   167a4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   167a8:	f7ff ffc4 	bl	16734 <bt_att_req_free>
	chan->req = NULL;
   167ac:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   167b0:	e7e6      	b.n	16780 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   167b2:	4605      	mov	r5, r0
   167b4:	e7e4      	b.n	16780 <att_handle_rsp+0x28>
   167b6:	bf00      	nop
   167b8:	200027a4 	.word	0x200027a4

000167bc <bt_att_disconnected>:
{
   167bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   167be:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   167c2:	b085      	sub	sp, #20
   167c4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   167c6:	b38d      	cbz	r5, 1682c <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   167c8:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   167cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
   167d0:	f00a fd1c 	bl	2120c <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   167d4:	f1a4 0608 	sub.w	r6, r4, #8
   167d8:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   167dc:	2200      	movs	r2, #0
   167de:	2300      	movs	r3, #0
   167e0:	4638      	mov	r0, r7
   167e2:	f00b fd55 	bl	22290 <net_buf_get>
   167e6:	4602      	mov	r2, r0
   167e8:	bb10      	cbnz	r0, 16830 <bt_att_disconnected+0x74>
	if (chan->req) {
   167ea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   167ee:	b123      	cbz	r3, 167fa <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   167f0:	4601      	mov	r1, r0
   167f2:	230e      	movs	r3, #14
   167f4:	4630      	mov	r0, r6
   167f6:	f7ff ffaf 	bl	16758 <att_handle_rsp>
	chan->att = NULL;
   167fa:	2300      	movs	r3, #0
   167fc:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   16800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16802:	b99b      	cbnz	r3, 1682c <bt_att_disconnected+0x70>
	att_reset(att);
   16804:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16806:	9803      	ldr	r0, [sp, #12]
   16808:	2200      	movs	r2, #0
   1680a:	2300      	movs	r3, #0
   1680c:	300c      	adds	r0, #12
   1680e:	f00b fd3f 	bl	22290 <net_buf_get>
   16812:	b980      	cbnz	r0, 16836 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   16814:	9a03      	ldr	r2, [sp, #12]
   16816:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   16818:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   1681a:	685d      	ldr	r5, [r3, #4]
   1681c:	b975      	cbnz	r5, 1683c <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   1681e:	4811      	ldr	r0, [pc, #68]	; (16864 <bt_att_disconnected+0xa8>)
   16820:	a903      	add	r1, sp, #12
   16822:	f00c fedb 	bl	235dc <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   16826:	6820      	ldr	r0, [r4, #0]
   16828:	f000 fbf4 	bl	17014 <bt_gatt_disconnected>
}
   1682c:	b005      	add	sp, #20
   1682e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   16830:	f000 fcee 	bl	17210 <net_buf_unref>
   16834:	e7d2      	b.n	167dc <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   16836:	f000 fceb 	bl	17210 <net_buf_unref>
   1683a:	e7e4      	b.n	16806 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1683c:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   1683e:	686e      	ldr	r6, [r5, #4]
   16840:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   16842:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16844:	428d      	cmp	r5, r1
	list->tail = node;
   16846:	bf08      	it	eq
   16848:	609a      	streq	r2, [r3, #8]
   1684a:	b136      	cbz	r6, 1685a <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1684c:	68eb      	ldr	r3, [r5, #12]
   1684e:	9300      	str	r3, [sp, #0]
   16850:	2300      	movs	r3, #0
   16852:	461a      	mov	r2, r3
   16854:	210e      	movs	r1, #14
   16856:	4618      	mov	r0, r3
   16858:	47b0      	blx	r6
		bt_att_req_free(req);
   1685a:	4628      	mov	r0, r5
   1685c:	f7ff ff6a 	bl	16734 <bt_att_req_free>
   16860:	e7da      	b.n	16818 <bt_att_disconnected+0x5c>
   16862:	bf00      	nop
   16864:	20000a94 	.word	0x20000a94

00016868 <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   16868:	b510      	push	{r4, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   1686a:	4c06      	ldr	r4, [pc, #24]	; (16884 <find_sc_cfg+0x1c>)
   1686c:	7823      	ldrb	r3, [r4, #0]
   1686e:	4283      	cmp	r3, r0
   16870:	d104      	bne.n	1687c <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
   16872:	2207      	movs	r2, #7
   16874:	1c60      	adds	r0, r4, #1
   16876:	f009 fd9f 	bl	203b8 <memcmp>
   1687a:	b108      	cbz	r0, 16880 <find_sc_cfg+0x18>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
		}
	}

	return NULL;
   1687c:	2000      	movs	r0, #0
}
   1687e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   16880:	4620      	mov	r0, r4
   16882:	e7fc      	b.n	1687e <find_sc_cfg+0x16>
   16884:	2000346e 	.word	0x2000346e

00016888 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16888:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1688a:	4d0d      	ldr	r5, [pc, #52]	; (168c0 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1688c:	4604      	mov	r4, r0
   1688e:	b968      	cbnz	r0, 168ac <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16890:	9000      	str	r0, [sp, #0]
   16892:	2207      	movs	r2, #7
   16894:	f8cd 0003 	str.w	r0, [sp, #3]
   16898:	4669      	mov	r1, sp
   1689a:	1c68      	adds	r0, r5, #1
   1689c:	f009 fd8c 	bl	203b8 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   168a0:	2800      	cmp	r0, #0
   168a2:	bf08      	it	eq
   168a4:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   168a6:	4620      	mov	r0, r4
   168a8:	b003      	add	sp, #12
   168aa:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   168ac:	462a      	mov	r2, r5
   168ae:	f812 1b01 	ldrb.w	r1, [r2], #1
   168b2:	f00a fb55 	bl	20f60 <bt_conn_is_peer_addr_le>
   168b6:	2800      	cmp	r0, #0
	return NULL;
   168b8:	bf14      	ite	ne
   168ba:	462c      	movne	r4, r5
   168bc:	2400      	moveq	r4, #0
   168be:	e7f2      	b.n	168a6 <find_cf_cfg+0x1e>
   168c0:	200027bc 	.word	0x200027bc

000168c4 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   168c4:	b510      	push	{r4, lr}
   168c6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   168c8:	4814      	ldr	r0, [pc, #80]	; (1691c <sc_indicate_rsp+0x58>)
   168ca:	f3bf 8f5b 	dmb	ish
   168ce:	f100 0350 	add.w	r3, r0, #80	; 0x50
   168d2:	e853 2f00 	ldrex	r2, [r3]
   168d6:	f022 0202 	bic.w	r2, r2, #2
   168da:	e843 2100 	strex	r1, r2, [r3]
   168de:	2900      	cmp	r1, #0
   168e0:	d1f7      	bne.n	168d2 <sc_indicate_rsp+0xe>
   168e2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168e6:	f3bf 8f5b 	dmb	ish
   168ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
   168ec:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   168f0:	07da      	lsls	r2, r3, #31
   168f2:	d504      	bpl.n	168fe <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   168f4:	2200      	movs	r2, #0
   168f6:	2300      	movs	r3, #0
   168f8:	3020      	adds	r0, #32
   168fa:	f005 fa8d 	bl	1be18 <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   168fe:	4620      	mov	r0, r4
   16900:	f7ff ffc2 	bl	16888 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   16904:	b140      	cbz	r0, 16918 <sc_indicate_rsp+0x54>
   16906:	7a03      	ldrb	r3, [r0, #8]
   16908:	07db      	lsls	r3, r3, #31
   1690a:	d505      	bpl.n	16918 <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   1690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16910:	2100      	movs	r1, #0
   16912:	300c      	adds	r0, #12
   16914:	f00b b99b 	b.w	21c4e <atomic_set_bit>
}
   16918:	bd10      	pop	{r4, pc}
   1691a:	bf00      	nop
   1691c:	20001d20 	.word	0x20001d20

00016920 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16924:	4b24      	ldr	r3, [pc, #144]	; (169b8 <disconnected_cb+0x98>)
{
   16926:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16928:	6882      	ldr	r2, [r0, #8]
   1692a:	429a      	cmp	r2, r3
{
   1692c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1692e:	d102      	bne.n	16936 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16930:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16932:	8963      	ldrh	r3, [r4, #10]
   16934:	bb13      	cbnz	r3, 1697c <disconnected_cb+0x5c>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   16936:	2001      	movs	r0, #1
   16938:	b002      	add	sp, #8
   1693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1693e:	f105 0888 	add.w	r8, r5, #136	; 0x88
   16942:	7a28      	ldrb	r0, [r5, #8]
   16944:	4641      	mov	r1, r8
   16946:	f00a f8a7 	bl	20a98 <bt_addr_le_is_bonded>
   1694a:	b988      	cbnz	r0, 16970 <disconnected_cb+0x50>
				if (ccc == &sc_ccc) {
   1694c:	4b1b      	ldr	r3, [pc, #108]	; (169bc <disconnected_cb+0x9c>)
   1694e:	429c      	cmp	r4, r3
   16950:	d102      	bne.n	16958 <disconnected_cb+0x38>
					sc_clear(conn);
   16952:	4628      	mov	r0, r5
   16954:	f00b fb4e 	bl	21ff4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16958:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   1695a:	2207      	movs	r2, #7
   1695c:	4669      	mov	r1, sp
   1695e:	4630      	mov	r0, r6
   16960:	9500      	str	r5, [sp, #0]
   16962:	f8cd 5003 	str.w	r5, [sp, #3]
   16966:	f009 fd4e 	bl	20406 <memcpy>
	cfg->id = 0U;
   1696a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1696c:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   1696e:	e01a      	b.n	169a6 <disconnected_cb+0x86>
   16970:	2207      	movs	r2, #7
   16972:	4641      	mov	r1, r8
   16974:	4630      	mov	r0, r6
   16976:	f009 fd46 	bl	20406 <memcpy>
   1697a:	e014      	b.n	169a6 <disconnected_cb+0x86>
		if (!cfg->value) {
   1697c:	8923      	ldrh	r3, [r4, #8]
   1697e:	b193      	cbz	r3, 169a6 <disconnected_cb+0x86>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16980:	4626      	mov	r6, r4
   16982:	4628      	mov	r0, r5
   16984:	f816 1b01 	ldrb.w	r1, [r6], #1
   16988:	4632      	mov	r2, r6
   1698a:	f00a fae9 	bl	20f60 <bt_conn_is_peer_addr_le>
   1698e:	2800      	cmp	r0, #0
   16990:	d1d5      	bne.n	1693e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16992:	7820      	ldrb	r0, [r4, #0]
   16994:	4631      	mov	r1, r6
   16996:	f7fe ff7b 	bl	15890 <bt_conn_lookup_addr_le>
			if (tmp) {
   1699a:	b120      	cbz	r0, 169a6 <disconnected_cb+0x86>
				if (tmp->state == BT_CONN_CONNECTED) {
   1699c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1699e:	f00a fa98 	bl	20ed2 <bt_conn_unref>
	if (!value_used) {
   169a2:	2d07      	cmp	r5, #7
   169a4:	d0c7      	beq.n	16936 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   169a6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   169a8:	2100      	movs	r1, #0
   169aa:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   169ac:	2b00      	cmp	r3, #0
   169ae:	d0c2      	beq.n	16936 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   169b0:	4638      	mov	r0, r7
   169b2:	4798      	blx	r3
   169b4:	e7bf      	b.n	16936 <disconnected_cb+0x16>
   169b6:	bf00      	nop
   169b8:	00021cd7 	.word	0x00021cd7
   169bc:	2000062c 	.word	0x2000062c

000169c0 <bt_gatt_init>:
{
   169c0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   169c2:	4b20      	ldr	r3, [pc, #128]	; (16a44 <bt_gatt_init+0x84>)
   169c4:	f3bf 8f5b 	dmb	ish
   169c8:	2201      	movs	r2, #1
   169ca:	e853 1f00 	ldrex	r1, [r3]
   169ce:	2900      	cmp	r1, #0
   169d0:	d103      	bne.n	169da <bt_gatt_init+0x1a>
   169d2:	e843 2000 	strex	r0, r2, [r3]
   169d6:	2800      	cmp	r0, #0
   169d8:	d1f7      	bne.n	169ca <bt_gatt_init+0xa>
   169da:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   169de:	d130      	bne.n	16a42 <bt_gatt_init+0x82>
   169e0:	f3bf 8f5b 	dmb	ish
   169e4:	4b18      	ldr	r3, [pc, #96]	; (16a48 <bt_gatt_init+0x88>)
   169e6:	e853 1f00 	ldrex	r1, [r3]
   169ea:	2900      	cmp	r1, #0
   169ec:	d103      	bne.n	169f6 <bt_gatt_init+0x36>
   169ee:	e843 2000 	strex	r0, r2, [r3]
   169f2:	2800      	cmp	r0, #0
   169f4:	d1f7      	bne.n	169e6 <bt_gatt_init+0x26>
   169f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   169fa:	d108      	bne.n	16a0e <bt_gatt_init+0x4e>
   169fc:	4a13      	ldr	r2, [pc, #76]	; (16a4c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   169fe:	4914      	ldr	r1, [pc, #80]	; (16a50 <bt_gatt_init+0x90>)
   16a00:	8813      	ldrh	r3, [r2, #0]
   16a02:	4c14      	ldr	r4, [pc, #80]	; (16a54 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   16a04:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a06:	42a1      	cmp	r1, r4
   16a08:	d315      	bcc.n	16a36 <bt_gatt_init+0x76>
   16a0a:	b100      	cbz	r0, 16a0e <bt_gatt_init+0x4e>
   16a0c:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   16a0e:	4b12      	ldr	r3, [pc, #72]	; (16a58 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16a10:	4912      	ldr	r1, [pc, #72]	; (16a5c <bt_gatt_init+0x9c>)
   16a12:	4813      	ldr	r0, [pc, #76]	; (16a60 <bt_gatt_init+0xa0>)
   16a14:	2200      	movs	r2, #0
	list->tail = NULL;
   16a16:	e9c3 2200 	strd	r2, r2, [r3]
   16a1a:	f00c ff8b 	bl	23934 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16a1e:	4810      	ldr	r0, [pc, #64]	; (16a60 <bt_gatt_init+0xa0>)
   16a20:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16a24:	2300      	movs	r3, #0
   16a26:	f005 f9c3 	bl	1bdb0 <k_work_schedule>
}
   16a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16a2e:	490d      	ldr	r1, [pc, #52]	; (16a64 <bt_gatt_init+0xa4>)
   16a30:	480d      	ldr	r0, [pc, #52]	; (16a68 <bt_gatt_init+0xa8>)
   16a32:	f00c bf7f 	b.w	23934 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   16a36:	6848      	ldr	r0, [r1, #4]
   16a38:	4403      	add	r3, r0
   16a3a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16a3c:	3108      	adds	r1, #8
   16a3e:	2001      	movs	r0, #1
   16a40:	e7e1      	b.n	16a06 <bt_gatt_init+0x46>
}
   16a42:	bd10      	pop	{r4, pc}
   16a44:	200027cc 	.word	0x200027cc
   16a48:	200027e8 	.word	0x200027e8
   16a4c:	2000346c 	.word	0x2000346c
   16a50:	000243ec 	.word	0x000243ec
   16a54:	0002440c 	.word	0x0002440c
   16a58:	200027b4 	.word	0x200027b4
   16a5c:	0002211b 	.word	0x0002211b
   16a60:	20001cc8 	.word	0x20001cc8
   16a64:	00016d7d 	.word	0x00016d7d
   16a68:	20001d40 	.word	0x20001d40

00016a6c <bt_gatt_attr_get_handle>:
{
   16a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16a70:	4603      	mov	r3, r0
   16a72:	b148      	cbz	r0, 16a88 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16a74:	8a00      	ldrh	r0, [r0, #16]
   16a76:	b938      	cbnz	r0, 16a88 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16a78:	4912      	ldr	r1, [pc, #72]	; (16ac4 <bt_gatt_attr_get_handle+0x58>)
   16a7a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16ac8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   16a7e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16a80:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16a84:	4571      	cmp	r1, lr
   16a86:	d301      	bcc.n	16a8c <bt_gatt_attr_get_handle+0x20>
}
   16a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   16a8c:	e9d1 7600 	ldrd	r7, r6, [r1]
   16a90:	42bb      	cmp	r3, r7
   16a92:	d304      	bcc.n	16a9e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16a94:	fb0c 7206 	mla	r2, ip, r6, r7
   16a98:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16a9a:	4293      	cmp	r3, r2
   16a9c:	d90e      	bls.n	16abc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   16a9e:	19a2      	adds	r2, r4, r6
   16aa0:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16aa2:	3108      	adds	r1, #8
   16aa4:	4614      	mov	r4, r2
   16aa6:	e7ed      	b.n	16a84 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16aa8:	fb0c 7805 	mla	r8, ip, r5, r7
   16aac:	4543      	cmp	r3, r8
   16aae:	d007      	beq.n	16ac0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16ab0:	3501      	adds	r5, #1
   16ab2:	1962      	adds	r2, r4, r5
   16ab4:	42b5      	cmp	r5, r6
   16ab6:	b292      	uxth	r2, r2
   16ab8:	d1f6      	bne.n	16aa8 <bt_gatt_attr_get_handle+0x3c>
   16aba:	e7f2      	b.n	16aa2 <bt_gatt_attr_get_handle+0x36>
   16abc:	2500      	movs	r5, #0
   16abe:	e7f8      	b.n	16ab2 <bt_gatt_attr_get_handle+0x46>
   16ac0:	4610      	mov	r0, r2
   16ac2:	e7e1      	b.n	16a88 <bt_gatt_attr_get_handle+0x1c>
   16ac4:	000243ec 	.word	0x000243ec
   16ac8:	0002440c 	.word	0x0002440c

00016acc <bt_gatt_foreach_attr_type>:
{
   16acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16ad4:	9100      	str	r1, [sp, #0]
   16ad6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16adc:	2d00      	cmp	r5, #0
   16ade:	bf08      	it	eq
   16ae0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16ae2:	4b24      	ldr	r3, [pc, #144]	; (16b74 <bt_gatt_foreach_attr_type+0xa8>)
   16ae4:	881b      	ldrh	r3, [r3, #0]
   16ae6:	4283      	cmp	r3, r0
{
   16ae8:	4607      	mov	r7, r0
   16aea:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16aec:	d23c      	bcs.n	16b68 <bt_gatt_foreach_attr_type+0x9c>
}
   16aee:	b003      	add	sp, #12
   16af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   16af4:	6873      	ldr	r3, [r6, #4]
   16af6:	4423      	add	r3, r4
   16af8:	42bb      	cmp	r3, r7
   16afa:	d232      	bcs.n	16b62 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16afc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16afe:	3608      	adds	r6, #8
   16b00:	4b1d      	ldr	r3, [pc, #116]	; (16b78 <bt_gatt_foreach_attr_type+0xac>)
   16b02:	429e      	cmp	r6, r3
   16b04:	d3f6      	bcc.n	16af4 <bt_gatt_foreach_attr_type+0x28>
   16b06:	e7f2      	b.n	16aee <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b08:	5889      	ldr	r1, [r1, r2]
   16b0a:	9301      	str	r3, [sp, #4]
   16b0c:	4640      	mov	r0, r8
   16b0e:	f009 fce6 	bl	204de <bt_uuid_cmp>
   16b12:	9b01      	ldr	r3, [sp, #4]
   16b14:	b190      	cbz	r0, 16b3c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16b16:	3401      	adds	r4, #1
   16b18:	f10a 0a01 	add.w	sl, sl, #1
   16b1c:	b2a4      	uxth	r4, r4
   16b1e:	6873      	ldr	r3, [r6, #4]
   16b20:	4553      	cmp	r3, sl
   16b22:	d9ec      	bls.n	16afe <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   16b24:	9b00      	ldr	r3, [sp, #0]
   16b26:	429c      	cmp	r4, r3
   16b28:	d8e1      	bhi.n	16aee <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16b2a:	42bc      	cmp	r4, r7
   16b2c:	d3f3      	bcc.n	16b16 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b2e:	6831      	ldr	r1, [r6, #0]
   16b30:	fb0b f20a 	mul.w	r2, fp, sl
   16b34:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16b36:	f1b8 0f00 	cmp.w	r8, #0
   16b3a:	d1e5      	bne.n	16b08 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16b3c:	f1b9 0f00 	cmp.w	r9, #0
   16b40:	d10b      	bne.n	16b5a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16b42:	3d01      	subs	r5, #1
   16b44:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16b46:	4618      	mov	r0, r3
   16b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16b4c:	4621      	mov	r1, r4
   16b4e:	4798      	blx	r3
	if (!*num_matches) {
   16b50:	2d00      	cmp	r5, #0
   16b52:	d0cc      	beq.n	16aee <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b54:	2800      	cmp	r0, #0
   16b56:	d1de      	bne.n	16b16 <bt_gatt_foreach_attr_type+0x4a>
   16b58:	e7c9      	b.n	16aee <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16b5a:	68da      	ldr	r2, [r3, #12]
   16b5c:	4591      	cmp	r9, r2
   16b5e:	d1da      	bne.n	16b16 <bt_gatt_foreach_attr_type+0x4a>
   16b60:	e7ef      	b.n	16b42 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16b62:	f04f 0a00 	mov.w	sl, #0
   16b66:	e7da      	b.n	16b1e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16b68:	4e04      	ldr	r6, [pc, #16]	; (16b7c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   16b6a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16b6c:	f04f 0b14 	mov.w	fp, #20
   16b70:	e7c6      	b.n	16b00 <bt_gatt_foreach_attr_type+0x34>
   16b72:	bf00      	nop
   16b74:	2000346c 	.word	0x2000346c
   16b78:	0002440c 	.word	0x0002440c
   16b7c:	000243ec 	.word	0x000243ec

00016b80 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   16b80:	b510      	push	{r4, lr}
   16b82:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16b84:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16b86:	aa1c      	add	r2, sp, #112	; 0x70
   16b88:	4669      	mov	r1, sp
   16b8a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16b8c:	e9cd 3300 	strd	r3, r3, [sp]
   16b90:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16b94:	f009 fb13 	bl	201be <tc_cmac_setup>
   16b98:	b320      	cbz	r0, 16be4 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16b9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16b9e:	2001      	movs	r0, #1
   16ba0:	4a11      	ldr	r2, [pc, #68]	; (16be8 <db_hash_gen.isra.0+0x68>)
   16ba2:	ab04      	add	r3, sp, #16
   16ba4:	f00b faae 	bl	22104 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16ba8:	4810      	ldr	r0, [pc, #64]	; (16bec <db_hash_gen.isra.0+0x6c>)
   16baa:	a904      	add	r1, sp, #16
   16bac:	f009 fb9e 	bl	202ec <tc_cmac_final>
   16bb0:	b1c0      	cbz	r0, 16be4 <db_hash_gen.isra.0+0x64>
   16bb2:	4b0e      	ldr	r3, [pc, #56]	; (16bec <db_hash_gen.isra.0+0x6c>)
   16bb4:	2208      	movs	r2, #8
   16bb6:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16bba:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16bbc:	780c      	ldrb	r4, [r1, #0]
   16bbe:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16bc2:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16bc4:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   16bc8:	d1f7      	bne.n	16bba <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16bca:	f3bf 8f5b 	dmb	ish
   16bce:	4b08      	ldr	r3, [pc, #32]	; (16bf0 <db_hash_gen.isra.0+0x70>)
   16bd0:	e853 2f00 	ldrex	r2, [r3]
   16bd4:	f042 0204 	orr.w	r2, r2, #4
   16bd8:	e843 2100 	strex	r1, r2, [r3]
   16bdc:	2900      	cmp	r1, #0
   16bde:	d1f7      	bne.n	16bd0 <db_hash_gen.isra.0+0x50>
   16be0:	f3bf 8f5b 	dmb	ish
}
   16be4:	b048      	add	sp, #288	; 0x120
   16be6:	bd10      	pop	{r4, pc}
   16be8:	00021ba3 	.word	0x00021ba3
   16bec:	20001cb8 	.word	0x20001cb8
   16bf0:	20001d70 	.word	0x20001d70

00016bf4 <gatt_indicate>:
{
   16bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16bf8:	4615      	mov	r5, r2
   16bfa:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16bfc:	2214      	movs	r2, #20
   16bfe:	6869      	ldr	r1, [r5, #4]
{
   16c00:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16c02:	f00b fa8c 	bl	2211e <bt_gatt_check_perm>
   16c06:	2800      	cmp	r0, #0
   16c08:	d139      	bne.n	16c7e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16c0a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16c0e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16c10:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16c12:	f7ff fd79 	bl	16708 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16c16:	3602      	adds	r6, #2
	if (!req) {
   16c18:	4604      	mov	r4, r0
   16c1a:	b920      	cbnz	r0, 16c26 <gatt_indicate+0x32>
		return -ENOMEM;
   16c1c:	f06f 050b 	mvn.w	r5, #11
}
   16c20:	4628      	mov	r0, r5
   16c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   16c26:	4b17      	ldr	r3, [pc, #92]	; (16c84 <gatt_indicate+0x90>)
   16c28:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16c2a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16c2c:	4632      	mov	r2, r6
   16c2e:	211d      	movs	r1, #29
   16c30:	4640      	mov	r0, r8
   16c32:	f00a feb4 	bl	2199e <bt_att_create_pdu>
	if (!buf) {
   16c36:	4606      	mov	r6, r0
   16c38:	b918      	cbnz	r0, 16c42 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   16c3a:	4620      	mov	r0, r4
   16c3c:	f7ff fd7a 	bl	16734 <bt_att_req_free>
   16c40:	e7ec      	b.n	16c1c <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   16c42:	f100 0a08 	add.w	sl, r0, #8
   16c46:	2102      	movs	r1, #2
   16c48:	4650      	mov	r0, sl
   16c4a:	f00b fb72 	bl	22332 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16c4e:	4607      	mov	r7, r0
   16c50:	8aa9      	ldrh	r1, [r5, #20]
   16c52:	f827 9b02 	strh.w	r9, [r7], #2
   16c56:	4650      	mov	r0, sl
   16c58:	f00b fb6b 	bl	22332 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   16c5c:	8aaa      	ldrh	r2, [r5, #20]
   16c5e:	6929      	ldr	r1, [r5, #16]
   16c60:	4638      	mov	r0, r7
   16c62:	f009 fbd0 	bl	20406 <memcpy>
	req->buf = buf;
   16c66:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16c68:	4621      	mov	r1, r4
   16c6a:	4640      	mov	r0, r8
   16c6c:	f00a ff63 	bl	21b36 <bt_att_req_send>
	if (err) {
   16c70:	4605      	mov	r5, r0
   16c72:	2800      	cmp	r0, #0
   16c74:	d0d4      	beq.n	16c20 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16c76:	4620      	mov	r0, r4
   16c78:	f7ff fd5c 	bl	16734 <bt_att_req_free>
   16c7c:	e7d0      	b.n	16c20 <gatt_indicate+0x2c>
		return -EPERM;
   16c7e:	f04f 35ff 	mov.w	r5, #4294967295
   16c82:	e7cd      	b.n	16c20 <gatt_indicate+0x2c>
   16c84:	00021b75 	.word	0x00021b75

00016c88 <bt_gatt_indicate>:
{
   16c88:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16c8a:	4b39      	ldr	r3, [pc, #228]	; (16d70 <bt_gatt_indicate+0xe8>)
   16c8c:	f3bf 8f5b 	dmb	ish
   16c90:	681b      	ldr	r3, [r3, #0]
   16c92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16c96:	079a      	lsls	r2, r3, #30
{
   16c98:	b08b      	sub	sp, #44	; 0x2c
   16c9a:	4604      	mov	r4, r0
   16c9c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16c9e:	d561      	bpl.n	16d64 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16ca0:	b110      	cbz	r0, 16ca8 <bt_gatt_indicate+0x20>
   16ca2:	7a83      	ldrb	r3, [r0, #10]
   16ca4:	2b07      	cmp	r3, #7
   16ca6:	d160      	bne.n	16d6a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   16ca8:	6868      	ldr	r0, [r5, #4]
   16caa:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16cac:	f7ff fede 	bl	16a6c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16cb0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16cb2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16cb6:	b33a      	cbz	r2, 16d08 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16cb8:	a905      	add	r1, sp, #20
   16cba:	9102      	str	r1, [sp, #8]
   16cbc:	492d      	ldr	r1, [pc, #180]	; (16d74 <bt_gatt_indicate+0xec>)
   16cbe:	9101      	str	r1, [sp, #4]
   16cc0:	2101      	movs	r1, #1
	found->attr = NULL;
   16cc2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16cc4:	9100      	str	r1, [sp, #0]
   16cc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16cca:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16ccc:	f7ff fefe 	bl	16acc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16cd0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16cd2:	b91b      	cbnz	r3, 16cdc <bt_gatt_indicate+0x54>
			return -ENOENT;
   16cd4:	f06f 0001 	mvn.w	r0, #1
}
   16cd8:	b00b      	add	sp, #44	; 0x2c
   16cda:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16cdc:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16cde:	9b05      	ldr	r3, [sp, #20]
   16ce0:	6818      	ldr	r0, [r3, #0]
   16ce2:	2300      	movs	r3, #0
   16ce4:	f88d 3010 	strb.w	r3, [sp, #16]
   16ce8:	a904      	add	r1, sp, #16
   16cea:	f642 0303 	movw	r3, #10243	; 0x2803
   16cee:	f8ad 3012 	strh.w	r3, [sp, #18]
   16cf2:	f009 fbf4 	bl	204de <bt_uuid_cmp>
   16cf6:	b970      	cbnz	r0, 16d16 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16cf8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16cfa:	68c3      	ldr	r3, [r0, #12]
   16cfc:	799b      	ldrb	r3, [r3, #6]
   16cfe:	069b      	lsls	r3, r3, #26
   16d00:	d405      	bmi.n	16d0e <bt_gatt_indicate+0x86>
			return -EINVAL;
   16d02:	f06f 0015 	mvn.w	r0, #21
   16d06:	e7e7      	b.n	16cd8 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   16d08:	2800      	cmp	r0, #0
   16d0a:	d1e8      	bne.n	16cde <bt_gatt_indicate+0x56>
   16d0c:	e7e2      	b.n	16cd4 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16d0e:	f00b f9ab 	bl	22068 <bt_gatt_attr_value_handle>
   16d12:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   16d16:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   16d1a:	b13c      	cbz	r4, 16d2c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16d1c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16d1e:	4601      	mov	r1, r0
		params->_ref = 1;
   16d20:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16d22:	462a      	mov	r2, r5
   16d24:	4620      	mov	r0, r4
   16d26:	f7ff ff65 	bl	16bf4 <gatt_indicate>
   16d2a:	e7d5      	b.n	16cd8 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   16d2c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16d30:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16d32:	2302      	movs	r3, #2
   16d34:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16d38:	f642 1302 	movw	r3, #10498	; 0x2902
   16d3c:	f8ad 3012 	strh.w	r3, [sp, #18]
   16d40:	ab05      	add	r3, sp, #20
   16d42:	9302      	str	r3, [sp, #8]
   16d44:	4b0c      	ldr	r3, [pc, #48]	; (16d78 <bt_gatt_indicate+0xf0>)
   16d46:	9301      	str	r3, [sp, #4]
   16d48:	2301      	movs	r3, #1
   16d4a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16d4c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16d4e:	4623      	mov	r3, r4
   16d50:	aa04      	add	r2, sp, #16
   16d52:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16d56:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16d58:	f88d 4010 	strb.w	r4, [sp, #16]
   16d5c:	f7ff feb6 	bl	16acc <bt_gatt_foreach_attr_type>
	return data.err;
   16d60:	9807      	ldr	r0, [sp, #28]
   16d62:	e7b9      	b.n	16cd8 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   16d64:	f06f 000a 	mvn.w	r0, #10
   16d68:	e7b6      	b.n	16cd8 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   16d6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16d6e:	e7b3      	b.n	16cd8 <bt_gatt_indicate+0x50>
   16d70:	2000037c 	.word	0x2000037c
   16d74:	00021b9b 	.word	0x00021b9b
   16d78:	00016de5 	.word	0x00016de5

00016d7c <sc_process>:
{
   16d7c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16d7e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   16d82:	9201      	str	r2, [sp, #4]
{
   16d84:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16d86:	f1a0 0120 	sub.w	r1, r0, #32
   16d8a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16d8e:	f3bf 8f5b 	dmb	ish
   16d92:	e854 2f00 	ldrex	r2, [r4]
   16d96:	f022 0201 	bic.w	r2, r2, #1
   16d9a:	e844 2000 	strex	r0, r2, [r4]
   16d9e:	2800      	cmp	r0, #0
   16da0:	d1f7      	bne.n	16d92 <sc_process+0x16>
   16da2:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16da6:	4a0d      	ldr	r2, [pc, #52]	; (16ddc <sc_process+0x60>)
   16da8:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16dac:	4a0c      	ldr	r2, [pc, #48]	; (16de0 <sc_process+0x64>)
   16dae:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16db2:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16db4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16db6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16dba:	2204      	movs	r2, #4
	sc->start = 0U;
   16dbc:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16dc0:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16dc4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16dc8:	f7ff ff5e 	bl	16c88 <bt_gatt_indicate>
   16dcc:	b918      	cbnz	r0, 16dd6 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16dce:	2101      	movs	r1, #1
   16dd0:	4620      	mov	r0, r4
   16dd2:	f00a ff3c 	bl	21c4e <atomic_set_bit>
}
   16dd6:	b002      	add	sp, #8
   16dd8:	bd10      	pop	{r4, pc}
   16dda:	bf00      	nop
   16ddc:	000248f0 	.word	0x000248f0
   16de0:	000168c5 	.word	0x000168c5

00016de4 <notify_cb>:
{
   16de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16de6:	4b32      	ldr	r3, [pc, #200]	; (16eb0 <notify_cb+0xcc>)
{
   16de8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16dea:	6882      	ldr	r2, [r0, #8]
   16dec:	429a      	cmp	r2, r3
{
   16dee:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16df0:	d12e      	bne.n	16e50 <notify_cb+0x6c>
	ccc = attr->user_data;
   16df2:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16df4:	4b2f      	ldr	r3, [pc, #188]	; (16eb4 <notify_cb+0xd0>)
   16df6:	429f      	cmp	r7, r3
   16df8:	d11a      	bne.n	16e30 <notify_cb+0x4c>
	return memcmp(a, b, sizeof(*a));
   16dfa:	4d2f      	ldr	r5, [pc, #188]	; (16eb8 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16dfc:	2300      	movs	r3, #0
   16dfe:	2207      	movs	r2, #7
   16e00:	4669      	mov	r1, sp
   16e02:	1c68      	adds	r0, r5, #1
   16e04:	9300      	str	r3, [sp, #0]
   16e06:	f8cd 3003 	str.w	r3, [sp, #3]
   16e0a:	f009 fad5 	bl	203b8 <memcmp>
   16e0e:	b178      	cbz	r0, 16e30 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16e10:	4629      	mov	r1, r5
   16e12:	2207      	movs	r2, #7
   16e14:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e18:	f7fe fd58 	bl	158cc <bt_conn_lookup_state_le>
			if (!conn) {
   16e1c:	b9e0      	cbnz	r0, 16e58 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   16e1e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   16e20:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   16e22:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16e24:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e28:	8853      	ldrh	r3, [r2, #2]
   16e2a:	8812      	ldrh	r2, [r2, #0]
   16e2c:	f00b f8ba 	bl	21fa4 <sc_save>
		if (cfg->value != data->type) {
   16e30:	893a      	ldrh	r2, [r7, #8]
   16e32:	89a3      	ldrh	r3, [r4, #12]
   16e34:	429a      	cmp	r2, r3
   16e36:	d10b      	bne.n	16e50 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16e38:	4639      	mov	r1, r7
   16e3a:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e3e:	f7fe fd27 	bl	15890 <bt_conn_lookup_addr_le>
		if (!conn) {
   16e42:	4605      	mov	r5, r0
   16e44:	b120      	cbz	r0, 16e50 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   16e46:	7a83      	ldrb	r3, [r0, #10]
   16e48:	2b07      	cmp	r3, #7
   16e4a:	d008      	beq.n	16e5e <notify_cb+0x7a>
			bt_conn_unref(conn);
   16e4c:	f00a f841 	bl	20ed2 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   16e50:	2701      	movs	r7, #1
}
   16e52:	4638      	mov	r0, r7
   16e54:	b003      	add	sp, #12
   16e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16e58:	f00a f83b 	bl	20ed2 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e5c:	e7e8      	b.n	16e30 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16e5e:	697b      	ldr	r3, [r7, #20]
   16e60:	b123      	cbz	r3, 16e6c <notify_cb+0x88>
   16e62:	4631      	mov	r1, r6
   16e64:	4798      	blx	r3
   16e66:	b908      	cbnz	r0, 16e6c <notify_cb+0x88>
			bt_conn_unref(conn);
   16e68:	4628      	mov	r0, r5
   16e6a:	e7ef      	b.n	16e4c <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   16e6c:	2214      	movs	r2, #20
   16e6e:	4631      	mov	r1, r6
   16e70:	4628      	mov	r0, r5
   16e72:	f00b f954 	bl	2211e <bt_gatt_check_perm>
   16e76:	4607      	mov	r7, r0
   16e78:	2800      	cmp	r0, #0
   16e7a:	d1e9      	bne.n	16e50 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16e7c:	89a3      	ldrh	r3, [r4, #12]
   16e7e:	88a1      	ldrh	r1, [r4, #4]
   16e80:	6922      	ldr	r2, [r4, #16]
   16e82:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   16e84:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   16e86:	d10f      	bne.n	16ea8 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   16e88:	f7ff feb4 	bl	16bf4 <gatt_indicate>
			if (err == 0) {
   16e8c:	4606      	mov	r6, r0
   16e8e:	b918      	cbnz	r0, 16e98 <notify_cb+0xb4>
				data->ind_params->_ref++;
   16e90:	6922      	ldr	r2, [r4, #16]
   16e92:	7d93      	ldrb	r3, [r2, #22]
   16e94:	3301      	adds	r3, #1
   16e96:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16e98:	4628      	mov	r0, r5
   16e9a:	f00a f81a 	bl	20ed2 <bt_conn_unref>
		if (err < 0) {
   16e9e:	2e00      	cmp	r6, #0
   16ea0:	dbd7      	blt.n	16e52 <notify_cb+0x6e>
		data->err = 0;
   16ea2:	2300      	movs	r3, #0
   16ea4:	60a3      	str	r3, [r4, #8]
   16ea6:	e7d3      	b.n	16e50 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16ea8:	f00b f95c 	bl	22164 <gatt_notify>
   16eac:	4606      	mov	r6, r0
   16eae:	e7f3      	b.n	16e98 <notify_cb+0xb4>
   16eb0:	00021cd7 	.word	0x00021cd7
   16eb4:	2000062c 	.word	0x2000062c
   16eb8:	2000346e 	.word	0x2000346e

00016ebc <update_ccc>:
{
   16ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ebe:	4b24      	ldr	r3, [pc, #144]	; (16f50 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   16ec0:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ec2:	6882      	ldr	r2, [r0, #8]
   16ec4:	429a      	cmp	r2, r3
{
   16ec6:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ec8:	d13f      	bne.n	16f4a <update_ccc+0x8e>
	ccc = attr->user_data;
   16eca:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16ecc:	8933      	ldrh	r3, [r6, #8]
   16ece:	2b00      	cmp	r3, #0
   16ed0:	d03b      	beq.n	16f4a <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16ed2:	4632      	mov	r2, r6
   16ed4:	4620      	mov	r0, r4
   16ed6:	f812 1b01 	ldrb.w	r1, [r2], #1
   16eda:	f00a f841 	bl	20f60 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16ede:	2800      	cmp	r0, #0
   16ee0:	d033      	beq.n	16f4a <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16ee2:	222a      	movs	r2, #42	; 0x2a
   16ee4:	4629      	mov	r1, r5
   16ee6:	4620      	mov	r0, r4
   16ee8:	f00b f919 	bl	2211e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16eec:	2803      	cmp	r0, #3
   16eee:	d02c      	beq.n	16f4a <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   16ef0:	4631      	mov	r1, r6
   16ef2:	4628      	mov	r0, r5
   16ef4:	f00a fe34 	bl	21b60 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16ef8:	4b16      	ldr	r3, [pc, #88]	; (16f54 <update_ccc+0x98>)
   16efa:	429e      	cmp	r6, r3
   16efc:	d125      	bne.n	16f4a <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16efe:	7a20      	ldrb	r0, [r4, #8]
   16f00:	f104 0188 	add.w	r1, r4, #136	; 0x88
   16f04:	f7ff fcb0 	bl	16868 <find_sc_cfg>
	if (!cfg) {
   16f08:	b1f8      	cbz	r0, 16f4a <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   16f0a:	8902      	ldrh	r2, [r0, #8]
   16f0c:	8943      	ldrh	r3, [r0, #10]
   16f0e:	ea53 0102 	orrs.w	r1, r3, r2
   16f12:	d01a      	beq.n	16f4a <update_ccc+0x8e>
	index = bt_conn_index(conn);
   16f14:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16f16:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16f1a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16f1e:	f7fe fbf1 	bl	15704 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16f22:	490d      	ldr	r1, [pc, #52]	; (16f58 <update_ccc+0x9c>)
   16f24:	4a0d      	ldr	r2, [pc, #52]	; (16f5c <update_ccc+0xa0>)
   16f26:	2318      	movs	r3, #24
   16f28:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f2c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16f2e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16f30:	4a0b      	ldr	r2, [pc, #44]	; (16f60 <update_ccc+0xa4>)
   16f32:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16f34:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   16f3a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16f3c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f3e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16f42:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f44:	4620      	mov	r0, r4
   16f46:	f7ff fe9f 	bl	16c88 <bt_gatt_indicate>
}
   16f4a:	2001      	movs	r0, #1
   16f4c:	b002      	add	sp, #8
   16f4e:	bd70      	pop	{r4, r5, r6, pc}
   16f50:	00021cd7 	.word	0x00021cd7
   16f54:	2000062c 	.word	0x2000062c
   16f58:	200027d0 	.word	0x200027d0
   16f5c:	000248f0 	.word	0x000248f0
   16f60:	00021c9f 	.word	0x00021c9f

00016f64 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16f64:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f66:	4a06      	ldr	r2, [pc, #24]	; (16f80 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16f68:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f6a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16f6c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16f72:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f76:	f00b f8c5 	bl	22104 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16f7a:	b003      	add	sp, #12
   16f7c:	f85d fb04 	ldr.w	pc, [sp], #4
   16f80:	00016ebd 	.word	0x00016ebd

00016f84 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   16f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16f86:	4b09      	ldr	r3, [pc, #36]	; (16fac <bt_gatt_att_max_mtu_changed+0x28>)
   16f88:	681c      	ldr	r4, [r3, #0]
{
   16f8a:	4605      	mov	r5, r0
   16f8c:	460e      	mov	r6, r1
   16f8e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16f90:	b10c      	cbz	r4, 16f96 <bt_gatt_att_max_mtu_changed+0x12>
   16f92:	3c04      	subs	r4, #4
   16f94:	b904      	cbnz	r4, 16f98 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   16f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16f98:	6823      	ldr	r3, [r4, #0]
   16f9a:	b11b      	cbz	r3, 16fa4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   16f9c:	463a      	mov	r2, r7
   16f9e:	4631      	mov	r1, r6
   16fa0:	4628      	mov	r0, r5
   16fa2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16fa4:	1d23      	adds	r3, r4, #4
   16fa6:	d0f6      	beq.n	16f96 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16fa8:	6864      	ldr	r4, [r4, #4]
   16faa:	e7f1      	b.n	16f90 <bt_gatt_att_max_mtu_changed+0xc>
   16fac:	200027b4 	.word	0x200027b4

00016fb0 <db_hash_read>:
{
   16fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16fb2:	4915      	ldr	r1, [pc, #84]	; (17008 <db_hash_read+0x58>)
{
   16fb4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16fb8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16fba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16fbe:	461f      	mov	r7, r3
   16fc0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16fc2:	f00c fcd7 	bl	23974 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fc6:	f3bf 8f5b 	dmb	ish
   16fca:	4b10      	ldr	r3, [pc, #64]	; (1700c <db_hash_read+0x5c>)
   16fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16fce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16fd2:	075b      	lsls	r3, r3, #29
   16fd4:	d401      	bmi.n	16fda <db_hash_read+0x2a>
		db_hash_gen(true);
   16fd6:	f7ff fdd3 	bl	16b80 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   16fda:	2101      	movs	r1, #1
   16fdc:	4620      	mov	r0, r4
   16fde:	f00b f8f4 	bl	221ca <bt_gatt_change_aware>
	if (offset > value_len) {
   16fe2:	2e10      	cmp	r6, #16
   16fe4:	d80c      	bhi.n	17000 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   16fe6:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   16fea:	4909      	ldr	r1, [pc, #36]	; (17010 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   16fec:	42bc      	cmp	r4, r7
   16fee:	bfa8      	it	ge
   16ff0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   16ff2:	4622      	mov	r2, r4
   16ff4:	4431      	add	r1, r6
   16ff6:	4628      	mov	r0, r5
   16ff8:	f009 fa05 	bl	20406 <memcpy>
}
   16ffc:	4620      	mov	r0, r4
   16ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17000:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17004:	e7fa      	b.n	16ffc <db_hash_read+0x4c>
   17006:	bf00      	nop
   17008:	20001cf8 	.word	0x20001cf8
   1700c:	20001d20 	.word	0x20001d20
   17010:	20001cb8 	.word	0x20001cb8

00017014 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17014:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17016:	4603      	mov	r3, r0
   17018:	4a15      	ldr	r2, [pc, #84]	; (17070 <bt_gatt_disconnected+0x5c>)
{
   1701a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1701c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17020:	2001      	movs	r0, #1
   17022:	f00b f86f 	bl	22104 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   17026:	4628      	mov	r0, r5
   17028:	f7ff fc2e 	bl	16888 <find_cf_cfg>
	if (!cfg) {
   1702c:	4604      	mov	r4, r0
   1702e:	b1e8      	cbz	r0, 1706c <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17030:	f105 0688 	add.w	r6, r5, #136	; 0x88
   17034:	7a28      	ldrb	r0, [r5, #8]
   17036:	4631      	mov	r1, r6
   17038:	f009 fd2e 	bl	20a98 <bt_addr_le_is_bonded>
   1703c:	b920      	cbnz	r0, 17048 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1703e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   17040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   17044:	f00a bea2 	b.w	21d8c <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   17048:	1c60      	adds	r0, r4, #1
   1704a:	2207      	movs	r2, #7
   1704c:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1704e:	340c      	adds	r4, #12
   17050:	f009 f9d9 	bl	20406 <memcpy>
   17054:	f3bf 8f5b 	dmb	ish
   17058:	e854 3f00 	ldrex	r3, [r4]
   1705c:	f023 0302 	bic.w	r3, r3, #2
   17060:	e844 3200 	strex	r2, r3, [r4]
   17064:	2a00      	cmp	r2, #0
   17066:	d1f7      	bne.n	17058 <bt_gatt_disconnected+0x44>
   17068:	f3bf 8f5b 	dmb	ish
}
   1706c:	bd70      	pop	{r4, r5, r6, pc}
   1706e:	bf00      	nop
   17070:	00016921 	.word	0x00016921

00017074 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   17074:	4b04      	ldr	r3, [pc, #16]	; (17088 <bt_smp_accept+0x14>)
   17076:	6818      	ldr	r0, [r3, #0]
   17078:	b918      	cbnz	r0, 17082 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   1707a:	4a04      	ldr	r2, [pc, #16]	; (1708c <bt_smp_accept+0x18>)
   1707c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   1707e:	600b      	str	r3, [r1, #0]

		return 0;
   17080:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   17082:	f06f 000b 	mvn.w	r0, #11
}
   17086:	4770      	bx	lr
   17088:	20001d78 	.word	0x20001d78
   1708c:	000249cc 	.word	0x000249cc

00017090 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   17090:	4b02      	ldr	r3, [pc, #8]	; (1709c <net_buf_pool_get+0xc>)
   17092:	222c      	movs	r2, #44	; 0x2c
   17094:	fb02 3000 	mla	r0, r2, r0, r3
   17098:	4770      	bx	lr
   1709a:	bf00      	nop
   1709c:	20000bc0 	.word	0x20000bc0

000170a0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   170a0:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   170a2:	4a06      	ldr	r2, [pc, #24]	; (170bc <net_buf_id+0x1c>)
   170a4:	212c      	movs	r1, #44	; 0x2c
   170a6:	fb01 2303 	mla	r3, r1, r3, r2
   170aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   170ac:	7f1b      	ldrb	r3, [r3, #28]
   170ae:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   170b0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   170b2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   170b6:	fbb0 f0f3 	udiv	r0, r0, r3
   170ba:	4770      	bx	lr
   170bc:	20000bc0 	.word	0x20000bc0

000170c0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   170c0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   170c2:	4a0a      	ldr	r2, [pc, #40]	; (170ec <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   170c4:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   170c6:	242c      	movs	r4, #44	; 0x2c
   170c8:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   170cc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   170ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   170d0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   170d2:	6823      	ldr	r3, [r4, #0]
   170d4:	429a      	cmp	r2, r3
   170d6:	bf94      	ite	ls
   170d8:	600a      	strls	r2, [r1, #0]
   170da:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   170dc:	f7ff ffe0 	bl	170a0 <net_buf_id>
   170e0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   170e4:	fb02 3000 	mla	r0, r2, r0, r3
   170e8:	bd10      	pop	{r4, pc}
   170ea:	bf00      	nop
   170ec:	20000bc0 	.word	0x20000bc0

000170f0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   170f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   170f4:	4605      	mov	r5, r0
   170f6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   170f8:	4610      	mov	r0, r2
   170fa:	4619      	mov	r1, r3
{
   170fc:	4616      	mov	r6, r2
   170fe:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17100:	f00c fdc4 	bl	23c8c <sys_clock_timeout_end_calc>
   17104:	4680      	mov	r8, r0
   17106:	4689      	mov	r9, r1
	__asm__ volatile(
   17108:	f04f 0340 	mov.w	r3, #64	; 0x40
   1710c:	f3ef 8a11 	mrs	sl, BASEPRI
   17110:	f383 8812 	msr	BASEPRI_MAX, r3
   17114:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17118:	8b6b      	ldrh	r3, [r5, #26]
   1711a:	2b00      	cmp	r3, #0
   1711c:	d059      	beq.n	171d2 <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1711e:	8b2a      	ldrh	r2, [r5, #24]
   17120:	429a      	cmp	r2, r3
   17122:	d93d      	bls.n	171a0 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   17124:	2200      	movs	r2, #0
   17126:	2300      	movs	r3, #0
   17128:	4628      	mov	r0, r5
   1712a:	f004 fc0b 	bl	1b944 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1712e:	4604      	mov	r4, r0
   17130:	2800      	cmp	r0, #0
   17132:	d035      	beq.n	171a0 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   17134:	f38a 8811 	msr	BASEPRI, sl
   17138:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1713c:	9b01      	ldr	r3, [sp, #4]
   1713e:	2b00      	cmp	r3, #0
   17140:	d057      	beq.n	171f2 <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   17142:	ea56 0307 	orrs.w	r3, r6, r7
   17146:	d010      	beq.n	1716a <net_buf_alloc_len+0x7a>
   17148:	1c7b      	adds	r3, r7, #1
   1714a:	bf08      	it	eq
   1714c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   17150:	d00b      	beq.n	1716a <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   17152:	f005 fb43 	bl	1c7dc <sys_clock_tick_get>
   17156:	ebb8 0600 	subs.w	r6, r8, r0
   1715a:	eb69 0701 	sbc.w	r7, r9, r1
   1715e:	2e00      	cmp	r6, #0
   17160:	f177 0300 	sbcs.w	r3, r7, #0
   17164:	bfbc      	itt	lt
   17166:	2600      	movlt	r6, #0
   17168:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1716a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1716c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 17208 <net_buf_alloc_len+0x118>
   17170:	f04f 092c 	mov.w	r9, #44	; 0x2c
   17174:	fb09 8303 	mla	r3, r9, r3, r8
   17178:	4632      	mov	r2, r6
   1717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1717c:	681b      	ldr	r3, [r3, #0]
   1717e:	a901      	add	r1, sp, #4
   17180:	681d      	ldr	r5, [r3, #0]
   17182:	4620      	mov	r0, r4
   17184:	463b      	mov	r3, r7
   17186:	47a8      	blx	r5
   17188:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1718a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1718c:	2800      	cmp	r0, #0
   1718e:	d131      	bne.n	171f4 <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   17190:	79a0      	ldrb	r0, [r4, #6]
   17192:	4621      	mov	r1, r4
   17194:	fb00 8009 	mla	r0, r0, r9, r8
   17198:	f00c fae9 	bl	2376e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1719c:	462c      	mov	r4, r5
}
   1719e:	e024      	b.n	171ea <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   171a0:	8b6b      	ldrh	r3, [r5, #26]
   171a2:	1e5a      	subs	r2, r3, #1
   171a4:	836a      	strh	r2, [r5, #26]
   171a6:	f38a 8811 	msr	BASEPRI, sl
   171aa:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   171ae:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   171b0:	8b2c      	ldrh	r4, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   171b2:	f102 0017 	add.w	r0, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   171b6:	1ae4      	subs	r4, r4, r3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   171b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   171ba:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   171be:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   171c2:	4811      	ldr	r0, [pc, #68]	; (17208 <net_buf_alloc_len+0x118>)
   171c4:	4b11      	ldr	r3, [pc, #68]	; (1720c <net_buf_alloc_len+0x11c>)
	buf->user_data_size = pool->user_data_size;
   171c6:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   171c8:	1a2d      	subs	r5, r5, r0
   171ca:	10ad      	asrs	r5, r5, #2
   171cc:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   171ce:	71a5      	strb	r5, [r4, #6]
		goto success;
   171d0:	e7b4      	b.n	1713c <net_buf_alloc_len+0x4c>
   171d2:	f38a 8811 	msr	BASEPRI, sl
   171d6:	f3bf 8f6f 	isb	sy
   171da:	4632      	mov	r2, r6
   171dc:	463b      	mov	r3, r7
   171de:	4628      	mov	r0, r5
   171e0:	f004 fbb0 	bl	1b944 <z_impl_k_queue_get>
	if (!buf) {
   171e4:	4604      	mov	r4, r0
   171e6:	2800      	cmp	r0, #0
   171e8:	d1a8      	bne.n	1713c <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   171ea:	4620      	mov	r0, r4
   171ec:	b002      	add	sp, #8
   171ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   171f2:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   171f4:	2300      	movs	r3, #0
	buf->ref   = 1U;
   171f6:	2201      	movs	r2, #1
	buf->frags = NULL;
   171f8:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   171fa:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   171fc:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   171fe:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   17200:	6923      	ldr	r3, [r4, #16]
   17202:	81e2      	strh	r2, [r4, #14]
   17204:	60a3      	str	r3, [r4, #8]
	return buf;
   17206:	e7f0      	b.n	171ea <net_buf_alloc_len+0xfa>
   17208:	20000bc0 	.word	0x20000bc0
   1720c:	ba2e8ba3 	.word	0xba2e8ba3

00017210 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17214:	4d16      	ldr	r5, [pc, #88]	; (17270 <net_buf_unref+0x60>)
   17216:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17218:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1721a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1721c:	b90c      	cbnz	r4, 17222 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   17222:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   17224:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   17228:	3b01      	subs	r3, #1
   1722a:	b2db      	uxtb	r3, r3
   1722c:	7123      	strb	r3, [r4, #4]
   1722e:	2b00      	cmp	r3, #0
   17230:	d1f5      	bne.n	1721e <net_buf_unref+0xe>
		if (buf->__buf) {
   17232:	6921      	ldr	r1, [r4, #16]
   17234:	b159      	cbz	r1, 1724e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   17236:	7963      	ldrb	r3, [r4, #5]
   17238:	079b      	lsls	r3, r3, #30
   1723a:	d407      	bmi.n	1724c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1723c:	79a3      	ldrb	r3, [r4, #6]
   1723e:	fb07 5303 	mla	r3, r7, r3, r5
   17242:	4620      	mov	r0, r4
   17244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17246:	681b      	ldr	r3, [r3, #0]
   17248:	689b      	ldr	r3, [r3, #8]
   1724a:	4798      	blx	r3
			buf->__buf = NULL;
   1724c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1724e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   17250:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   17252:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   17256:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17258:	6a1b      	ldr	r3, [r3, #32]
   1725a:	b11b      	cbz	r3, 17264 <net_buf_unref+0x54>
			pool->destroy(buf);
   1725c:	4620      	mov	r0, r4
   1725e:	4798      	blx	r3
{
   17260:	4644      	mov	r4, r8
   17262:	e7db      	b.n	1721c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   17264:	4621      	mov	r1, r4
   17266:	fb00 5007 	mla	r0, r0, r7, r5
   1726a:	f00c fa80 	bl	2376e <k_queue_prepend>
}
   1726e:	e7f7      	b.n	17260 <net_buf_unref+0x50>
   17270:	20000bc0 	.word	0x20000bc0

00017274 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   17274:	4a05      	ldr	r2, [pc, #20]	; (1728c <adc_context_start_sampling.isra.0+0x18>)
   17276:	2301      	movs	r3, #1
   17278:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1727c:	b108      	cbz	r0, 17282 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1727e:	60d3      	str	r3, [r2, #12]
}
   17280:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17282:	6013      	str	r3, [r2, #0]
   17284:	4a02      	ldr	r2, [pc, #8]	; (17290 <adc_context_start_sampling.isra.0+0x1c>)
   17286:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   17288:	4770      	bx	lr
   1728a:	bf00      	nop
   1728c:	40007000 	.word	0x40007000
   17290:	40007004 	.word	0x40007004

00017294 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   17294:	7908      	ldrb	r0, [r1, #4]
{
   17296:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   17298:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1729c:	2c07      	cmp	r4, #7
   1729e:	d81f      	bhi.n	172e0 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   172a0:	780b      	ldrb	r3, [r1, #0]
   172a2:	2b09      	cmp	r3, #9
   172a4:	d81c      	bhi.n	172e0 <adc_nrfx_channel_setup+0x4c>
   172a6:	e8df f003 	tbb	[pc, r3]
   172aa:	0606      	.short	0x0606
   172ac:	1b060606 	.word	0x1b060606
   172b0:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   172b4:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   172b6:	784a      	ldrb	r2, [r1, #1]
   172b8:	2a03      	cmp	r2, #3
   172ba:	d018      	beq.n	172ee <adc_nrfx_channel_setup+0x5a>
   172bc:	2a04      	cmp	r2, #4
   172be:	d10f      	bne.n	172e0 <adc_nrfx_channel_setup+0x4c>
   172c0:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   172c2:	884a      	ldrh	r2, [r1, #2]
   172c4:	f244 060a 	movw	r6, #16394	; 0x400a
   172c8:	42b2      	cmp	r2, r6
   172ca:	d044      	beq.n	17356 <adc_nrfx_channel_setup+0xc2>
   172cc:	d811      	bhi.n	172f2 <adc_nrfx_channel_setup+0x5e>
   172ce:	f244 0603 	movw	r6, #16387	; 0x4003
   172d2:	42b2      	cmp	r2, r6
   172d4:	d03b      	beq.n	1734e <adc_nrfx_channel_setup+0xba>
   172d6:	f244 0605 	movw	r6, #16389	; 0x4005
   172da:	42b2      	cmp	r2, r6
   172dc:	d039      	beq.n	17352 <adc_nrfx_channel_setup+0xbe>
   172de:	b3d2      	cbz	r2, 17356 <adc_nrfx_channel_setup+0xc2>
   172e0:	f06f 0015 	mvn.w	r0, #21
   172e4:	e032      	b.n	1734c <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   172e6:	2306      	movs	r3, #6
		break;
   172e8:	e7e5      	b.n	172b6 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   172ea:	2307      	movs	r3, #7
		break;
   172ec:	e7e3      	b.n	172b6 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   172ee:	2501      	movs	r5, #1
   172f0:	e7e7      	b.n	172c2 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   172f2:	f244 0614 	movw	r6, #16404	; 0x4014
   172f6:	42b2      	cmp	r2, r6
   172f8:	d02f      	beq.n	1735a <adc_nrfx_channel_setup+0xc6>
   172fa:	f244 0628 	movw	r6, #16424	; 0x4028
   172fe:	42b2      	cmp	r2, r6
   17300:	d02d      	beq.n	1735e <adc_nrfx_channel_setup+0xca>
   17302:	f244 060f 	movw	r6, #16399	; 0x400f
   17306:	42b2      	cmp	r2, r6
   17308:	d1ea      	bne.n	172e0 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1730a:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1730c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   17310:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   17312:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   17316:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1731a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1731e:	0122      	lsls	r2, r4, #4
   17320:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17324:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   17328:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1732a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1732e:	0123      	lsls	r3, r4, #4
   17330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17334:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   17338:	798a      	ldrb	r2, [r1, #6]
   1733a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1733e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   17342:	4b08      	ldr	r3, [pc, #32]	; (17364 <adc_nrfx_channel_setup+0xd0>)
   17344:	441c      	add	r4, r3
   17346:	794b      	ldrb	r3, [r1, #5]
   17348:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   1734c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   1734e:	2200      	movs	r2, #0
   17350:	e7dc      	b.n	1730c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   17352:	2201      	movs	r2, #1
   17354:	e7da      	b.n	1730c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   17356:	2202      	movs	r2, #2
   17358:	e7d8      	b.n	1730c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1735a:	2204      	movs	r2, #4
   1735c:	e7d6      	b.n	1730c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1735e:	2205      	movs	r2, #5
   17360:	e7d4      	b.n	1730c <adc_nrfx_channel_setup+0x78>
   17362:	bf00      	nop
   17364:	20000418 	.word	0x20000418

00017368 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17368:	4b2f      	ldr	r3, [pc, #188]	; (17428 <saadc_irq_handler+0xc0>)
   1736a:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   1736c:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1736e:	2a00      	cmp	r2, #0
   17370:	d04b      	beq.n	1740a <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17372:	2200      	movs	r2, #0
   17374:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   17376:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   17378:	4c2c      	ldr	r4, [pc, #176]	; (1742c <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1737a:	4b2d      	ldr	r3, [pc, #180]	; (17430 <saadc_irq_handler+0xc8>)
   1737c:	2101      	movs	r1, #1
   1737e:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   17380:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   17384:	6f63      	ldr	r3, [r4, #116]	; 0x74
   17386:	b3db      	cbz	r3, 17400 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   17388:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   1738c:	b143      	cbz	r3, 173a0 <saadc_irq_handler+0x38>
			action = callback(dev,
   1738e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   17392:	f104 0174 	add.w	r1, r4, #116	; 0x74
   17396:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   17398:	2801      	cmp	r0, #1
   1739a:	d014      	beq.n	173c6 <saadc_irq_handler+0x5e>
   1739c:	2802      	cmp	r0, #2
   1739e:	d029      	beq.n	173f4 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   173a0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   173a4:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   173a8:	429a      	cmp	r2, r3
   173aa:	d923      	bls.n	173f4 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   173ac:	3301      	adds	r3, #1
   173ae:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   173b2:	4b20      	ldr	r3, [pc, #128]	; (17434 <saadc_irq_handler+0xcc>)
   173b4:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   173b8:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   173bc:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   173be:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   173c2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   173c6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   173ca:	b92b      	cbnz	r3, 173d8 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   173cc:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   173d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   173d4:	f7ff bf4e 	b.w	17274 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   173d8:	f3bf 8f5b 	dmb	ish
   173dc:	e854 3f00 	ldrex	r3, [r4]
   173e0:	1e5a      	subs	r2, r3, #1
   173e2:	e844 2100 	strex	r1, r2, [r4]
   173e6:	2900      	cmp	r1, #0
   173e8:	d1f8      	bne.n	173dc <saadc_irq_handler+0x74>
   173ea:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   173ee:	2b01      	cmp	r3, #1
   173f0:	dcec      	bgt.n	173cc <saadc_irq_handler+0x64>
   173f2:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   173f4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   173f8:	b113      	cbz	r3, 17400 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   173fa:	480f      	ldr	r0, [pc, #60]	; (17438 <saadc_irq_handler+0xd0>)
   173fc:	f00c fc7b 	bl	23cf6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   17400:	480e      	ldr	r0, [pc, #56]	; (1743c <saadc_irq_handler+0xd4>)
   17402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17406:	f004 bad1 	b.w	1b9ac <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1740a:	4b0d      	ldr	r3, [pc, #52]	; (17440 <saadc_irq_handler+0xd8>)
   1740c:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1740e:	2900      	cmp	r1, #0
   17410:	d0ef      	beq.n	173f2 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17412:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17414:	4a06      	ldr	r2, [pc, #24]	; (17430 <saadc_irq_handler+0xc8>)
   17416:	681b      	ldr	r3, [r3, #0]
   17418:	2301      	movs	r3, #1
   1741a:	6013      	str	r3, [r2, #0]
   1741c:	f842 3c08 	str.w	r3, [r2, #-8]
   17420:	f842 3c04 	str.w	r3, [r2, #-4]
}
   17424:	e7e5      	b.n	173f2 <saadc_irq_handler+0x8a>
   17426:	bf00      	nop
   17428:	40007104 	.word	0x40007104
   1742c:	20000418 	.word	0x20000418
   17430:	40007008 	.word	0x40007008
   17434:	40007000 	.word	0x40007000
   17438:	20000420 	.word	0x20000420
   1743c:	20000470 	.word	0x20000470
   17440:	40007110 	.word	0x40007110

00017444 <adc_nrfx_read>:
{
   17444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17446:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   17448:	485d      	ldr	r0, [pc, #372]	; (175c0 <adc_nrfx_read+0x17c>)
   1744a:	f04f 32ff 	mov.w	r2, #4294967295
   1744e:	f04f 33ff 	mov.w	r3, #4294967295
   17452:	f004 fad1 	bl	1b9f8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   17456:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   17458:	b910      	cbnz	r0, 17460 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
   1745a:	f06f 0415 	mvn.w	r4, #21
   1745e:	e098      	b.n	17592 <adc_nrfx_read+0x14e>
	if (!selected_channels ||
   17460:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   17464:	d1f9      	bne.n	1745a <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   17466:	4c57      	ldr	r4, [pc, #348]	; (175c4 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   17468:	4f57      	ldr	r7, [pc, #348]	; (175c8 <adc_nrfx_read+0x184>)
	active_channels = 0U;
   1746a:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   1746c:	fa20 f302 	lsr.w	r3, r0, r2
   17470:	f013 0301 	ands.w	r3, r3, #1
   17474:	d032      	beq.n	174dc <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   17476:	18bb      	adds	r3, r7, r2
   17478:	f893 c0a0 	ldrb.w	ip, [r3, #160]	; 0xa0
   1747c:	f1bc 0f00 	cmp.w	ip, #0
   17480:	d0eb      	beq.n	1745a <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   17482:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   17486:	7c6e      	ldrb	r6, [r5, #17]
   17488:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   1748c:	3e00      	subs	r6, #0
   1748e:	bf18      	it	ne
   17490:	2601      	movne	r6, #1
   17492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17496:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   1749a:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1749e:	f102 0351 	add.w	r3, r2, #81	; 0x51
   174a2:	011b      	lsls	r3, r3, #4
			++active_channels;
   174a4:	3101      	adds	r1, #1
   174a6:	f844 c003 	str.w	ip, [r4, r3]
   174aa:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   174ac:	3201      	adds	r2, #1
   174ae:	2a08      	cmp	r2, #8
   174b0:	d1dc      	bne.n	1746c <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   174b2:	7c2b      	ldrb	r3, [r5, #16]
   174b4:	3b08      	subs	r3, #8
   174b6:	2b06      	cmp	r3, #6
   174b8:	d8cf      	bhi.n	1745a <adc_nrfx_read+0x16>
   174ba:	a201      	add	r2, pc, #4	; (adr r2, 174c0 <adc_nrfx_read+0x7c>)
   174bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   174c0:	000175a7 	.word	0x000175a7
   174c4:	0001745b 	.word	0x0001745b
   174c8:	000174e7 	.word	0x000174e7
   174cc:	0001745b 	.word	0x0001745b
   174d0:	0001759f 	.word	0x0001759f
   174d4:	0001745b 	.word	0x0001745b
   174d8:	000175a3 	.word	0x000175a3
   174dc:	f102 0651 	add.w	r6, r2, #81	; 0x51
   174e0:	0136      	lsls	r6, r6, #4
   174e2:	51a3      	str	r3, [r4, r6]
}
   174e4:	e7e2      	b.n	174ac <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
   174e6:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   174e8:	4b36      	ldr	r3, [pc, #216]	; (175c4 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   174ea:	2901      	cmp	r1, #1
   174ec:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   174f0:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   174f2:	d95a      	bls.n	175aa <adc_nrfx_read+0x166>
   174f4:	2a00      	cmp	r2, #0
   174f6:	d1b0      	bne.n	1745a <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   174f8:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   174fc:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   174fe:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   17500:	b112      	cbz	r2, 17508 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   17502:	8992      	ldrh	r2, [r2, #12]
   17504:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   17508:	68ea      	ldr	r2, [r5, #12]
   1750a:	429a      	cmp	r2, r3
   1750c:	d355      	bcc.n	175ba <adc_nrfx_read+0x176>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1750e:	4b2d      	ldr	r3, [pc, #180]	; (175c4 <adc_nrfx_read+0x180>)
   17510:	68aa      	ldr	r2, [r5, #8]
   17512:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   17516:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   17518:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   1751c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1751e:	4c2a      	ldr	r4, [pc, #168]	; (175c8 <adc_nrfx_read+0x184>)
   17520:	f104 0674 	add.w	r6, r4, #116	; 0x74
   17524:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   17526:	683b      	ldr	r3, [r7, #0]
   17528:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   1752a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   1752c:	2600      	movs	r6, #0
   1752e:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   17530:	2b00      	cmp	r3, #0
   17532:	d03d      	beq.n	175b0 <adc_nrfx_read+0x16c>
		ctx->options = *sequence->options;
   17534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   17536:	f104 0588 	add.w	r5, r4, #136	; 0x88
   1753a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1753e:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   17540:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		if (ctx->options.interval_us != 0U) {
   17544:	b3a0      	cbz	r0, 175b0 <adc_nrfx_read+0x16c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17546:	f3bf 8f5b 	dmb	ish
   1754a:	e854 3f00 	ldrex	r3, [r4]
   1754e:	e844 6200 	strex	r2, r6, [r4]
   17552:	2a00      	cmp	r2, #0
   17554:	d1f9      	bne.n	1754a <adc_nrfx_read+0x106>
   17556:	f3bf 8f5b 	dmb	ish
		} else {
			return (t * to_hz + off) / from_hz;
   1755a:	481c      	ldr	r0, [pc, #112]	; (175cc <adc_nrfx_read+0x188>)
   1755c:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   17560:	4a1b      	ldr	r2, [pc, #108]	; (175d0 <adc_nrfx_read+0x18c>)
   17562:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   17566:	2100      	movs	r1, #0
   17568:	2300      	movs	r3, #0
   1756a:	fbe5 0106 	umlal	r0, r1, r5, r6
   1756e:	f7ea fa05 	bl	197c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   17572:	2200      	movs	r2, #0
   17574:	e9cd 0100 	strd	r0, r1, [sp]
   17578:	2300      	movs	r3, #0
   1757a:	f104 0008 	add.w	r0, r4, #8
   1757e:	f005 f98b 	bl	1c898 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   17582:	4814      	ldr	r0, [pc, #80]	; (175d4 <adc_nrfx_read+0x190>)
   17584:	f04f 32ff 	mov.w	r2, #4294967295
   17588:	f04f 33ff 	mov.w	r3, #4294967295
   1758c:	f004 fa34 	bl	1b9f8 <z_impl_k_sem_take>
	return ctx->status;
   17590:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   17592:	480b      	ldr	r0, [pc, #44]	; (175c0 <adc_nrfx_read+0x17c>)
   17594:	f004 fa0a 	bl	1b9ac <z_impl_k_sem_give>
}
   17598:	4620      	mov	r0, r4
   1759a:	b003      	add	sp, #12
   1759c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1759e:	2202      	movs	r2, #2
		break;
   175a0:	e7a2      	b.n	174e8 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   175a2:	2203      	movs	r2, #3
		break;
   175a4:	e7a0      	b.n	174e8 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   175a6:	2200      	movs	r2, #0
   175a8:	e79e      	b.n	174e8 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   175aa:	2a08      	cmp	r2, #8
   175ac:	d9a4      	bls.n	174f8 <adc_nrfx_read+0xb4>
   175ae:	e754      	b.n	1745a <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   175b0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   175b4:	f7ff fe5e 	bl	17274 <adc_context_start_sampling.isra.0>
   175b8:	e7e3      	b.n	17582 <adc_nrfx_read+0x13e>
		return -ENOMEM;
   175ba:	f06f 040b 	mvn.w	r4, #11
   175be:	e7e8      	b.n	17592 <adc_nrfx_read+0x14e>
   175c0:	20000458 	.word	0x20000458
   175c4:	40007000 	.word	0x40007000
   175c8:	20000418 	.word	0x20000418
   175cc:	000f423f 	.word	0x000f423f
   175d0:	000f4240 	.word	0x000f4240
   175d4:	20000470 	.word	0x20000470

000175d8 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   175d8:	4b0d      	ldr	r3, [pc, #52]	; (17610 <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
   175da:	b510      	push	{r4, lr}
   175dc:	2400      	movs	r4, #0
   175de:	601c      	str	r4, [r3, #0]
   175e0:	681b      	ldr	r3, [r3, #0]
   175e2:	4b0c      	ldr	r3, [pc, #48]	; (17614 <init_saadc+0x3c>)
   175e4:	601c      	str	r4, [r3, #0]
   175e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   175e8:	4b0b      	ldr	r3, [pc, #44]	; (17618 <init_saadc+0x40>)
   175ea:	2212      	movs	r2, #18
   175ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   175f0:	2007      	movs	r0, #7
   175f2:	f7fb fe67 	bl	132c4 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   175f6:	4622      	mov	r2, r4
   175f8:	2101      	movs	r1, #1
   175fa:	2007      	movs	r0, #7
   175fc:	f7fb fe94 	bl	13328 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   17600:	4806      	ldr	r0, [pc, #24]	; (1761c <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   17602:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17604:	b913      	cbnz	r3, 1760c <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   17606:	3040      	adds	r0, #64	; 0x40
   17608:	f004 f9d0 	bl	1b9ac <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1760c:	2000      	movs	r0, #0
   1760e:	bd10      	pop	{r4, pc}
   17610:	40007104 	.word	0x40007104
   17614:	40007110 	.word	0x40007110
   17618:	40007000 	.word	0x40007000
   1761c:	20000418 	.word	0x20000418

00017620 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   17620:	4a0e      	ldr	r2, [pc, #56]	; (1765c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17622:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   17624:	1a84      	subs	r4, r0, r2
   17626:	10a3      	asrs	r3, r4, #2
   17628:	4c0d      	ldr	r4, [pc, #52]	; (17660 <onoff_stop+0x40>)
   1762a:	435c      	muls	r4, r3
{
   1762c:	4605      	mov	r5, r0
   1762e:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   17630:	200c      	movs	r0, #12
   17632:	fb00 2004 	mla	r0, r0, r4, r2
{
   17636:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   17638:	2140      	movs	r1, #64	; 0x40
   1763a:	4408      	add	r0, r1
   1763c:	f00a fedc 	bl	223f8 <set_off_state>
	if (err < 0) {
   17640:	1e01      	subs	r1, r0, #0
   17642:	db05      	blt.n	17650 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   17644:	4b07      	ldr	r3, [pc, #28]	; (17664 <onoff_stop+0x44>)
   17646:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1764a:	6863      	ldr	r3, [r4, #4]
   1764c:	4798      	blx	r3
	return 0;
   1764e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   17650:	4628      	mov	r0, r5
   17652:	4633      	mov	r3, r6
}
   17654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   17658:	4718      	bx	r3
   1765a:	bf00      	nop
   1765c:	200027fc 	.word	0x200027fc
   17660:	b6db6db7 	.word	0xb6db6db7
   17664:	00024a20 	.word	0x00024a20

00017668 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1766c:	4e10      	ldr	r6, [pc, #64]	; (176b0 <onoff_start+0x48>)
   1766e:	1b84      	subs	r4, r0, r6
   17670:	10a3      	asrs	r3, r4, #2
   17672:	4c10      	ldr	r4, [pc, #64]	; (176b4 <onoff_start+0x4c>)
   17674:	435c      	muls	r4, r3
   17676:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   17678:	250c      	movs	r5, #12
   1767a:	4365      	muls	r5, r4
{
   1767c:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   1767e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   17682:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   17684:	4430      	add	r0, r6
   17686:	2140      	movs	r1, #64	; 0x40
   17688:	f00a fecf 	bl	2242a <set_starting_state>
	if (err < 0) {
   1768c:	1e01      	subs	r1, r0, #0
   1768e:	db09      	blt.n	176a4 <onoff_start+0x3c>
	subdata->cb = cb;
   17690:	4a09      	ldr	r2, [pc, #36]	; (176b8 <onoff_start+0x50>)
   17692:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   17694:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   17698:	4b08      	ldr	r3, [pc, #32]	; (176bc <onoff_start+0x54>)
   1769a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1769e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   176a2:	4718      	bx	r3
		notify(mgr, err);
   176a4:	4640      	mov	r0, r8
   176a6:	463b      	mov	r3, r7
}
   176a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   176ac:	4718      	bx	r3
   176ae:	bf00      	nop
   176b0:	200027fc 	.word	0x200027fc
   176b4:	b6db6db7 	.word	0xb6db6db7
   176b8:	0002248d 	.word	0x0002248d
   176bc:	00024a20 	.word	0x00024a20

000176c0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176c0:	2200      	movs	r2, #0
{
   176c2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176c4:	2101      	movs	r1, #1
{
   176c6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176c8:	4610      	mov	r0, r2
   176ca:	f7fb fe2d 	bl	13328 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   176ce:	2000      	movs	r0, #0
   176d0:	f7fb fdf8 	bl	132c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   176d4:	480f      	ldr	r0, [pc, #60]	; (17714 <clk_init+0x54>)
   176d6:	f002 f99b 	bl	19a10 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   176da:	4b0f      	ldr	r3, [pc, #60]	; (17718 <clk_init+0x58>)
   176dc:	4298      	cmp	r0, r3
   176de:	d115      	bne.n	1770c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   176e0:	f00b fd31 	bl	23146 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   176e4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   176e6:	490d      	ldr	r1, [pc, #52]	; (1771c <clk_init+0x5c>)
   176e8:	4630      	mov	r0, r6
   176ea:	f007 ff64 	bl	1f5b6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   176ee:	2800      	cmp	r0, #0
   176f0:	db0b      	blt.n	1770a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   176f2:	2501      	movs	r5, #1
   176f4:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   176f6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   176f8:	4908      	ldr	r1, [pc, #32]	; (1771c <clk_init+0x5c>)
   176fa:	f104 001c 	add.w	r0, r4, #28
   176fe:	f007 ff5a 	bl	1f5b6 <onoff_manager_init>
		if (err < 0) {
   17702:	2800      	cmp	r0, #0
   17704:	db01      	blt.n	1770a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17706:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   17708:	2000      	movs	r0, #0
}
   1770a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1770c:	f06f 0004 	mvn.w	r0, #4
   17710:	e7fb      	b.n	1770a <clk_init+0x4a>
   17712:	bf00      	nop
   17714:	00017755 	.word	0x00017755
   17718:	0bad0000 	.word	0x0bad0000
   1771c:	00024a30 	.word	0x00024a30

00017720 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   17720:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   17722:	230c      	movs	r3, #12
   17724:	4809      	ldr	r0, [pc, #36]	; (1774c <clkstarted_handle.constprop.0+0x2c>)
   17726:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   17728:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1772a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1772c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   17730:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   17732:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   17734:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   17736:	4418      	add	r0, r3
   17738:	f00a fe95 	bl	22466 <set_on_state>
	if (callback) {
   1773c:	b12d      	cbz	r5, 1774a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1773e:	4632      	mov	r2, r6
   17740:	462b      	mov	r3, r5
   17742:	4803      	ldr	r0, [pc, #12]	; (17750 <clkstarted_handle.constprop.0+0x30>)
}
   17744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   17748:	4718      	bx	r3
}
   1774a:	bd70      	pop	{r4, r5, r6, pc}
   1774c:	200027fc 	.word	0x200027fc
   17750:	000240dc 	.word	0x000240dc

00017754 <clock_event_handler>:
	switch (event) {
   17754:	b110      	cbz	r0, 1775c <clock_event_handler+0x8>
   17756:	2801      	cmp	r0, #1
   17758:	d004      	beq.n	17764 <clock_event_handler+0x10>
   1775a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1775c:	4b03      	ldr	r3, [pc, #12]	; (1776c <clock_event_handler+0x18>)
   1775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17760:	075b      	lsls	r3, r3, #29
   17762:	d101      	bne.n	17768 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17764:	f7ff bfdc 	b.w	17720 <clkstarted_handle.constprop.0>
}
   17768:	4770      	bx	lr
   1776a:	bf00      	nop
   1776c:	200027fc 	.word	0x200027fc

00017770 <generic_hfclk_start>:
{
   17770:	b508      	push	{r3, lr}
	__asm__ volatile(
   17772:	f04f 0340 	mov.w	r3, #64	; 0x40
   17776:	f3ef 8111 	mrs	r1, BASEPRI
   1777a:	f383 8812 	msr	BASEPRI_MAX, r3
   1777e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17782:	4a12      	ldr	r2, [pc, #72]	; (177cc <generic_hfclk_start+0x5c>)
   17784:	6813      	ldr	r3, [r2, #0]
   17786:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1778a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1778e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17790:	d00c      	beq.n	177ac <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17796:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1779a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1779e:	f013 0301 	ands.w	r3, r3, #1
   177a2:	d003      	beq.n	177ac <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   177a4:	480a      	ldr	r0, [pc, #40]	; (177d0 <generic_hfclk_start+0x60>)
   177a6:	f00a fe5e 	bl	22466 <set_on_state>
			already_started = true;
   177aa:	2301      	movs	r3, #1
	__asm__ volatile(
   177ac:	f381 8811 	msr	BASEPRI, r1
   177b0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   177b4:	b123      	cbz	r3, 177c0 <generic_hfclk_start+0x50>
}
   177b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   177ba:	2000      	movs	r0, #0
   177bc:	f7ff bfb0 	b.w	17720 <clkstarted_handle.constprop.0>
}
   177c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   177c4:	2001      	movs	r0, #1
   177c6:	f002 b913 	b.w	199f0 <nrfx_clock_start>
   177ca:	bf00      	nop
   177cc:	2000284c 	.word	0x2000284c
   177d0:	2000283c 	.word	0x2000283c

000177d4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   177d4:	4b09      	ldr	r3, [pc, #36]	; (177fc <generic_hfclk_stop+0x28>)
   177d6:	f3bf 8f5b 	dmb	ish
   177da:	e853 2f00 	ldrex	r2, [r3]
   177de:	f022 0102 	bic.w	r1, r2, #2
   177e2:	e843 1000 	strex	r0, r1, [r3]
   177e6:	2800      	cmp	r0, #0
   177e8:	d1f7      	bne.n	177da <generic_hfclk_stop+0x6>
   177ea:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   177ee:	07d3      	lsls	r3, r2, #31
   177f0:	d402      	bmi.n	177f8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   177f2:	2001      	movs	r0, #1
   177f4:	f00b bca2 	b.w	2313c <nrfx_clock_stop>
}
   177f8:	4770      	bx	lr
   177fa:	bf00      	nop
   177fc:	2000284c 	.word	0x2000284c

00017800 <api_blocking_start>:
{
   17800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17802:	2200      	movs	r2, #0
   17804:	2301      	movs	r3, #1
   17806:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1780a:	ab04      	add	r3, sp, #16
   1780c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17810:	4a09      	ldr	r2, [pc, #36]	; (17838 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17812:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17816:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17818:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1781c:	f00a fe5c 	bl	224d8 <api_start>
	if (err < 0) {
   17820:	2800      	cmp	r0, #0
   17822:	db05      	blt.n	17830 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17824:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17828:	2300      	movs	r3, #0
   1782a:	4668      	mov	r0, sp
   1782c:	f004 f8e4 	bl	1b9f8 <z_impl_k_sem_take>
}
   17830:	b007      	add	sp, #28
   17832:	f85d fb04 	ldr.w	pc, [sp], #4
   17836:	bf00      	nop
   17838:	000224ab 	.word	0x000224ab

0001783c <z_nrf_clock_control_lf_on>:
{
   1783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17840:	493a      	ldr	r1, [pc, #232]	; (1792c <z_nrf_clock_control_lf_on+0xf0>)
   17842:	f3bf 8f5b 	dmb	ish
   17846:	4606      	mov	r6, r0
   17848:	2201      	movs	r2, #1
   1784a:	e851 3f00 	ldrex	r3, [r1]
   1784e:	e841 2000 	strex	r0, r2, [r1]
   17852:	2800      	cmp	r0, #0
   17854:	d1f9      	bne.n	1784a <z_nrf_clock_control_lf_on+0xe>
   17856:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1785a:	b933      	cbnz	r3, 1786a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1785c:	4934      	ldr	r1, [pc, #208]	; (17930 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1785e:	4835      	ldr	r0, [pc, #212]	; (17934 <z_nrf_clock_control_lf_on+0xf8>)
   17860:	604b      	str	r3, [r1, #4]
   17862:	60cb      	str	r3, [r1, #12]
   17864:	608a      	str	r2, [r1, #8]
   17866:	f007 feb9 	bl	1f5dc <onoff_request>
	switch (start_mode) {
   1786a:	1e73      	subs	r3, r6, #1
   1786c:	2b01      	cmp	r3, #1
   1786e:	d832      	bhi.n	178d6 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   17870:	2e01      	cmp	r6, #1
   17872:	d107      	bne.n	17884 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17878:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1787c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   17880:	2b01      	cmp	r3, #1
   17882:	d028      	beq.n	178d6 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17884:	f00b fed3 	bl	2362e <k_is_in_isr>
   17888:	4604      	mov	r4, r0
   1788a:	b918      	cbnz	r0, 17894 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   1788c:	4b2a      	ldr	r3, [pc, #168]	; (17938 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1788e:	781b      	ldrb	r3, [r3, #0]
   17890:	2b00      	cmp	r3, #0
   17892:	d144      	bne.n	1791e <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   17894:	f04f 0340 	mov.w	r3, #64	; 0x40
   17898:	f3ef 8511 	mrs	r5, BASEPRI
   1789c:	f383 8812 	msr	BASEPRI_MAX, r3
   178a0:	f3bf 8f6f 	isb	sy
   178a4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   178a6:	4f25      	ldr	r7, [pc, #148]	; (1793c <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   178a8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 17940 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   178ac:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17944 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   178b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   178b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   178b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   178bc:	03d2      	lsls	r2, r2, #15
   178be:	d50c      	bpl.n	178da <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   178c0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   178c4:	2b01      	cmp	r3, #1
   178c6:	d001      	beq.n	178cc <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   178c8:	2e01      	cmp	r6, #1
   178ca:	d106      	bne.n	178da <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   178cc:	b30c      	cbz	r4, 17912 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   178ce:	f385 8811 	msr	BASEPRI, r5
   178d2:	f3bf 8f6f 	isb	sy
}
   178d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   178da:	b1ac      	cbz	r4, 17908 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   178dc:	4628      	mov	r0, r5
   178de:	f7fb fce7 	bl	132b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   178e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   178e6:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   178ea:	2b00      	cmp	r3, #0
   178ec:	d1e0      	bne.n	178b0 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   178ee:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   178f0:	2900      	cmp	r1, #0
   178f2:	d0dd      	beq.n	178b0 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   178f4:	603b      	str	r3, [r7, #0]
   178f6:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   178f8:	2301      	movs	r3, #1
   178fa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   178fe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17902:	f8c9 3000 	str.w	r3, [r9]
}
   17906:	e7d3      	b.n	178b0 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   17908:	2100      	movs	r1, #0
   1790a:	2021      	movs	r0, #33	; 0x21
   1790c:	f004 fd74 	bl	1c3f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17910:	e7e7      	b.n	178e2 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   17912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17916:	2202      	movs	r2, #2
   17918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1791c:	e7db      	b.n	178d6 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1791e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17922:	2202      	movs	r2, #2
   17924:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   17928:	4605      	mov	r5, r0
}
   1792a:	e7bc      	b.n	178a6 <z_nrf_clock_control_lf_on+0x6a>
   1792c:	20002850 	.word	0x20002850
   17930:	200027ec 	.word	0x200027ec
   17934:	20002818 	.word	0x20002818
   17938:	20003b40 	.word	0x20003b40
   1793c:	40000104 	.word	0x40000104
   17940:	e000e100 	.word	0xe000e100
   17944:	40000008 	.word	0x40000008

00017948 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17948:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   1794a:	b570      	push	{r4, r5, r6, lr}
   1794c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1794e:	d002      	beq.n	17956 <nrfx_gpio_handler+0xe>
   17950:	2a01      	cmp	r2, #1
   17952:	d01d      	beq.n	17990 <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   17954:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17956:	4e0f      	ldr	r6, [pc, #60]	; (17994 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17958:	6932      	ldr	r2, [r6, #16]
   1795a:	6851      	ldr	r1, [r2, #4]
   1795c:	2900      	cmp	r1, #0
   1795e:	d0f9      	beq.n	17954 <nrfx_gpio_handler+0xc>
   17960:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   17962:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   17966:	2501      	movs	r5, #1
   17968:	2c00      	cmp	r4, #0
   1796a:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
   1796e:	bf38      	it	cc
   17970:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   17972:	688a      	ldr	r2, [r1, #8]
   17974:	402a      	ands	r2, r5
   17976:	d002      	beq.n	1797e <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17978:	684b      	ldr	r3, [r1, #4]
   1797a:	4630      	mov	r0, r6
   1797c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1797e:	2c00      	cmp	r4, #0
   17980:	d0e8      	beq.n	17954 <nrfx_gpio_handler+0xc>
   17982:	6823      	ldr	r3, [r4, #0]
   17984:	2b00      	cmp	r3, #0
   17986:	bf38      	it	cc
   17988:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1798a:	4621      	mov	r1, r4
   1798c:	461c      	mov	r4, r3
   1798e:	e7f0      	b.n	17972 <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17990:	4e01      	ldr	r6, [pc, #4]	; (17998 <nrfx_gpio_handler+0x50>)
   17992:	e7e1      	b.n	17958 <nrfx_gpio_handler+0x10>
   17994:	000240f8 	.word	0x000240f8
   17998:	00024114 	.word	0x00024114

0001799c <gpio_nrfx_pin_interrupt_configure>:
{
   1799c:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1799e:	6840      	ldr	r0, [r0, #4]
   179a0:	7b04      	ldrb	r4, [r0, #12]
   179a2:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   179a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   179aa:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   179ae:	b085      	sub	sp, #20
   179b0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   179b4:	d104      	bne.n	179c0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   179b6:	4628      	mov	r0, r5
   179b8:	f002 fc20 	bl	1a1fc <nrfx_gpiote_trigger_disable>
	return 0;
   179bc:	2000      	movs	r0, #0
   179be:	e032      	b.n	17a26 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   179c0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   179c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   179c8:	d12f      	bne.n	17a2a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   179ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   179ce:	bf0c      	ite	eq
   179d0:	2304      	moveq	r3, #4
   179d2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   179d4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   179d8:	6883      	ldr	r3, [r0, #8]
   179da:	fa23 f101 	lsr.w	r1, r3, r1
   179de:	07c9      	lsls	r1, r1, #31
   179e0:	d42f      	bmi.n	17a42 <gpio_nrfx_pin_interrupt_configure+0xa6>
   179e2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   179e6:	d12c      	bne.n	17a42 <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
   179e8:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   179ea:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   179ec:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   179f0:	4a1c      	ldr	r2, [pc, #112]	; (17a64 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   179f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   179f6:	bf18      	it	ne
   179f8:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   179fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17a00:	07db      	lsls	r3, r3, #31
   17a02:	d41e      	bmi.n	17a42 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   17a04:	f10d 0407 	add.w	r4, sp, #7
   17a08:	4621      	mov	r1, r4
   17a0a:	4628      	mov	r0, r5
   17a0c:	f002 fb62 	bl	1a0d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   17a10:	4b15      	ldr	r3, [pc, #84]	; (17a68 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   17a12:	4298      	cmp	r0, r3
   17a14:	d114      	bne.n	17a40 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   17a16:	4620      	mov	r0, r4
   17a18:	f002 fba6 	bl	1a168 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   17a1c:	4b13      	ldr	r3, [pc, #76]	; (17a6c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17a1e:	4298      	cmp	r0, r3
   17a20:	d00e      	beq.n	17a40 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   17a22:	f06f 000b 	mvn.w	r0, #11
}
   17a26:	b005      	add	sp, #20
   17a28:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17a2a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   17a2e:	d005      	beq.n	17a3c <gpio_nrfx_pin_interrupt_configure+0xa0>
   17a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   17a34:	bf0c      	ite	eq
   17a36:	2302      	moveq	r3, #2
   17a38:	2301      	movne	r3, #1
   17a3a:	e7cb      	b.n	179d4 <gpio_nrfx_pin_interrupt_configure+0x38>
   17a3c:	2303      	movs	r3, #3
   17a3e:	e7c9      	b.n	179d4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   17a40:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17a42:	2300      	movs	r3, #0
   17a44:	4619      	mov	r1, r3
   17a46:	aa02      	add	r2, sp, #8
   17a48:	4628      	mov	r0, r5
   17a4a:	f002 fa21 	bl	19e90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17a4e:	4b07      	ldr	r3, [pc, #28]	; (17a6c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17a50:	4298      	cmp	r0, r3
   17a52:	d104      	bne.n	17a5e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17a54:	2101      	movs	r1, #1
   17a56:	4628      	mov	r0, r5
   17a58:	f002 fb8c 	bl	1a174 <nrfx_gpiote_trigger_enable>
   17a5c:	e7ae      	b.n	179bc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   17a5e:	f06f 0004 	mvn.w	r0, #4
   17a62:	e7e0      	b.n	17a26 <gpio_nrfx_pin_interrupt_configure+0x8a>
   17a64:	50000300 	.word	0x50000300
   17a68:	0bad0004 	.word	0x0bad0004
   17a6c:	0bad0000 	.word	0x0bad0000

00017a70 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17a70:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   17a72:	f002 fb69 	bl	1a148 <nrfx_gpiote_is_init>
   17a76:	4604      	mov	r4, r0
   17a78:	b968      	cbnz	r0, 17a96 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   17a7a:	f002 fb3d 	bl	1a0f8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   17a7e:	4b08      	ldr	r3, [pc, #32]	; (17aa0 <gpio_nrfx_init+0x30>)
   17a80:	4298      	cmp	r0, r3
   17a82:	d10a      	bne.n	17a9a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   17a84:	4807      	ldr	r0, [pc, #28]	; (17aa4 <gpio_nrfx_init+0x34>)
   17a86:	4621      	mov	r1, r4
   17a88:	f002 fb1e 	bl	1a0c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17a8c:	4622      	mov	r2, r4
   17a8e:	2105      	movs	r1, #5
   17a90:	2006      	movs	r0, #6
   17a92:	f7fb fc49 	bl	13328 <z_arm_irq_priority_set>
		return 0;
   17a96:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   17a98:	bd10      	pop	{r4, pc}
		return -EIO;
   17a9a:	f06f 0004 	mvn.w	r0, #4
   17a9e:	e7fb      	b.n	17a98 <gpio_nrfx_init+0x28>
   17aa0:	0bad0000 	.word	0x0bad0000
   17aa4:	00017949 	.word	0x00017949

00017aa8 <gpio_nrfx_pin_configure>:
{
   17aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   17aac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17aae:	7b3b      	ldrb	r3, [r7, #12]
   17ab0:	f001 051f 	and.w	r5, r1, #31
{
   17ab4:	b085      	sub	sp, #20
   17ab6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17ab8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17abc:	4614      	mov	r4, r2
   17abe:	b9ca      	cbnz	r2, 17af4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   17ac0:	a902      	add	r1, sp, #8
   17ac2:	4628      	mov	r0, r5
   17ac4:	f002 fb06 	bl	1a0d4 <nrfx_gpiote_channel_get>
   17ac8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   17aca:	4628      	mov	r0, r5
   17acc:	f002 fbb8 	bl	1a240 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17ad0:	4b48      	ldr	r3, [pc, #288]	; (17bf4 <gpio_nrfx_pin_configure+0x14c>)
   17ad2:	4298      	cmp	r0, r3
   17ad4:	d004      	beq.n	17ae0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   17ad6:	f06f 0004 	mvn.w	r0, #4
}
   17ada:	b005      	add	sp, #20
   17adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   17ae0:	4284      	cmp	r4, r0
   17ae2:	d105      	bne.n	17af0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   17ae4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   17ae8:	f002 fb38 	bl	1a15c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17aec:	42a0      	cmp	r0, r4
   17aee:	d1f2      	bne.n	17ad6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17af0:	2000      	movs	r0, #0
   17af2:	e7f2      	b.n	17ada <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17af4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   17af8:	f10d 0103 	add.w	r1, sp, #3
   17afc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   17afe:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17b02:	f002 fae7 	bl	1a0d4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17b06:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   17b08:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17b0a:	aa02      	add	r2, sp, #8
   17b0c:	4649      	mov	r1, r9
   17b0e:	4628      	mov	r0, r5
   17b10:	f002 f9be 	bl	19e90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17b14:	4b37      	ldr	r3, [pc, #220]	; (17bf4 <gpio_nrfx_pin_configure+0x14c>)
   17b16:	4298      	cmp	r0, r3
   17b18:	d002      	beq.n	17b20 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17b1a:	f06f 0015 	mvn.w	r0, #21
   17b1e:	e7dc      	b.n	17ada <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   17b20:	4580      	cmp	r8, r0
   17b22:	d103      	bne.n	17b2c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   17b24:	f89d 0003 	ldrb.w	r0, [sp, #3]
   17b28:	f002 fb18 	bl	1a15c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   17b2c:	05a3      	lsls	r3, r4, #22
   17b2e:	d54e      	bpl.n	17bce <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17b30:	4b31      	ldr	r3, [pc, #196]	; (17bf8 <gpio_nrfx_pin_configure+0x150>)
   17b32:	4a32      	ldr	r2, [pc, #200]	; (17bfc <gpio_nrfx_pin_configure+0x154>)
   17b34:	4023      	ands	r3, r4
   17b36:	4293      	cmp	r3, r2
   17b38:	d03a      	beq.n	17bb0 <gpio_nrfx_pin_configure+0x108>
   17b3a:	d80c      	bhi.n	17b56 <gpio_nrfx_pin_configure+0xae>
   17b3c:	2b06      	cmp	r3, #6
   17b3e:	d014      	beq.n	17b6a <gpio_nrfx_pin_configure+0xc2>
   17b40:	d804      	bhi.n	17b4c <gpio_nrfx_pin_configure+0xa4>
   17b42:	b193      	cbz	r3, 17b6a <gpio_nrfx_pin_configure+0xc2>
   17b44:	2b02      	cmp	r3, #2
   17b46:	d1e8      	bne.n	17b1a <gpio_nrfx_pin_configure+0x72>
   17b48:	2304      	movs	r3, #4
   17b4a:	e00e      	b.n	17b6a <gpio_nrfx_pin_configure+0xc2>
   17b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17b50:	d1e3      	bne.n	17b1a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   17b52:	2301      	movs	r3, #1
   17b54:	e009      	b.n	17b6a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17b56:	4a2a      	ldr	r2, [pc, #168]	; (17c00 <gpio_nrfx_pin_configure+0x158>)
   17b58:	4293      	cmp	r3, r2
   17b5a:	d02b      	beq.n	17bb4 <gpio_nrfx_pin_configure+0x10c>
   17b5c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17b60:	d02a      	beq.n	17bb8 <gpio_nrfx_pin_configure+0x110>
   17b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17b66:	d1d8      	bne.n	17b1a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   17b68:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   17b6a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   17b6e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   17b72:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   17b76:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   17b78:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   17b7c:	bf54      	ite	pl
   17b7e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   17b82:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17b84:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   17b86:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17b8a:	d517      	bpl.n	17bbc <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   17b8c:	687b      	ldr	r3, [r7, #4]
   17b8e:	2101      	movs	r1, #1
   17b90:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   17b94:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   17b98:	2200      	movs	r2, #0
   17b9a:	a901      	add	r1, sp, #4
   17b9c:	4628      	mov	r0, r5
   17b9e:	f002 fa23 	bl	19fe8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17ba2:	4b14      	ldr	r3, [pc, #80]	; (17bf4 <gpio_nrfx_pin_configure+0x14c>)
   17ba4:	4298      	cmp	r0, r3
   17ba6:	bf14      	ite	ne
   17ba8:	f06f 0015 	mvnne.w	r0, #21
   17bac:	2000      	moveq	r0, #0
   17bae:	e794      	b.n	17ada <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   17bb0:	2307      	movs	r3, #7
   17bb2:	e7da      	b.n	17b6a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   17bb4:	2305      	movs	r3, #5
   17bb6:	e7d8      	b.n	17b6a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   17bb8:	2303      	movs	r3, #3
   17bba:	e7d6      	b.n	17b6a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17bbc:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17bbe:	bf41      	itttt	mi
   17bc0:	687b      	ldrmi	r3, [r7, #4]
   17bc2:	2101      	movmi	r1, #1
   17bc4:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   17bc8:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   17bcc:	e7e4      	b.n	17b98 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   17bce:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17bd0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17bd4:	bf54      	ite	pl
   17bd6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   17bda:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17bdc:	461a      	mov	r2, r3
   17bde:	a901      	add	r1, sp, #4
   17be0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   17be2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17be6:	f002 f953 	bl	19e90 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17bea:	4b02      	ldr	r3, [pc, #8]	; (17bf4 <gpio_nrfx_pin_configure+0x14c>)
   17bec:	4298      	cmp	r0, r3
   17bee:	f43f af7f 	beq.w	17af0 <gpio_nrfx_pin_configure+0x48>
   17bf2:	e792      	b.n	17b1a <gpio_nrfx_pin_configure+0x72>
   17bf4:	0bad0000 	.word	0x0bad0000
   17bf8:	00f00006 	.word	0x00f00006
   17bfc:	00100006 	.word	0x00100006
   17c00:	00400002 	.word	0x00400002

00017c04 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   17c04:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   17c06:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   17c08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   17c0c:	f003 fb1e 	bl	1b24c <nrfx_twi_twim_bus_recover>
					      get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   17c10:	4b03      	ldr	r3, [pc, #12]	; (17c20 <i2c_nrfx_twi_recover_bus+0x1c>)
   17c12:	4298      	cmp	r0, r3
}
   17c14:	bf14      	ite	ne
   17c16:	f06f 000f 	mvnne.w	r0, #15
   17c1a:	2000      	moveq	r0, #0
   17c1c:	bd08      	pop	{r3, pc}
   17c1e:	bf00      	nop
   17c20:	0bad0000 	.word	0x0bad0000

00017c24 <twi_nrfx_pm_action>:
}

#ifdef CONFIG_PM_DEVICE
static int twi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   17c24:	b538      	push	{r3, r4, r5, lr}
   17c26:	4605      	mov	r5, r0
	int ret = 0;

	switch (action) {
   17c28:	b181      	cbz	r1, 17c4c <twi_nrfx_pm_action+0x28>
   17c2a:	2901      	cmp	r1, #1
   17c2c:	d112      	bne.n	17c54 <twi_nrfx_pm_action+0x30>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   17c2e:	6840      	ldr	r0, [r0, #4]
   17c30:	692b      	ldr	r3, [r5, #16]
   17c32:	4a0b      	ldr	r2, [pc, #44]	; (17c60 <twi_nrfx_pm_action+0x3c>)
   17c34:	f100 0108 	add.w	r1, r0, #8
   17c38:	f003 f8fe 	bl	1ae38 <nrfx_twi_init>
	case PM_DEVICE_ACTION_RESUME:
		init_twi(dev);
		if (get_dev_data(dev)->dev_config) {
   17c3c:	692b      	ldr	r3, [r5, #16]
   17c3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17c40:	b159      	cbz	r1, 17c5a <twi_nrfx_pm_action+0x36>
			i2c_nrfx_twi_configure(dev,
   17c42:	4628      	mov	r0, r5
   17c44:	f00a fcb5 	bl	225b2 <i2c_nrfx_twi_configure>
   17c48:	2000      	movs	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   17c4a:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_twi_uninit(&get_dev_config(dev)->twi);
   17c4c:	6840      	ldr	r0, [r0, #4]
   17c4e:	f003 f97d 	bl	1af4c <nrfx_twi_uninit>
		break;
   17c52:	e7f9      	b.n	17c48 <twi_nrfx_pm_action+0x24>
	switch (action) {
   17c54:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17c58:	e7f7      	b.n	17c4a <twi_nrfx_pm_action+0x26>
   17c5a:	4608      	mov	r0, r1
	return ret;
   17c5c:	e7f5      	b.n	17c4a <twi_nrfx_pm_action+0x26>
   17c5e:	bf00      	nop
   17c60:	00017c65 	.word	0x00017c65

00017c64 <event_handler>:
	switch (p_event->type) {
   17c64:	7803      	ldrb	r3, [r0, #0]
   17c66:	2b01      	cmp	r3, #1
   17c68:	d008      	beq.n	17c7c <event_handler+0x18>
   17c6a:	2b02      	cmp	r3, #2
   17c6c:	d008      	beq.n	17c80 <event_handler+0x1c>
   17c6e:	b94b      	cbnz	r3, 17c84 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   17c70:	4b05      	ldr	r3, [pc, #20]	; (17c88 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   17c72:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   17c74:	f101 0018 	add.w	r0, r1, #24
   17c78:	f003 be98 	b.w	1b9ac <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17c7c:	4b03      	ldr	r3, [pc, #12]	; (17c8c <event_handler+0x28>)
   17c7e:	e7f8      	b.n	17c72 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17c80:	4b03      	ldr	r3, [pc, #12]	; (17c90 <event_handler+0x2c>)
   17c82:	e7f6      	b.n	17c72 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   17c84:	4b03      	ldr	r3, [pc, #12]	; (17c94 <event_handler+0x30>)
   17c86:	e7f4      	b.n	17c72 <event_handler+0xe>
   17c88:	0bad0000 	.word	0x0bad0000
   17c8c:	0bae0001 	.word	0x0bae0001
   17c90:	0bae0002 	.word	0x0bae0002
   17c94:	0bad0001 	.word	0x0bad0001

00017c98 <i2c_nrfx_twi_transfer>:
{
   17c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c9c:	4604      	mov	r4, r0
   17c9e:	b087      	sub	sp, #28
   17ca0:	460d      	mov	r5, r1
   17ca2:	4617      	mov	r7, r2
   17ca4:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   17ca6:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   17ca8:	f04f 32ff 	mov.w	r2, #4294967295
   17cac:	f04f 33ff 	mov.w	r3, #4294967295
   17cb0:	f003 fea2 	bl	1b9f8 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   17cb4:	6920      	ldr	r0, [r4, #16]
   17cb6:	3018      	adds	r0, #24
   17cb8:	2200      	movs	r2, #0
   17cba:	2300      	movs	r3, #0
   17cbc:	f003 fe9c 	bl	1b9f8 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   17cc0:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   17cc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 17d8c <i2c_nrfx_twi_transfer+0xf4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   17cc6:	f003 f915 	bl	1aef4 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17cca:	f04f 0800 	mov.w	r8, #0
   17cce:	45b8      	cmp	r8, r7
   17cd0:	d301      	bcc.n	17cd6 <i2c_nrfx_twi_transfer+0x3e>
   17cd2:	2500      	movs	r5, #0
   17cd4:	e029      	b.n	17d2a <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   17cd6:	f895 b008 	ldrb.w	fp, [r5, #8]
   17cda:	f01b 0608 	ands.w	r6, fp, #8
   17cde:	d14c      	bne.n	17d7a <i2c_nrfx_twi_transfer+0xe2>
		nrfx_twi_xfer_desc_t cur_xfer = {
   17ce0:	2214      	movs	r2, #20
   17ce2:	4631      	mov	r1, r6
   17ce4:	a801      	add	r0, sp, #4
   17ce6:	f008 fb99 	bl	2041c <memset>
   17cea:	686a      	ldr	r2, [r5, #4]
   17cec:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   17cee:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   17cf2:	682a      	ldr	r2, [r5, #0]
   17cf4:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   17cf8:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   17cfc:	f88d 9005 	strb.w	r9, [sp, #5]
   17d00:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   17d02:	d11c      	bne.n	17d3e <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
   17d04:	1e7a      	subs	r2, r7, #1
   17d06:	4542      	cmp	r2, r8
   17d08:	d902      	bls.n	17d10 <i2c_nrfx_twi_transfer+0x78>
   17d0a:	7d2a      	ldrb	r2, [r5, #20]
   17d0c:	0752      	lsls	r2, r2, #29
   17d0e:	d518      	bpl.n	17d42 <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   17d10:	bb9b      	cbnz	r3, 17d7a <i2c_nrfx_twi_transfer+0xe2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   17d12:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   17d14:	6860      	ldr	r0, [r4, #4]
   17d16:	a901      	add	r1, sp, #4
   17d18:	f003 f944 	bl	1afa4 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   17d1c:	4550      	cmp	r0, sl
   17d1e:	d012      	beq.n	17d46 <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
   17d20:	4b19      	ldr	r3, [pc, #100]	; (17d88 <i2c_nrfx_twi_transfer+0xf0>)
   17d22:	4298      	cmp	r0, r3
   17d24:	d02c      	beq.n	17d80 <i2c_nrfx_twi_transfer+0xe8>
			ret = -EIO;
   17d26:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   17d2a:	6860      	ldr	r0, [r4, #4]
   17d2c:	f003 f8f2 	bl	1af14 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   17d30:	6920      	ldr	r0, [r4, #16]
	z_impl_k_sem_give(sem);
   17d32:	f003 fe3b 	bl	1b9ac <z_impl_k_sem_give>
}
   17d36:	4628      	mov	r0, r5
   17d38:	b007      	add	sp, #28
   17d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   17d3e:	4632      	mov	r2, r6
   17d40:	e7e8      	b.n	17d14 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   17d42:	2240      	movs	r2, #64	; 0x40
   17d44:	e7e6      	b.n	17d14 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   17d46:	6920      	ldr	r0, [r4, #16]
   17d48:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   17d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17d4e:	2300      	movs	r3, #0
   17d50:	f003 fe52 	bl	1b9f8 <z_impl_k_sem_take>
		if (ret != 0) {
   17d54:	b140      	cbz	r0, 17d68 <i2c_nrfx_twi_transfer+0xd0>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
   17d56:	6860      	ldr	r0, [r4, #4]
   17d58:	f003 f8dc 	bl	1af14 <nrfx_twi_disable>
			nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   17d5c:	6863      	ldr	r3, [r4, #4]
   17d5e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   17d62:	f003 fa73 	bl	1b24c <nrfx_twi_twim_bus_recover>
   17d66:	e7de      	b.n	17d26 <i2c_nrfx_twi_transfer+0x8e>
		res = get_dev_data(dev)->res;
   17d68:	6923      	ldr	r3, [r4, #16]
   17d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   17d6c:	4553      	cmp	r3, sl
   17d6e:	f105 050c 	add.w	r5, r5, #12
   17d72:	d1d8      	bne.n	17d26 <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
   17d74:	f108 0801 	add.w	r8, r8, #1
   17d78:	e7a9      	b.n	17cce <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
   17d7a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   17d7e:	e7d4      	b.n	17d2a <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
   17d80:	f06f 050f 	mvn.w	r5, #15
   17d84:	e7d1      	b.n	17d2a <i2c_nrfx_twi_transfer+0x92>
   17d86:	bf00      	nop
   17d88:	0bad000b 	.word	0x0bad000b
   17d8c:	0bad0000 	.word	0x0bad0000

00017d90 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   17d90:	b510      	push	{r4, lr}
   17d92:	4604      	mov	r4, r0
   17d94:	2200      	movs	r2, #0
   17d96:	2101      	movs	r1, #1
   17d98:	2003      	movs	r0, #3
   17d9a:	f7fb fac5 	bl	13328 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   17d9e:	6860      	ldr	r0, [r4, #4]
   17da0:	6923      	ldr	r3, [r4, #16]
   17da2:	4a06      	ldr	r2, [pc, #24]	; (17dbc <twi_0_init+0x2c>)
   17da4:	f100 0108 	add.w	r1, r0, #8
   17da8:	f003 f846 	bl	1ae38 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   17dac:	4b04      	ldr	r3, [pc, #16]	; (17dc0 <twi_0_init+0x30>)
   17dae:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
   17db0:	bf14      	ite	ne
   17db2:	f06f 000f 	mvnne.w	r0, #15
   17db6:	2000      	moveq	r0, #0
   17db8:	bd10      	pop	{r4, pc}
   17dba:	bf00      	nop
   17dbc:	00017c65 	.word	0x00017c65
   17dc0:	0bad0000 	.word	0x0bad0000

00017dc4 <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = to_data(dev);

	switch (chan) {
   17dc4:	290e      	cmp	r1, #14
{
   17dc6:	b510      	push	{r4, lr}
	struct bme280_data *data = to_data(dev);
   17dc8:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   17dca:	d010      	beq.n	17dee <bme280_channel_get+0x2a>
   17dcc:	2910      	cmp	r1, #16
   17dce:	d01d      	beq.n	17e0c <bme280_channel_get+0x48>
   17dd0:	290d      	cmp	r1, #13
   17dd2:	d124      	bne.n	17e1e <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
   17dd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
   17dd6:	2164      	movs	r1, #100	; 0x64
   17dd8:	fb90 f3f1 	sdiv	r3, r0, r1
   17ddc:	6013      	str	r3, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
   17dde:	fb01 0313 	mls	r3, r1, r3, r0
   17de2:	f242 7110 	movw	r1, #10000	; 0x2710
   17de6:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   17de8:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
   17dea:	2000      	movs	r0, #0
}
   17dec:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
   17dee:	6a99      	ldr	r1, [r3, #40]	; 0x28
   17df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17df4:	0a0c      	lsrs	r4, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
   17df6:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
   17df8:	fbb4 f0f3 	udiv	r0, r4, r3
   17dfc:	6010      	str	r0, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   17dfe:	fb03 4010 	mls	r0, r3, r0, r4
			(((data->comp_press & 0xff) * 1000U) >> 8);
   17e02:	4359      	muls	r1, r3
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   17e04:	4343      	muls	r3, r0
   17e06:	eb03 2311 	add.w	r3, r3, r1, lsr #8
   17e0a:	e7ed      	b.n	17de8 <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
   17e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17e0e:	0a99      	lsrs	r1, r3, #10
   17e10:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   17e12:	f3c3 0109 	ubfx	r1, r3, #0, #10
   17e16:	4b03      	ldr	r3, [pc, #12]	; (17e24 <bme280_channel_get+0x60>)
   17e18:	434b      	muls	r3, r1
   17e1a:	0a9b      	lsrs	r3, r3, #10
   17e1c:	e7e4      	b.n	17de8 <bme280_channel_get+0x24>
	switch (chan) {
   17e1e:	f06f 0015 	mvn.w	r0, #21
   17e22:	e7e3      	b.n	17dec <bme280_channel_get+0x28>
   17e24:	000f4240 	.word	0x000f4240

00017e28 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
   17e28:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17e2a:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   17e2c:	6daa      	ldr	r2, [r5, #88]	; 0x58
   17e2e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
{
   17e30:	b085      	sub	sp, #20
   17e32:	b982      	cbnz	r2, 17e56 <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   17e34:	bb73      	cbnz	r3, 17e94 <transfer_next_chunk+0x6c>
	int error = 0;
   17e36:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   17e38:	2200      	movs	r2, #0
   17e3a:	4611      	mov	r1, r2
   17e3c:	4628      	mov	r0, r5
   17e3e:	f00a fea3 	bl	22b88 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   17e42:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   17e44:	f105 0028 	add.w	r0, r5, #40	; 0x28
   17e48:	f003 fdb0 	bl	1b9ac <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   17e4c:	2300      	movs	r3, #0
   17e4e:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   17e52:	b005      	add	sp, #20
   17e54:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   17e56:	4611      	mov	r1, r2
   17e58:	b113      	cbz	r3, 17e60 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   17e5a:	429a      	cmp	r2, r3
   17e5c:	bf28      	it	cs
   17e5e:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   17e60:	6d6c      	ldr	r4, [r5, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   17e62:	66a9      	str	r1, [r5, #104]	; 0x68
		xfer.p_tx_buffer = ctx->tx_buf;
   17e64:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   17e66:	b1bc      	cbz	r4, 17e98 <transfer_next_chunk+0x70>
   17e68:	2a00      	cmp	r2, #0
   17e6a:	bf18      	it	ne
   17e6c:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   17e6e:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   17e70:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   17e72:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   17e74:	b192      	cbz	r2, 17e9c <transfer_next_chunk+0x74>
   17e76:	2b00      	cmp	r3, #0
   17e78:	bf18      	it	ne
   17e7a:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   17e7c:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   17e7e:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   17e80:	2200      	movs	r2, #0
   17e82:	4669      	mov	r1, sp
   17e84:	f002 fc1e 	bl	1a6c4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   17e88:	4b05      	ldr	r3, [pc, #20]	; (17ea0 <transfer_next_chunk+0x78>)
   17e8a:	4298      	cmp	r0, r3
   17e8c:	d0e1      	beq.n	17e52 <transfer_next_chunk+0x2a>
		error = -EIO;
   17e8e:	f06f 0404 	mvn.w	r4, #4
   17e92:	e7d1      	b.n	17e38 <transfer_next_chunk+0x10>
   17e94:	4619      	mov	r1, r3
   17e96:	e7e3      	b.n	17e60 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   17e98:	4622      	mov	r2, r4
   17e9a:	e7e8      	b.n	17e6e <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   17e9c:	4613      	mov	r3, r2
   17e9e:	e7ed      	b.n	17e7c <transfer_next_chunk+0x54>
   17ea0:	0bad0000 	.word	0x0bad0000

00017ea4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   17ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ea8:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   17eaa:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17eac:	6904      	ldr	r4, [r0, #16]
{
   17eae:	4681      	mov	r9, r0
   17eb0:	0498      	lsls	r0, r3, #18
   17eb2:	b089      	sub	sp, #36	; 0x24
   17eb4:	460e      	mov	r6, r1
   17eb6:	4690      	mov	r8, r2
   17eb8:	f100 80c8 	bmi.w	1804c <spi_nrfx_transceive+0x1a8>
	return z_impl_k_sem_take(sem, timeout);
   17ebc:	f04f 32ff 	mov.w	r2, #4294967295
   17ec0:	f04f 33ff 	mov.w	r3, #4294967295
   17ec4:	f104 0010 	add.w	r0, r4, #16
   17ec8:	f003 fd96 	bl	1b9f8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   17ecc:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   17ece:	f8d9 a010 	ldr.w	sl, [r9, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   17ed2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17ed6:	9300      	str	r3, [sp, #0]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   17ed8:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   17edc:	9301      	str	r3, [sp, #4]
   17ede:	b11b      	cbz	r3, 17ee8 <spi_nrfx_transceive+0x44>
   17ee0:	f8da 3000 	ldr.w	r3, [sl]
   17ee4:	429e      	cmp	r6, r3
   17ee6:	d05f      	beq.n	17fa8 <spi_nrfx_transceive+0x104>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   17ee8:	88b7      	ldrh	r7, [r6, #4]
   17eea:	0539      	lsls	r1, r7, #20
   17eec:	f100 80dd 	bmi.w	180aa <spi_nrfx_transceive+0x206>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   17ef0:	f017 0f09 	tst.w	r7, #9
   17ef4:	f040 80d6 	bne.w	180a4 <spi_nrfx_transceive+0x200>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   17ef8:	f3c7 1345 	ubfx	r3, r7, #5, #6
   17efc:	2b08      	cmp	r3, #8
   17efe:	f040 80d1 	bne.w	180a4 <spi_nrfx_transceive+0x200>
	if (spi_cfg->frequency < 125000) {
   17f02:	6835      	ldr	r5, [r6, #0]
   17f04:	4b74      	ldr	r3, [pc, #464]	; (180d8 <spi_nrfx_transceive+0x234>)
   17f06:	429d      	cmp	r5, r3
   17f08:	f240 80cc 	bls.w	180a4 <spi_nrfx_transceive+0x200>
	config = dev_config->def_config;
   17f0c:	9b00      	ldr	r3, [sp, #0]
   17f0e:	f103 0e08 	add.w	lr, r3, #8
   17f12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   17f16:	f10d 0c0c 	add.w	ip, sp, #12
   17f1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   17f1e:	f8de 3000 	ldr.w	r3, [lr]
   17f22:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
   17f26:	4b6d      	ldr	r3, [pc, #436]	; (180dc <spi_nrfx_transceive+0x238>)
   17f28:	429d      	cmp	r5, r3
   17f2a:	f240 8098 	bls.w	1805e <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
   17f2e:	4b6c      	ldr	r3, [pc, #432]	; (180e0 <spi_nrfx_transceive+0x23c>)
   17f30:	429d      	cmp	r5, r3
   17f32:	f240 8097 	bls.w	18064 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
   17f36:	4b6b      	ldr	r3, [pc, #428]	; (180e4 <spi_nrfx_transceive+0x240>)
   17f38:	429d      	cmp	r5, r3
   17f3a:	f240 8096 	bls.w	1806a <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
   17f3e:	4b6a      	ldr	r3, [pc, #424]	; (180e8 <spi_nrfx_transceive+0x244>)
   17f40:	429d      	cmp	r5, r3
   17f42:	f240 8095 	bls.w	18070 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
   17f46:	4b69      	ldr	r3, [pc, #420]	; (180ec <spi_nrfx_transceive+0x248>)
   17f48:	429d      	cmp	r5, r3
   17f4a:	f240 8094 	bls.w	18076 <spi_nrfx_transceive+0x1d2>
		return NRF_SPI_FREQ_8M;
   17f4e:	4b68      	ldr	r3, [pc, #416]	; (180f0 <spi_nrfx_transceive+0x24c>)
   17f50:	429d      	cmp	r5, r3
   17f52:	bf34      	ite	cc
   17f54:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
   17f58:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   17f5c:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   17f5e:	9505      	str	r5, [sp, #20]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   17f60:	f007 0304 	and.w	r3, r7, #4
   17f64:	f140 808a 	bpl.w	1807c <spi_nrfx_transceive+0x1d8>
			return NRF_SPI_MODE_2;
   17f68:	2b00      	cmp	r3, #0
   17f6a:	bf14      	ite	ne
   17f6c:	2303      	movne	r3, #3
   17f6e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   17f70:	f88d 3018 	strb.w	r3, [sp, #24]
	if (dev_data->initialized) {
   17f74:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
   17f76:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   17f7a:	f88d 7019 	strb.w	r7, [sp, #25]
	if (dev_data->initialized) {
   17f7e:	b12b      	cbz	r3, 17f8c <spi_nrfx_transceive+0xe8>
		nrfx_spi_uninit(&dev_config->spi);
   17f80:	9800      	ldr	r0, [sp, #0]
   17f82:	f002 fb67 	bl	1a654 <nrfx_spi_uninit>
		dev_data->initialized = false;
   17f86:	2300      	movs	r3, #0
   17f88:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   17f8c:	4653      	mov	r3, sl
   17f8e:	4a59      	ldr	r2, [pc, #356]	; (180f4 <spi_nrfx_transceive+0x250>)
   17f90:	9800      	ldr	r0, [sp, #0]
   17f92:	a903      	add	r1, sp, #12
   17f94:	f002 fab2 	bl	1a4fc <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   17f98:	4b57      	ldr	r3, [pc, #348]	; (180f8 <spi_nrfx_transceive+0x254>)
   17f9a:	4298      	cmp	r0, r3
   17f9c:	d172      	bne.n	18084 <spi_nrfx_transceive+0x1e0>
	dev_data->initialized = true;
   17f9e:	2301      	movs	r3, #1
   17fa0:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
   17fa4:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
   17fa8:	2301      	movs	r3, #1
   17faa:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   17fae:	f1b8 0f00 	cmp.w	r8, #0
   17fb2:	d17d      	bne.n	180b0 <spi_nrfx_transceive+0x20c>
   17fb4:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   17fb8:	4642      	mov	r2, r8
   17fba:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   17fbc:	f104 0148 	add.w	r1, r4, #72	; 0x48
   17fc0:	f104 0258 	add.w	r2, r4, #88	; 0x58
   17fc4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   17fc8:	f00a fdcd 	bl	22b66 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   17fcc:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   17fce:	f1bb 0f00 	cmp.w	fp, #0
   17fd2:	d176      	bne.n	180c2 <spi_nrfx_transceive+0x21e>
   17fd4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   17fd8:	465b      	mov	r3, fp
   17fda:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   17fdc:	f104 0260 	add.w	r2, r4, #96	; 0x60
   17fe0:	f104 0150 	add.w	r1, r4, #80	; 0x50
   17fe4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   17fe8:	f00a fdbd 	bl	22b66 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   17fec:	2200      	movs	r2, #0
   17fee:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
   17ff0:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   17ff2:	2101      	movs	r1, #1
   17ff4:	4620      	mov	r0, r4
   17ff6:	f00a fdc7 	bl	22b88 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   17ffa:	4648      	mov	r0, r9
   17ffc:	f7ff ff14 	bl	17e28 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18000:	6da3      	ldr	r3, [r4, #88]	; 0x58
   18002:	6e21      	ldr	r1, [r4, #96]	; 0x60
			     ctx->config->frequency;
   18004:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18006:	428b      	cmp	r3, r1
   18008:	bf38      	it	cc
   1800a:	460b      	movcc	r3, r1
   1800c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   18010:	4359      	muls	r1, r3
			     ctx->config->frequency;
   18012:	f855 3b28 	ldr.w	r3, [r5], #40
   18016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1801a:	681b      	ldr	r3, [r3, #0]
   1801c:	fbb1 f1f3 	udiv	r1, r1, r3
   18020:	f240 36e7 	movw	r6, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   18024:	31c8      	adds	r1, #200	; 0xc8
   18026:	2700      	movs	r7, #0
   18028:	fbe0 6701 	umlal	r6, r7, r0, r1
   1802c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18030:	2300      	movs	r3, #0
   18032:	4630      	mov	r0, r6
   18034:	4639      	mov	r1, r7
   18036:	f7e9 fca1 	bl	197c <__aeabi_uldivmod>
   1803a:	4602      	mov	r2, r0
   1803c:	460b      	mov	r3, r1
   1803e:	4628      	mov	r0, r5
   18040:	f003 fcda 	bl	1b9f8 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   18044:	2800      	cmp	r0, #0
   18046:	d144      	bne.n	180d2 <spi_nrfx_transceive+0x22e>
	status = ctx->sync_status;
   18048:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1804a:	e01d      	b.n	18088 <spi_nrfx_transceive+0x1e4>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1804c:	69a3      	ldr	r3, [r4, #24]
   1804e:	2b00      	cmp	r3, #0
   18050:	f47f af34 	bne.w	17ebc <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   18054:	6863      	ldr	r3, [r4, #4]
   18056:	4299      	cmp	r1, r3
   18058:	f47f af30 	bne.w	17ebc <spi_nrfx_transceive+0x18>
   1805c:	e737      	b.n	17ece <spi_nrfx_transceive+0x2a>
		return NRF_SPI_FREQ_125K;
   1805e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   18062:	e77b      	b.n	17f5c <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_250K;
   18064:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   18068:	e778      	b.n	17f5c <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_500K;
   1806a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1806e:	e775      	b.n	17f5c <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_1M;
   18070:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18074:	e772      	b.n	17f5c <spi_nrfx_transceive+0xb8>
		return NRF_SPI_FREQ_2M;
   18076:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1807a:	e76f      	b.n	17f5c <spi_nrfx_transceive+0xb8>
			return NRF_SPI_MODE_0;
   1807c:	3b00      	subs	r3, #0
   1807e:	bf18      	it	ne
   18080:	2301      	movne	r3, #1
   18082:	e775      	b.n	17f70 <spi_nrfx_transceive+0xcc>
		return -EIO;
   18084:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   18088:	6823      	ldr	r3, [r4, #0]
   1808a:	889b      	ldrh	r3, [r3, #4]
   1808c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   18090:	d104      	bne.n	1809c <spi_nrfx_transceive+0x1f8>
		ctx->owner = NULL;
   18092:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   18094:	f104 0010 	add.w	r0, r4, #16
   18098:	f003 fc88 	bl	1b9ac <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
   1809c:	4628      	mov	r0, r5
   1809e:	b009      	add	sp, #36	; 0x24
   180a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   180a4:	f06f 0515 	mvn.w	r5, #21
   180a8:	e7ee      	b.n	18088 <spi_nrfx_transceive+0x1e4>
		return -ENOTSUP;
   180aa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   180ae:	e7eb      	b.n	18088 <spi_nrfx_transceive+0x1e4>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   180b0:	f8d8 2000 	ldr.w	r2, [r8]
   180b4:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   180b6:	2a00      	cmp	r2, #0
   180b8:	f43f af7f 	beq.w	17fba <spi_nrfx_transceive+0x116>
   180bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   180c0:	e77b      	b.n	17fba <spi_nrfx_transceive+0x116>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   180c2:	f8db 3000 	ldr.w	r3, [fp]
   180c6:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   180c8:	2b00      	cmp	r3, #0
   180ca:	d086      	beq.n	17fda <spi_nrfx_transceive+0x136>
   180cc:	f8db 3004 	ldr.w	r3, [fp, #4]
   180d0:	e783      	b.n	17fda <spi_nrfx_transceive+0x136>
		return -ETIMEDOUT;
   180d2:	f06f 0573 	mvn.w	r5, #115	; 0x73
   180d6:	e7d7      	b.n	18088 <spi_nrfx_transceive+0x1e4>
   180d8:	0001e847 	.word	0x0001e847
   180dc:	0003d08f 	.word	0x0003d08f
   180e0:	0007a11f 	.word	0x0007a11f
   180e4:	000f423f 	.word	0x000f423f
   180e8:	001e847f 	.word	0x001e847f
   180ec:	003d08ff 	.word	0x003d08ff
   180f0:	007a1200 	.word	0x007a1200
   180f4:	00022ca1 	.word	0x00022ca1
   180f8:	0bad0000 	.word	0x0bad0000

000180fc <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   180fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   180fe:	6905      	ldr	r5, [r0, #16]
	if (!ctx->tx_len) {
   18100:	6dab      	ldr	r3, [r5, #88]	; 0x58
   18102:	6e2c      	ldr	r4, [r5, #96]	; 0x60
{
   18104:	b085      	sub	sp, #20
   18106:	b97b      	cbnz	r3, 18128 <transfer_next_chunk+0x2c>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   18108:	b99c      	cbnz	r4, 18132 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
   1810a:	2200      	movs	r2, #0
   1810c:	4611      	mov	r1, r2
   1810e:	4628      	mov	r0, r5
   18110:	f00a fe45 	bl	22d9e <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   18114:	642c      	str	r4, [r5, #64]	; 0x40
   18116:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1811a:	f003 fc47 	bl	1b9ac <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   1811e:	2300      	movs	r3, #0
   18120:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   18124:	b005      	add	sp, #20
   18126:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
   18128:	2c00      	cmp	r4, #0
   1812a:	d035      	beq.n	18198 <transfer_next_chunk+0x9c>
	return MIN(ctx->tx_len, ctx->rx_len);
   1812c:	429c      	cmp	r4, r3
   1812e:	bf28      	it	cs
   18130:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
   18132:	6d69      	ldr	r1, [r5, #84]	; 0x54
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   18134:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   18136:	b179      	cbz	r1, 18158 <transfer_next_chunk+0x5c>
   18138:	b173      	cbz	r3, 18158 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1813a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1813e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   18142:	d009      	beq.n	18158 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
   18144:	2c08      	cmp	r4, #8
   18146:	bf28      	it	cs
   18148:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   1814a:	f105 076e 	add.w	r7, r5, #110	; 0x6e
   1814e:	4622      	mov	r2, r4
   18150:	4638      	mov	r0, r7
   18152:	f008 f958 	bl	20406 <memcpy>
			tx_buf = dev_data->buffer;
   18156:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
   18158:	68b2      	ldr	r2, [r6, #8]
   1815a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
   1815c:	9100      	str	r1, [sp, #0]
   1815e:	4294      	cmp	r4, r2
   18160:	bf28      	it	cs
   18162:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
   18164:	66ac      	str	r4, [r5, #104]	; 0x68
   18166:	b11b      	cbz	r3, 18170 <transfer_next_chunk+0x74>
   18168:	6dab      	ldr	r3, [r5, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1816a:	2b00      	cmp	r3, #0
   1816c:	bf18      	it	ne
   1816e:	4623      	movne	r3, r4
   18170:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   18172:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   18174:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   18176:	b11b      	cbz	r3, 18180 <transfer_next_chunk+0x84>
   18178:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1817a:	2b00      	cmp	r3, #0
   1817c:	bf18      	it	ne
   1817e:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   18180:	2200      	movs	r2, #0
   18182:	4669      	mov	r1, sp
   18184:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18186:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   18188:	f002 fcce 	bl	1ab28 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1818c:	4b03      	ldr	r3, [pc, #12]	; (1819c <transfer_next_chunk+0xa0>)
   1818e:	4298      	cmp	r0, r3
   18190:	d0c8      	beq.n	18124 <transfer_next_chunk+0x28>
			error = -EIO;
   18192:	f06f 0404 	mvn.w	r4, #4
   18196:	e7b8      	b.n	1810a <transfer_next_chunk+0xe>
   18198:	461c      	mov	r4, r3
   1819a:	e7ca      	b.n	18132 <transfer_next_chunk+0x36>
   1819c:	0bad0000 	.word	0x0bad0000

000181a0 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
   181a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181a4:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   181a6:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   181a8:	6904      	ldr	r4, [r0, #16]
{
   181aa:	4681      	mov	r9, r0
   181ac:	0498      	lsls	r0, r3, #18
   181ae:	b08b      	sub	sp, #44	; 0x2c
   181b0:	460d      	mov	r5, r1
   181b2:	4690      	mov	r8, r2
   181b4:	f100 80d6 	bmi.w	18364 <spi_nrfx_transceive+0x1c4>
	return z_impl_k_sem_take(sem, timeout);
   181b8:	f04f 32ff 	mov.w	r2, #4294967295
   181bc:	f04f 33ff 	mov.w	r3, #4294967295
   181c0:	f104 0010 	add.w	r0, r4, #16
   181c4:	f003 fc18 	bl	1b9f8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   181c8:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   181ca:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   181ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
   181d2:	f8db 300c 	ldr.w	r3, [fp, #12]
   181d6:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   181d8:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   181dc:	9301      	str	r3, [sp, #4]
   181de:	b11b      	cbz	r3, 181e8 <spi_nrfx_transceive+0x48>
   181e0:	f8da 3000 	ldr.w	r3, [sl]
   181e4:	429d      	cmp	r5, r3
   181e6:	d06d      	beq.n	182c4 <spi_nrfx_transceive+0x124>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   181e8:	88ae      	ldrh	r6, [r5, #4]
   181ea:	0531      	lsls	r1, r6, #20
   181ec:	f100 80ef 	bmi.w	183ce <spi_nrfx_transceive+0x22e>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   181f0:	f016 0f09 	tst.w	r6, #9
   181f4:	f040 80e8 	bne.w	183c8 <spi_nrfx_transceive+0x228>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   181f8:	f3c6 1345 	ubfx	r3, r6, #5, #6
   181fc:	2b08      	cmp	r3, #8
   181fe:	f040 80e3 	bne.w	183c8 <spi_nrfx_transceive+0x228>
	if (spi_cfg->frequency < 125000) {
   18202:	682b      	ldr	r3, [r5, #0]
   18204:	9302      	str	r3, [sp, #8]
   18206:	9a02      	ldr	r2, [sp, #8]
   18208:	4b7c      	ldr	r3, [pc, #496]	; (183fc <spi_nrfx_transceive+0x25c>)
   1820a:	429a      	cmp	r2, r3
   1820c:	f240 80dc 	bls.w	183c8 <spi_nrfx_transceive+0x228>
	config = dev_config->def_config;
   18210:	f10b 0e10 	add.w	lr, fp, #16
   18214:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   18218:	f10d 0c10 	add.w	ip, sp, #16
   1821c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   18220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18224:	4293      	cmp	r3, r2
   18226:	bf28      	it	cs
   18228:	4613      	movcs	r3, r2
	config = dev_config->def_config;
   1822a:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1822e:	4a74      	ldr	r2, [pc, #464]	; (18400 <spi_nrfx_transceive+0x260>)
   18230:	4293      	cmp	r3, r2
	config = dev_config->def_config;
   18232:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   18236:	f240 809e 	bls.w	18376 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 500000) {
   1823a:	4a72      	ldr	r2, [pc, #456]	; (18404 <spi_nrfx_transceive+0x264>)
   1823c:	4293      	cmp	r3, r2
   1823e:	f240 809d 	bls.w	1837c <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 1000000) {
   18242:	4a71      	ldr	r2, [pc, #452]	; (18408 <spi_nrfx_transceive+0x268>)
   18244:	4293      	cmp	r3, r2
   18246:	f240 809c 	bls.w	18382 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 2000000) {
   1824a:	4a70      	ldr	r2, [pc, #448]	; (1840c <spi_nrfx_transceive+0x26c>)
   1824c:	4293      	cmp	r3, r2
   1824e:	f240 809b 	bls.w	18388 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 4000000) {
   18252:	4a6f      	ldr	r2, [pc, #444]	; (18410 <spi_nrfx_transceive+0x270>)
   18254:	4293      	cmp	r3, r2
   18256:	f240 809a 	bls.w	1838e <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 8000000) {
   1825a:	4a6e      	ldr	r2, [pc, #440]	; (18414 <spi_nrfx_transceive+0x274>)
   1825c:	4293      	cmp	r3, r2
   1825e:	f0c0 8099 	bcc.w	18394 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 16000000) {
   18262:	4a6d      	ldr	r2, [pc, #436]	; (18418 <spi_nrfx_transceive+0x278>)
   18264:	4293      	cmp	r3, r2
   18266:	f0c0 8098 	bcc.w	1839a <spi_nrfx_transceive+0x1fa>
		return NRF_SPIM_FREQ_32M;
   1826a:	4a6c      	ldr	r2, [pc, #432]	; (1841c <spi_nrfx_transceive+0x27c>)
   1826c:	4293      	cmp	r3, r2
   1826e:	bf34      	ite	cc
   18270:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
   18274:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   18278:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1827a:	9306      	str	r3, [sp, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1827c:	f006 0304 	and.w	r3, r6, #4
   18280:	f140 808e 	bpl.w	183a0 <spi_nrfx_transceive+0x200>
			return NRF_SPIM_MODE_2;
   18284:	2b00      	cmp	r3, #0
   18286:	bf14      	ite	ne
   18288:	2303      	movne	r3, #3
   1828a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1828c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (dev_data->initialized) {
   18290:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
   18292:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   18296:	f88d 601d 	strb.w	r6, [sp, #29]
	if (dev_data->initialized) {
   1829a:	b12b      	cbz	r3, 182a8 <spi_nrfx_transceive+0x108>
		nrfx_spim_uninit(&dev_config->spim);
   1829c:	4658      	mov	r0, fp
   1829e:	f002 fbed 	bl	1aa7c <nrfx_spim_uninit>
		dev_data->initialized = false;
   182a2:	2300      	movs	r3, #0
   182a4:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   182a8:	4653      	mov	r3, sl
   182aa:	4a5d      	ldr	r2, [pc, #372]	; (18420 <spi_nrfx_transceive+0x280>)
   182ac:	a904      	add	r1, sp, #16
   182ae:	4658      	mov	r0, fp
   182b0:	f002 fad6 	bl	1a860 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   182b4:	4b5b      	ldr	r3, [pc, #364]	; (18424 <spi_nrfx_transceive+0x284>)
   182b6:	4298      	cmp	r0, r3
   182b8:	d176      	bne.n	183a8 <spi_nrfx_transceive+0x208>
	dev_data->initialized = true;
   182ba:	2301      	movs	r3, #1
   182bc:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
   182c0:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
   182c4:	2301      	movs	r3, #1
   182c6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   182ca:	f1b8 0f00 	cmp.w	r8, #0
   182ce:	f040 8081 	bne.w	183d4 <spi_nrfx_transceive+0x234>
   182d2:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   182d6:	4642      	mov	r2, r8
   182d8:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   182da:	f104 0148 	add.w	r1, r4, #72	; 0x48
   182de:	f104 0258 	add.w	r2, r4, #88	; 0x58
   182e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   182e6:	f00a fd49 	bl	22d7c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   182ea:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   182ec:	2f00      	cmp	r7, #0
   182ee:	d17a      	bne.n	183e6 <spi_nrfx_transceive+0x246>
   182f0:	64e7      	str	r7, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   182f2:	6527      	str	r7, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   182f4:	f104 0260 	add.w	r2, r4, #96	; 0x60
   182f8:	f104 0150 	add.w	r1, r4, #80	; 0x50
   182fc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   18300:	f00a fd3c 	bl	22d7c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   18304:	2200      	movs	r2, #0
   18306:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
   18308:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   1830a:	2101      	movs	r1, #1
   1830c:	4620      	mov	r0, r4
   1830e:	f00a fd46 	bl	22d9e <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   18312:	4648      	mov	r0, r9
   18314:	f7ff fef2 	bl	180fc <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18318:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1831a:	6e21      	ldr	r1, [r4, #96]	; 0x60
			     ctx->config->frequency;
   1831c:	4625      	mov	r5, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1831e:	428b      	cmp	r3, r1
   18320:	bf38      	it	cc
   18322:	460b      	movcc	r3, r1
   18324:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   18328:	4359      	muls	r1, r3
			     ctx->config->frequency;
   1832a:	f855 3b28 	ldr.w	r3, [r5], #40
   1832e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18332:	681b      	ldr	r3, [r3, #0]
   18334:	fbb1 f1f3 	udiv	r1, r1, r3
   18338:	f240 36e7 	movw	r6, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1833c:	31c8      	adds	r1, #200	; 0xc8
   1833e:	2700      	movs	r7, #0
   18340:	fbe0 6701 	umlal	r6, r7, r0, r1
   18344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18348:	2300      	movs	r3, #0
   1834a:	4630      	mov	r0, r6
   1834c:	4639      	mov	r1, r7
   1834e:	f7e9 fb15 	bl	197c <__aeabi_uldivmod>
   18352:	4602      	mov	r2, r0
   18354:	460b      	mov	r3, r1
   18356:	4628      	mov	r0, r5
   18358:	f003 fb4e 	bl	1b9f8 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1835c:	2800      	cmp	r0, #0
   1835e:	d149      	bne.n	183f4 <spi_nrfx_transceive+0x254>
	status = ctx->sync_status;
   18360:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   18362:	e023      	b.n	183ac <spi_nrfx_transceive+0x20c>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18364:	69a3      	ldr	r3, [r4, #24]
   18366:	2b00      	cmp	r3, #0
   18368:	f47f af26 	bne.w	181b8 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1836c:	6863      	ldr	r3, [r4, #4]
   1836e:	4299      	cmp	r1, r3
   18370:	f47f af22 	bne.w	181b8 <spi_nrfx_transceive+0x18>
   18374:	e729      	b.n	181ca <spi_nrfx_transceive+0x2a>
		return NRF_SPIM_FREQ_125K;
   18376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   1837a:	e77d      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_250K;
   1837c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18380:	e77a      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_500K;
   18382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18386:	e777      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_1M;
   18388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1838c:	e774      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_2M;
   1838e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   18392:	e771      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_4M;
   18394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18398:	e76e      	b.n	18278 <spi_nrfx_transceive+0xd8>
		return NRF_SPIM_FREQ_8M;
   1839a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1839e:	e76b      	b.n	18278 <spi_nrfx_transceive+0xd8>
			return NRF_SPIM_MODE_0;
   183a0:	3b00      	subs	r3, #0
   183a2:	bf18      	it	ne
   183a4:	2301      	movne	r3, #1
   183a6:	e771      	b.n	1828c <spi_nrfx_transceive+0xec>
		return -EIO;
   183a8:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   183ac:	6823      	ldr	r3, [r4, #0]
   183ae:	889b      	ldrh	r3, [r3, #4]
   183b0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   183b4:	d104      	bne.n	183c0 <spi_nrfx_transceive+0x220>
		ctx->owner = NULL;
   183b6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   183b8:	f104 0010 	add.w	r0, r4, #16
   183bc:	f003 faf6 	bl	1b9ac <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
   183c0:	4628      	mov	r0, r5
   183c2:	b00b      	add	sp, #44	; 0x2c
   183c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   183c8:	f06f 0515 	mvn.w	r5, #21
   183cc:	e7ee      	b.n	183ac <spi_nrfx_transceive+0x20c>
		return -ENOTSUP;
   183ce:	f06f 0585 	mvn.w	r5, #133	; 0x85
   183d2:	e7eb      	b.n	183ac <spi_nrfx_transceive+0x20c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   183d4:	f8d8 2000 	ldr.w	r2, [r8]
   183d8:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   183da:	2a00      	cmp	r2, #0
   183dc:	f43f af7c 	beq.w	182d8 <spi_nrfx_transceive+0x138>
   183e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   183e4:	e778      	b.n	182d8 <spi_nrfx_transceive+0x138>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   183e6:	683b      	ldr	r3, [r7, #0]
   183e8:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   183ea:	b10b      	cbz	r3, 183f0 <spi_nrfx_transceive+0x250>
   183ec:	687f      	ldr	r7, [r7, #4]
   183ee:	e780      	b.n	182f2 <spi_nrfx_transceive+0x152>
   183f0:	461f      	mov	r7, r3
   183f2:	e77e      	b.n	182f2 <spi_nrfx_transceive+0x152>
		return -ETIMEDOUT;
   183f4:	f06f 0573 	mvn.w	r5, #115	; 0x73
   183f8:	e7d8      	b.n	183ac <spi_nrfx_transceive+0x20c>
   183fa:	bf00      	nop
   183fc:	0001e847 	.word	0x0001e847
   18400:	0003d08f 	.word	0x0003d08f
   18404:	0007a11f 	.word	0x0007a11f
   18408:	000f423f 	.word	0x000f423f
   1840c:	001e847f 	.word	0x001e847f
   18410:	003d08ff 	.word	0x003d08ff
   18414:	007a1200 	.word	0x007a1200
   18418:	00f42400 	.word	0x00f42400
   1841c:	01e84800 	.word	0x01e84800
   18420:	00022eb7 	.word	0x00022eb7
   18424:	0bad0000 	.word	0x0bad0000

00018428 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   18428:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   1842a:	7b0b      	ldrb	r3, [r1, #12]
   1842c:	2b02      	cmp	r3, #2
{
   1842e:	4604      	mov	r4, r0
   18430:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   18432:	d128      	bne.n	18486 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   18434:	680b      	ldr	r3, [r1, #0]
   18436:	bb1b      	cbnz	r3, 18480 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   18438:	6902      	ldr	r2, [r0, #16]
	return dev->data;
   1843a:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   1843c:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   18440:	b9d9      	cbnz	r1, 1847a <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   18442:	4914      	ldr	r1, [pc, #80]	; (18494 <wdt_nrf_install_timeout+0x6c>)
   18444:	1e58      	subs	r0, r3, #1
   18446:	4288      	cmp	r0, r1
   18448:	d81a      	bhi.n	18480 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   1844a:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   1844c:	6860      	ldr	r0, [r4, #4]
   1844e:	f10d 0107 	add.w	r1, sp, #7
   18452:	f002 fea9 	bl	1b1a8 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   18456:	4b10      	ldr	r3, [pc, #64]	; (18498 <wdt_nrf_install_timeout+0x70>)
   18458:	4298      	cmp	r0, r3
   1845a:	d017      	beq.n	1848c <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   1845c:	68ab      	ldr	r3, [r5, #8]
   1845e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18462:	b113      	cbz	r3, 1846a <wdt_nrf_install_timeout+0x42>
   18464:	6922      	ldr	r2, [r4, #16]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   18466:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   1846a:	6922      	ldr	r2, [r4, #16]
   1846c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   18470:	3301      	adds	r3, #1
   18472:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   18476:	b003      	add	sp, #12
   18478:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   1847a:	6a12      	ldr	r2, [r2, #32]
   1847c:	429a      	cmp	r2, r3
   1847e:	d0e5      	beq.n	1844c <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   18480:	f06f 0015 	mvn.w	r0, #21
   18484:	e7f7      	b.n	18476 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   18486:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1848a:	e7f4      	b.n	18476 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   1848c:	f06f 000b 	mvn.w	r0, #11
   18490:	e7f1      	b.n	18476 <wdt_nrf_install_timeout+0x4e>
   18492:	bf00      	nop
   18494:	07cffffe 	.word	0x07cffffe
   18498:	0bad0002 	.word	0x0bad0002

0001849c <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   1849c:	b510      	push	{r4, lr}
   1849e:	4604      	mov	r4, r0
   184a0:	2200      	movs	r2, #0
   184a2:	2101      	movs	r1, #1
   184a4:	2010      	movs	r0, #16
   184a6:	f7fa ff3f 	bl	13328 <z_arm_irq_priority_set>
   184aa:	6860      	ldr	r0, [r4, #4]
   184ac:	4a05      	ldr	r2, [pc, #20]	; (184c4 <wdt_0_init+0x28>)
   184ae:	f100 0108 	add.w	r1, r0, #8
   184b2:	f002 fe41 	bl	1b138 <nrfx_wdt_init>
   184b6:	4b04      	ldr	r3, [pc, #16]	; (184c8 <wdt_0_init+0x2c>)
   184b8:	4298      	cmp	r0, r3
   184ba:	bf14      	ite	ne
   184bc:	f06f 000f 	mvnne.w	r0, #15
   184c0:	2000      	moveq	r0, #0
   184c2:	bd10      	pop	{r4, pc}
   184c4:	000184cd 	.word	0x000184cd
   184c8:	0bad0000 	.word	0x0bad0000

000184cc <wdt_0_event_handler>:
   184cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   184ce:	4d0b      	ldr	r5, [pc, #44]	; (184fc <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   184d0:	4e0b      	ldr	r6, [pc, #44]	; (18500 <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   184d2:	4f0c      	ldr	r7, [pc, #48]	; (18504 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   184d4:	2400      	movs	r4, #0
   184d6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   184da:	429c      	cmp	r4, r3
   184dc:	db00      	blt.n	184e0 <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   184de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184e0:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   184e4:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   184e6:	07db      	lsls	r3, r3, #31
   184e8:	d505      	bpl.n	184f6 <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   184ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   184ee:	b113      	cbz	r3, 184f6 <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   184f0:	4621      	mov	r1, r4
   184f2:	4638      	mov	r0, r7
   184f4:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   184f6:	3401      	adds	r4, #1
   184f8:	e7ed      	b.n	184d6 <wdt_0_event_handler+0xa>
   184fa:	bf00      	nop
   184fc:	200028a4 	.word	0x200028a4
   18500:	40010000 	.word	0x40010000
   18504:	00024130 	.word	0x00024130

00018508 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   18508:	4b02      	ldr	r3, [pc, #8]	; (18514 <flash_nrf_pages_layout+0xc>)
   1850a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1850c:	2301      	movs	r3, #1
   1850e:	6013      	str	r3, [r2, #0]
}
   18510:	4770      	bx	lr
   18512:	bf00      	nop
   18514:	200028cc 	.word	0x200028cc

00018518 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   18518:	4800      	ldr	r0, [pc, #0]	; (1851c <flash_nrf_get_parameters+0x4>)
   1851a:	4770      	bx	lr
   1851c:	00024b84 	.word	0x00024b84

00018520 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   18520:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18522:	2201      	movs	r2, #1
   18524:	4611      	mov	r1, r2
   18526:	4807      	ldr	r0, [pc, #28]	; (18544 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   18528:	4c07      	ldr	r4, [pc, #28]	; (18548 <nrf_flash_init+0x28>)
   1852a:	f00b f966 	bl	237fa <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1852e:	f001 faaf 	bl	19a90 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   18532:	f00a fe7c 	bl	2322e <nrfx_nvmc_flash_page_count_get>
   18536:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   18538:	f00a fe75 	bl	23226 <nrfx_nvmc_flash_page_size_get>
   1853c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1853e:	2000      	movs	r0, #0
   18540:	bd10      	pop	{r4, pc}
   18542:	bf00      	nop
   18544:	200028d4 	.word	0x200028d4
   18548:	200028cc 	.word	0x200028cc

0001854c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   1854c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18550:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   18554:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   18558:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1855c:	f023 031f 	bic.w	r3, r3, #31
   18560:	430b      	orrs	r3, r1
    pofcon |=
   18562:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   18566:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   1856a:	4b02      	ldr	r3, [pc, #8]	; (18574 <restore_pofwarn.part.0+0x28>)
   1856c:	2200      	movs	r2, #0
   1856e:	701a      	strb	r2, [r3, #0]
	}
}
   18570:	4770      	bx	lr
   18572:	bf00      	nop
   18574:	2000347c 	.word	0x2000347c

00018578 <suspend_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   18578:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1857c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
   18580:	f012 0001 	ands.w	r0, r2, #1
   18584:	d01a      	beq.n	185bc <suspend_pofwarn.part.0+0x44>
    uint32_t pofcon = p_reg->POFCON;
   18586:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1858a:	4b0d      	ldr	r3, [pc, #52]	; (185c0 <suspend_pofwarn.part.0+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1858c:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   18590:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
   18594:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
   18596:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1859a:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1859c:	b158      	cbz	r0, 185b6 <suspend_pofwarn.part.0+0x3e>
    uint32_t pofcon = p_reg->POFCON;
   1859e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   185a2:	f023 031f 	bic.w	r3, r3, #31
   185a6:	4313      	orrs	r3, r2
    pofcon |=
   185a8:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   185ac:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
   185b0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   185b4:	4770      	bx	lr
		pofcon_enabled = enabled;
   185b6:	4b03      	ldr	r3, [pc, #12]	; (185c4 <suspend_pofwarn.part.0+0x4c>)
   185b8:	2201      	movs	r2, #1
   185ba:	701a      	strb	r2, [r3, #0]
}
   185bc:	4770      	bx	lr
   185be:	bf00      	nop
   185c0:	40000108 	.word	0x40000108
   185c4:	2000347c 	.word	0x2000347c

000185c8 <erase_op>:
{
   185c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185cc:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   185ce:	f00a fe2a 	bl	23226 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   185d2:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   185d4:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   185d6:	b10b      	cbz	r3, 185dc <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   185d8:	f00a fdba 	bl	23150 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   185dc:	4f1b      	ldr	r7, [pc, #108]	; (1864c <erase_op+0x84>)
	if (pofcon_enabled) {
   185de:	f8df 8070 	ldr.w	r8, [pc, #112]	; 18650 <erase_op+0x88>
{
   185e2:	2600      	movs	r6, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   185e4:	683b      	ldr	r3, [r7, #0]
   185e6:	2b08      	cmp	r3, #8
   185e8:	d023      	beq.n	18632 <erase_op+0x6a>
		if (e_ctx->flash_addr == e_ctx->flash_addr_next) {
   185ea:	6860      	ldr	r0, [r4, #4]
   185ec:	6923      	ldr	r3, [r4, #16]
   185ee:	4298      	cmp	r0, r3
   185f0:	d105      	bne.n	185fe <erase_op+0x36>
			nrfx_nvmc_page_partial_erase_init(e_ctx->flash_addr,
   185f2:	2116      	movs	r1, #22
   185f4:	f001 ff20 	bl	1a438 <nrfx_nvmc_page_partial_erase_init>
			e_ctx->flash_addr_next += pg_size;
   185f8:	6923      	ldr	r3, [r4, #16]
   185fa:	442b      	add	r3, r5
   185fc:	6123      	str	r3, [r4, #16]
		if (nrfx_nvmc_page_partial_erase_continue()) {
   185fe:	f001 ff39 	bl	1a474 <nrfx_nvmc_page_partial_erase_continue>
   18602:	b128      	cbz	r0, 18610 <erase_op+0x48>
			e_ctx->len -= pg_size;
   18604:	68a3      	ldr	r3, [r4, #8]
   18606:	1b5b      	subs	r3, r3, r5
   18608:	60a3      	str	r3, [r4, #8]
			e_ctx->flash_addr += pg_size;
   1860a:	6863      	ldr	r3, [r4, #4]
   1860c:	442b      	add	r3, r5
   1860e:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   18610:	f898 3000 	ldrb.w	r3, [r8]
   18614:	b10b      	cbz	r3, 1861a <erase_op+0x52>
   18616:	f7ff ff99 	bl	1854c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1861a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1861c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1861e:	b97b      	cbnz	r3, 18640 <erase_op+0x78>
	} while (e_ctx->len > 0);
   18620:	68a3      	ldr	r3, [r4, #8]
   18622:	2b00      	cmp	r3, #0
   18624:	d1de      	bne.n	185e4 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   18626:	68a0      	ldr	r0, [r4, #8]
   18628:	3800      	subs	r0, #0
   1862a:	bf18      	it	ne
   1862c:	2001      	movne	r0, #1
}
   1862e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   18632:	f7ff ffa1 	bl	18578 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   18636:	2800      	cmp	r0, #0
   18638:	d0d7      	beq.n	185ea <erase_op+0x22>
			return -ECANCELED;
   1863a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1863e:	e7f6      	b.n	1862e <erase_op+0x66>
			if (nrf_flash_sync_check_time_limit(i)) {
   18640:	4630      	mov	r0, r6
   18642:	f001 fa33 	bl	19aac <nrf_flash_sync_check_time_limit>
   18646:	2800      	cmp	r0, #0
   18648:	d0ea      	beq.n	18620 <erase_op+0x58>
   1864a:	e7ec      	b.n	18626 <erase_op+0x5e>
   1864c:	10000130 	.word	0x10000130
   18650:	2000347c 	.word	0x2000347c

00018654 <flash_nrf_erase>:
{
   18654:	b5f0      	push	{r4, r5, r6, r7, lr}
   18656:	b089      	sub	sp, #36	; 0x24
   18658:	460d      	mov	r5, r1
   1865a:	4616      	mov	r6, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1865c:	f00a fde3 	bl	23226 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   18660:	4631      	mov	r1, r6
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   18662:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   18664:	4628      	mov	r0, r5
   18666:	f00a fc9a 	bl	22f9e <is_regular_addr_valid>
   1866a:	2800      	cmp	r0, #0
   1866c:	d03c      	beq.n	186e8 <flash_nrf_erase+0x94>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1866e:	fbb5 f3f7 	udiv	r3, r5, r7
   18672:	fb07 5313 	mls	r3, r7, r3, r5
   18676:	bbbb      	cbnz	r3, 186e8 <flash_nrf_erase+0x94>
   18678:	fbb6 f4f7 	udiv	r4, r6, r7
   1867c:	fb07 6414 	mls	r4, r7, r4, r6
   18680:	bb94      	cbnz	r4, 186e8 <flash_nrf_erase+0x94>
		if (!n_pages) {
   18682:	42be      	cmp	r6, r7
   18684:	d324      	bcc.n	186d0 <flash_nrf_erase+0x7c>
	return z_impl_k_sem_take(sem, timeout);
   18686:	f04f 32ff 	mov.w	r2, #4294967295
   1868a:	f04f 33ff 	mov.w	r3, #4294967295
   1868e:	4818      	ldr	r0, [pc, #96]	; (186f0 <flash_nrf_erase+0x9c>)
   18690:	f003 f9b2 	bl	1b9f8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   18694:	f00a fd5a 	bl	2314c <nrf_flash_sync_is_required>
   18698:	ab03      	add	r3, sp, #12
   1869a:	4601      	mov	r1, r0
	struct flash_context context = {
   1869c:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   1869e:	b1d0      	cbz	r0, 186d6 <flash_nrf_erase+0x82>
	struct flash_context context = {
   186a0:	4621      	mov	r1, r4
   186a2:	4618      	mov	r0, r3
   186a4:	f007 feba 	bl	2041c <memset>
   186a8:	2201      	movs	r2, #1
   186aa:	f88d 2018 	strb.w	r2, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   186ae:	4a11      	ldr	r2, [pc, #68]	; (186f4 <flash_nrf_erase+0xa0>)
	struct flash_context context = {
   186b0:	9507      	str	r5, [sp, #28]
	struct flash_op_desc flash_op_desc = {
   186b2:	e9cd 2001 	strd	r2, r0, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   186b6:	f245 50f0 	movw	r0, #22000	; 0x55f0
	struct flash_context context = {
   186ba:	e9cd 5604 	strd	r5, r6, [sp, #16]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   186be:	f001 f9ef 	bl	19aa0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   186c2:	a801      	add	r0, sp, #4
   186c4:	f7f8 ffe8 	bl	11698 <nrf_flash_sync_exe>
	return	erase_op(&context);
   186c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   186ca:	4809      	ldr	r0, [pc, #36]	; (186f0 <flash_nrf_erase+0x9c>)
   186cc:	f003 f96e 	bl	1b9ac <z_impl_k_sem_give>
}
   186d0:	4620      	mov	r0, r4
   186d2:	b009      	add	sp, #36	; 0x24
   186d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   186d6:	4618      	mov	r0, r3
   186d8:	f007 fea0 	bl	2041c <memset>
   186dc:	e9cd 5604 	strd	r5, r6, [sp, #16]
   186e0:	9507      	str	r5, [sp, #28]
	return	erase_op(&context);
   186e2:	f7ff ff71 	bl	185c8 <erase_op>
   186e6:	e7ef      	b.n	186c8 <flash_nrf_erase+0x74>
		return -EINVAL;
   186e8:	f06f 0415 	mvn.w	r4, #21
   186ec:	e7f0      	b.n	186d0 <flash_nrf_erase+0x7c>
   186ee:	bf00      	nop
   186f0:	200028d4 	.word	0x200028d4
   186f4:	000185c9 	.word	0x000185c9

000186f8 <write_op>:
{
   186f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   186fa:	7b03      	ldrb	r3, [r0, #12]
{
   186fc:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   186fe:	b10b      	cbz	r3, 18704 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   18700:	f00a fd26 	bl	23150 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18704:	4e1c      	ldr	r6, [pc, #112]	; (18778 <write_op+0x80>)
	if (pofcon_enabled) {
   18706:	4f1d      	ldr	r7, [pc, #116]	; (1877c <write_op+0x84>)
{
   18708:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1870a:	68a3      	ldr	r3, [r4, #8]
   1870c:	2b03      	cmp	r3, #3
   1870e:	d806      	bhi.n	1871e <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   18710:	4a1b      	ldr	r2, [pc, #108]	; (18780 <write_op+0x88>)
   18712:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   18716:	07db      	lsls	r3, r3, #31
   18718:	d5fb      	bpl.n	18712 <write_op+0x1a>
	return FLASH_OP_DONE;
   1871a:	2000      	movs	r0, #0
}
   1871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1871e:	6833      	ldr	r3, [r6, #0]
   18720:	2b08      	cmp	r3, #8
   18722:	d021      	beq.n	18768 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   18724:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   18726:	6860      	ldr	r0, [r4, #4]
   18728:	6819      	ldr	r1, [r3, #0]
   1872a:	f001 fec7 	bl	1a4bc <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1872e:	783b      	ldrb	r3, [r7, #0]
   18730:	b10b      	cbz	r3, 18736 <write_op+0x3e>
   18732:	f7ff ff0b 	bl	1854c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   18736:	6863      	ldr	r3, [r4, #4]
   18738:	3304      	adds	r3, #4
   1873a:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1873c:	6823      	ldr	r3, [r4, #0]
   1873e:	3304      	adds	r3, #4
   18740:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   18742:	68a3      	ldr	r3, [r4, #8]
   18744:	3b04      	subs	r3, #4
   18746:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   18748:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1874a:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1874c:	2b00      	cmp	r3, #0
   1874e:	d0dc      	beq.n	1870a <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   18750:	4628      	mov	r0, r5
   18752:	f001 f9ab 	bl	19aac <nrf_flash_sync_check_time_limit>
   18756:	2800      	cmp	r0, #0
   18758:	d0d7      	beq.n	1870a <write_op+0x12>
   1875a:	4a09      	ldr	r2, [pc, #36]	; (18780 <write_op+0x88>)
   1875c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   18760:	07d9      	lsls	r1, r3, #31
   18762:	d5fb      	bpl.n	1875c <write_op+0x64>
				return FLASH_OP_ONGOING;
   18764:	2001      	movs	r0, #1
   18766:	e7d9      	b.n	1871c <write_op+0x24>
                switch(var2)
   18768:	f7ff ff06 	bl	18578 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1876c:	2800      	cmp	r0, #0
   1876e:	d0d9      	beq.n	18724 <write_op+0x2c>
			return -ECANCELED;
   18770:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   18774:	e7d2      	b.n	1871c <write_op+0x24>
   18776:	bf00      	nop
   18778:	10000130 	.word	0x10000130
   1877c:	2000347c 	.word	0x2000347c
   18780:	4001e000 	.word	0x4001e000

00018784 <flash_nrf_write>:
{
   18784:	b5f0      	push	{r4, r5, r6, r7, lr}
   18786:	460d      	mov	r5, r1
   18788:	b089      	sub	sp, #36	; 0x24
	if (is_regular_addr_valid(addr, len)) {
   1878a:	4619      	mov	r1, r3
   1878c:	4628      	mov	r0, r5
{
   1878e:	4617      	mov	r7, r2
   18790:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   18792:	f00a fc04 	bl	22f9e <is_regular_addr_valid>
   18796:	b390      	cbz	r0, 187fe <flash_nrf_write+0x7a>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   18798:	ea45 0604 	orr.w	r6, r5, r4
   1879c:	f016 0603 	ands.w	r6, r6, #3
   187a0:	d12d      	bne.n	187fe <flash_nrf_write+0x7a>
	if (!len) {
   187a2:	b30c      	cbz	r4, 187e8 <flash_nrf_write+0x64>
	return z_impl_k_sem_take(sem, timeout);
   187a4:	f04f 33ff 	mov.w	r3, #4294967295
   187a8:	f04f 32ff 	mov.w	r2, #4294967295
   187ac:	4815      	ldr	r0, [pc, #84]	; (18804 <flash_nrf_write+0x80>)
   187ae:	f003 f923 	bl	1b9f8 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   187b2:	f00a fccb 	bl	2314c <nrf_flash_sync_is_required>
   187b6:	4603      	mov	r3, r0
   187b8:	a803      	add	r0, sp, #12
   187ba:	b1c3      	cbz	r3, 187ee <flash_nrf_write+0x6a>
	struct flash_context context = {
   187bc:	2301      	movs	r3, #1
   187be:	e9cd 6606 	strd	r6, r6, [sp, #24]
   187c2:	f88d 3018 	strb.w	r3, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   187c6:	4b10      	ldr	r3, [pc, #64]	; (18808 <flash_nrf_write+0x84>)
	struct flash_context context = {
   187c8:	9405      	str	r4, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   187ca:	e9cd 3001 	strd	r3, r0, [sp, #4]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   187ce:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_context context = {
   187d2:	e9cd 7503 	strd	r7, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   187d6:	f001 f963 	bl	19aa0 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   187da:	a801      	add	r0, sp, #4
   187dc:	f7f8 ff5c 	bl	11698 <nrf_flash_sync_exe>
	return write_op(&context);
   187e0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   187e2:	4808      	ldr	r0, [pc, #32]	; (18804 <flash_nrf_write+0x80>)
   187e4:	f003 f8e2 	bl	1b9ac <z_impl_k_sem_give>
}
   187e8:	4620      	mov	r0, r4
   187ea:	b009      	add	sp, #36	; 0x24
   187ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   187ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
   187f2:	e9cd 7503 	strd	r7, r5, [sp, #12]
   187f6:	9405      	str	r4, [sp, #20]
	return write_op(&context);
   187f8:	f7ff ff7e 	bl	186f8 <write_op>
   187fc:	e7f0      	b.n	187e0 <flash_nrf_write+0x5c>
		return -EINVAL;
   187fe:	f06f 0415 	mvn.w	r4, #21
   18802:	e7f1      	b.n	187e8 <flash_nrf_write+0x64>
   18804:	200028d4 	.word	0x200028d4
   18808:	000186f9 	.word	0x000186f9

0001880c <random_byte_get>:
	__asm__ volatile(
   1880c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18810:	f3ef 8211 	mrs	r2, BASEPRI
   18814:	f383 8812 	msr	BASEPRI_MAX, r3
   18818:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1881c:	4b08      	ldr	r3, [pc, #32]	; (18840 <random_byte_get+0x34>)
   1881e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18820:	b159      	cbz	r1, 1883a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18822:	4908      	ldr	r1, [pc, #32]	; (18844 <random_byte_get+0x38>)
   18824:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18828:	2100      	movs	r1, #0
   1882a:	6019      	str	r1, [r3, #0]
   1882c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1882e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18830:	f382 8811 	msr	BASEPRI, r2
   18834:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18838:	4770      	bx	lr
	int retval = -EAGAIN;
   1883a:	f06f 000a 	mvn.w	r0, #10
   1883e:	e7f7      	b.n	18830 <random_byte_get+0x24>
   18840:	4000d100 	.word	0x4000d100
   18844:	4000d000 	.word	0x4000d000

00018848 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1884a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1884c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1884e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18850:	f04f 0540 	mov.w	r5, #64	; 0x40
   18854:	f3ef 8011 	mrs	r0, BASEPRI
   18858:	f385 8812 	msr	BASEPRI_MAX, r5
   1885c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18860:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18862:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18866:	1ba4      	subs	r4, r4, r6
   18868:	403c      	ands	r4, r7
	if (available < len) {
   1886a:	42a2      	cmp	r2, r4
		len = available;
   1886c:	bf88      	it	hi
   1886e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18870:	eb06 0c02 	add.w	ip, r6, r2
   18874:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   18878:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1887a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1887e:	f380 8811 	msr	BASEPRI, r0
   18882:	f3bf 8f6f 	isb	sy
   18886:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   18888:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1888a:	4282      	cmp	r2, r0
   1888c:	d119      	bne.n	188c2 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1888e:	4576      	cmp	r6, lr
   18890:	d10d      	bne.n	188ae <rng_pool_get+0x66>
	__asm__ volatile(
   18892:	f04f 0540 	mov.w	r5, #64	; 0x40
   18896:	f3ef 8211 	mrs	r2, BASEPRI
   1889a:	f385 8812 	msr	BASEPRI_MAX, r5
   1889e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   188a2:	781d      	ldrb	r5, [r3, #0]
   188a4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   188a6:	f382 8811 	msr	BASEPRI, r2
   188aa:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   188ae:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   188b0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   188b2:	b288      	uxth	r0, r1
	available = available - len;
   188b4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   188b6:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   188b8:	bf22      	ittt	cs
   188ba:	4b06      	ldrcs	r3, [pc, #24]	; (188d4 <rng_pool_get+0x8c>)
   188bc:	2201      	movcs	r2, #1
   188be:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   188c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   188c2:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   188c6:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   188c8:	f89c c005 	ldrb.w	ip, [ip, #5]
   188cc:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   188d0:	403d      	ands	r5, r7
   188d2:	e7da      	b.n	1888a <rng_pool_get+0x42>
   188d4:	4000d000 	.word	0x4000d000

000188d8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   188d8:	43db      	mvns	r3, r3
{
   188da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   188de:	f013 0501 	ands.w	r5, r3, #1
{
   188e2:	460e      	mov	r6, r1
   188e4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   188e6:	d004      	beq.n	188f2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   188e8:	4821      	ldr	r0, [pc, #132]	; (18970 <entropy_nrf5_get_entropy_isr+0x98>)
   188ea:	f7ff ffad 	bl	18848 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   188ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   188f2:	2a00      	cmp	r2, #0
   188f4:	d033      	beq.n	1895e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   188f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   188fa:	f3ef 8811 	mrs	r8, BASEPRI
   188fe:	f383 8812 	msr	BASEPRI_MAX, r3
   18902:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18906:	200d      	movs	r0, #13
   18908:	f7fa fd00 	bl	1330c <arch_irq_is_enabled>
   1890c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1890e:	200d      	movs	r0, #13
   18910:	f7fa fce8 	bl	132e4 <arch_irq_disable>
	__asm__ volatile(
   18914:	f388 8811 	msr	BASEPRI, r8
   18918:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1891c:	4a15      	ldr	r2, [pc, #84]	; (18974 <entropy_nrf5_get_entropy_isr+0x9c>)
   1891e:	6015      	str	r5, [r2, #0]
   18920:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18922:	4b15      	ldr	r3, [pc, #84]	; (18978 <entropy_nrf5_get_entropy_isr+0xa0>)
   18924:	2101      	movs	r1, #1
   18926:	6019      	str	r1, [r3, #0]
   18928:	4914      	ldr	r1, [pc, #80]	; (1897c <entropy_nrf5_get_entropy_isr+0xa4>)
   1892a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1892e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   18932:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18934:	4691      	mov	r9, r2
   18936:	468a      	mov	sl, r1
   18938:	4698      	mov	r8, r3
   1893a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1893e:	b183      	cbz	r3, 18962 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18940:	f7ff ff64 	bl	1880c <random_byte_get>
			if (byte < 0) {
   18944:	1e03      	subs	r3, r0, #0
   18946:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1894a:	dbf6      	blt.n	1893a <entropy_nrf5_get_entropy_isr+0x62>
   1894c:	3d01      	subs	r5, #1
   1894e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   18950:	5573      	strb	r3, [r6, r5]
		} while (len);
   18952:	2d00      	cmp	r5, #0
   18954:	d1f1      	bne.n	1893a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18956:	b117      	cbz	r7, 1895e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18958:	200d      	movs	r0, #13
   1895a:	f7fa fcb3 	bl	132c4 <arch_irq_enable>
	return cnt;
   1895e:	4620      	mov	r0, r4
   18960:	e7c5      	b.n	188ee <entropy_nrf5_get_entropy_isr+0x16>
   18962:	f3bf 8f4f 	dsb	sy
				__WFE();
   18966:	bf20      	wfe
				__SEV();
   18968:	bf40      	sev
				__WFE();
   1896a:	bf20      	wfe
   1896c:	e7e5      	b.n	1893a <entropy_nrf5_get_entropy_isr+0x62>
   1896e:	bf00      	nop
   18970:	2000291c 	.word	0x2000291c
   18974:	4000d100 	.word	0x4000d100
   18978:	4000d000 	.word	0x4000d000
   1897c:	e000e100 	.word	0xe000e100

00018980 <entropy_nrf5_get_entropy>:
{
   18980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18984:	4f13      	ldr	r7, [pc, #76]	; (189d4 <entropy_nrf5_get_entropy+0x54>)
   18986:	460d      	mov	r5, r1
   18988:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1898a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1898e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   18992:	b914      	cbnz	r4, 1899a <entropy_nrf5_get_entropy+0x1a>
}
   18994:	4620      	mov	r0, r4
   18996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1899a:	f04f 33ff 	mov.w	r3, #4294967295
   1899e:	f04f 32ff 	mov.w	r2, #4294967295
   189a2:	4638      	mov	r0, r7
   189a4:	f003 f828 	bl	1b9f8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   189a8:	4622      	mov	r2, r4
   189aa:	4629      	mov	r1, r5
   189ac:	4640      	mov	r0, r8
   189ae:	f7ff ff4b 	bl	18848 <rng_pool_get>
   189b2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   189b4:	4638      	mov	r0, r7
   189b6:	f002 fff9 	bl	1b9ac <z_impl_k_sem_give>
		if (bytes == 0U) {
   189ba:	b93e      	cbnz	r6, 189cc <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   189bc:	f04f 32ff 	mov.w	r2, #4294967295
   189c0:	f04f 33ff 	mov.w	r3, #4294967295
   189c4:	4648      	mov	r0, r9
   189c6:	f003 f817 	bl	1b9f8 <z_impl_k_sem_take>
			continue;
   189ca:	e7e2      	b.n	18992 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   189cc:	1ba4      	subs	r4, r4, r6
   189ce:	b2a4      	uxth	r4, r4
		buf += bytes;
   189d0:	4435      	add	r5, r6
   189d2:	e7de      	b.n	18992 <entropy_nrf5_get_entropy+0x12>
   189d4:	200028ec 	.word	0x200028ec

000189d8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   189d8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   189da:	4c19      	ldr	r4, [pc, #100]	; (18a40 <entropy_nrf5_init+0x68>)
   189dc:	2201      	movs	r2, #1
   189de:	4611      	mov	r1, r2
   189e0:	4620      	mov	r0, r4
   189e2:	f00a ff0a 	bl	237fa <z_impl_k_sem_init>
   189e6:	2201      	movs	r2, #1
   189e8:	2100      	movs	r1, #0
   189ea:	f104 0018 	add.w	r0, r4, #24
   189ee:	f00a ff04 	bl	237fa <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   189f2:	f240 4307 	movw	r3, #1031	; 0x407
   189f6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   189fa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   189fe:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   18a00:	230c      	movs	r3, #12
   18a02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   18a06:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   18a08:	4b0e      	ldr	r3, [pc, #56]	; (18a44 <entropy_nrf5_init+0x6c>)
   18a0a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   18a0e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   18a12:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   18a16:	f022 0201 	bic.w	r2, r2, #1
   18a1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a1e:	4a0a      	ldr	r2, [pc, #40]	; (18a48 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   18a20:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18a22:	6015      	str	r5, [r2, #0]
   18a24:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   18a26:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18a2a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18a2c:	6019      	str	r1, [r3, #0]
   18a2e:	200d      	movs	r0, #13
   18a30:	f7fa fc7a 	bl	13328 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18a34:	200d      	movs	r0, #13
   18a36:	f7fa fc45 	bl	132c4 <arch_irq_enable>

	return 0;
}
   18a3a:	4628      	mov	r0, r5
   18a3c:	bd38      	pop	{r3, r4, r5, pc}
   18a3e:	bf00      	nop
   18a40:	200028ec 	.word	0x200028ec
   18a44:	4000d000 	.word	0x4000d000
   18a48:	4000d100 	.word	0x4000d100

00018a4c <isr>:
{
   18a4c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   18a4e:	f7ff fedd 	bl	1880c <random_byte_get>
	if (byte < 0) {
   18a52:	2800      	cmp	r0, #0
   18a54:	db20      	blt.n	18a98 <isr+0x4c>
	uint8_t last  = rngp->last;
   18a56:	4b17      	ldr	r3, [pc, #92]	; (18ab4 <isr+0x68>)
   18a58:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18a5c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18a60:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18a64:	1a51      	subs	r1, r2, r1
   18a66:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18a6a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18a6c:	d10d      	bne.n	18a8a <isr+0x3e>
	uint8_t last  = rngp->last;
   18a6e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18a72:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18a76:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18a7a:	1a51      	subs	r1, r2, r1
   18a7c:	ea34 0101 	bics.w	r1, r4, r1
   18a80:	d10b      	bne.n	18a9a <isr+0x4e>
   18a82:	4b0d      	ldr	r3, [pc, #52]	; (18ab8 <isr+0x6c>)
   18a84:	2201      	movs	r2, #1
   18a86:	601a      	str	r2, [r3, #0]
}
   18a88:	e00e      	b.n	18aa8 <isr+0x5c>
	rngp->buffer[last] = byte;
   18a8a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18a8c:	3201      	adds	r2, #1
   18a8e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18a90:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18a94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18a98:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18a9a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18a9c:	3201      	adds	r2, #1
   18a9e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18aa0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18aa8:	4804      	ldr	r0, [pc, #16]	; (18abc <isr+0x70>)
}
   18aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18aae:	f002 bf7d 	b.w	1b9ac <z_impl_k_sem_give>
   18ab2:	bf00      	nop
   18ab4:	200028ec 	.word	0x200028ec
   18ab8:	4000d004 	.word	0x4000d004
   18abc:	20002904 	.word	0x20002904

00018ac0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18ac0:	4919      	ldr	r1, [pc, #100]	; (18b28 <sys_clock_timeout_handler+0x68>)
{
   18ac2:	b570      	push	{r4, r5, r6, lr}
   18ac4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   18ac6:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18aca:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   18acc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   18ad0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18ad4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   18ad6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   18ada:	f04f 0500 	mov.w	r5, #0
   18ade:	d20a      	bcs.n	18af6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   18ae0:	4b12      	ldr	r3, [pc, #72]	; (18b2c <sys_clock_timeout_handler+0x6c>)
   18ae2:	6819      	ldr	r1, [r3, #0]
   18ae4:	060a      	lsls	r2, r1, #24
   18ae6:	0a0b      	lsrs	r3, r1, #8
   18ae8:	1992      	adds	r2, r2, r6
   18aea:	4911      	ldr	r1, [pc, #68]	; (18b30 <sys_clock_timeout_handler+0x70>)
   18aec:	f143 0300 	adc.w	r3, r3, #0
   18af0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   18af4:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   18af6:	f003 fe05 	bl	1c704 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   18afa:	00a3      	lsls	r3, r4, #2
   18afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18b00:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18b04:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   18b08:	42b2      	cmp	r2, r6
   18b0a:	d10b      	bne.n	18b24 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   18b0c:	b91d      	cbnz	r5, 18b16 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   18b0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18b12:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   18b16:	4b07      	ldr	r3, [pc, #28]	; (18b34 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18b18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18b1c:	fa00 f404 	lsl.w	r4, r0, r4
   18b20:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18b24:	bd70      	pop	{r4, r5, r6, pc}
   18b26:	bf00      	nop
   18b28:	20001e78 	.word	0x20001e78
   18b2c:	20002948 	.word	0x20002948
   18b30:	20001e60 	.word	0x20001e60
   18b34:	40011000 	.word	0x40011000

00018b38 <compare_int_lock>:
{
   18b38:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   18b3a:	2301      	movs	r3, #1
   18b3c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b3e:	4a11      	ldr	r2, [pc, #68]	; (18b84 <compare_int_lock+0x4c>)
   18b40:	f3bf 8f5b 	dmb	ish
   18b44:	43dc      	mvns	r4, r3
   18b46:	e852 1f00 	ldrex	r1, [r2]
   18b4a:	ea01 0c04 	and.w	ip, r1, r4
   18b4e:	e842 ce00 	strex	lr, ip, [r2]
   18b52:	f1be 0f00 	cmp.w	lr, #0
   18b56:	d1f6      	bne.n	18b46 <compare_int_lock+0xe>
   18b58:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18b60:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   18b64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18b68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18b6c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   18b70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18b74:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   18b78:	420b      	tst	r3, r1
}
   18b7a:	bf14      	ite	ne
   18b7c:	2001      	movne	r0, #1
   18b7e:	2000      	moveq	r0, #0
   18b80:	bd10      	pop	{r4, pc}
   18b82:	bf00      	nop
   18b84:	20002944 	.word	0x20002944

00018b88 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   18b88:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18b8a:	4a12      	ldr	r2, [pc, #72]	; (18bd4 <compare_int_unlock.part.0+0x4c>)
   18b8c:	f3bf 8f5b 	dmb	ish
   18b90:	4083      	lsls	r3, r0
   18b92:	e852 1f00 	ldrex	r1, [r2]
   18b96:	4319      	orrs	r1, r3
   18b98:	e842 1c00 	strex	ip, r1, [r2]
   18b9c:	f1bc 0f00 	cmp.w	ip, #0
   18ba0:	d1f7      	bne.n	18b92 <compare_int_unlock.part.0+0xa>
   18ba2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   18ba6:	4a0c      	ldr	r2, [pc, #48]	; (18bd8 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18bac:	4083      	lsls	r3, r0
   18bae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18bb2:	4b0a      	ldr	r3, [pc, #40]	; (18bdc <compare_int_unlock.part.0+0x54>)
   18bb4:	f3bf 8f5b 	dmb	ish
   18bb8:	681b      	ldr	r3, [r3, #0]
   18bba:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18bbe:	fa23 f000 	lsr.w	r0, r3, r0
   18bc2:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18bc4:	bf42      	ittt	mi
   18bc6:	4b06      	ldrmi	r3, [pc, #24]	; (18be0 <compare_int_unlock.part.0+0x58>)
   18bc8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   18bcc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   18bd0:	4770      	bx	lr
   18bd2:	bf00      	nop
   18bd4:	20002944 	.word	0x20002944
   18bd8:	40011000 	.word	0x40011000
   18bdc:	20002940 	.word	0x20002940
   18be0:	e000e100 	.word	0xe000e100

00018be4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   18be4:	4b0d      	ldr	r3, [pc, #52]	; (18c1c <z_nrf_rtc_timer_read+0x38>)
   18be6:	681b      	ldr	r3, [r3, #0]
   18be8:	0a19      	lsrs	r1, r3, #8
   18bea:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   18bec:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   18bf0:	4b0b      	ldr	r3, [pc, #44]	; (18c20 <z_nrf_rtc_timer_read+0x3c>)
   18bf2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   18bf6:	18c0      	adds	r0, r0, r3
   18bf8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   18bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18c00:	d20a      	bcs.n	18c18 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   18c02:	4b08      	ldr	r3, [pc, #32]	; (18c24 <z_nrf_rtc_timer_read+0x40>)
   18c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   18c08:	4299      	cmp	r1, r3
   18c0a:	bf08      	it	eq
   18c0c:	4290      	cmpeq	r0, r2
   18c0e:	d203      	bcs.n	18c18 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   18c10:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   18c14:	f141 0100 	adc.w	r1, r1, #0
}
   18c18:	4770      	bx	lr
   18c1a:	bf00      	nop
   18c1c:	20002948 	.word	0x20002948
   18c20:	40011000 	.word	0x40011000
   18c24:	20001e60 	.word	0x20001e60

00018c28 <compare_set>:
{
   18c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c2c:	b085      	sub	sp, #20
   18c2e:	4616      	mov	r6, r2
   18c30:	461f      	mov	r7, r3
   18c32:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   18c34:	f7ff ff80 	bl	18b38 <compare_int_lock>
   18c38:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   18c3a:	f7ff ffd3 	bl	18be4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   18c3e:	42b9      	cmp	r1, r7
   18c40:	bf08      	it	eq
   18c42:	42b0      	cmpeq	r0, r6
   18c44:	d27f      	bcs.n	18d46 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   18c46:	ebb6 0800 	subs.w	r8, r6, r0
   18c4a:	eb67 0901 	sbc.w	r9, r7, r1
   18c4e:	2300      	movs	r3, #0
   18c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18c54:	454b      	cmp	r3, r9
   18c56:	bf08      	it	eq
   18c58:	4542      	cmpeq	r2, r8
   18c5a:	f0c0 8085 	bcc.w	18d68 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   18c5e:	4b44      	ldr	r3, [pc, #272]	; (18d70 <compare_set+0x148>)
   18c60:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   18c64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   18c68:	429f      	cmp	r7, r3
   18c6a:	bf08      	it	eq
   18c6c:	4296      	cmpeq	r6, r2
   18c6e:	d054      	beq.n	18d1a <compare_set+0xf2>
   18c70:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18c74:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   18c78:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18c7c:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18c80:	fa0b f205 	lsl.w	r2, fp, r5
   18c84:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18c88:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18c8c:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18c90:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   18c92:	4a38      	ldr	r2, [pc, #224]	; (18d74 <compare_set+0x14c>)
    return p_reg->CC[ch];
   18c94:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   18c98:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18c9c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   18ca0:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18ca4:	461c      	mov	r4, r3
   18ca6:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   18ca8:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18cac:	eba0 000a 	sub.w	r0, r0, sl
   18cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18cb4:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18cb8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18cba:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   18cbe:	d105      	bne.n	18ccc <compare_set+0xa4>
   18cc0:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   18cc2:	2013      	movs	r0, #19
   18cc4:	f00a ffde 	bl	23c84 <z_impl_k_busy_wait>
   18cc8:	4a2a      	ldr	r2, [pc, #168]	; (18d74 <compare_set+0x14c>)
   18cca:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   18ccc:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   18cce:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   18cd2:	eba4 000c 	sub.w	r0, r4, ip
   18cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   18cda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18cde:	bf88      	it	hi
   18ce0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18ce2:	2000      	movs	r0, #0
   18ce4:	f8c8 0000 	str.w	r0, [r8]
   18ce8:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   18cec:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18cf0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   18cf4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18cf8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   18cfc:	4582      	cmp	sl, r0
   18cfe:	d006      	beq.n	18d0e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   18d00:	1a20      	subs	r0, r4, r0
   18d02:	3802      	subs	r0, #2
   18d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   18d08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18d0c:	d819      	bhi.n	18d42 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   18d0e:	1ae4      	subs	r4, r4, r3
   18d10:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   18d14:	1932      	adds	r2, r6, r4
   18d16:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   18d1a:	4c15      	ldr	r4, [pc, #84]	; (18d70 <compare_set+0x148>)
   18d1c:	0129      	lsls	r1, r5, #4
   18d1e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   18d22:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   18d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   18d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   18d2a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   18d2c:	6043      	str	r3, [r0, #4]
	return ret;
   18d2e:	2400      	movs	r4, #0
	if (key) {
   18d30:	9b01      	ldr	r3, [sp, #4]
   18d32:	b113      	cbz	r3, 18d3a <compare_set+0x112>
   18d34:	4628      	mov	r0, r5
   18d36:	f7ff ff27 	bl	18b88 <compare_int_unlock.part.0>
}
   18d3a:	4620      	mov	r0, r4
   18d3c:	b005      	add	sp, #20
   18d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d42:	4620      	mov	r0, r4
   18d44:	e7b0      	b.n	18ca8 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   18d46:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18d48:	4a0b      	ldr	r2, [pc, #44]	; (18d78 <compare_set+0x150>)
   18d4a:	f3bf 8f5b 	dmb	ish
   18d4e:	40ab      	lsls	r3, r5
   18d50:	e852 1f00 	ldrex	r1, [r2]
   18d54:	4319      	orrs	r1, r3
   18d56:	e842 1000 	strex	r0, r1, [r2]
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d1f8      	bne.n	18d50 <compare_set+0x128>
   18d5e:	f3bf 8f5b 	dmb	ish
   18d62:	4632      	mov	r2, r6
   18d64:	463b      	mov	r3, r7
   18d66:	e7d8      	b.n	18d1a <compare_set+0xf2>
			return -EINVAL;
   18d68:	f06f 0415 	mvn.w	r4, #21
   18d6c:	e7e0      	b.n	18d30 <compare_set+0x108>
   18d6e:	bf00      	nop
   18d70:	20001e68 	.word	0x20001e68
   18d74:	40011000 	.word	0x40011000
   18d78:	20002940 	.word	0x20002940

00018d7c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18d7e:	4b19      	ldr	r3, [pc, #100]	; (18de4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   18d80:	4d19      	ldr	r5, [pc, #100]	; (18de8 <sys_clock_driver_init+0x6c>)
   18d82:	2400      	movs	r4, #0
   18d84:	f04f 30ff 	mov.w	r0, #4294967295
   18d88:	f04f 31ff 	mov.w	r1, #4294967295
   18d8c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18d90:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18d98:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18d9c:	4b13      	ldr	r3, [pc, #76]	; (18dec <sys_clock_driver_init+0x70>)
   18d9e:	2602      	movs	r6, #2
   18da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18da4:	2101      	movs	r1, #1
   18da6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   18daa:	2011      	movs	r0, #17
   18dac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18db0:	4622      	mov	r2, r4
   18db2:	f7fa fab9 	bl	13328 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18db6:	2011      	movs	r0, #17
   18db8:	f7fa fa84 	bl	132c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18dbc:	4a0c      	ldr	r2, [pc, #48]	; (18df0 <sys_clock_driver_init+0x74>)
   18dbe:	2301      	movs	r3, #1
   18dc0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18dc2:	4a0c      	ldr	r2, [pc, #48]	; (18df4 <sys_clock_driver_init+0x78>)
   18dc4:	602b      	str	r3, [r5, #0]
   18dc6:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18dc8:	4b0b      	ldr	r3, [pc, #44]	; (18df8 <sys_clock_driver_init+0x7c>)
   18dca:	4a0c      	ldr	r2, [pc, #48]	; (18dfc <sys_clock_driver_init+0x80>)
   18dcc:	9300      	str	r3, [sp, #0]
   18dce:	9401      	str	r4, [sp, #4]
   18dd0:	2300      	movs	r3, #0
   18dd2:	4620      	mov	r0, r4
   18dd4:	f7ff ff28 	bl	18c28 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   18dd8:	4630      	mov	r0, r6
   18dda:	f7fe fd2f 	bl	1783c <z_nrf_clock_control_lf_on>

	return 0;
}
   18dde:	4620      	mov	r0, r4
   18de0:	b002      	add	sp, #8
   18de2:	bd70      	pop	{r4, r5, r6, pc}
   18de4:	20001e68 	.word	0x20001e68
   18de8:	40011000 	.word	0x40011000
   18dec:	e000e100 	.word	0xe000e100
   18df0:	40011008 	.word	0x40011008
   18df4:	20002944 	.word	0x20002944
   18df8:	00018ac1 	.word	0x00018ac1
   18dfc:	007fffff 	.word	0x007fffff

00018e00 <rtc_nrf_isr>:
{
   18e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   18e04:	4c2a      	ldr	r4, [pc, #168]	; (18eb0 <rtc_nrf_isr+0xb0>)
   18e06:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   18e0a:	0799      	lsls	r1, r3, #30
   18e0c:	d509      	bpl.n	18e22 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18e0e:	4b29      	ldr	r3, [pc, #164]	; (18eb4 <rtc_nrf_isr+0xb4>)
   18e10:	681a      	ldr	r2, [r3, #0]
   18e12:	b132      	cbz	r2, 18e22 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18e14:	2200      	movs	r2, #0
   18e16:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   18e18:	4a27      	ldr	r2, [pc, #156]	; (18eb8 <rtc_nrf_isr+0xb8>)
   18e1a:	681b      	ldr	r3, [r3, #0]
   18e1c:	6813      	ldr	r3, [r2, #0]
   18e1e:	3301      	adds	r3, #1
   18e20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e22:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18e26:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   18e28:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   18e2c:	03d2      	lsls	r2, r2, #15
   18e2e:	d52c      	bpl.n	18e8a <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e30:	f3bf 8f5b 	dmb	ish
   18e34:	4a21      	ldr	r2, [pc, #132]	; (18ebc <rtc_nrf_isr+0xbc>)
   18e36:	e852 1f00 	ldrex	r1, [r2]
   18e3a:	f021 0001 	bic.w	r0, r1, #1
   18e3e:	e842 0500 	strex	r5, r0, [r2]
   18e42:	2d00      	cmp	r5, #0
   18e44:	d1f7      	bne.n	18e36 <rtc_nrf_isr+0x36>
   18e46:	f3bf 8f5b 	dmb	ish
   18e4a:	4a1d      	ldr	r2, [pc, #116]	; (18ec0 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18e4c:	b909      	cbnz	r1, 18e52 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18e4e:	6811      	ldr	r1, [r2, #0]
		if (result) {
   18e50:	b1d9      	cbz	r1, 18e8a <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18e52:	2500      	movs	r5, #0
   18e54:	6015      	str	r5, [r2, #0]
   18e56:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e58:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   18e5c:	f7ff fec2 	bl	18be4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e60:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18e64:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   18e66:	4b17      	ldr	r3, [pc, #92]	; (18ec4 <rtc_nrf_isr+0xc4>)
   18e68:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   18e6c:	4549      	cmp	r1, r9
   18e6e:	bf08      	it	eq
   18e70:	4540      	cmpeq	r0, r8
   18e72:	d20f      	bcs.n	18e94 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18e74:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e76:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   18e7a:	b141      	cbz	r1, 18e8e <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   18e7c:	f8cd a000 	str.w	sl, [sp]
   18e80:	4642      	mov	r2, r8
   18e82:	464b      	mov	r3, r9
   18e84:	2000      	movs	r0, #0
   18e86:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18e88:	e001      	b.n	18e8e <rtc_nrf_isr+0x8e>
   18e8a:	f383 8810 	msr	PRIMASK, r3
}
   18e8e:	b002      	add	sp, #8
   18e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18e94:	f04f 36ff 	mov.w	r6, #4294967295
   18e98:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   18e9c:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18ea0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   18ea4:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   18ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18eaa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   18eae:	e7e2      	b.n	18e76 <rtc_nrf_isr+0x76>
   18eb0:	40011000 	.word	0x40011000
   18eb4:	40011104 	.word	0x40011104
   18eb8:	20002948 	.word	0x20002948
   18ebc:	20002940 	.word	0x20002940
   18ec0:	40011140 	.word	0x40011140
   18ec4:	20001e68 	.word	0x20001e68

00018ec8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18ec8:	4b14      	ldr	r3, [pc, #80]	; (18f1c <sys_clock_set_timeout+0x54>)
{
   18eca:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18ecc:	f1b0 3fff 	cmp.w	r0, #4294967295
   18ed0:	bf08      	it	eq
   18ed2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18ed4:	1e44      	subs	r4, r0, #1
   18ed6:	2c00      	cmp	r4, #0
   18ed8:	dd1e      	ble.n	18f18 <sys_clock_set_timeout+0x50>
   18eda:	429c      	cmp	r4, r3
   18edc:	bfa8      	it	ge
   18ede:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   18ee0:	f7ff fe80 	bl	18be4 <z_nrf_rtc_timer_read>
   18ee4:	4b0e      	ldr	r3, [pc, #56]	; (18f20 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18ee6:	490f      	ldr	r1, [pc, #60]	; (18f24 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   18ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   18eec:	1a80      	subs	r0, r0, r2
		ticks = 0;
   18eee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18ef2:	bf28      	it	cs
   18ef4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18ef6:	3001      	adds	r0, #1
   18ef8:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   18efa:	4808      	ldr	r0, [pc, #32]	; (18f1c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18efc:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   18efe:	4284      	cmp	r4, r0
   18f00:	bf28      	it	cs
   18f02:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18f04:	1912      	adds	r2, r2, r4
   18f06:	f04f 0000 	mov.w	r0, #0
   18f0a:	9001      	str	r0, [sp, #4]
   18f0c:	f143 0300 	adc.w	r3, r3, #0
   18f10:	f7ff fe8a 	bl	18c28 <compare_set>
}
   18f14:	b002      	add	sp, #8
   18f16:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18f18:	2400      	movs	r4, #0
   18f1a:	e7e1      	b.n	18ee0 <sys_clock_set_timeout+0x18>
   18f1c:	007fffff 	.word	0x007fffff
   18f20:	20001e78 	.word	0x20001e78
   18f24:	00018ac1 	.word	0x00018ac1

00018f28 <sys_clock_elapsed>:
{
   18f28:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   18f2a:	f7ff fe5b 	bl	18be4 <z_nrf_rtc_timer_read>
   18f2e:	4b02      	ldr	r3, [pc, #8]	; (18f38 <sys_clock_elapsed+0x10>)
   18f30:	681b      	ldr	r3, [r3, #0]
}
   18f32:	1ac0      	subs	r0, r0, r3
   18f34:	bd08      	pop	{r3, pc}
   18f36:	bf00      	nop
   18f38:	20001e78 	.word	0x20001e78

00018f3c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18f3c:	4602      	mov	r2, r0
   18f3e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   18f40:	4801      	ldr	r0, [pc, #4]	; (18f48 <multithreading_lock_acquire+0xc>)
   18f42:	f002 bc3b 	b.w	1b7bc <z_impl_k_mutex_lock>
   18f46:	bf00      	nop
   18f48:	20000b10 	.word	0x20000b10

00018f4c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18f4c:	4801      	ldr	r0, [pc, #4]	; (18f54 <multithreading_lock_release+0x8>)
   18f4e:	f002 bcb3 	b.w	1b8b8 <z_impl_k_mutex_unlock>
   18f52:	bf00      	nop
   18f54:	20000b10 	.word	0x20000b10

00018f58 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   18f58:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18f5a:	4905      	ldr	r1, [pc, #20]	; (18f70 <rand_prio_low_vector_get_blocking+0x18>)
{
   18f5c:	b410      	push	{r4}
   18f5e:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18f60:	6808      	ldr	r0, [r1, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   18f62:	6881      	ldr	r1, [r0, #8]
   18f64:	680c      	ldr	r4, [r1, #0]
   18f66:	4619      	mov	r1, r3
   18f68:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   18f6a:	bc10      	pop	{r4}
   18f6c:	4718      	bx	r3
   18f6e:	bf00      	nop
   18f70:	2000294c 	.word	0x2000294c

00018f74 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18f74:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18f76:	4804      	ldr	r0, [pc, #16]	; (18f88 <hci_driver_init+0x14>)
   18f78:	f7fb fcae 	bl	148d8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   18f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18f80:	4802      	ldr	r0, [pc, #8]	; (18f8c <hci_driver_init+0x18>)
   18f82:	f7ec bb55 	b.w	5630 <sdc_init>
   18f86:	bf00      	nop
   18f88:	00024b9c 	.word	0x00024b9c
   18f8c:	000230c7 	.word	0x000230c7

00018f90 <rand_prio_low_vector_get>:
{
   18f90:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18f92:	4b08      	ldr	r3, [pc, #32]	; (18fb4 <rand_prio_low_vector_get+0x24>)
{
   18f94:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18f96:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18f98:	6883      	ldr	r3, [r0, #8]
   18f9a:	685d      	ldr	r5, [r3, #4]
   18f9c:	460a      	mov	r2, r1
   18f9e:	b135      	cbz	r5, 18fae <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18fa0:	2300      	movs	r3, #0
   18fa2:	4621      	mov	r1, r4
   18fa4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18fa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18faa:	b2c0      	uxtb	r0, r0
   18fac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18fae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18fb2:	e7f8      	b.n	18fa6 <rand_prio_low_vector_get+0x16>
   18fb4:	2000294c 	.word	0x2000294c

00018fb8 <hci_driver_open>:
{
   18fb8:	b570      	push	{r4, r5, r6, lr}
   18fba:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18fbc:	2200      	movs	r2, #0
   18fbe:	2300      	movs	r3, #0
   18fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18fc4:	2300      	movs	r3, #0
   18fc6:	f06f 0209 	mvn.w	r2, #9
   18fca:	e9cd 2303 	strd	r2, r3, [sp, #12]
   18fce:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18fd2:	9300      	str	r3, [sp, #0]
   18fd4:	4946      	ldr	r1, [pc, #280]	; (190f0 <hci_driver_open+0x138>)
   18fd6:	4b47      	ldr	r3, [pc, #284]	; (190f4 <hci_driver_open+0x13c>)
   18fd8:	4847      	ldr	r0, [pc, #284]	; (190f8 <hci_driver_open+0x140>)
   18fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18fde:	f002 fb4d 	bl	1b67c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18fe2:	4946      	ldr	r1, [pc, #280]	; (190fc <hci_driver_open+0x144>)
   18fe4:	4844      	ldr	r0, [pc, #272]	; (190f8 <hci_driver_open+0x140>)
   18fe6:	f00a fb28 	bl	2363a <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   18fea:	a80b      	add	r0, sp, #44	; 0x2c
   18fec:	f7ec fa8e 	bl	550c <sdc_build_revision_get>
			err = sdc_support_adv();
   18ff0:	f7ec fb9e 	bl	5730 <sdc_support_adv>
			if (err) {
   18ff4:	b118      	cbz	r0, 18ffe <hci_driver_open+0x46>
				return -ENOTSUP;
   18ff6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   18ffa:	b010      	add	sp, #64	; 0x40
   18ffc:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_slave();
   18ffe:	f7ec fbc7 	bl	5790 <sdc_support_slave>
		if (err) {
   19002:	2800      	cmp	r0, #0
   19004:	d1f7      	bne.n	18ff6 <hci_driver_open+0x3e>
		err = sdc_support_dle();
   19006:	f7ec fba3 	bl	5750 <sdc_support_dle>
		if (err) {
   1900a:	2800      	cmp	r0, #0
   1900c:	d1f3      	bne.n	18ff6 <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   1900e:	f7ec fbaf 	bl	5770 <sdc_support_le_2m_phy>
		if (err) {
   19012:	4605      	mov	r5, r0
   19014:	2800      	cmp	r0, #0
   19016:	d1ee      	bne.n	18ff6 <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19018:	ac08      	add	r4, sp, #32
   1901a:	4622      	mov	r2, r4
   1901c:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1901e:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19022:	f7ec fa81 	bl	5528 <sdc_cfg_set>
	if (required_memory < 0) {
   19026:	2800      	cmp	r0, #0
   19028:	dbe7      	blt.n	18ffa <hci_driver_open+0x42>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1902a:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1902c:	4622      	mov	r2, r4
   1902e:	2102      	movs	r1, #2
   19030:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   19032:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19036:	f7ec fa77 	bl	5528 <sdc_cfg_set>
	if (required_memory < 0) {
   1903a:	2800      	cmp	r0, #0
   1903c:	dbdd      	blt.n	18ffa <hci_driver_open+0x42>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1903e:	4b30      	ldr	r3, [pc, #192]	; (19100 <hci_driver_open+0x148>)
   19040:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19042:	4622      	mov	r2, r4
   19044:	2103      	movs	r1, #3
   19046:	4628      	mov	r0, r5
   19048:	f7ec fa6e 	bl	5528 <sdc_cfg_set>
	if (required_memory < 0) {
   1904c:	2800      	cmp	r0, #0
   1904e:	dbd4      	blt.n	18ffa <hci_driver_open+0x42>
	cfg.event_length.event_length_us =
   19050:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19054:	4622      	mov	r2, r4
   19056:	2104      	movs	r1, #4
   19058:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   1905a:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1905c:	f7ec fa64 	bl	5528 <sdc_cfg_set>
	if (required_memory < 0) {
   19060:	2800      	cmp	r0, #0
   19062:	dbca      	blt.n	18ffa <hci_driver_open+0x42>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19064:	4622      	mov	r2, r4
   19066:	2105      	movs	r1, #5
   19068:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1906a:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1906e:	f7ec fa5b 	bl	5528 <sdc_cfg_set>
	if (required_memory < 0) {
   19072:	2800      	cmp	r0, #0
   19074:	dbc1      	blt.n	18ffa <hci_driver_open+0x42>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   19076:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19078:	4622      	mov	r2, r4
   1907a:	2107      	movs	r1, #7
   1907c:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1907e:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19082:	f7ec fa51 	bl	5528 <sdc_cfg_set>
		if (required_memory < 0) {
   19086:	2800      	cmp	r0, #0
   19088:	dbb7      	blt.n	18ffa <hci_driver_open+0x42>
	if (required_memory > sizeof(sdc_mempool)) {
   1908a:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   1908e:	dd08      	ble.n	190a2 <hci_driver_open+0xea>
		k_panic();
   19090:	4040      	eors	r0, r0
   19092:	f380 8811 	msr	BASEPRI, r0
   19096:	f04f 0004 	mov.w	r0, #4
   1909a:	df02      	svc	2
		return -ENOMEM;
   1909c:	f06f 000b 	mvn.w	r0, #11
   190a0:	e7ab      	b.n	18ffa <hci_driver_open+0x42>
   190a2:	4818      	ldr	r0, [pc, #96]	; (19104 <hci_driver_open+0x14c>)
   190a4:	f002 f964 	bl	1b370 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   190a8:	4b17      	ldr	r3, [pc, #92]	; (19108 <hci_driver_open+0x150>)
   190aa:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   190ac:	b1e8      	cbz	r0, 190ea <hci_driver_open+0x132>
	sdc_rand_source_t rand_functions = {
   190ae:	4b17      	ldr	r3, [pc, #92]	; (1910c <hci_driver_open+0x154>)
   190b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   190b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   190b8:	4620      	mov	r0, r4
   190ba:	f7ec fbbb 	bl	5834 <sdc_rand_source_register>
	if (err) {
   190be:	b988      	cbnz	r0, 190e4 <hci_driver_open+0x12c>
	err = MULTITHREADING_LOCK_ACQUIRE();
   190c0:	f04f 30ff 	mov.w	r0, #4294967295
   190c4:	f04f 31ff 	mov.w	r1, #4294967295
   190c8:	f7ff ff38 	bl	18f3c <multithreading_lock_acquire>
	if (!err) {
   190cc:	4604      	mov	r4, r0
   190ce:	b930      	cbnz	r0, 190de <hci_driver_open+0x126>
		err = sdc_enable(host_signal, sdc_mempool);
   190d0:	490f      	ldr	r1, [pc, #60]	; (19110 <hci_driver_open+0x158>)
   190d2:	4810      	ldr	r0, [pc, #64]	; (19114 <hci_driver_open+0x15c>)
   190d4:	f7ec fa84 	bl	55e0 <sdc_enable>
   190d8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   190da:	f7ff ff37 	bl	18f4c <multithreading_lock_release>
	if (err < 0) {
   190de:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   190e2:	e78a      	b.n	18ffa <hci_driver_open+0x42>
		return -EINVAL;
   190e4:	f06f 0015 	mvn.w	r0, #21
   190e8:	e787      	b.n	18ffa <hci_driver_open+0x42>
		return -ENODEV;
   190ea:	f06f 0012 	mvn.w	r0, #18
   190ee:	e784      	b.n	18ffa <hci_driver_open+0x42>
   190f0:	20004c80 	.word	0x20004c80
   190f4:	00019119 	.word	0x00019119
   190f8:	20001e80 	.word	0x20001e80
   190fc:	000250d5 	.word	0x000250d5
   19100:	02031b1b 	.word	0x02031b1b
   19104:	000250c6 	.word	0x000250c6
   19108:	2000294c 	.word	0x2000294c
   1910c:	000244b0 	.word	0x000244b0
   19110:	20003581 	.word	0x20003581
   19114:	000191f5 	.word	0x000191f5

00019118 <recv_thread>:
{
   19118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   1911a:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   1911c:	4f33      	ldr	r7, [pc, #204]	; (191ec <recv_thread+0xd4>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   1911e:	4c34      	ldr	r4, [pc, #208]	; (191f0 <recv_thread+0xd8>)
	bool received_evt = false;
   19120:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   19122:	b93e      	cbnz	r6, 19134 <recv_thread+0x1c>
   19124:	b935      	cbnz	r5, 19134 <recv_thread+0x1c>
   19126:	f04f 32ff 	mov.w	r2, #4294967295
   1912a:	f04f 33ff 	mov.w	r3, #4294967295
   1912e:	4638      	mov	r0, r7
   19130:	f002 fc62 	bl	1b9f8 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19134:	f04f 30ff 	mov.w	r0, #4294967295
   19138:	f04f 31ff 	mov.w	r1, #4294967295
   1913c:	f7ff fefe 	bl	18f3c <multithreading_lock_acquire>
	if (!errcode) {
   19140:	b158      	cbz	r0, 1915a <recv_thread+0x42>
		return false;
   19142:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   19144:	f04f 30ff 	mov.w	r0, #4294967295
   19148:	f04f 31ff 	mov.w	r1, #4294967295
   1914c:	f7ff fef6 	bl	18f3c <multithreading_lock_acquire>
	if (!errcode) {
   19150:	b370      	cbz	r0, 191b0 <recv_thread+0x98>
		return false;
   19152:	2500      	movs	r5, #0
	z_impl_k_yield();
   19154:	f003 f8c2 	bl	1c2dc <z_impl_k_yield>
}
   19158:	e7e3      	b.n	19122 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1915a:	4825      	ldr	r0, [pc, #148]	; (191f0 <recv_thread+0xd8>)
   1915c:	f000 fb9c 	bl	19898 <hci_internal_evt_get>
   19160:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   19162:	f7ff fef3 	bl	18f4c <multithreading_lock_release>
	if (errcode) {
   19166:	2d00      	cmp	r5, #0
   19168:	d1eb      	bne.n	19142 <recv_thread+0x2a>
	switch (hdr->evt) {
   1916a:	7820      	ldrb	r0, [r4, #0]
   1916c:	283e      	cmp	r0, #62	; 0x3e
   1916e:	d007      	beq.n	19180 <recv_thread+0x68>
   19170:	28ff      	cmp	r0, #255	; 0xff
   19172:	d01a      	beq.n	191aa <recv_thread+0x92>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19174:	f04f 32ff 	mov.w	r2, #4294967295
   19178:	f04f 33ff 	mov.w	r3, #4294967295
   1917c:	2100      	movs	r1, #0
   1917e:	e005      	b.n	1918c <recv_thread+0x74>
		switch (me->subevent) {
   19180:	78a3      	ldrb	r3, [r4, #2]
   19182:	2b02      	cmp	r3, #2
		switch (subevent) {
   19184:	d1f6      	bne.n	19174 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19186:	2200      	movs	r2, #0
   19188:	2300      	movs	r3, #0
   1918a:	2101      	movs	r1, #1
   1918c:	f7fa fd1c 	bl	13bc8 <bt_buf_get_evt>
	if (!evt_buf) {
   19190:	4605      	mov	r5, r0
   19192:	b140      	cbz	r0, 191a6 <recv_thread+0x8e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19194:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19196:	4621      	mov	r1, r4
   19198:	3202      	adds	r2, #2
   1919a:	3008      	adds	r0, #8
   1919c:	f009 f8cf 	bl	2233e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   191a0:	4628      	mov	r0, r5
   191a2:	f7fb fb77 	bl	14894 <bt_recv>
	return true;
   191a6:	2601      	movs	r6, #1
   191a8:	e7cc      	b.n	19144 <recv_thread+0x2c>
		switch (subevent) {
   191aa:	78a3      	ldrb	r3, [r4, #2]
   191ac:	2b80      	cmp	r3, #128	; 0x80
   191ae:	e7e9      	b.n	19184 <recv_thread+0x6c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   191b0:	480f      	ldr	r0, [pc, #60]	; (191f0 <recv_thread+0xd8>)
   191b2:	f7f4 feab 	bl	df0c <sdc_hci_data_get>
   191b6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   191b8:	f7ff fec8 	bl	18f4c <multithreading_lock_release>
	if (errcode) {
   191bc:	2d00      	cmp	r5, #0
   191be:	d1c8      	bne.n	19152 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   191c0:	f04f 32ff 	mov.w	r2, #4294967295
   191c4:	f04f 33ff 	mov.w	r3, #4294967295
   191c8:	2003      	movs	r0, #3
   191ca:	f7fa fcd3 	bl	13b74 <bt_buf_get_rx>
	if (!data_buf) {
   191ce:	4605      	mov	r5, r0
   191d0:	b908      	cbnz	r0, 191d6 <recv_thread+0xbe>
	return true;
   191d2:	2501      	movs	r5, #1
   191d4:	e7be      	b.n	19154 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   191d6:	8862      	ldrh	r2, [r4, #2]
   191d8:	4621      	mov	r1, r4
   191da:	3204      	adds	r2, #4
   191dc:	3008      	adds	r0, #8
   191de:	f009 f8ae 	bl	2233e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   191e2:	4628      	mov	r0, r5
   191e4:	f7fb fb56 	bl	14894 <bt_recv>
   191e8:	e7f3      	b.n	191d2 <recv_thread+0xba>
   191ea:	bf00      	nop
   191ec:	20000b78 	.word	0x20000b78
   191f0:	2000347d 	.word	0x2000347d

000191f4 <host_signal>:
	z_impl_k_sem_give(sem);
   191f4:	4801      	ldr	r0, [pc, #4]	; (191fc <host_signal+0x8>)
   191f6:	f002 bbd9 	b.w	1b9ac <z_impl_k_sem_give>
   191fa:	bf00      	nop
   191fc:	20000b78 	.word	0x20000b78

00019200 <hci_driver_send>:
{
   19200:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   19202:	8983      	ldrh	r3, [r0, #12]
{
   19204:	4605      	mov	r5, r0
	if (!buf->len) {
   19206:	b383      	cbz	r3, 1926a <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19208:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1920a:	b1ab      	cbz	r3, 19238 <hci_driver_send+0x38>
   1920c:	2b02      	cmp	r3, #2
   1920e:	d12c      	bne.n	1926a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19210:	f04f 30ff 	mov.w	r0, #4294967295
   19214:	f04f 31ff 	mov.w	r1, #4294967295
   19218:	f7ff fe90 	bl	18f3c <multithreading_lock_acquire>
	if (!errcode) {
   1921c:	4604      	mov	r4, r0
   1921e:	b948      	cbnz	r0, 19234 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   19220:	68a8      	ldr	r0, [r5, #8]
   19222:	f7f4 fe80 	bl	df26 <sdc_hci_data_put>
   19226:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19228:	f7ff fe90 	bl	18f4c <multithreading_lock_release>
		if (errcode) {
   1922c:	b1c4      	cbz	r4, 19260 <hci_driver_send+0x60>
   1922e:	4810      	ldr	r0, [pc, #64]	; (19270 <hci_driver_send+0x70>)
   19230:	f002 fbbc 	bl	1b9ac <z_impl_k_sem_give>
}
   19234:	4620      	mov	r0, r4
   19236:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19238:	f04f 30ff 	mov.w	r0, #4294967295
   1923c:	f04f 31ff 	mov.w	r1, #4294967295
   19240:	f7ff fe7c 	bl	18f3c <multithreading_lock_acquire>
	if (!errcode) {
   19244:	4604      	mov	r4, r0
   19246:	2800      	cmp	r0, #0
   19248:	d1f4      	bne.n	19234 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1924a:	68a8      	ldr	r0, [r5, #8]
   1924c:	f000 f812 	bl	19274 <hci_internal_cmd_put>
   19250:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19252:	f7ff fe7b 	bl	18f4c <multithreading_lock_release>
	if (errcode) {
   19256:	2c00      	cmp	r4, #0
   19258:	d1ec      	bne.n	19234 <hci_driver_send+0x34>
   1925a:	4805      	ldr	r0, [pc, #20]	; (19270 <hci_driver_send+0x70>)
   1925c:	f002 fba6 	bl	1b9ac <z_impl_k_sem_give>
		net_buf_unref(buf);
   19260:	4628      	mov	r0, r5
   19262:	f7fd ffd5 	bl	17210 <net_buf_unref>
   19266:	2400      	movs	r4, #0
   19268:	e7e4      	b.n	19234 <hci_driver_send+0x34>
	switch (type) {
   1926a:	f06f 0415 	mvn.w	r4, #21
   1926e:	e7e1      	b.n	19234 <hci_driver_send+0x34>
   19270:	20000b78 	.word	0x20000b78

00019274 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   19274:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   19276:	4c8e      	ldr	r4, [pc, #568]	; (194b0 <hci_internal_cmd_put+0x23c>)
   19278:	7823      	ldrb	r3, [r4, #0]
   1927a:	2b00      	cmp	r3, #0
   1927c:	f040 82f7 	bne.w	1986e <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   19280:	7843      	ldrb	r3, [r0, #1]
   19282:	7805      	ldrb	r5, [r0, #0]
   19284:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   19288:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1928c:	b22e      	sxth	r6, r5
   1928e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   19292:	d20d      	bcs.n	192b0 <hci_internal_cmd_put+0x3c>
   19294:	b17b      	cbz	r3, 192b6 <hci_internal_cmd_put+0x42>
   19296:	3b01      	subs	r3, #1
   19298:	2b07      	cmp	r3, #7
   1929a:	d80c      	bhi.n	192b6 <hci_internal_cmd_put+0x42>
   1929c:	e8df f013 	tbh	[pc, r3, lsl #1]
   192a0:	000b000e 	.word	0x000b000e
   192a4:	0060002c 	.word	0x0060002c
   192a8:	000b000b 	.word	0x000b000b
   192ac:	010c000b 	.word	0x010c000b
   192b0:	2b3f      	cmp	r3, #63	; 0x3f
   192b2:	f000 8233 	beq.w	1971c <hci_internal_cmd_put+0x4a8>
   192b6:	2304      	movs	r3, #4
   192b8:	2001      	movs	r0, #1
   192ba:	e26b      	b.n	19794 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   192bc:	f240 4306 	movw	r3, #1030	; 0x406
   192c0:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   192c2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   192c6:	d005      	beq.n	192d4 <hci_internal_cmd_put+0x60>
   192c8:	f240 431d 	movw	r3, #1053	; 0x41d
   192cc:	429e      	cmp	r6, r3
   192ce:	d010      	beq.n	192f2 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   192d0:	2001      	movs	r0, #1
   192d2:	e001      	b.n	192d8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   192d4:	f7f4 ff4d 	bl	e172 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   192d8:	230f      	movs	r3, #15
   192da:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   192dc:	2304      	movs	r3, #4
   192de:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   192e0:	2301      	movs	r3, #1
	evt_data->status = status_code;
   192e2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   192e4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   192e6:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   192ea:	2301      	movs	r3, #1
   192ec:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   192ee:	2000      	movs	r0, #0
}
   192f0:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   192f2:	f7f4 ff40 	bl	e176 <sdc_hci_cmd_lc_read_remote_version_information>
   192f6:	e7ef      	b.n	192d8 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   192f8:	f640 4363 	movw	r3, #3171	; 0xc63
   192fc:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   192fe:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19302:	d025      	beq.n	19350 <hci_internal_cmd_put+0xdc>
   19304:	dc0f      	bgt.n	19326 <hci_internal_cmd_put+0xb2>
   19306:	f640 4303 	movw	r3, #3075	; 0xc03
   1930a:	429e      	cmp	r6, r3
   1930c:	d018      	beq.n	19340 <hci_internal_cmd_put+0xcc>
   1930e:	f640 432d 	movw	r3, #3117	; 0xc2d
   19312:	429e      	cmp	r6, r3
   19314:	d017      	beq.n	19346 <hci_internal_cmd_put+0xd2>
   19316:	f640 4301 	movw	r3, #3073	; 0xc01
   1931a:	429e      	cmp	r6, r3
   1931c:	d1d8      	bne.n	192d0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1931e:	f7f4 fe1e 	bl	df5e <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19322:	2304      	movs	r3, #4
   19324:	e0b8      	b.n	19498 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   19326:	f640 437b 	movw	r3, #3195	; 0xc7b
   1932a:	429e      	cmp	r6, r3
   1932c:	d013      	beq.n	19356 <hci_internal_cmd_put+0xe2>
   1932e:	f640 437c 	movw	r3, #3196	; 0xc7c
   19332:	429e      	cmp	r6, r3
   19334:	d1cc      	bne.n	192d0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   19336:	495f      	ldr	r1, [pc, #380]	; (194b4 <hci_internal_cmd_put+0x240>)
   19338:	f7f4 fe1b 	bl	df72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1933c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1933e:	e0ab      	b.n	19498 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   19340:	f7ec fb6c 	bl	5a1c <sdc_hci_cmd_cb_reset>
   19344:	e7ed      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   19346:	495b      	ldr	r1, [pc, #364]	; (194b4 <hci_internal_cmd_put+0x240>)
   19348:	f7f4 fe07 	bl	df5a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1934c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1934e:	e0a3      	b.n	19498 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   19350:	f7f4 fe0a 	bl	df68 <sdc_hci_cmd_cb_set_event_mask_page_2>
   19354:	e7e5      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   19356:	4957      	ldr	r1, [pc, #348]	; (194b4 <hci_internal_cmd_put+0x240>)
   19358:	f7f4 fdfd 	bl	df56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1935c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1935e:	e09b      	b.n	19498 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   19360:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   19364:	3e01      	subs	r6, #1
   19366:	2e08      	cmp	r6, #8
   19368:	d8b2      	bhi.n	192d0 <hci_internal_cmd_put+0x5c>
   1936a:	a301      	add	r3, pc, #4	; (adr r3, 19370 <hci_internal_cmd_put+0xfc>)
   1936c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19370:	00019395 	.word	0x00019395
   19374:	0001939f 	.word	0x0001939f
   19378:	00019479 	.word	0x00019479
   1937c:	000192d1 	.word	0x000192d1
   19380:	000192d1 	.word	0x000192d1
   19384:	000192d1 	.word	0x000192d1
   19388:	000192d1 	.word	0x000192d1
   1938c:	000192d1 	.word	0x000192d1
   19390:	00019491 	.word	0x00019491
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   19394:	4847      	ldr	r0, [pc, #284]	; (194b4 <hci_internal_cmd_put+0x240>)
   19396:	f7f4 fea1 	bl	e0dc <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1939a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1939c:	e07c      	b.n	19498 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1939e:	4845      	ldr	r0, [pc, #276]	; (194b4 <hci_internal_cmd_put+0x240>)
   193a0:	222e      	movs	r2, #46	; 0x2e
   193a2:	2100      	movs	r1, #0
   193a4:	f007 f83a 	bl	2041c <memset>
	cmds->hci_disconnect = 1;
   193a8:	79e3      	ldrb	r3, [r4, #7]
   193aa:	f043 0320 	orr.w	r3, r3, #32
   193ae:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   193b0:	7a63      	ldrb	r3, [r4, #9]
   193b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   193b6:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   193b8:	7b23      	ldrb	r3, [r4, #12]
   193ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
   193be:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   193c0:	7c63      	ldrb	r3, [r4, #17]
   193c2:	f043 0304 	orr.w	r3, r3, #4
   193c6:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   193c8:	7d63      	ldrb	r3, [r4, #21]
   193ca:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   193ce:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   193d2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   193d4:	7da3      	ldrb	r3, [r4, #22]
   193d6:	f043 0302 	orr.w	r3, r3, #2
   193da:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   193dc:	7f63      	ldrb	r3, [r4, #29]
   193de:	f043 0304 	orr.w	r3, r3, #4
   193e2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   193e4:	f894 3020 	ldrb.w	r3, [r4, #32]
   193e8:	f063 0308 	orn	r3, r3, #8
   193ec:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   193f0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   193f4:	f063 033c 	orn	r3, r3, #60	; 0x3c
   193f8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   193fc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   19400:	f063 030c 	orn	r3, r3, #12
   19404:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   19408:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1940c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   19410:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   19414:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   19418:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1941c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   19420:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   19424:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   19428:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1942c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19430:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   19434:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   19438:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1943c:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   19440:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   19444:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   19448:	f063 0301 	orn	r3, r3, #1
   1944c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   19450:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   19454:	f043 0301 	orr.w	r3, r3, #1
   19458:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1945c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   19460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19464:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   19468:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1946c:	f043 0304 	orr.w	r3, r3, #4
   19470:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   19474:	2344      	movs	r3, #68	; 0x44
   19476:	e0de      	b.n	19636 <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   19478:	480e      	ldr	r0, [pc, #56]	; (194b4 <hci_internal_cmd_put+0x240>)
   1947a:	2208      	movs	r2, #8
   1947c:	2100      	movs	r1, #0
   1947e:	f006 ffcd 	bl	2041c <memset>
	features->bdedr_not_supported = 1;
   19482:	7ae3      	ldrb	r3, [r4, #11]
   19484:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   19488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1948c:	72e3      	strb	r3, [r4, #11]
   1948e:	e0d1      	b.n	19634 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   19490:	4808      	ldr	r0, [pc, #32]	; (194b4 <hci_internal_cmd_put+0x240>)
   19492:	f7f4 fe21 	bl	e0d8 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19496:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   19498:	2801      	cmp	r0, #1
   1949a:	f43f af1d 	beq.w	192d8 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1949e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   194a0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   194a2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   194a4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   194a6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   194a8:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   194aa:	71a0      	strb	r0, [r4, #6]
}
   194ac:	e71d      	b.n	192ea <hci_internal_cmd_put+0x76>
   194ae:	bf00      	nop
   194b0:	20003af9 	.word	0x20003af9
   194b4:	20003b00 	.word	0x20003b00
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   194b8:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   194bc:	3e01      	subs	r6, #1
   194be:	3003      	adds	r0, #3
	switch (opcode)	{
   194c0:	2e4d      	cmp	r6, #77	; 0x4d
   194c2:	f63f af05 	bhi.w	192d0 <hci_internal_cmd_put+0x5c>
   194c6:	a301      	add	r3, pc, #4	; (adr r3, 194cc <hci_internal_cmd_put+0x258>)
   194c8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   194cc:	00019605 	.word	0x00019605
   194d0:	0001960b 	.word	0x0001960b
   194d4:	00019613 	.word	0x00019613
   194d8:	000192d1 	.word	0x000192d1
   194dc:	0001963b 	.word	0x0001963b
   194e0:	00019641 	.word	0x00019641
   194e4:	00019647 	.word	0x00019647
   194e8:	00019651 	.word	0x00019651
   194ec:	00019657 	.word	0x00019657
   194f0:	0001965d 	.word	0x0001965d
   194f4:	000192d1 	.word	0x000192d1
   194f8:	000192d1 	.word	0x000192d1
   194fc:	000192d1 	.word	0x000192d1
   19500:	000192d1 	.word	0x000192d1
   19504:	00019663 	.word	0x00019663
   19508:	0001966b 	.word	0x0001966b
   1950c:	00019671 	.word	0x00019671
   19510:	00019677 	.word	0x00019677
   19514:	000192d1 	.word	0x000192d1
   19518:	000192d1 	.word	0x000192d1
   1951c:	0001967d 	.word	0x0001967d
   19520:	00019687 	.word	0x00019687
   19524:	0001968d 	.word	0x0001968d
   19528:	00019697 	.word	0x00019697
   1952c:	000192d1 	.word	0x000192d1
   19530:	0001969f 	.word	0x0001969f
   19534:	000196a7 	.word	0x000196a7
   19538:	000196af 	.word	0x000196af
   1953c:	000192d1 	.word	0x000192d1
   19540:	000192d1 	.word	0x000192d1
   19544:	000192d1 	.word	0x000192d1
   19548:	000192d1 	.word	0x000192d1
   1954c:	000192d1 	.word	0x000192d1
   19550:	000196b7 	.word	0x000196b7
   19554:	000196bf 	.word	0x000196bf
   19558:	000196c7 	.word	0x000196c7
   1955c:	000192d1 	.word	0x000192d1
   19560:	000192d1 	.word	0x000192d1
   19564:	000196cd 	.word	0x000196cd
   19568:	000196d3 	.word	0x000196d3
   1956c:	000196d9 	.word	0x000196d9
   19570:	000196df 	.word	0x000196df
   19574:	000192d1 	.word	0x000192d1
   19578:	000192d1 	.word	0x000192d1
   1957c:	000196e7 	.word	0x000196e7
   19580:	000196ed 	.word	0x000196ed
   19584:	000196f3 	.word	0x000196f3
   19588:	000196fb 	.word	0x000196fb
   1958c:	00019703 	.word	0x00019703
   19590:	00019709 	.word	0x00019709
   19594:	000192d1 	.word	0x000192d1
   19598:	000192d1 	.word	0x000192d1
   1959c:	000192d1 	.word	0x000192d1
   195a0:	000192d1 	.word	0x000192d1
   195a4:	000192d1 	.word	0x000192d1
   195a8:	000192d1 	.word	0x000192d1
   195ac:	000192d1 	.word	0x000192d1
   195b0:	000192d1 	.word	0x000192d1
   195b4:	000192d1 	.word	0x000192d1
   195b8:	000192d1 	.word	0x000192d1
   195bc:	000192d1 	.word	0x000192d1
   195c0:	000192d1 	.word	0x000192d1
   195c4:	000192d1 	.word	0x000192d1
   195c8:	000192d1 	.word	0x000192d1
   195cc:	000192d1 	.word	0x000192d1
   195d0:	000192d1 	.word	0x000192d1
   195d4:	000192d1 	.word	0x000192d1
   195d8:	000192d1 	.word	0x000192d1
   195dc:	000192d1 	.word	0x000192d1
   195e0:	000192d1 	.word	0x000192d1
   195e4:	000192d1 	.word	0x000192d1
   195e8:	000192d1 	.word	0x000192d1
   195ec:	000192d1 	.word	0x000192d1
   195f0:	000192d1 	.word	0x000192d1
   195f4:	0001970f 	.word	0x0001970f
   195f8:	000192d1 	.word	0x000192d1
   195fc:	000192d1 	.word	0x000192d1
   19600:	00019717 	.word	0x00019717
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19604:	f7f4 fda4 	bl	e150 <sdc_hci_cmd_le_set_event_mask>
   19608:	e68b      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1960a:	48a2      	ldr	r0, [pc, #648]	; (19894 <hci_internal_cmd_put+0x620>)
   1960c:	f7f4 fd7e 	bl	e10c <sdc_hci_cmd_le_read_buffer_size>
   19610:	e69c      	b.n	1934c <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   19612:	48a0      	ldr	r0, [pc, #640]	; (19894 <hci_internal_cmd_put+0x620>)
   19614:	2205      	movs	r2, #5
   19616:	2100      	movs	r1, #0
   19618:	f006 ff00 	bl	2041c <memset>
	features->le_encryption = 1;
   1961c:	79e3      	ldrb	r3, [r4, #7]
   1961e:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   19622:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   19626:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   19628:	7a23      	ldrb	r3, [r4, #8]
   1962a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1962e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   19632:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19634:	230c      	movs	r3, #12
	switch (hci_opcode) {
   19636:	2000      	movs	r0, #0
   19638:	e731      	b.n	1949e <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1963a:	f7f4 fd92 	bl	e162 <sdc_hci_cmd_le_set_random_address>
   1963e:	e670      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   19640:	f7f4 fd80 	bl	e144 <sdc_hci_cmd_le_set_adv_params>
   19644:	e66d      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   19646:	4893      	ldr	r0, [pc, #588]	; (19894 <hci_internal_cmd_put+0x620>)
   19648:	f7f4 fd5e 	bl	e108 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1964c:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1964e:	e723      	b.n	19498 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   19650:	f7f4 fd74 	bl	e13c <sdc_hci_cmd_le_set_adv_data>
   19654:	e665      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   19656:	f7f4 fd88 	bl	e16a <sdc_hci_cmd_le_set_scan_response_data>
   1965a:	e662      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1965c:	f7f4 fd70 	bl	e140 <sdc_hci_cmd_le_set_adv_enable>
   19660:	e65f      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   19662:	488c      	ldr	r0, [pc, #560]	; (19894 <hci_internal_cmd_put+0x620>)
   19664:	f7f4 fd62 	bl	e12c <sdc_hci_cmd_le_read_white_list_size>
   19668:	e7f0      	b.n	1964c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1966a:	f7f4 fd3f 	bl	e0ec <sdc_hci_cmd_le_clear_white_list>
   1966e:	e658      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   19670:	f7f4 fd38 	bl	e0e4 <sdc_hci_cmd_le_add_device_to_white_list>
   19674:	e655      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   19676:	f7f4 fd5d 	bl	e134 <sdc_hci_cmd_le_remove_device_from_white_list>
   1967a:	e652      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1967c:	4985      	ldr	r1, [pc, #532]	; (19894 <hci_internal_cmd_put+0x620>)
   1967e:	f7f4 fd47 	bl	e110 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   19682:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19684:	e708      	b.n	19498 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   19686:	f7f4 fd49 	bl	e11c <sdc_hci_cmd_le_read_remote_features>
   1968a:	e625      	b.n	192d8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1968c:	4981      	ldr	r1, [pc, #516]	; (19894 <hci_internal_cmd_put+0x620>)
   1968e:	f7f4 fd2f 	bl	e0f0 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   19692:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19694:	e700      	b.n	19498 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19696:	487f      	ldr	r0, [pc, #508]	; (19894 <hci_internal_cmd_put+0x620>)
   19698:	f7f4 fd34 	bl	e104 <sdc_hci_cmd_le_rand>
   1969c:	e67d      	b.n	1939a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1969e:	497d      	ldr	r1, [pc, #500]	; (19894 <hci_internal_cmd_put+0x620>)
   196a0:	f7f4 fd2c 	bl	e0fc <sdc_hci_cmd_le_long_term_key_request_reply>
   196a4:	e64a      	b.n	1933c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   196a6:	497b      	ldr	r1, [pc, #492]	; (19894 <hci_internal_cmd_put+0x620>)
   196a8:	f7f4 fd24 	bl	e0f4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   196ac:	e646      	b.n	1933c <hci_internal_cmd_put+0xc8>
	*buf = states1;
   196ae:	238f      	movs	r3, #143	; 0x8f
   196b0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   196b2:	23c0      	movs	r3, #192	; 0xc0
   196b4:	e6ea      	b.n	1948c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   196b6:	4977      	ldr	r1, [pc, #476]	; (19894 <hci_internal_cmd_put+0x620>)
   196b8:	f7f4 fd46 	bl	e148 <sdc_hci_cmd_le_set_data_length>
   196bc:	e63e      	b.n	1933c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   196be:	4875      	ldr	r0, [pc, #468]	; (19894 <hci_internal_cmd_put+0x620>)
   196c0:	f7f4 fd30 	bl	e124 <sdc_hci_cmd_le_read_suggested_default_data_length>
   196c4:	e64a      	b.n	1935c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   196c6:	f7f4 fd52 	bl	e16e <sdc_hci_cmd_le_write_suggested_default_data_length>
   196ca:	e62a      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   196cc:	f7f4 fd08 	bl	e0e0 <sdc_hci_cmd_le_add_device_to_resolving_list>
   196d0:	e627      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   196d2:	f7f4 fd2d 	bl	e130 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   196d6:	e624      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   196d8:	f7f4 fd06 	bl	e0e8 <sdc_hci_cmd_le_clear_resolving_list>
   196dc:	e621      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   196de:	486d      	ldr	r0, [pc, #436]	; (19894 <hci_internal_cmd_put+0x620>)
   196e0:	f7f4 fd1e 	bl	e120 <sdc_hci_cmd_le_read_resolving_list_size>
   196e4:	e7b2      	b.n	1964c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   196e6:	f7f4 fd27 	bl	e138 <sdc_hci_cmd_le_set_address_resolution_enable>
   196ea:	e61a      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   196ec:	f7f4 fd3b 	bl	e166 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   196f0:	e617      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   196f2:	4868      	ldr	r0, [pc, #416]	; (19894 <hci_internal_cmd_put+0x620>)
   196f4:	f7f4 fd0e 	bl	e114 <sdc_hci_cmd_le_read_max_data_length>
   196f8:	e64f      	b.n	1939a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   196fa:	4966      	ldr	r1, [pc, #408]	; (19894 <hci_internal_cmd_put+0x620>)
   196fc:	f7f4 fd0c 	bl	e118 <sdc_hci_cmd_le_read_phy>
   19700:	e62c      	b.n	1935c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   19702:	f7f4 fd23 	bl	e14c <sdc_hci_cmd_le_set_default_phy>
   19706:	e60c      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   19708:	f7f4 fd27 	bl	e15a <sdc_hci_cmd_le_set_phy>
   1970c:	e5e4      	b.n	192d8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1970e:	4861      	ldr	r0, [pc, #388]	; (19894 <hci_internal_cmd_put+0x620>)
   19710:	f7f4 fd0a 	bl	e128 <sdc_hci_cmd_le_read_transmit_power>
   19714:	e612      	b.n	1933c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19716:	f7f4 fd22 	bl	e15e <sdc_hci_cmd_le_set_privacy_mode>
   1971a:	e602      	b.n	19322 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1971c:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   19720:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19722:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19726:	d821      	bhi.n	1976c <hci_internal_cmd_put+0x4f8>
   19728:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1972c:	f43f add0 	beq.w	192d0 <hci_internal_cmd_put+0x5c>
   19730:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   19734:	3b01      	subs	r3, #1
   19736:	2b09      	cmp	r3, #9
   19738:	f63f adca 	bhi.w	192d0 <hci_internal_cmd_put+0x5c>
   1973c:	a201      	add	r2, pc, #4	; (adr r2, 19744 <hci_internal_cmd_put+0x4d0>)
   1973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19742:	bf00      	nop
   19744:	0001978d 	.word	0x0001978d
   19748:	000197bb 	.word	0x000197bb
   1974c:	000192d1 	.word	0x000192d1
   19750:	000192d1 	.word	0x000192d1
   19754:	000192d1 	.word	0x000192d1
   19758:	000197ff 	.word	0x000197ff
   1975c:	000192d1 	.word	0x000192d1
   19760:	000192d1 	.word	0x000192d1
   19764:	000197eb 	.word	0x000197eb
   19768:	000197f5 	.word	0x000197f5
   1976c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   19770:	b29b      	uxth	r3, r3
   19772:	2b05      	cmp	r3, #5
   19774:	f63f adac 	bhi.w	192d0 <hci_internal_cmd_put+0x5c>
   19778:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1977c:	2b05      	cmp	r3, #5
   1977e:	f63f ada7 	bhi.w	192d0 <hci_internal_cmd_put+0x5c>
   19782:	e8df f003 	tbb	[pc, r3]
   19786:	4c40      	.short	0x4c40
   19788:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1978c:	4841      	ldr	r0, [pc, #260]	; (19894 <hci_internal_cmd_put+0x620>)
   1978e:	f7ec f959 	bl	5a44 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19792:	2310      	movs	r3, #16
	switch (hci_opcode) {
   19794:	f242 0219 	movw	r2, #8217	; 0x2019
   19798:	4296      	cmp	r6, r2
   1979a:	dc5c      	bgt.n	19856 <hci_internal_cmd_put+0x5e2>
   1979c:	f242 020c 	movw	r2, #8204	; 0x200c
   197a0:	4296      	cmp	r6, r2
   197a2:	dc4b      	bgt.n	1983c <hci_internal_cmd_put+0x5c8>
   197a4:	f240 4206 	movw	r2, #1030	; 0x406
   197a8:	4296      	cmp	r6, r2
   197aa:	f43f ad95 	beq.w	192d8 <hci_internal_cmd_put+0x64>
   197ae:	f240 421d 	movw	r2, #1053	; 0x41d
   197b2:	4296      	cmp	r6, r2
   197b4:	f43f ad90 	beq.w	192d8 <hci_internal_cmd_put+0x64>
   197b8:	e66e      	b.n	19498 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   197ba:	4836      	ldr	r0, [pc, #216]	; (19894 <hci_internal_cmd_put+0x620>)
   197bc:	2202      	movs	r2, #2
   197be:	2100      	movs	r1, #0
   197c0:	f006 fe2c 	bl	2041c <memset>
	cmds->read_version_info = 1;
   197c4:	79e3      	ldrb	r3, [r4, #7]
   197c6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   197ca:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   197ce:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   197d0:	7a23      	ldrb	r3, [r4, #8]
   197d2:	f023 0307 	bic.w	r3, r3, #7
   197d6:	f043 0307 	orr.w	r3, r3, #7
   197da:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   197dc:	f242 0319 	movw	r3, #8217	; 0x2019
   197e0:	429e      	cmp	r6, r3
   197e2:	dd47      	ble.n	19874 <hci_internal_cmd_put+0x600>
   197e4:	f242 0332 	movw	r3, #8242	; 0x2032
   197e8:	e04f      	b.n	1988a <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   197ea:	482a      	ldr	r0, [pc, #168]	; (19894 <hci_internal_cmd_put+0x620>)
   197ec:	f7f4 fc23 	bl	e036 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   197f0:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   197f2:	e7cf      	b.n	19794 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   197f4:	4827      	ldr	r0, [pc, #156]	; (19894 <hci_internal_cmd_put+0x620>)
   197f6:	f7f4 fbd1 	bl	df9c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   197fa:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   197fc:	e7ca      	b.n	19794 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   197fe:	f7f4 fc69 	bl	e0d4 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   19802:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   19804:	e7c6      	b.n	19794 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   19806:	4823      	ldr	r0, [pc, #140]	; (19894 <hci_internal_cmd_put+0x620>)
   19808:	2201      	movs	r2, #1
   1980a:	2100      	movs	r1, #0
   1980c:	f006 fe06 	bl	2041c <memset>
	cmds->read_supported_vs_commands = 1;
   19810:	79e3      	ldrb	r3, [r4, #7]
   19812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   19816:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1981a:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1981c:	e62a      	b.n	19474 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1981e:	f7f4 fbb6 	bl	df8e <sdc_hci_cmd_vs_llpm_mode_set>
   19822:	e57e      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   19824:	f7f4 fbaf 	bl	df86 <sdc_hci_cmd_vs_conn_update>
   19828:	e57b      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1982a:	f7f4 fba4 	bl	df76 <sdc_hci_cmd_vs_conn_event_extend>
   1982e:	e578      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   19830:	f7f4 fbaf 	bl	df92 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   19834:	e575      	b.n	19322 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   19836:	f7f4 fba8 	bl	df8a <sdc_hci_cmd_vs_event_length_set>
   1983a:	e572      	b.n	19322 <hci_internal_cmd_put+0xae>
   1983c:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   19840:	3a0d      	subs	r2, #13
   19842:	2101      	movs	r1, #1
   19844:	b292      	uxth	r2, r2
   19846:	fa01 f202 	lsl.w	r2, r1, r2
   1984a:	f241 2141 	movw	r1, #4673	; 0x1241
   1984e:	420a      	tst	r2, r1
   19850:	f43f ae22 	beq.w	19498 <hci_internal_cmd_put+0x224>
   19854:	e540      	b.n	192d8 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   19856:	f242 0232 	movw	r2, #8242	; 0x2032
   1985a:	4296      	cmp	r6, r2
   1985c:	f43f ad3c 	beq.w	192d8 <hci_internal_cmd_put+0x64>
   19860:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   19864:	3a03      	subs	r2, #3
   19866:	2a01      	cmp	r2, #1
   19868:	f67f ad36 	bls.w	192d8 <hci_internal_cmd_put+0x64>
   1986c:	e614      	b.n	19498 <hci_internal_cmd_put+0x224>
		return -NRF_EPERM;
   1986e:	f04f 30ff 	mov.w	r0, #4294967295
   19872:	e53d      	b.n	192f0 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   19874:	f242 030c 	movw	r3, #8204	; 0x200c
   19878:	429e      	cmp	r6, r3
   1987a:	f73f adfb 	bgt.w	19474 <hci_internal_cmd_put+0x200>
   1987e:	f240 4306 	movw	r3, #1030	; 0x406
   19882:	429e      	cmp	r6, r3
   19884:	d004      	beq.n	19890 <hci_internal_cmd_put+0x61c>
   19886:	f240 431d 	movw	r3, #1053	; 0x41d
   1988a:	429e      	cmp	r6, r3
   1988c:	f47f adf2 	bne.w	19474 <hci_internal_cmd_put+0x200>
   19890:	2000      	movs	r0, #0
   19892:	e521      	b.n	192d8 <hci_internal_cmd_put+0x64>
   19894:	20003b00 	.word	0x20003b00

00019898 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19898:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1989a:	4c07      	ldr	r4, [pc, #28]	; (198b8 <hci_internal_evt_get+0x20>)
   1989c:	7823      	ldrb	r3, [r4, #0]
   1989e:	b13b      	cbz	r3, 198b0 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   198a0:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   198a2:	1c61      	adds	r1, r4, #1
   198a4:	3202      	adds	r2, #2
   198a6:	f006 fdae 	bl	20406 <memcpy>
		cmd_complete_or_status.occurred = false;
   198aa:	2000      	movs	r0, #0
   198ac:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   198ae:	bd10      	pop	{r4, pc}
   198b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   198b4:	f7f4 bb42 	b.w	df3c <sdc_hci_evt_get>
   198b8:	20003af9 	.word	0x20003af9

000198bc <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   198bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   198c0:	4c0b      	ldr	r4, [pc, #44]	; (198f0 <bt_rand+0x34>)
   198c2:	6823      	ldr	r3, [r4, #0]
{
   198c4:	4605      	mov	r5, r0
   198c6:	460e      	mov	r6, r1
   198c8:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   198ca:	b13b      	cbz	r3, 198dc <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   198cc:	6838      	ldr	r0, [r7, #0]
	return api->get_entropy(dev, buffer, length);
   198ce:	6883      	ldr	r3, [r0, #8]
   198d0:	b2b2      	uxth	r2, r6
   198d2:	4629      	mov	r1, r5
   198d4:	681b      	ldr	r3, [r3, #0]
}
   198d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   198da:	4718      	bx	r3
   198dc:	4805      	ldr	r0, [pc, #20]	; (198f4 <bt_rand+0x38>)
   198de:	f001 fd47 	bl	1b370 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   198e2:	6020      	str	r0, [r4, #0]
		if (!dev) {
   198e4:	2800      	cmp	r0, #0
   198e6:	d1f1      	bne.n	198cc <bt_rand+0x10>
}
   198e8:	f06f 0012 	mvn.w	r0, #18
   198ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198f0:	20002950 	.word	0x20002950
   198f4:	000250c6 	.word	0x000250c6

000198f8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   198f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   198fa:	2332      	movs	r3, #50	; 0x32
   198fc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19900:	4a13      	ldr	r2, [pc, #76]	; (19950 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   19902:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   19904:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19906:	2119      	movs	r1, #25
   19908:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1990a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1990e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   19912:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19916:	f7eb fc4f 	bl	51b8 <mpsl_init>
	if (err) {
   1991a:	4604      	mov	r4, r0
   1991c:	b9a0      	cbnz	r0, 19948 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1991e:	480d      	ldr	r0, [pc, #52]	; (19954 <mpsl_lib_init+0x5c>)
   19920:	4629      	mov	r1, r5
   19922:	f7f3 fda0 	bl	d466 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   19926:	4604      	mov	r4, r0
   19928:	b970      	cbnz	r0, 19948 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1992a:	4601      	mov	r1, r0
   1992c:	462a      	mov	r2, r5
   1992e:	2008      	movs	r0, #8
   19930:	f7f9 fcfa 	bl	13328 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19934:	462a      	mov	r2, r5
   19936:	4621      	mov	r1, r4
   19938:	200b      	movs	r0, #11
   1993a:	f7f9 fcf5 	bl	13328 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1993e:	462a      	mov	r2, r5
   19940:	4621      	mov	r1, r4
   19942:	4628      	mov	r0, r5
   19944:	f7f9 fcf0 	bl	13328 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19948:	4620      	mov	r0, r4
   1994a:	b003      	add	sp, #12
   1994c:	bd30      	pop	{r4, r5, pc}
   1994e:	bf00      	nop
   19950:	000230d9 	.word	0x000230d9
   19954:	20002954 	.word	0x20002954

00019958 <mpsl_low_prio_irq_handler>:
   19958:	4801      	ldr	r0, [pc, #4]	; (19960 <mpsl_low_prio_irq_handler+0x8>)
   1995a:	f002 b827 	b.w	1b9ac <z_impl_k_sem_give>
   1995e:	bf00      	nop
   19960:	20000b90 	.word	0x20000b90

00019964 <signal_thread>:
{
   19964:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   19966:	4c09      	ldr	r4, [pc, #36]	; (1998c <signal_thread+0x28>)
   19968:	f04f 32ff 	mov.w	r2, #4294967295
   1996c:	f04f 33ff 	mov.w	r3, #4294967295
   19970:	4620      	mov	r0, r4
   19972:	f002 f841 	bl	1b9f8 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19976:	f04f 31ff 	mov.w	r1, #4294967295
   1997a:	f04f 30ff 	mov.w	r0, #4294967295
   1997e:	f7ff fadd 	bl	18f3c <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19982:	f7f3 fe87 	bl	d694 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19986:	f7ff fae1 	bl	18f4c <multithreading_lock_release>
	while (true) {
   1998a:	e7ed      	b.n	19968 <signal_thread+0x4>
   1998c:	20000b90 	.word	0x20000b90

00019990 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19990:	b530      	push	{r4, r5, lr}
   19992:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19994:	4d0f      	ldr	r5, [pc, #60]	; (199d4 <mpsl_signal_thread_init+0x44>)
   19996:	4910      	ldr	r1, [pc, #64]	; (199d8 <mpsl_signal_thread_init+0x48>)
   19998:	2200      	movs	r2, #0
   1999a:	2300      	movs	r3, #0
   1999c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   199a0:	2400      	movs	r4, #0
   199a2:	f06f 0309 	mvn.w	r3, #9
   199a6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   199aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   199ae:	4b0b      	ldr	r3, [pc, #44]	; (199dc <mpsl_signal_thread_init+0x4c>)
   199b0:	9400      	str	r4, [sp, #0]
   199b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   199b6:	4628      	mov	r0, r5
   199b8:	f001 fe60 	bl	1b67c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   199bc:	4908      	ldr	r1, [pc, #32]	; (199e0 <mpsl_signal_thread_init+0x50>)
   199be:	4628      	mov	r0, r5
   199c0:	f009 fe3b 	bl	2363a <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   199c4:	4622      	mov	r2, r4
   199c6:	2104      	movs	r1, #4
   199c8:	2019      	movs	r0, #25
   199ca:	f7f9 fcad 	bl	13328 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   199ce:	4620      	mov	r0, r4
   199d0:	b009      	add	sp, #36	; 0x24
   199d2:	bd30      	pop	{r4, r5, pc}
   199d4:	20001f00 	.word	0x20001f00
   199d8:	200050a0 	.word	0x200050a0
   199dc:	00019965 	.word	0x00019965
   199e0:	000250f2 	.word	0x000250f2

000199e4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   199e4:	4b01      	ldr	r3, [pc, #4]	; (199ec <mpsl_hfclk_callback+0x8>)
   199e6:	2000      	movs	r0, #0
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	4718      	bx	r3
   199ec:	20002978 	.word	0x20002978

000199f0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   199f0:	b120      	cbz	r0, 199fc <nrfx_clock_start+0xc>
   199f2:	2801      	cmp	r0, #1
   199f4:	d106      	bne.n	19a04 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   199f6:	4804      	ldr	r0, [pc, #16]	; (19a08 <nrfx_clock_start+0x18>)
   199f8:	f7eb ba2a 	b.w	4e50 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   199fc:	4b03      	ldr	r3, [pc, #12]	; (19a0c <nrfx_clock_start+0x1c>)
   199fe:	2001      	movs	r0, #1
   19a00:	681b      	ldr	r3, [r3, #0]
   19a02:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19a04:	4770      	bx	lr
   19a06:	bf00      	nop
   19a08:	000199e5 	.word	0x000199e5
   19a0c:	20002978 	.word	0x20002978

00019a10 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19a10:	4b01      	ldr	r3, [pc, #4]	; (19a18 <nrfx_clock_init+0x8>)
   19a12:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19a14:	4801      	ldr	r0, [pc, #4]	; (19a1c <nrfx_clock_init+0xc>)
   19a16:	4770      	bx	lr
   19a18:	20002978 	.word	0x20002978
   19a1c:	0bad0000 	.word	0x0bad0000

00019a20 <timeslot_callback>:
{
   19a20:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a22:	4d1a      	ldr	r5, [pc, #104]	; (19a8c <timeslot_callback+0x6c>)
   19a24:	f3bf 8f5b 	dmb	ish
   19a28:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   19a2a:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   19a2e:	bb5c      	cbnz	r4, 19a88 <timeslot_callback+0x68>
	switch (signal) {
   19a30:	2906      	cmp	r1, #6
   19a32:	d804      	bhi.n	19a3e <timeslot_callback+0x1e>
   19a34:	2904      	cmp	r1, #4
   19a36:	d81f      	bhi.n	19a78 <timeslot_callback+0x58>
   19a38:	b139      	cbz	r1, 19a4a <timeslot_callback+0x2a>
}
   19a3a:	4620      	mov	r0, r4
   19a3c:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   19a3e:	2907      	cmp	r1, #7
   19a40:	d1fb      	bne.n	19a3a <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   19a42:	4628      	mov	r0, r5
   19a44:	f001 ffb2 	bl	1b9ac <z_impl_k_sem_give>
}
   19a48:	e7f7      	b.n	19a3a <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   19a4a:	6a2b      	ldr	r3, [r5, #32]
   19a4c:	e9d3 2000 	ldrd	r2, r0, [r3]
   19a50:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   19a52:	2801      	cmp	r0, #1
   19a54:	d005      	beq.n	19a62 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   19a56:	462c      	mov	r4, r5
   19a58:	2302      	movs	r3, #2
   19a5a:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   19a5e:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   19a60:	e7eb      	b.n	19a3a <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   19a62:	2303      	movs	r3, #3
   19a64:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   19a68:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   19a6c:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   19a70:	63ab      	str	r3, [r5, #56]	; 0x38
   19a72:	f105 0434 	add.w	r4, r5, #52	; 0x34
   19a76:	e7e0      	b.n	19a3a <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   19a78:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   19a7a:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   19a7e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   19a82:	f7f3 fc99 	bl	d3b8 <mpsl_timeslot_request>
}
   19a86:	e7d8      	b.n	19a3a <timeslot_callback+0x1a>
		return NULL;
   19a88:	2400      	movs	r4, #0
   19a8a:	e7d6      	b.n	19a3a <timeslot_callback+0x1a>
   19a8c:	2000297c 	.word	0x2000297c

00019a90 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   19a90:	4802      	ldr	r0, [pc, #8]	; (19a9c <nrf_flash_sync_init+0xc>)
   19a92:	2201      	movs	r2, #1
   19a94:	2100      	movs	r1, #0
   19a96:	f009 beb0 	b.w	237fa <z_impl_k_sem_init>
   19a9a:	bf00      	nop
   19a9c:	2000297c 	.word	0x2000297c

00019aa0 <nrf_flash_sync_set_context>:
	_context.request_length_us = duration;
   19aa0:	4b01      	ldr	r3, [pc, #4]	; (19aa8 <nrf_flash_sync_set_context+0x8>)
   19aa2:	61d8      	str	r0, [r3, #28]
}
   19aa4:	4770      	bx	lr
   19aa6:	bf00      	nop
   19aa8:	2000297c 	.word	0x2000297c

00019aac <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19aac:	4b07      	ldr	r3, [pc, #28]	; (19acc <nrf_flash_sync_check_time_limit+0x20>)
   19aae:	2201      	movs	r2, #1
   19ab0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   19ab2:	3b40      	subs	r3, #64	; 0x40
   19ab4:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   19ab8:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   19abc:	4418      	add	r0, r3
   19abe:	4b04      	ldr	r3, [pc, #16]	; (19ad0 <nrf_flash_sync_check_time_limit+0x24>)
   19ac0:	69db      	ldr	r3, [r3, #28]
}
   19ac2:	4298      	cmp	r0, r3
   19ac4:	bf34      	ite	cc
   19ac6:	2000      	movcc	r0, #0
   19ac8:	2001      	movcs	r0, #1
   19aca:	4770      	bx	lr
   19acc:	40008040 	.word	0x40008040
   19ad0:	2000297c 	.word	0x2000297c

00019ad4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   19ad4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19ad8:	4905      	ldr	r1, [pc, #20]	; (19af0 <__NVIC_SystemReset+0x1c>)
   19ada:	4b06      	ldr	r3, [pc, #24]	; (19af4 <__NVIC_SystemReset+0x20>)
   19adc:	68ca      	ldr	r2, [r1, #12]
   19ade:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19ae2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19ae4:	60cb      	str	r3, [r1, #12]
   19ae6:	f3bf 8f4f 	dsb	sy
    __NOP();
   19aea:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19aec:	e7fd      	b.n	19aea <__NVIC_SystemReset+0x16>
   19aee:	bf00      	nop
   19af0:	e000ed00 	.word	0xe000ed00
   19af4:	05fa0004 	.word	0x05fa0004

00019af8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19af8:	4b03      	ldr	r3, [pc, #12]	; (19b08 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   19afa:	6818      	ldr	r0, [r3, #0]
}
   19afc:	f1a0 0308 	sub.w	r3, r0, #8
   19b00:	4258      	negs	r0, r3
   19b02:	4158      	adcs	r0, r3
   19b04:	4770      	bx	lr
   19b06:	bf00      	nop
   19b08:	10000130 	.word	0x10000130

00019b0c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19b0c:	4b06      	ldr	r3, [pc, #24]	; (19b28 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   19b0e:	681b      	ldr	r3, [r3, #0]
   19b10:	2b08      	cmp	r3, #8
   19b12:	d106      	bne.n	19b22 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19b14:	4b05      	ldr	r3, [pc, #20]	; (19b2c <nrf52_errata_103+0x20>)
   19b16:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   19b18:	2b05      	cmp	r3, #5
   19b1a:	d802      	bhi.n	19b22 <nrf52_errata_103+0x16>
   19b1c:	4a04      	ldr	r2, [pc, #16]	; (19b30 <nrf52_errata_103+0x24>)
   19b1e:	5cd0      	ldrb	r0, [r2, r3]
   19b20:	4770      	bx	lr
        return false;
   19b22:	2000      	movs	r0, #0
}
   19b24:	4770      	bx	lr
   19b26:	bf00      	nop
   19b28:	10000130 	.word	0x10000130
   19b2c:	10000134 	.word	0x10000134
   19b30:	00025104 	.word	0x00025104

00019b34 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19b34:	4a02      	ldr	r2, [pc, #8]	; (19b40 <nvmc_wait+0xc>)
   19b36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19b3a:	2b00      	cmp	r3, #0
   19b3c:	d0fb      	beq.n	19b36 <nvmc_wait+0x2>
}
   19b3e:	4770      	bx	lr
   19b40:	4001e000 	.word	0x4001e000

00019b44 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19b44:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19b46:	f7ff ffd7 	bl	19af8 <nrf52_errata_136>
   19b4a:	b140      	cbz	r0, 19b5e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19b50:	2200      	movs	r2, #0
   19b52:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19b56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19b5a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19b5e:	f7ff ffcb 	bl	19af8 <nrf52_errata_136>
   19b62:	2800      	cmp	r0, #0
   19b64:	d046      	beq.n	19bf4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19b6a:	4b61      	ldr	r3, [pc, #388]	; (19cf0 <SystemInit+0x1ac>)
   19b6c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19b70:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19b74:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19b78:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19b7c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19b80:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19b84:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19b88:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19b8c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19b90:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19b94:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19b98:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19b9c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19ba0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19ba4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19ba8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19bac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19bb0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19bb4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19bb8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19bbc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19bc0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19bc4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19bc8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19bcc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19bd0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19bd4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19bd8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19bdc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19be0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19be4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19be8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19bec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19bf0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19bf4:	f7ff ff8a 	bl	19b0c <nrf52_errata_103>
   19bf8:	b110      	cbz	r0, 19c00 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19bfa:	4b3e      	ldr	r3, [pc, #248]	; (19cf4 <SystemInit+0x1b0>)
   19bfc:	4a3e      	ldr	r2, [pc, #248]	; (19cf8 <SystemInit+0x1b4>)
   19bfe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   19c00:	f7ff ff84 	bl	19b0c <nrf52_errata_103>
   19c04:	b118      	cbz	r0, 19c0e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19c06:	4b3d      	ldr	r3, [pc, #244]	; (19cfc <SystemInit+0x1b8>)
   19c08:	22fb      	movs	r2, #251	; 0xfb
   19c0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19c0e:	f7ff ff7d 	bl	19b0c <nrf52_errata_103>
   19c12:	b148      	cbz	r0, 19c28 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   19c14:	493a      	ldr	r1, [pc, #232]	; (19d00 <SystemInit+0x1bc>)
   19c16:	4b3b      	ldr	r3, [pc, #236]	; (19d04 <SystemInit+0x1c0>)
   19c18:	680a      	ldr	r2, [r1, #0]
   19c1a:	681b      	ldr	r3, [r3, #0]
   19c1c:	f022 020f 	bic.w	r2, r2, #15
   19c20:	f003 030f 	and.w	r3, r3, #15
   19c24:	4313      	orrs	r3, r2
   19c26:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19c28:	f7ff ff70 	bl	19b0c <nrf52_errata_103>
   19c2c:	b118      	cbz	r0, 19c36 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   19c2e:	4b36      	ldr	r3, [pc, #216]	; (19d08 <SystemInit+0x1c4>)
   19c30:	f44f 7200 	mov.w	r2, #512	; 0x200
   19c34:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19c36:	f7ff ff5f 	bl	19af8 <nrf52_errata_136>
   19c3a:	b148      	cbz	r0, 19c50 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19c40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19c44:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19c46:	bf44      	itt	mi
   19c48:	f06f 0201 	mvnmi.w	r2, #1
   19c4c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c50:	4b2e      	ldr	r3, [pc, #184]	; (19d0c <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19c52:	681b      	ldr	r3, [r3, #0]
   19c54:	2b08      	cmp	r3, #8
   19c56:	d10e      	bne.n	19c76 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19c58:	4b2d      	ldr	r3, [pc, #180]	; (19d10 <SystemInit+0x1cc>)
   19c5a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   19c5c:	2b05      	cmp	r3, #5
   19c5e:	d802      	bhi.n	19c66 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   19c60:	4a2c      	ldr	r2, [pc, #176]	; (19d14 <SystemInit+0x1d0>)
   19c62:	5cd3      	ldrb	r3, [r2, r3]
   19c64:	b13b      	cbz	r3, 19c76 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19c66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19c6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   19c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19c72:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   19c76:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   19c7a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   19c7e:	07db      	lsls	r3, r3, #31
   19c80:	d514      	bpl.n	19cac <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19c82:	4825      	ldr	r0, [pc, #148]	; (19d18 <SystemInit+0x1d4>)
   19c84:	2301      	movs	r3, #1
   19c86:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   19c8a:	f7ff ff53 	bl	19b34 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   19c8e:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   19c92:	f023 0301 	bic.w	r3, r3, #1
   19c96:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   19c9a:	f7ff ff4b 	bl	19b34 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19c9e:	2300      	movs	r3, #0
   19ca0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   19ca4:	f7ff ff46 	bl	19b34 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   19ca8:	f7ff ff14 	bl	19ad4 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19cac:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   19cb0:	2b00      	cmp	r3, #0
   19cb2:	db03      	blt.n	19cbc <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19cb4:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19cb8:	2b00      	cmp	r3, #0
   19cba:	da14      	bge.n	19ce6 <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19cbc:	4916      	ldr	r1, [pc, #88]	; (19d18 <SystemInit+0x1d4>)
   19cbe:	2301      	movs	r3, #1
   19cc0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   19cc4:	f7ff ff36 	bl	19b34 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19cc8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   19ccc:	2412      	movs	r4, #18
   19cce:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   19cd2:	f7ff ff2f 	bl	19b34 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19cd6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19cda:	f7ff ff2b 	bl	19b34 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19cde:	2300      	movs	r3, #0
   19ce0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   19ce4:	e7de      	b.n	19ca4 <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19ce6:	4b0d      	ldr	r3, [pc, #52]	; (19d1c <SystemInit+0x1d8>)
   19ce8:	4a0d      	ldr	r2, [pc, #52]	; (19d20 <SystemInit+0x1dc>)
   19cea:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19cec:	bd10      	pop	{r4, pc}
   19cee:	bf00      	nop
   19cf0:	4000c000 	.word	0x4000c000
   19cf4:	4000568c 	.word	0x4000568c
   19cf8:	00038148 	.word	0x00038148
   19cfc:	4000f000 	.word	0x4000f000
   19d00:	40000ee4 	.word	0x40000ee4
   19d04:	10000258 	.word	0x10000258
   19d08:	40029640 	.word	0x40029640
   19d0c:	10000130 	.word	0x10000130
   19d10:	10000134 	.word	0x10000134
   19d14:	000250fe 	.word	0x000250fe
   19d18:	4001e000 	.word	0x4001e000
   19d1c:	200007a0 	.word	0x200007a0
   19d20:	03d09000 	.word	0x03d09000

00019d24 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   19d24:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   19d26:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   19d28:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   19d2a:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   19d2e:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   19d30:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   19d34:	d014      	beq.n	19d60 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19d36:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   19d3a:	fa05 f204 	lsl.w	r2, r5, r4
   19d3e:	ea23 0202 	bic.w	r2, r3, r2
   19d42:	e850 6f00 	ldrex	r6, [r0]
   19d46:	429e      	cmp	r6, r3
   19d48:	d104      	bne.n	19d54 <nrfx_flag32_alloc+0x30>
   19d4a:	e840 2c00 	strex	ip, r2, [r0]
   19d4e:	f1bc 0f00 	cmp.w	ip, #0
   19d52:	d1f6      	bne.n	19d42 <nrfx_flag32_alloc+0x1e>
   19d54:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19d58:	d1e6      	bne.n	19d28 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   19d5a:	4802      	ldr	r0, [pc, #8]	; (19d64 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   19d5c:	700c      	strb	r4, [r1, #0]
}
   19d5e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   19d60:	4801      	ldr	r0, [pc, #4]	; (19d68 <nrfx_flag32_alloc+0x44>)
   19d62:	e7fc      	b.n	19d5e <nrfx_flag32_alloc+0x3a>
   19d64:	0bad0000 	.word	0x0bad0000
   19d68:	0bad0002 	.word	0x0bad0002

00019d6c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   19d6c:	6803      	ldr	r3, [r0, #0]
   19d6e:	40cb      	lsrs	r3, r1
   19d70:	07db      	lsls	r3, r3, #31
{
   19d72:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   19d74:	d415      	bmi.n	19da2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   19d76:	2301      	movs	r3, #1
   19d78:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   19d7c:	6803      	ldr	r3, [r0, #0]
   19d7e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   19d82:	ea41 0203 	orr.w	r2, r1, r3
   19d86:	e850 4f00 	ldrex	r4, [r0]
   19d8a:	429c      	cmp	r4, r3
   19d8c:	d104      	bne.n	19d98 <nrfx_flag32_free+0x2c>
   19d8e:	e840 2c00 	strex	ip, r2, [r0]
   19d92:	f1bc 0f00 	cmp.w	ip, #0
   19d96:	d1f6      	bne.n	19d86 <nrfx_flag32_free+0x1a>
   19d98:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19d9c:	d1ee      	bne.n	19d7c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   19d9e:	4802      	ldr	r0, [pc, #8]	; (19da8 <nrfx_flag32_free+0x3c>)
}
   19da0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19da2:	4802      	ldr	r0, [pc, #8]	; (19dac <nrfx_flag32_free+0x40>)
   19da4:	e7fc      	b.n	19da0 <nrfx_flag32_free+0x34>
   19da6:	bf00      	nop
   19da8:	0bad0000 	.word	0x0bad0000
   19dac:	0bad0004 	.word	0x0bad0004

00019db0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19db0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19db2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19db6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19db8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   19dba:	6002      	str	r2, [r0, #0]
}
   19dbc:	4802      	ldr	r0, [pc, #8]	; (19dc8 <nrf_gpio_pin_port_decode+0x18>)
   19dbe:	bf18      	it	ne
   19dc0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   19dc4:	4770      	bx	lr
   19dc6:	bf00      	nop
   19dc8:	50000300 	.word	0x50000300

00019dcc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19dcc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19dce:	f100 0308 	add.w	r3, r0, #8
   19dd2:	4c0c      	ldr	r4, [pc, #48]	; (19e04 <call_handler+0x38>)
   19dd4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   19dd8:	05da      	lsls	r2, r3, #23
{
   19dda:	4605      	mov	r5, r0
   19ddc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19dde:	d507      	bpl.n	19df0 <call_handler+0x24>
   19de0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   19de4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19de8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   19dec:	6852      	ldr	r2, [r2, #4]
   19dee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   19df0:	68a3      	ldr	r3, [r4, #8]
   19df2:	b12b      	cbz	r3, 19e00 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19df4:	68e2      	ldr	r2, [r4, #12]
   19df6:	4631      	mov	r1, r6
   19df8:	4628      	mov	r0, r5
    }
}
   19dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19dfe:	4718      	bx	r3
}
   19e00:	bd70      	pop	{r4, r5, r6, pc}
   19e02:	bf00      	nop
   19e04:	200007a4 	.word	0x200007a4

00019e08 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19e08:	4b12      	ldr	r3, [pc, #72]	; (19e54 <release_handler+0x4c>)
   19e0a:	3008      	adds	r0, #8
{
   19e0c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19e0e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   19e12:	05d1      	lsls	r1, r2, #23
   19e14:	d51b      	bpl.n	19e4e <release_handler+0x46>
   19e16:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   19e1a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   19e1e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19e22:	f103 0410 	add.w	r4, r3, #16
   19e26:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   19e28:	f834 2b02 	ldrh.w	r2, [r4], #2
   19e2c:	f412 7f80 	tst.w	r2, #256	; 0x100
   19e30:	d003      	beq.n	19e3a <release_handler+0x32>
   19e32:	f3c2 2243 	ubfx	r2, r2, #9, #4
   19e36:	4291      	cmp	r1, r2
   19e38:	d009      	beq.n	19e4e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19e3a:	3001      	adds	r0, #1
   19e3c:	2830      	cmp	r0, #48	; 0x30
   19e3e:	d1f3      	bne.n	19e28 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   19e40:	2200      	movs	r2, #0
   19e42:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19e46:	4804      	ldr	r0, [pc, #16]	; (19e58 <release_handler+0x50>)
}
   19e48:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19e4a:	f7ff bf8f 	b.w	19d6c <nrfx_flag32_free>
}
   19e4e:	bc10      	pop	{r4}
   19e50:	4770      	bx	lr
   19e52:	bf00      	nop
   19e54:	200007a4 	.word	0x200007a4
   19e58:	20000818 	.word	0x20000818

00019e5c <pin_handler_trigger_uninit>:
{
   19e5c:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19e5e:	4c0a      	ldr	r4, [pc, #40]	; (19e88 <pin_handler_trigger_uninit+0x2c>)
   19e60:	f100 0508 	add.w	r5, r0, #8
   19e64:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   19e68:	069a      	lsls	r2, r3, #26
   19e6a:	d506      	bpl.n	19e7a <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   19e6c:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   19e6e:	4a07      	ldr	r2, [pc, #28]	; (19e8c <pin_handler_trigger_uninit+0x30>)
   19e70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19e74:	2100      	movs	r1, #0
   19e76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   19e7a:	f7ff ffc5 	bl	19e08 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   19e7e:	2300      	movs	r3, #0
   19e80:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   19e84:	bd38      	pop	{r3, r4, r5, pc}
   19e86:	bf00      	nop
   19e88:	200007a4 	.word	0x200007a4
   19e8c:	40006000 	.word	0x40006000

00019e90 <nrfx_gpiote_input_configure>:
{
   19e90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19e94:	461d      	mov	r5, r3
   19e96:	4604      	mov	r4, r0
   19e98:	4617      	mov	r7, r2
    if (p_input_config)
   19e9a:	460b      	mov	r3, r1
   19e9c:	b309      	cbz	r1, 19ee2 <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19e9e:	4e4d      	ldr	r6, [pc, #308]	; (19fd4 <nrfx_gpiote_input_configure+0x144>)
   19ea0:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
   19ea4:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
   19ea8:	f002 0222 	and.w	r2, r2, #34	; 0x22
   19eac:	2a22      	cmp	r2, #34	; 0x22
   19eae:	d103      	bne.n	19eb8 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   19eb0:	4849      	ldr	r0, [pc, #292]	; (19fd8 <nrfx_gpiote_input_configure+0x148>)
}
   19eb2:	b004      	add	sp, #16
   19eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19eb8:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19eba:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19ebe:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   19ec2:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19ec6:	f10d 010e 	add.w	r1, sp, #14
   19eca:	f10d 020f 	add.w	r2, sp, #15
   19ece:	f009 f94e 	bl	2316e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   19ed2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19ed6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   19eda:	f043 0301 	orr.w	r3, r3, #1
   19ede:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   19ee2:	b197      	cbz	r7, 19f0a <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19ee4:	483b      	ldr	r0, [pc, #236]	; (19fd4 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   19ee6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   19ee8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19eea:	f104 0308 	add.w	r3, r4, #8
   19eee:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
   19ef2:	078f      	lsls	r7, r1, #30
   19ef4:	d50c      	bpl.n	19f10 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   19ef6:	2a00      	cmp	r2, #0
   19ef8:	d1da      	bne.n	19eb0 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   19efa:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
   19efe:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19f02:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   19f06:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
   19f0a:	bbcd      	cbnz	r5, 19f80 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
   19f0c:	4833      	ldr	r0, [pc, #204]	; (19fdc <nrfx_gpiote_input_configure+0x14c>)
   19f0e:	e7d0      	b.n	19eb2 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   19f10:	f021 0120 	bic.w	r1, r1, #32
   19f14:	04c9      	lsls	r1, r1, #19
   19f16:	0cc9      	lsrs	r1, r1, #19
   19f18:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
   19f1c:	2a00      	cmp	r2, #0
   19f1e:	d0ec      	beq.n	19efa <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
   19f20:	2e03      	cmp	r6, #3
   19f22:	d8c5      	bhi.n	19eb0 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   19f24:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   19f26:	b92e      	cbnz	r6, 19f34 <nrfx_gpiote_input_configure+0xa4>
   19f28:	4a2d      	ldr	r2, [pc, #180]	; (19fe0 <nrfx_gpiote_input_configure+0x150>)
   19f2a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   19f2e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   19f32:	e7e2      	b.n	19efa <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19f34:	00ba      	lsls	r2, r7, #2
   19f36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19f3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19f3e:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19f42:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19f46:	f02c 0c03 	bic.w	ip, ip, #3
   19f4a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19f4e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19f52:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   19f56:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   19f5a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19f5e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19f62:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
   19f66:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19f6a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   19f6e:	ea4c 0c0e 	orr.w	ip, ip, lr
   19f72:	f041 0120 	orr.w	r1, r1, #32
   19f76:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
   19f7a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   19f7e:	e7bc      	b.n	19efa <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   19f80:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   19f84:	4620      	mov	r0, r4
   19f86:	f7ff ff3f 	bl	19e08 <release_handler>
    if (!handler)
   19f8a:	2e00      	cmp	r6, #0
   19f8c:	d0be      	beq.n	19f0c <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19f8e:	4d11      	ldr	r5, [pc, #68]	; (19fd4 <nrfx_gpiote_input_configure+0x144>)
   19f90:	682b      	ldr	r3, [r5, #0]
   19f92:	429e      	cmp	r6, r3
   19f94:	d104      	bne.n	19fa0 <nrfx_gpiote_input_configure+0x110>
   19f96:	686b      	ldr	r3, [r5, #4]
   19f98:	429f      	cmp	r7, r3
   19f9a:	d101      	bne.n	19fa0 <nrfx_gpiote_input_configure+0x110>
   19f9c:	2200      	movs	r2, #0
   19f9e:	e009      	b.n	19fb4 <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   19fa0:	4810      	ldr	r0, [pc, #64]	; (19fe4 <nrfx_gpiote_input_configure+0x154>)
   19fa2:	f10d 010f 	add.w	r1, sp, #15
   19fa6:	f7ff febd 	bl	19d24 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19faa:	4b0c      	ldr	r3, [pc, #48]	; (19fdc <nrfx_gpiote_input_configure+0x14c>)
   19fac:	4298      	cmp	r0, r3
   19fae:	d180      	bne.n	19eb2 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   19fb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   19fb4:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   19fb8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19fbc:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   19fbe:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19fc0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   19fc4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   19fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19fcc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   19fd0:	e79c      	b.n	19f0c <nrfx_gpiote_input_configure+0x7c>
   19fd2:	bf00      	nop
   19fd4:	200007a4 	.word	0x200007a4
   19fd8:	0bad0004 	.word	0x0bad0004
   19fdc:	0bad0000 	.word	0x0bad0000
   19fe0:	40006000 	.word	0x40006000
   19fe4:	20000818 	.word	0x20000818

00019fe8 <nrfx_gpiote_output_configure>:
{
   19fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fea:	4604      	mov	r4, r0
   19fec:	b085      	sub	sp, #20
   19fee:	4615      	mov	r5, r2
    if (p_config)
   19ff0:	b309      	cbz	r1, 1a036 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19ff2:	f100 0708 	add.w	r7, r0, #8
   19ff6:	4e31      	ldr	r6, [pc, #196]	; (1a0bc <nrfx_gpiote_output_configure+0xd4>)
   19ff8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   19ffc:	0798      	lsls	r0, r3, #30
   19ffe:	d401      	bmi.n	1a004 <nrfx_gpiote_output_configure+0x1c>
   1a000:	069a      	lsls	r2, r3, #26
   1a002:	d458      	bmi.n	1a0b6 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1a004:	f013 0f1c 	tst.w	r3, #28
   1a008:	d002      	beq.n	1a010 <nrfx_gpiote_output_configure+0x28>
   1a00a:	784b      	ldrb	r3, [r1, #1]
   1a00c:	2b01      	cmp	r3, #1
   1a00e:	d052      	beq.n	1a0b6 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1a010:	2301      	movs	r3, #1
   1a012:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1a016:	2300      	movs	r3, #0
   1a018:	e9cd 1300 	strd	r1, r3, [sp]
   1a01c:	1c4a      	adds	r2, r1, #1
   1a01e:	1c8b      	adds	r3, r1, #2
   1a020:	4620      	mov	r0, r4
   1a022:	f10d 010f 	add.w	r1, sp, #15
   1a026:	f009 f8a2 	bl	2316e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1a02a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1a02e:	f043 0303 	orr.w	r3, r3, #3
   1a032:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1a036:	b915      	cbnz	r5, 1a03e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   1a038:	4821      	ldr	r0, [pc, #132]	; (1a0c0 <nrfx_gpiote_output_configure+0xd8>)
}
   1a03a:	b005      	add	sp, #20
   1a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1a03e:	4e1f      	ldr	r6, [pc, #124]	; (1a0bc <nrfx_gpiote_output_configure+0xd4>)
   1a040:	f104 0708 	add.w	r7, r4, #8
   1a044:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1a048:	0783      	lsls	r3, r0, #30
   1a04a:	d534      	bpl.n	1a0b6 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   1a04c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1a050:	4661      	mov	r1, ip
   1a052:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1a054:	f020 0020 	bic.w	r0, r0, #32
   1a058:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1a05c:	04c0      	lsls	r0, r0, #19
   1a05e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1a062:	0cc0      	lsrs	r0, r0, #19
   1a064:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1a068:	2300      	movs	r3, #0
   1a06a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1a06e:	786a      	ldrb	r2, [r5, #1]
   1a070:	2a00      	cmp	r2, #0
   1a072:	d0e1      	beq.n	1a038 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1a074:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1a078:	78ad      	ldrb	r5, [r5, #2]
   1a07a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1a07e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1a082:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a086:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1a08a:	0223      	lsls	r3, r4, #8
   1a08c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a090:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a092:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a096:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a09a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a09c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a09e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1a0a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a0a6:	432b      	orrs	r3, r5
   1a0a8:	f040 0020 	orr.w	r0, r0, #32
   1a0ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1a0b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1a0b4:	e7c0      	b.n	1a038 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   1a0b6:	4803      	ldr	r0, [pc, #12]	; (1a0c4 <nrfx_gpiote_output_configure+0xdc>)
   1a0b8:	e7bf      	b.n	1a03a <nrfx_gpiote_output_configure+0x52>
   1a0ba:	bf00      	nop
   1a0bc:	200007a4 	.word	0x200007a4
   1a0c0:	0bad0000 	.word	0x0bad0000
   1a0c4:	0bad0004 	.word	0x0bad0004

0001a0c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1a0c8:	4b01      	ldr	r3, [pc, #4]	; (1a0d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1a0ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1a0ce:	4770      	bx	lr
   1a0d0:	200007a4 	.word	0x200007a4

0001a0d4 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a0d4:	3008      	adds	r0, #8
   1a0d6:	4b05      	ldr	r3, [pc, #20]	; (1a0ec <nrfx_gpiote_channel_get+0x18>)
   1a0d8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   1a0dc:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a0de:	bf43      	ittte	mi
   1a0e0:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   1a0e2:	4803      	ldrmi	r0, [pc, #12]	; (1a0f0 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a0e4:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   1a0e6:	4803      	ldrpl	r0, [pc, #12]	; (1a0f4 <nrfx_gpiote_channel_get+0x20>)
}
   1a0e8:	4770      	bx	lr
   1a0ea:	bf00      	nop
   1a0ec:	200007a4 	.word	0x200007a4
   1a0f0:	0bad0000 	.word	0x0bad0000
   1a0f4:	0bad0004 	.word	0x0bad0004

0001a0f8 <nrfx_gpiote_init>:
{
   1a0f8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1a0fa:	4c0e      	ldr	r4, [pc, #56]	; (1a134 <nrfx_gpiote_init+0x3c>)
   1a0fc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1a100:	b9b5      	cbnz	r5, 1a130 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1a102:	2260      	movs	r2, #96	; 0x60
   1a104:	4629      	mov	r1, r5
   1a106:	f104 0010 	add.w	r0, r4, #16
   1a10a:	f006 f987 	bl	2041c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1a10e:	2006      	movs	r0, #6
   1a110:	f7f9 f8d8 	bl	132c4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a114:	4b08      	ldr	r3, [pc, #32]	; (1a138 <nrfx_gpiote_init+0x40>)
    return err_code;
   1a116:	4809      	ldr	r0, [pc, #36]	; (1a13c <nrfx_gpiote_init+0x44>)
   1a118:	601d      	str	r5, [r3, #0]
   1a11a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1a11c:	4b08      	ldr	r3, [pc, #32]	; (1a140 <nrfx_gpiote_init+0x48>)
   1a11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a122:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1a126:	2301      	movs	r3, #1
   1a128:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1a12c:	6763      	str	r3, [r4, #116]	; 0x74
}
   1a12e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1a130:	4804      	ldr	r0, [pc, #16]	; (1a144 <nrfx_gpiote_init+0x4c>)
   1a132:	e7fc      	b.n	1a12e <nrfx_gpiote_init+0x36>
   1a134:	200007a4 	.word	0x200007a4
   1a138:	4000617c 	.word	0x4000617c
   1a13c:	0bad0000 	.word	0x0bad0000
   1a140:	40006000 	.word	0x40006000
   1a144:	0bad0005 	.word	0x0bad0005

0001a148 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1a148:	4b03      	ldr	r3, [pc, #12]	; (1a158 <nrfx_gpiote_is_init+0x10>)
   1a14a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1a14e:	3800      	subs	r0, #0
   1a150:	bf18      	it	ne
   1a152:	2001      	movne	r0, #1
   1a154:	4770      	bx	lr
   1a156:	bf00      	nop
   1a158:	200007a4 	.word	0x200007a4

0001a15c <nrfx_gpiote_channel_free>:
{
   1a15c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1a15e:	4801      	ldr	r0, [pc, #4]	; (1a164 <nrfx_gpiote_channel_free+0x8>)
   1a160:	f7ff be04 	b.w	19d6c <nrfx_flag32_free>
   1a164:	20000814 	.word	0x20000814

0001a168 <nrfx_gpiote_channel_alloc>:
{
   1a168:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1a16a:	4801      	ldr	r0, [pc, #4]	; (1a170 <nrfx_gpiote_channel_alloc+0x8>)
   1a16c:	f7ff bdda 	b.w	19d24 <nrfx_flag32_alloc>
   1a170:	20000814 	.word	0x20000814

0001a174 <nrfx_gpiote_trigger_enable>:
{
   1a174:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a176:	4b1f      	ldr	r3, [pc, #124]	; (1a1f4 <nrfx_gpiote_trigger_enable+0x80>)
   1a178:	f100 0208 	add.w	r2, r0, #8
{
   1a17c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a17e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a182:	069a      	lsls	r2, r3, #26
   1a184:	d51d      	bpl.n	1a1c2 <nrfx_gpiote_trigger_enable+0x4e>
   1a186:	f013 0502 	ands.w	r5, r3, #2
   1a18a:	d11a      	bne.n	1a1c2 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a18c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1a18e:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1a190:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1a194:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1a198:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a19c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a1a0:	6005      	str	r5, [r0, #0]
   1a1a2:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a1a4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1a1a8:	f040 0001 	orr.w	r0, r0, #1
   1a1ac:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1a1b0:	b129      	cbz	r1, 1a1be <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1a1b2:	2201      	movs	r2, #1
   1a1b4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1a1b8:	4a0f      	ldr	r2, [pc, #60]	; (1a1f8 <nrfx_gpiote_trigger_enable+0x84>)
   1a1ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a1be:	b003      	add	sp, #12
   1a1c0:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a1c2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1a1c6:	2b04      	cmp	r3, #4
   1a1c8:	d010      	beq.n	1a1ec <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1a1ca:	2b05      	cmp	r3, #5
   1a1cc:	d010      	beq.n	1a1f0 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a1ce:	a801      	add	r0, sp, #4
   1a1d0:	9401      	str	r4, [sp, #4]
   1a1d2:	f7ff fded 	bl	19db0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a1d6:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1a1d8:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a1dc:	40d9      	lsrs	r1, r3
   1a1de:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a1e2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1a1e4:	4620      	mov	r0, r4
   1a1e6:	f009 f809 	bl	231fc <nrf_gpio_cfg_sense_set>
}
   1a1ea:	e7e8      	b.n	1a1be <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1a1ec:	2103      	movs	r1, #3
   1a1ee:	e7f9      	b.n	1a1e4 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1a1f0:	2102      	movs	r1, #2
   1a1f2:	e7f7      	b.n	1a1e4 <nrfx_gpiote_trigger_enable+0x70>
   1a1f4:	200007a4 	.word	0x200007a4
   1a1f8:	40006000 	.word	0x40006000

0001a1fc <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1a1fc:	4b0e      	ldr	r3, [pc, #56]	; (1a238 <nrfx_gpiote_trigger_disable+0x3c>)
   1a1fe:	f100 0208 	add.w	r2, r0, #8
   1a202:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1a206:	0699      	lsls	r1, r3, #26
   1a208:	d513      	bpl.n	1a232 <nrfx_gpiote_trigger_disable+0x36>
   1a20a:	079a      	lsls	r2, r3, #30
   1a20c:	d411      	bmi.n	1a232 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1a20e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1a210:	2201      	movs	r2, #1
   1a212:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1a214:	009b      	lsls	r3, r3, #2
   1a216:	4909      	ldr	r1, [pc, #36]	; (1a23c <nrfx_gpiote_trigger_disable+0x40>)
   1a218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a21c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a220:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1a224:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a228:	f022 0203 	bic.w	r2, r2, #3
   1a22c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1a230:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a232:	2100      	movs	r1, #0
   1a234:	f008 bfe2 	b.w	231fc <nrf_gpio_cfg_sense_set>
   1a238:	200007a4 	.word	0x200007a4
   1a23c:	40006000 	.word	0x40006000

0001a240 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a240:	4b0e      	ldr	r3, [pc, #56]	; (1a27c <nrfx_gpiote_pin_uninit+0x3c>)
   1a242:	f100 0208 	add.w	r2, r0, #8
{
   1a246:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1a248:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1a24c:	07db      	lsls	r3, r3, #31
{
   1a24e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1a250:	d511      	bpl.n	1a276 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1a252:	f7ff ffd3 	bl	1a1fc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1a256:	4620      	mov	r0, r4
   1a258:	f7ff fe00 	bl	19e5c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a25c:	a801      	add	r0, sp, #4
   1a25e:	9401      	str	r4, [sp, #4]
   1a260:	f7ff fda6 	bl	19db0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a264:	9b01      	ldr	r3, [sp, #4]
   1a266:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a26a:	2202      	movs	r2, #2
   1a26c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1a270:	4803      	ldr	r0, [pc, #12]	; (1a280 <nrfx_gpiote_pin_uninit+0x40>)
}
   1a272:	b002      	add	sp, #8
   1a274:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1a276:	4803      	ldr	r0, [pc, #12]	; (1a284 <nrfx_gpiote_pin_uninit+0x44>)
   1a278:	e7fb      	b.n	1a272 <nrfx_gpiote_pin_uninit+0x32>
   1a27a:	bf00      	nop
   1a27c:	200007a4 	.word	0x200007a4
   1a280:	0bad0000 	.word	0x0bad0000
   1a284:	0bad0004 	.word	0x0bad0004

0001a288 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a28c:	4b64      	ldr	r3, [pc, #400]	; (1a420 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   1a28e:	4865      	ldr	r0, [pc, #404]	; (1a424 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a290:	4965      	ldr	r1, [pc, #404]	; (1a428 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   1a292:	2500      	movs	r5, #0
{
   1a294:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a296:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a298:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a29a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1a29c:	b136      	cbz	r6, 1a2ac <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1a29e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1a2a2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a2a4:	bf1e      	ittt	ne
   1a2a6:	601c      	strne	r4, [r3, #0]
   1a2a8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1a2aa:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   1a2ac:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a2ae:	428b      	cmp	r3, r1
        mask <<= 1;
   1a2b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a2b4:	d1f1      	bne.n	1a29a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2b6:	4f5d      	ldr	r7, [pc, #372]	; (1a42c <nrfx_gpiote_irq_handler+0x1a4>)
   1a2b8:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1a2ba:	b37b      	cbz	r3, 1a31c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   1a2bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a2c0:	4e5b      	ldr	r6, [pc, #364]	; (1a430 <nrfx_gpiote_irq_handler+0x1a8>)
   1a2c2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a2c6:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a2c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a2cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1a2d0:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a2d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a2d6:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a2d8:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a2dc:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1a2e0:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   1a2e4:	f8d9 3000 	ldr.w	r3, [r9]
   1a2e8:	b9f3      	cbnz	r3, 1a328 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a2ea:	f108 0820 	add.w	r8, r8, #32
   1a2ee:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   1a2f2:	f109 0904 	add.w	r9, r9, #4
   1a2f6:	d1f5      	bne.n	1a2e4 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a2f8:	603b      	str	r3, [r7, #0]
   1a2fa:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1a2fc:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
   1a2fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a302:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a306:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a308:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a30c:	9b00      	ldr	r3, [sp, #0]
   1a30e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   1a312:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a314:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1a318:	4313      	orrs	r3, r2
   1a31a:	d1dd      	bne.n	1a2d8 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   1a31c:	2401      	movs	r4, #1
    while (mask)
   1a31e:	2d00      	cmp	r5, #0
   1a320:	d166      	bne.n	1a3f0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1a322:	b007      	add	sp, #28
   1a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1a328:	fa93 f3a3 	rbit	r3, r3
   1a32c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   1a330:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1a334:	f106 0208 	add.w	r2, r6, #8
   1a338:	4b3e      	ldr	r3, [pc, #248]	; (1a434 <nrfx_gpiote_irq_handler+0x1ac>)
   1a33a:	9603      	str	r6, [sp, #12]
   1a33c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   1a340:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a344:	08f4      	lsrs	r4, r6, #3
   1a346:	9301      	str	r3, [sp, #4]
   1a348:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   1a34a:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
   1a34c:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1a350:	fa0b fc00 	lsl.w	ip, fp, r0
   1a354:	5d18      	ldrb	r0, [r3, r4]
   1a356:	ea20 000c 	bic.w	r0, r0, ip
   1a35a:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a35c:	a803      	add	r0, sp, #12
   1a35e:	0891      	lsrs	r1, r2, #2
   1a360:	f7ff fd26 	bl	19db0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a364:	9c03      	ldr	r4, [sp, #12]
   1a366:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
   1a36a:	074b      	lsls	r3, r1, #29
   1a36c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a370:	f3c4 4401 	ubfx	r4, r4, #16, #2
   1a374:	d523      	bpl.n	1a3be <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
   1a376:	4651      	mov	r1, sl
   1a378:	4630      	mov	r0, r6
   1a37a:	f7ff fd27 	bl	19dcc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a37e:	a803      	add	r0, sp, #12
   1a380:	9603      	str	r6, [sp, #12]
   1a382:	f7ff fd15 	bl	19db0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a386:	9a03      	ldr	r2, [sp, #12]
   1a388:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1a38c:	b2e4      	uxtb	r4, r4
   1a38e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1a392:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1a396:	4294      	cmp	r4, r2
   1a398:	d107      	bne.n	1a3aa <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a39a:	2100      	movs	r1, #0
   1a39c:	4630      	mov	r0, r6
   1a39e:	f008 ff2d 	bl	231fc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1a3a2:	4621      	mov	r1, r4
   1a3a4:	4630      	mov	r0, r6
   1a3a6:	f008 ff29 	bl	231fc <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a3aa:	a803      	add	r0, sp, #12
   1a3ac:	9603      	str	r6, [sp, #12]
   1a3ae:	f7ff fcff 	bl	19db0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1a3b2:	9b03      	ldr	r3, [sp, #12]
   1a3b4:	fa0b f303 	lsl.w	r3, fp, r3
   1a3b8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1a3bc:	e792      	b.n	1a2e4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a3be:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a3c0:	bf0c      	ite	eq
   1a3c2:	2103      	moveq	r1, #3
   1a3c4:	2102      	movne	r1, #2
   1a3c6:	4630      	mov	r0, r6
   1a3c8:	f008 ff18 	bl	231fc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1a3cc:	9b01      	ldr	r3, [sp, #4]
   1a3ce:	2b03      	cmp	r3, #3
   1a3d0:	d004      	beq.n	1a3dc <nrfx_gpiote_irq_handler+0x154>
   1a3d2:	2c02      	cmp	r4, #2
   1a3d4:	d107      	bne.n	1a3e6 <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a3d6:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a3da:	d1e6      	bne.n	1a3aa <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
   1a3dc:	4651      	mov	r1, sl
   1a3de:	4630      	mov	r0, r6
   1a3e0:	f7ff fcf4 	bl	19dcc <call_handler>
   1a3e4:	e7e1      	b.n	1a3aa <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a3e6:	2c03      	cmp	r4, #3
   1a3e8:	d1df      	bne.n	1a3aa <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a3ea:	f1ba 0f02 	cmp.w	sl, #2
   1a3ee:	e7f4      	b.n	1a3da <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
   1a3f0:	fa95 f3a5 	rbit	r3, r5
   1a3f4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1a3f8:	fa04 f203 	lsl.w	r2, r4, r3
   1a3fc:	009b      	lsls	r3, r3, #2
   1a3fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a402:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a406:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a40a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1a40e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1a412:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1a416:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1a41a:	f7ff fcd7 	bl	19dcc <call_handler>
   1a41e:	e77e      	b.n	1a31e <nrfx_gpiote_irq_handler+0x96>
   1a420:	40006100 	.word	0x40006100
   1a424:	40006000 	.word	0x40006000
   1a428:	40006120 	.word	0x40006120
   1a42c:	4000617c 	.word	0x4000617c
   1a430:	50000300 	.word	0x50000300
   1a434:	200007a4 	.word	0x200007a4

0001a438 <nrfx_nvmc_page_partial_erase_init>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1a438:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a43c:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1a43e:	fbb0 f3f2 	udiv	r3, r0, r2
   1a442:	fb02 0313 	mls	r3, r2, r3, r0
#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
nrfx_err_t nrfx_nvmc_page_partial_erase_init(uint32_t addr, uint32_t duration_ms)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1a446:	b943      	cbnz	r3, 1a45a <nrfx_nvmc_page_partial_erase_init+0x22>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    m_partial_erase_time_elapsed = 0;
   1a448:	4a05      	ldr	r2, [pc, #20]	; (1a460 <nrfx_nvmc_page_partial_erase_init+0x28>)
   1a44a:	6013      	str	r3, [r2, #0]
    m_partial_erase_page_addr = addr;
   1a44c:	4b05      	ldr	r3, [pc, #20]	; (1a464 <nrfx_nvmc_page_partial_erase_init+0x2c>)
   1a44e:	6018      	str	r0, [r3, #0]

#if defined(NRF_NVMC_PARTIAL_ERASE_PRESENT)
NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set(NRF_NVMC_Type * p_reg,
                                                           uint32_t        duration_ms)
{
    p_reg->ERASEPAGEPARTIALCFG = duration_ms;
   1a450:	4b05      	ldr	r3, [pc, #20]	; (1a468 <nrfx_nvmc_page_partial_erase_init+0x30>)
    nrf_nvmc_partial_erase_duration_set(NRF_NVMC, duration_ms);

    return NRFX_SUCCESS;
   1a452:	4806      	ldr	r0, [pc, #24]	; (1a46c <nrfx_nvmc_page_partial_erase_init+0x34>)
   1a454:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
   1a458:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1a45a:	4805      	ldr	r0, [pc, #20]	; (1a470 <nrfx_nvmc_page_partial_erase_init+0x38>)
}
   1a45c:	4770      	bx	lr
   1a45e:	bf00      	nop
   1a460:	200029c0 	.word	0x200029c0
   1a464:	20000820 	.word	0x20000820
   1a468:	4001e000 	.word	0x4001e000
   1a46c:	0bad0000 	.word	0x0bad0000
   1a470:	0bad000a 	.word	0x0bad000a

0001a474 <nrfx_nvmc_page_partial_erase_continue>:
}

NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get(NRF_NVMC_Type const * p_reg)
{
    return p_reg->ERASEPAGEPARTIALCFG;
   1a474:	4b0e      	ldr	r3, [pc, #56]	; (1a4b0 <nrfx_nvmc_page_partial_erase_continue+0x3c>)
    p_reg->CONFIG = (uint32_t)mode;
   1a476:	2202      	movs	r2, #2

bool nrfx_nvmc_page_partial_erase_continue(void)
{
   1a478:	b530      	push	{r4, r5, lr}
    return p_reg->ERASEPAGEPARTIALCFG;
   1a47a:	f8d3 151c 	ldr.w	r1, [r3, #1308]	; 0x51c
    p_reg->CONFIG = (uint32_t)mode;
   1a47e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_PARTIAL_ERASE);
#else
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif

    nrf_nvmc_page_partial_erase_start(NRF_NVMC, m_partial_erase_page_addr);
   1a482:	4a0c      	ldr	r2, [pc, #48]	; (1a4b4 <nrfx_nvmc_page_partial_erase_continue+0x40>)
   1a484:	6810      	ldr	r0, [r2, #0]

NRF_STATIC_INLINE void nrf_nvmc_page_partial_erase_start(NRF_NVMC_Type * p_reg,
                                                         uint32_t        page_addr)
{
#if defined(NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk)
    p_reg->ERASEPAGEPARTIAL = page_addr;
   1a486:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1a48a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1a48e:	f010 0001 	ands.w	r0, r0, #1
   1a492:	d0fa      	beq.n	1a48a <nrfx_nvmc_page_partial_erase_continue+0x16>
    {}
    nvmc_readonly_mode_set();

    m_partial_erase_time_elapsed += duration_ms;
   1a494:	4d08      	ldr	r5, [pc, #32]	; (1a4b8 <nrfx_nvmc_page_partial_erase_continue+0x44>)
    p_reg->CONFIG = (uint32_t)mode;
   1a496:	2400      	movs	r4, #0
   1a498:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1a49c:	682b      	ldr	r3, [r5, #0]
   1a49e:	440b      	add	r3, r1
    if (m_partial_erase_time_elapsed < NVMC_PAGE_ERASE_DURATION_MS)
   1a4a0:	2b54      	cmp	r3, #84	; 0x54
    m_partial_erase_time_elapsed += duration_ms;
   1a4a2:	602b      	str	r3, [r5, #0]
    {
        return false;
    }
    else
    {
        m_partial_erase_page_addr = NVMC_PARTIAL_ERASE_INVALID_ADDR;
   1a4a4:	bf86      	itte	hi
   1a4a6:	f04f 33ff 	movhi.w	r3, #4294967295
   1a4aa:	6013      	strhi	r3, [r2, #0]
        return false;
   1a4ac:	4620      	movls	r0, r4
        return true;
    }
}
   1a4ae:	bd30      	pop	{r4, r5, pc}
   1a4b0:	4001e000 	.word	0x4001e000
   1a4b4:	20000820 	.word	0x20000820
   1a4b8:	200029c0 	.word	0x200029c0

0001a4bc <nrfx_nvmc_word_write>:
   1a4bc:	4b07      	ldr	r3, [pc, #28]	; (1a4dc <nrfx_nvmc_word_write+0x20>)
   1a4be:	2201      	movs	r2, #1
   1a4c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1a4c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1a4c8:	07d2      	lsls	r2, r2, #31
   1a4ca:	d5fb      	bpl.n	1a4c4 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1a4cc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1a4ce:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1a4d2:	2200      	movs	r2, #0
   1a4d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1a4d8:	4770      	bx	lr
   1a4da:	bf00      	nop
   1a4dc:	4001e000 	.word	0x4001e000

0001a4e0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a4e0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a4e2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a4e6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a4e8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a4ea:	6002      	str	r2, [r0, #0]
}
   1a4ec:	4802      	ldr	r0, [pc, #8]	; (1a4f8 <nrf_gpio_pin_port_decode+0x18>)
   1a4ee:	bf18      	it	ne
   1a4f0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a4f4:	4770      	bx	lr
   1a4f6:	bf00      	nop
   1a4f8:	50000300 	.word	0x50000300

0001a4fc <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1a4fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a500:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a502:	4d51      	ldr	r5, [pc, #324]	; (1a648 <nrfx_spi_init+0x14c>)
   1a504:	f04f 0c28 	mov.w	ip, #40	; 0x28
   1a508:	fb0c fc04 	mul.w	ip, ip, r4
{
   1a50c:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a50e:	eb05 000c 	add.w	r0, r5, ip
   1a512:	7f06      	ldrb	r6, [r0, #28]
   1a514:	2e00      	cmp	r6, #0
   1a516:	f040 8095 	bne.w	1a644 <nrfx_spi_init+0x148>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1a51a:	683e      	ldr	r6, [r7, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1a51c:	6043      	str	r3, [r0, #4]
    p_cb->handler = handler;
   1a51e:	f845 200c 	str.w	r2, [r5, ip]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1a522:	7bcb      	ldrb	r3, [r1, #15]
   1a524:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   1a528:	78ca      	ldrb	r2, [r1, #3]
   1a52a:	7782      	strb	r2, [r0, #30]
    p_cb->orc = p_config->orc;
   1a52c:	794a      	ldrb	r2, [r1, #5]
   1a52e:	77c2      	strb	r2, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   1a530:	2b00      	cmp	r3, #0
   1a532:	d140      	bne.n	1a5b6 <nrfx_spi_init+0xba>
    if (value == 0)
   1a534:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   1a536:	7808      	ldrb	r0, [r1, #0]
   1a538:	2b01      	cmp	r3, #1
   1a53a:	d87a      	bhi.n	1a632 <nrfx_spi_init+0x136>
        nrf_gpio_pin_clear(pin_number);
   1a53c:	f008 fe96 	bl	2326c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1a540:	780b      	ldrb	r3, [r1, #0]
   1a542:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a544:	a801      	add	r0, sp, #4
   1a546:	f7ff ffcb 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a54a:	9b01      	ldr	r3, [sp, #4]
   1a54c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a550:	2201      	movs	r2, #1
   1a552:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1a556:	7848      	ldrb	r0, [r1, #1]
   1a558:	28ff      	cmp	r0, #255	; 0xff
   1a55a:	d00c      	beq.n	1a576 <nrfx_spi_init+0x7a>
        nrf_gpio_pin_clear(pin_number);
   1a55c:	f008 fe86 	bl	2326c <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a560:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_output(p_config->mosi_pin);
   1a562:	784b      	ldrb	r3, [r1, #1]
   1a564:	9301      	str	r3, [sp, #4]
   1a566:	f7ff ffbb 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a56a:	9b01      	ldr	r3, [sp, #4]
   1a56c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a570:	2203      	movs	r2, #3
   1a572:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1a576:	788b      	ldrb	r3, [r1, #2]
   1a578:	2bff      	cmp	r3, #255	; 0xff
   1a57a:	d00c      	beq.n	1a596 <nrfx_spi_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a57c:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   1a57e:	f891 800e 	ldrb.w	r8, [r1, #14]
   1a582:	9301      	str	r3, [sp, #4]
   1a584:	f7ff ffac 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a588:	9b01      	ldr	r3, [sp, #4]
   1a58a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a58e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1a592:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a596:	78c8      	ldrb	r0, [r1, #3]
   1a598:	28ff      	cmp	r0, #255	; 0xff
   1a59a:	d00c      	beq.n	1a5b6 <nrfx_spi_init+0xba>
        nrf_gpio_pin_set(pin_number);
   1a59c:	f008 fe59 	bl	23252 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a5a0:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_output(p_config->ss_pin);
   1a5a2:	78cb      	ldrb	r3, [r1, #3]
   1a5a4:	9301      	str	r3, [sp, #4]
   1a5a6:	f7ff ff9b 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a5aa:	9b01      	ldr	r3, [sp, #4]
   1a5ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a5b0:	2203      	movs	r2, #3
   1a5b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1a5b6:	7c0b      	ldrb	r3, [r1, #16]
   1a5b8:	b993      	cbnz	r3, 1a5e0 <nrfx_spi_init+0xe4>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1a5ba:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1a5bc:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1a5be:	2bff      	cmp	r3, #255	; 0xff
   1a5c0:	bf18      	it	ne
   1a5c2:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1a5c4:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   1a5c6:	f8c6 0508 	str.w	r0, [r6, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1a5ca:	bf08      	it	eq
   1a5cc:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1a5d0:	2bff      	cmp	r3, #255	; 0xff
   1a5d2:	bf08      	it	eq
   1a5d4:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   1a5d8:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   1a5dc:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1a5e0:	688b      	ldr	r3, [r1, #8]
   1a5e2:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1a5e6:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1a5e8:	7b0a      	ldrb	r2, [r1, #12]
   1a5ea:	3b00      	subs	r3, #0
   1a5ec:	bf18      	it	ne
   1a5ee:	2301      	movne	r3, #1
    switch (spi_mode)
   1a5f0:	2a02      	cmp	r2, #2
   1a5f2:	d021      	beq.n	1a638 <nrfx_spi_init+0x13c>
   1a5f4:	2a03      	cmp	r2, #3
   1a5f6:	d022      	beq.n	1a63e <nrfx_spi_init+0x142>
   1a5f8:	2a01      	cmp	r2, #1
   1a5fa:	d101      	bne.n	1a600 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1a5fc:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1a600:	f8c6 3554 	str.w	r3, [r6, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a604:	2301      	movs	r3, #1
   1a606:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1a60a:	2328      	movs	r3, #40	; 0x28
   1a60c:	4363      	muls	r3, r4
   1a60e:	58eb      	ldr	r3, [r5, r3]
   1a610:	b123      	cbz	r3, 1a61c <nrfx_spi_init+0x120>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1a612:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1a614:	f340 3007 	sbfx	r0, r0, #12, #8
   1a618:	f7f8 fe54 	bl	132c4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1a61c:	2328      	movs	r3, #40	; 0x28
   1a61e:	fb03 5404 	mla	r4, r3, r4, r5
   1a622:	2300      	movs	r3, #0
   1a624:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1a626:	4809      	ldr	r0, [pc, #36]	; (1a64c <nrfx_spi_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a628:	2301      	movs	r3, #1
   1a62a:	7723      	strb	r3, [r4, #28]
}
   1a62c:	b002      	add	sp, #8
   1a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   1a632:	f008 fe0e 	bl	23252 <nrf_gpio_pin_set>
   1a636:	e783      	b.n	1a540 <nrfx_spi_init+0x44>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a638:	f043 0304 	orr.w	r3, r3, #4
        break;
   1a63c:	e7e0      	b.n	1a600 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1a63e:	f043 0306 	orr.w	r3, r3, #6
        break;
   1a642:	e7dd      	b.n	1a600 <nrfx_spi_init+0x104>
        return err_code;
   1a644:	4802      	ldr	r0, [pc, #8]	; (1a650 <nrfx_spi_init+0x154>)
   1a646:	e7f1      	b.n	1a62c <nrfx_spi_init+0x130>
   1a648:	200029c4 	.word	0x200029c4
   1a64c:	0bad0000 	.word	0x0bad0000
   1a650:	0bad0005 	.word	0x0bad0005

0001a654 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   1a654:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a656:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   1a658:	4d19      	ldr	r5, [pc, #100]	; (1a6c0 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1a65a:	6806      	ldr	r6, [r0, #0]
    if (p_cb->handler)
   1a65c:	2328      	movs	r3, #40	; 0x28
   1a65e:	4363      	muls	r3, r4
   1a660:	58eb      	ldr	r3, [r5, r3]
   1a662:	b133      	cbz	r3, 1a672 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1a664:	f346 3007 	sbfx	r0, r6, #12, #8
   1a668:	f7f8 fe3c 	bl	132e4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1a66c:	2304      	movs	r3, #4
   1a66e:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   1a672:	2300      	movs	r3, #0
   1a674:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   1a678:	2328      	movs	r3, #40	; 0x28
   1a67a:	fb03 5304 	mla	r3, r3, r4, r5
   1a67e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a682:	b9bb      	cbnz	r3, 1a6b4 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   1a684:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   1a688:	f008 fdd5 	bl	23236 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   1a68c:	f8d6 0510 	ldr.w	r0, [r6, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1a690:	1c42      	adds	r2, r0, #1
   1a692:	d001      	beq.n	1a698 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   1a694:	f008 fdcf 	bl	23236 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   1a698:	f8d6 050c 	ldr.w	r0, [r6, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1a69c:	1c43      	adds	r3, r0, #1
   1a69e:	d001      	beq.n	1a6a4 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   1a6a0:	f008 fdc9 	bl	23236 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a6a4:	2328      	movs	r3, #40	; 0x28
   1a6a6:	fb03 5304 	mla	r3, r3, r4, r5
   1a6aa:	7f98      	ldrb	r0, [r3, #30]
   1a6ac:	28ff      	cmp	r0, #255	; 0xff
   1a6ae:	d001      	beq.n	1a6b4 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   1a6b0:	f008 fdc1 	bl	23236 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1a6b4:	2328      	movs	r3, #40	; 0x28
   1a6b6:	fb03 5404 	mla	r4, r3, r4, r5
   1a6ba:	2300      	movs	r3, #0
   1a6bc:	7723      	strb	r3, [r4, #28]
}
   1a6be:	bd70      	pop	{r4, r5, r6, pc}
   1a6c0:	200029c4 	.word	0x200029c4

0001a6c4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a6c8:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1a6ca:	4d39      	ldr	r5, [pc, #228]	; (1a7b0 <nrfx_spi_xfer+0xec>)
   1a6cc:	2328      	movs	r3, #40	; 0x28
   1a6ce:	4363      	muls	r3, r4
{
   1a6d0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1a6d2:	18ea      	adds	r2, r5, r3
{
   1a6d4:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   1a6d6:	7f51      	ldrb	r1, [r2, #29]
{
   1a6d8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1a6da:	2900      	cmp	r1, #0
   1a6dc:	d165      	bne.n	1a7aa <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1a6de:	58eb      	ldr	r3, [r5, r3]
   1a6e0:	b10b      	cbz	r3, 1a6e6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1a6e2:	2301      	movs	r3, #1
   1a6e4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1a6e6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1a6ea:	2628      	movs	r6, #40	; 0x28
   1a6ec:	fb06 5604 	mla	r6, r6, r4, r5
   1a6f0:	f106 0c0c 	add.w	ip, r6, #12
   1a6f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a6f8:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   1a6fa:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a6fc:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1a6fe:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a702:	d001      	beq.n	1a708 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   1a704:	f008 fdb2 	bl	2326c <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   1a708:	2328      	movs	r3, #40	; 0x28
   1a70a:	f1b8 0f00 	cmp.w	r8, #0
   1a70e:	d006      	beq.n	1a71e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1a710:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1a714:	4827      	ldr	r0, [pc, #156]	; (1a7b4 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1a716:	2300      	movs	r3, #0
   1a718:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1a71e:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   1a722:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   1a726:	2204      	movs	r2, #4
   1a728:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   1a72c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a730:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   1a734:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1a738:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   1a73a:	b192      	cbz	r2, 1a762 <nrfx_spi_xfer+0x9e>
   1a73c:	683b      	ldr	r3, [r7, #0]
   1a73e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1a740:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1a744:	2a01      	cmp	r2, #1
   1a746:	d90e      	bls.n	1a766 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1a748:	683b      	ldr	r3, [r7, #0]
   1a74a:	785b      	ldrb	r3, [r3, #1]
   1a74c:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   1a750:	2328      	movs	r3, #40	; 0x28
   1a752:	4363      	muls	r3, r4
   1a754:	58ef      	ldr	r7, [r5, r3]
   1a756:	b177      	cbz	r7, 1a776 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1a758:	2304      	movs	r3, #4
   1a75a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a75e:	4816      	ldr	r0, [pc, #88]	; (1a7b8 <nrfx_spi_xfer+0xf4>)
   1a760:	e7db      	b.n	1a71a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1a762:	7fdb      	ldrb	r3, [r3, #31]
   1a764:	e7ec      	b.n	1a740 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1a766:	68fb      	ldr	r3, [r7, #12]
   1a768:	2b01      	cmp	r3, #1
   1a76a:	d9f1      	bls.n	1a750 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1a76c:	2328      	movs	r3, #40	; 0x28
   1a76e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   1a772:	7fdb      	ldrb	r3, [r3, #31]
   1a774:	e7ea      	b.n	1a74c <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a776:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   1a77a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a77e:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1a782:	2b00      	cmp	r3, #0
   1a784:	d0fb      	beq.n	1a77e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a786:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1a78a:	4630      	mov	r0, r6
   1a78c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   1a790:	f008 fd79 	bl	23286 <transfer_byte>
   1a794:	2800      	cmp	r0, #0
   1a796:	d1f2      	bne.n	1a77e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a798:	2328      	movs	r3, #40	; 0x28
   1a79a:	fb03 5404 	mla	r4, r3, r4, r5
   1a79e:	7fa0      	ldrb	r0, [r4, #30]
   1a7a0:	28ff      	cmp	r0, #255	; 0xff
   1a7a2:	d0dc      	beq.n	1a75e <nrfx_spi_xfer+0x9a>
        nrf_gpio_pin_set(pin_number);
   1a7a4:	f008 fd55 	bl	23252 <nrf_gpio_pin_set>
   1a7a8:	e7d9      	b.n	1a75e <nrfx_spi_xfer+0x9a>
        return err_code;
   1a7aa:	4804      	ldr	r0, [pc, #16]	; (1a7bc <nrfx_spi_xfer+0xf8>)
   1a7ac:	e7b5      	b.n	1a71a <nrfx_spi_xfer+0x56>
   1a7ae:	bf00      	nop
   1a7b0:	200029c4 	.word	0x200029c4
   1a7b4:	0bad0003 	.word	0x0bad0003
   1a7b8:	0bad0000 	.word	0x0bad0000
   1a7bc:	0bad000b 	.word	0x0bad000b

0001a7c0 <nrfx_spi_1_irq_handler>:
   1a7c0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1a7c4:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   1a7c6:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   1a7c8:	490b      	ldr	r1, [pc, #44]	; (1a7f8 <nrfx_spi_1_irq_handler+0x38>)
   1a7ca:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1a7ce:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1a7d2:	f008 fd58 	bl	23286 <transfer_byte>
   1a7d6:	b968      	cbnz	r0, 1a7f4 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a7d8:	7f88      	ldrb	r0, [r1, #30]
   1a7da:	28ff      	cmp	r0, #255	; 0xff
   1a7dc:	d001      	beq.n	1a7e2 <nrfx_spi_1_irq_handler+0x22>
   1a7de:	f008 fd38 	bl	23252 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1a7e2:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1a7e4:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1a7e6:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   1a7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1a7ec:	e9d1 3100 	ldrd	r3, r1, [r1]
   1a7f0:	4802      	ldr	r0, [pc, #8]	; (1a7fc <nrfx_spi_1_irq_handler+0x3c>)
   1a7f2:	4718      	bx	r3
}
   1a7f4:	bd10      	pop	{r4, pc}
   1a7f6:	bf00      	nop
   1a7f8:	200029c4 	.word	0x200029c4
   1a7fc:	200029cc 	.word	0x200029cc

0001a800 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
   1a800:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1a804:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a806:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a808:	4b04      	ldr	r3, [pc, #16]	; (1a81c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a80a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1a80e:	bf18      	it	ne
   1a810:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a814:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a816:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1a81a:	4770      	bx	lr
   1a81c:	50000300 	.word	0x50000300

0001a820 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   1a820:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1a824:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a826:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a828:	4b04      	ldr	r3, [pc, #16]	; (1a83c <nrf_gpio_cfg_default+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   1a82a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1a82e:	bf18      	it	ne
   1a830:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a834:	2102      	movs	r1, #2
   1a836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1a83a:	4770      	bx	lr
   1a83c:	50000300 	.word	0x50000300

0001a840 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1a840:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1a844:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a846:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a848:	4b04      	ldr	r3, [pc, #16]	; (1a85c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a84a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1a84e:	bf18      	it	ne
   1a850:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a854:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1a856:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1a85a:	4770      	bx	lr
   1a85c:	50000300 	.word	0x50000300

0001a860 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   1a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a864:	4f80      	ldr	r7, [pc, #512]	; (1aa68 <nrfx_spim_init+0x208>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a866:	7906      	ldrb	r6, [r0, #4]
{
   1a868:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a86a:	eb07 1146 	add.w	r1, r7, r6, lsl #5
{
   1a86e:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a870:	7f09      	ldrb	r1, [r1, #28]
   1a872:	2900      	cmp	r1, #0
   1a874:	f040 80f4 	bne.w	1aa60 <nrfx_spim_init+0x200>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   1a878:	2e00      	cmp	r6, #0
   1a87a:	f040 80f3 	bne.w	1aa64 <nrfx_spim_init+0x204>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1a87e:	6805      	ldr	r5, [r0, #0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1a880:	7ce0      	ldrb	r0, [r4, #19]
        ((p_config->use_hw_ss) &&
   1a882:	f894 c011 	ldrb.w	ip, [r4, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   1a886:	68a1      	ldr	r1, [r4, #8]
    p_cb->p_context = p_context;
   1a888:	e9c7 2300 	strd	r2, r3, [r7]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1a88c:	7923      	ldrb	r3, [r4, #4]
   1a88e:	7fba      	ldrb	r2, [r7, #30]
   1a890:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
   1a894:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
   1a898:	f003 0307 	and.w	r3, r3, #7
   1a89c:	f022 0207 	bic.w	r2, r2, #7
   1a8a0:	4313      	orrs	r3, r2
   1a8a2:	77bb      	strb	r3, [r7, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
   1a8a4:	78e3      	ldrb	r3, [r4, #3]
   1a8a6:	77fb      	strb	r3, [r7, #31]
    if (!p_config->skip_gpio_cfg)
   1a8a8:	2800      	cmp	r0, #0
   1a8aa:	d16c      	bne.n	1a986 <nrfx_spim_init+0x126>
    if (value == 0)
   1a8ac:	7b23      	ldrb	r3, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   1a8ae:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   1a8b0:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   1a8b4:	bf08      	it	eq
   1a8b6:	2603      	moveq	r6, #3
   1a8b8:	2b01      	cmp	r3, #1
   1a8ba:	f200 80bb 	bhi.w	1aa34 <nrfx_spim_init+0x1d4>
        nrf_gpio_pin_clear(pin_number);
   1a8be:	f7ff ff9f 	bl	1a800 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1a8c2:	7823      	ldrb	r3, [r4, #0]
        case 1: return NRF_P1;
   1a8c4:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 1aa6c <nrfx_spim_init+0x20c>
    *p_pin = pin_number & 0x1F;
   1a8c8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a8cc:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a8ce:	2b01      	cmp	r3, #1
   1a8d0:	bf14      	ite	ne
   1a8d2:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
   1a8d6:	4649      	moveq	r1, r9
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1a8d8:	0236      	lsls	r6, r6, #8
    reg->PIN_CNF[pin_number] = cnf;
   1a8da:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a8de:	f046 0001 	orr.w	r0, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   1a8e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1a8e6:	7860      	ldrb	r0, [r4, #1]
   1a8e8:	28ff      	cmp	r0, #255	; 0xff
   1a8ea:	d00f      	beq.n	1a90c <nrfx_spim_init+0xac>
        nrf_gpio_pin_clear(pin_number);
   1a8ec:	f7ff ff88 	bl	1a800 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   1a8f0:	7863      	ldrb	r3, [r4, #1]
    *p_pin = pin_number & 0x1F;
   1a8f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a8f6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a8f8:	2b01      	cmp	r3, #1
   1a8fa:	bf18      	it	ne
   1a8fc:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a900:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a904:	f046 0103 	orr.w	r1, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   1a908:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1a90c:	78a3      	ldrb	r3, [r4, #2]
   1a90e:	2bff      	cmp	r3, #255	; 0xff
   1a910:	d00e      	beq.n	1a930 <nrfx_spim_init+0xd0>
    *p_pin = pin_number & 0x1F;
   1a912:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a916:	095b      	lsrs	r3, r3, #5
            nrf_gpio_cfg(p_config->miso_pin,
   1a918:	7ba1      	ldrb	r1, [r4, #14]
        case 1: return NRF_P1;
   1a91a:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1a91c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1a920:	4b52      	ldr	r3, [pc, #328]	; (1aa6c <nrfx_spim_init+0x20c>)
   1a922:	bf18      	it	ne
   1a924:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a928:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1a92c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1a930:	78e0      	ldrb	r0, [r4, #3]
   1a932:	28ff      	cmp	r0, #255	; 0xff
   1a934:	d013      	beq.n	1a95e <nrfx_spim_init+0xfe>
    if (value == 0)
   1a936:	7923      	ldrb	r3, [r4, #4]
   1a938:	2b00      	cmp	r3, #0
   1a93a:	d07e      	beq.n	1aa3a <nrfx_spim_init+0x1da>
        nrf_gpio_pin_clear(pin_number);
   1a93c:	f7ff ff60 	bl	1a800 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   1a940:	78e3      	ldrb	r3, [r4, #3]
    *p_pin = pin_number & 0x1F;
   1a942:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a946:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a948:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1a94a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1a94e:	4b47      	ldr	r3, [pc, #284]	; (1aa6c <nrfx_spim_init+0x20c>)
   1a950:	bf18      	it	ne
   1a952:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a956:	f046 0103 	orr.w	r1, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   1a95a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1a95e:	7be0      	ldrb	r0, [r4, #15]
   1a960:	28ff      	cmp	r0, #255	; 0xff
   1a962:	d010      	beq.n	1a986 <nrfx_spim_init+0x126>
        nrf_gpio_pin_set(pin_number);
   1a964:	f7ff ff6c 	bl	1a840 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   1a968:	7be3      	ldrb	r3, [r4, #15]
    *p_pin = pin_number & 0x1F;
   1a96a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a96e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a970:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   1a972:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1a976:	4b3d      	ldr	r3, [pc, #244]	; (1aa6c <nrfx_spim_init+0x20c>)
   1a978:	bf18      	it	ne
   1a97a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a97e:	f046 0603 	orr.w	r6, r6, #3
    reg->PIN_CNF[pin_number] = cnf;
   1a982:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    if (!p_config->skip_psel_cfg)
   1a986:	7d23      	ldrb	r3, [r4, #20]
   1a988:	bb53      	cbnz	r3, 1a9e0 <nrfx_spim_init+0x180>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1a98a:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1a98c:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1a98e:	2bff      	cmp	r3, #255	; 0xff
   1a990:	bf18      	it	ne
   1a992:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1a994:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   1a996:	f8c5 1508 	str.w	r1, [r5, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1a99a:	bf08      	it	eq
   1a99c:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1a9a0:	2bff      	cmp	r3, #255	; 0xff
   1a9a2:	bf08      	it	eq
   1a9a4:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
   1a9a8:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1a9ac:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1a9b0:	f898 3004 	ldrb.w	r3, [r8, #4]
   1a9b4:	b9a3      	cbnz	r3, 1a9e0 <nrfx_spim_init+0x180>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   1a9b6:	78e3      	ldrb	r3, [r4, #3]
   1a9b8:	2bff      	cmp	r3, #255	; 0xff
   1a9ba:	d041      	beq.n	1aa40 <nrfx_spim_init+0x1e0>
   1a9bc:	7c62      	ldrb	r2, [r4, #17]
   1a9be:	2a00      	cmp	r2, #0
   1a9c0:	d03e      	beq.n	1aa40 <nrfx_spim_init+0x1e0>
                                    (p_config->ss_active_high == true
   1a9c2:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   1a9c4:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   1a9c6:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1a9ca:	f8c5 1568 	str.w	r1, [r5, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1a9ce:	f8c5 2564 	str.w	r2, [r5, #1380]	; 0x564
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   1a9d2:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   1a9d4:	2bff      	cmp	r3, #255	; 0xff
   1a9d6:	bf08      	it	eq
   1a9d8:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   1a9dc:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1a9e0:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1a9e2:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1a9e6:	68a3      	ldr	r3, [r4, #8]
   1a9e8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1a9ec:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1a9ee:	7b22      	ldrb	r2, [r4, #12]
   1a9f0:	3b00      	subs	r3, #0
   1a9f2:	bf18      	it	ne
   1a9f4:	2301      	movne	r3, #1
    switch (spi_mode)
   1a9f6:	2a02      	cmp	r2, #2
   1a9f8:	d02c      	beq.n	1aa54 <nrfx_spim_init+0x1f4>
   1a9fa:	2a03      	cmp	r2, #3
   1a9fc:	d02d      	beq.n	1aa5a <nrfx_spim_init+0x1fa>
   1a9fe:	2a01      	cmp	r2, #1
   1aa00:	d101      	bne.n	1aa06 <nrfx_spim_init+0x1a6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1aa02:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1aa06:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1aa0a:	79a3      	ldrb	r3, [r4, #6]
   1aa0c:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1aa10:	2307      	movs	r3, #7
   1aa12:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   1aa16:	683b      	ldr	r3, [r7, #0]
   1aa18:	b12b      	cbz	r3, 1aa26 <nrfx_spim_init+0x1c6>
   1aa1a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1aa1e:	f340 3007 	sbfx	r0, r0, #12, #8
   1aa22:	f7f8 fc4f 	bl	132c4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1aa26:	2300      	movs	r3, #0
   1aa28:	777b      	strb	r3, [r7, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1aa2a:	4811      	ldr	r0, [pc, #68]	; (1aa70 <nrfx_spim_init+0x210>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1aa2c:	2301      	movs	r3, #1
   1aa2e:	773b      	strb	r3, [r7, #28]
}
   1aa30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
   1aa34:	f7ff ff04 	bl	1a840 <nrf_gpio_pin_set>
   1aa38:	e743      	b.n	1a8c2 <nrfx_spim_init+0x62>
   1aa3a:	f7ff ff01 	bl	1a840 <nrf_gpio_pin_set>
   1aa3e:	e77f      	b.n	1a940 <nrfx_spim_init+0xe0>
    p_reg->PSEL.CSN = pin;
   1aa40:	f04f 33ff 	mov.w	r3, #4294967295
   1aa44:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   1aa48:	2300      	movs	r3, #0
   1aa4a:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   1aa4e:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
}
   1aa52:	e7be      	b.n	1a9d2 <nrfx_spim_init+0x172>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1aa54:	f043 0304 	orr.w	r3, r3, #4
        break;
   1aa58:	e7d5      	b.n	1aa06 <nrfx_spim_init+0x1a6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1aa5a:	f043 0306 	orr.w	r3, r3, #6
        break;
   1aa5e:	e7d2      	b.n	1aa06 <nrfx_spim_init+0x1a6>
        return err_code;
   1aa60:	4804      	ldr	r0, [pc, #16]	; (1aa74 <nrfx_spim_init+0x214>)
   1aa62:	e7e5      	b.n	1aa30 <nrfx_spim_init+0x1d0>
        return err_code;
   1aa64:	4804      	ldr	r0, [pc, #16]	; (1aa78 <nrfx_spim_init+0x218>)
   1aa66:	e7e3      	b.n	1aa30 <nrfx_spim_init+0x1d0>
   1aa68:	200029ec 	.word	0x200029ec
   1aa6c:	50000300 	.word	0x50000300
   1aa70:	0bad0000 	.word	0x0bad0000
   1aa74:	0bad0005 	.word	0x0bad0005
   1aa78:	0bad0003 	.word	0x0bad0003

0001aa7c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   1aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1aa80:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   1aa82:	4c26      	ldr	r4, [pc, #152]	; (1ab1c <nrfx_spim_uninit+0xa0>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1aa84:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   1aa86:	015e      	lsls	r6, r3, #5
   1aa88:	eb04 1843 	add.w	r8, r4, r3, lsl #5
   1aa8c:	59a3      	ldr	r3, [r4, r6]
{
   1aa8e:	4607      	mov	r7, r0
    if (p_cb->handler)
   1aa90:	b1cb      	cbz	r3, 1aac6 <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1aa92:	f345 3007 	sbfx	r0, r5, #12, #8
   1aa96:	f7f8 fc25 	bl	132e4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1aa9a:	4b21      	ldr	r3, [pc, #132]	; (1ab20 <nrfx_spim_uninit+0xa4>)
   1aa9c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   1aaa0:	f898 301d 	ldrb.w	r3, [r8, #29]
   1aaa4:	b17b      	cbz	r3, 1aac6 <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aaa6:	2301      	movs	r3, #1
   1aaa8:	616b      	str	r3, [r5, #20]
   1aaaa:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aaae:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1aab2:	b92b      	cbnz	r3, 1aac0 <nrfx_spim_uninit+0x44>
   1aab4:	2001      	movs	r0, #1
   1aab6:	f008 fb58 	bl	2316a <nrfx_busy_wait>
   1aaba:	f1b8 0801 	subs.w	r8, r8, #1
   1aabe:	d1f6      	bne.n	1aaae <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   1aac0:	19a3      	adds	r3, r4, r6
   1aac2:	2200      	movs	r2, #0
   1aac4:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1aac6:	2300      	movs	r3, #0
   1aac8:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   1aacc:	19a3      	adds	r3, r4, r6
   1aace:	7f9b      	ldrb	r3, [r3, #30]
   1aad0:	07db      	lsls	r3, r3, #31
   1aad2:	d417      	bmi.n	1ab04 <nrfx_spim_uninit+0x88>
    return p_reg->PSEL.SCK;
   1aad4:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1aad8:	f008 fc08 	bl	232ec <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1aadc:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1aae0:	f008 fc04 	bl	232ec <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1aae4:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1aae8:	f008 fc00 	bl	232ec <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   1aaec:	793b      	ldrb	r3, [r7, #4]
   1aaee:	b91b      	cbnz	r3, 1aaf8 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   1aaf0:	f8d5 056c 	ldr.w	r0, [r5, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   1aaf4:	f008 fbfa 	bl	232ec <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1aaf8:	19a3      	adds	r3, r4, r6
   1aafa:	7fd8      	ldrb	r0, [r3, #31]
   1aafc:	28ff      	cmp	r0, #255	; 0xff
   1aafe:	d001      	beq.n	1ab04 <nrfx_spim_uninit+0x88>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   1ab00:	f7ff fe8e 	bl	1a820 <nrf_gpio_cfg_default>
        }
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
   1ab04:	4b07      	ldr	r3, [pc, #28]	; (1ab24 <nrfx_spim_uninit+0xa8>)
   1ab06:	429d      	cmp	r5, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
   1ab08:	bf08      	it	eq
   1ab0a:	2201      	moveq	r2, #1

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1ab0c:	4434      	add	r4, r6
        *(volatile uint32_t *)0x4002F004 = 1;
   1ab0e:	bf08      	it	eq
   1ab10:	605a      	streq	r2, [r3, #4]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1ab12:	2300      	movs	r3, #0
   1ab14:	7723      	strb	r3, [r4, #28]
}
   1ab16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab1a:	bf00      	nop
   1ab1c:	200029ec 	.word	0x200029ec
   1ab20:	00080152 	.word	0x00080152
   1ab24:	4002f000 	.word	0x4002f000

0001ab28 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ab2c:	4d37      	ldr	r5, [pc, #220]	; (1ac0c <nrfx_spim_xfer+0xe4>)
   1ab2e:	7903      	ldrb	r3, [r0, #4]
   1ab30:	eb05 1843 	add.w	r8, r5, r3, lsl #5
{
   1ab34:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1ab36:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   1ab3a:	4682      	mov	sl, r0
   1ab3c:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1ab3e:	ea4f 1943 	mov.w	r9, r3, lsl #5
   1ab42:	2a00      	cmp	r2, #0
   1ab44:	d160      	bne.n	1ac08 <nrfx_spim_xfer+0xe0>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1ab46:	f855 2009 	ldr.w	r2, [r5, r9]
   1ab4a:	b12a      	cbz	r2, 1ab58 <nrfx_spim_xfer+0x30>
   1ab4c:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1ab50:	bf04      	itt	eq
   1ab52:	2201      	moveq	r2, #1
   1ab54:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1ab58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1ab5c:	eb05 0709 	add.w	r7, r5, r9
   1ab60:	370c      	adds	r7, #12
   1ab62:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1ab66:	2101      	movs	r1, #1
   1ab68:	4640      	mov	r0, r8
   1ab6a:	f008 fbc4 	bl	232f6 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1ab6e:	6831      	ldr	r1, [r6, #0]
   1ab70:	b121      	cbz	r1, 1ab7c <nrfx_spim_xfer+0x54>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ab72:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   1ab76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ab7a:	d106      	bne.n	1ab8a <nrfx_spim_xfer+0x62>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1ab7c:	68b2      	ldr	r2, [r6, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1ab7e:	b152      	cbz	r2, 1ab96 <nrfx_spim_xfer+0x6e>
   1ab80:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1ab84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ab88:	d005      	beq.n	1ab96 <nrfx_spim_xfer+0x6e>
        p_cb->transfer_in_progress = false;
   1ab8a:	444d      	add	r5, r9
   1ab8c:	2300      	movs	r3, #0
        return err_code;
   1ab8e:	4820      	ldr	r0, [pc, #128]	; (1ac10 <nrfx_spim_xfer+0xe8>)
        p_cb->transfer_in_progress = false;
   1ab90:	776b      	strb	r3, [r5, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   1ab92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1ab96:	f8da 3000 	ldr.w	r3, [sl]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1ab9a:	6870      	ldr	r0, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ab9c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   1aba0:	68f1      	ldr	r1, [r6, #12]
    p_reg->TXD.MAXCNT = length;
   1aba2:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1aba6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1abaa:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   1abac:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1abb0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1abb4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1abb8:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1abbc:	bf18      	it	ne
   1abbe:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1abc0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1abc4:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1abc8:	bf18      	it	ne
   1abca:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1abcc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1abd0:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1abd4:	bf04      	itt	eq
   1abd6:	2101      	moveq	r1, #1
   1abd8:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
   1abda:	f855 1009 	ldr.w	r1, [r5, r9]
   1abde:	b949      	cbnz	r1, 1abf4 <nrfx_spim_xfer+0xcc>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1abe0:	b912      	cbnz	r2, 1abe8 <nrfx_spim_xfer+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1abe2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1abe6:	e7fb      	b.n	1abe0 <nrfx_spim_xfer+0xb8>
        set_ss_pin_state(p_cb, false);
   1abe8:	2100      	movs	r1, #0
   1abea:	4640      	mov	r0, r8
   1abec:	f008 fb83 	bl	232f6 <set_ss_pin_state>
    return err_code;
   1abf0:	4808      	ldr	r0, [pc, #32]	; (1ac14 <nrfx_spim_xfer+0xec>)
}
   1abf2:	e7ce      	b.n	1ab92 <nrfx_spim_xfer+0x6a>
    if (!enable)
   1abf4:	f014 0f04 	tst.w	r4, #4
   1abf8:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
   1abfc:	bf14      	ite	ne
   1abfe:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   1ac02:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   1ac06:	e7f3      	b.n	1abf0 <nrfx_spim_xfer+0xc8>
        return err_code;
   1ac08:	4803      	ldr	r0, [pc, #12]	; (1ac18 <nrfx_spim_xfer+0xf0>)
   1ac0a:	e7c2      	b.n	1ab92 <nrfx_spim_xfer+0x6a>
   1ac0c:	200029ec 	.word	0x200029ec
   1ac10:	0bad000a 	.word	0x0bad000a
   1ac14:	0bad0000 	.word	0x0bad0000
   1ac18:	0bad000b 	.word	0x0bad000b

0001ac1c <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ac1c:	4b0c      	ldr	r3, [pc, #48]	; (1ac50 <nrfx_spim_3_irq_handler+0x34>)
   1ac1e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   1ac22:	b570      	push	{r4, r5, r6, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1ac24:	b192      	cbz	r2, 1ac4c <nrfx_spim_3_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
   1ac26:	4c0b      	ldr	r4, [pc, #44]	; (1ac54 <nrfx_spim_3_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac28:	2500      	movs	r5, #0
   1ac2a:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   1ac2e:	4629      	mov	r1, r5
   1ac30:	4620      	mov	r0, r4
   1ac32:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1ac36:	f008 fb5e 	bl	232f6 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1ac3a:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   1ac3e:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1ac40:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1ac42:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   1ac46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1ac4a:	4718      	bx	r3
}
   1ac4c:	bd70      	pop	{r4, r5, r6, pc}
   1ac4e:	bf00      	nop
   1ac50:	4002f000 	.word	0x4002f000
   1ac54:	200029ec 	.word	0x200029ec

0001ac58 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1ac58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1ac5a:	4b34      	ldr	r3, [pc, #208]	; (1ad2c <twi_rx_start_transfer+0xd4>)
   1ac5c:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ac5e:	2300      	movs	r3, #0
   1ac60:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1ac64:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1ac68:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ac6c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1ac70:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1ac74:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1ac78:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1ac7c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1ac80:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1ac82:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1ac86:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1ac88:	2b01      	cmp	r3, #1
{
   1ac8a:	4604      	mov	r4, r0
   1ac8c:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1ac8e:	d117      	bne.n	1acc0 <twi_rx_start_transfer+0x68>
   1ac90:	6a0b      	ldr	r3, [r1, #32]
   1ac92:	065b      	lsls	r3, r3, #25
   1ac94:	d414      	bmi.n	1acc0 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1ac96:	2302      	movs	r3, #2
   1ac98:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac9c:	2301      	movs	r3, #1
   1ac9e:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1aca0:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1aca4:	2a02      	cmp	r2, #2
   1aca6:	bf18      	it	ne
   1aca8:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1acaa:	682b      	ldr	r3, [r5, #0]
   1acac:	b193      	cbz	r3, 1acd4 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1acae:	f240 2386 	movw	r3, #646	; 0x286
   1acb2:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1acb4:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1acb6:	481e      	ldr	r0, [pc, #120]	; (1ad30 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1acb8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1acbc:	b003      	add	sp, #12
   1acbe:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1acc0:	2301      	movs	r3, #1
   1acc2:	e7e9      	b.n	1ac98 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1acc4:	4629      	mov	r1, r5
   1acc6:	4620      	mov	r0, r4
   1acc8:	f008 fb42 	bl	23350 <twi_transfer>
        while ((hw_timeout > 0) &&
   1accc:	b128      	cbz	r0, 1acda <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1acce:	9b01      	ldr	r3, [sp, #4]
   1acd0:	3b01      	subs	r3, #1
   1acd2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1acd4:	9b01      	ldr	r3, [sp, #4]
   1acd6:	2b00      	cmp	r3, #0
   1acd8:	dcf4      	bgt.n	1acc4 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1acda:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1acde:	b95b      	cbnz	r3, 1acf8 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ace0:	4813      	ldr	r0, [pc, #76]	; (1ad30 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1ace2:	9b01      	ldr	r3, [sp, #4]
   1ace4:	2b00      	cmp	r3, #0
   1ace6:	dce9      	bgt.n	1acbc <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ace8:	2300      	movs	r3, #0
   1acea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1acee:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1acf0:	4810      	ldr	r0, [pc, #64]	; (1ad34 <twi_rx_start_transfer+0xdc>)
   1acf2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1acf6:	e7e1      	b.n	1acbc <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1acf8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1acfc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1ad00:	b18b      	cbz	r3, 1ad26 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1ad02:	4a0d      	ldr	r2, [pc, #52]	; (1ad38 <twi_rx_start_transfer+0xe0>)
   1ad04:	480b      	ldr	r0, [pc, #44]	; (1ad34 <twi_rx_start_transfer+0xdc>)
   1ad06:	f013 0f01 	tst.w	r3, #1
   1ad0a:	bf18      	it	ne
   1ad0c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ad0e:	f013 0f02 	tst.w	r3, #2
   1ad12:	f102 0201 	add.w	r2, r2, #1
   1ad16:	bf18      	it	ne
   1ad18:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ad1a:	f013 0f04 	tst.w	r3, #4
   1ad1e:	4b07      	ldr	r3, [pc, #28]	; (1ad3c <twi_rx_start_transfer+0xe4>)
   1ad20:	bf18      	it	ne
   1ad22:	4618      	movne	r0, r3
   1ad24:	e7dd      	b.n	1ace2 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1ad26:	4803      	ldr	r0, [pc, #12]	; (1ad34 <twi_rx_start_transfer+0xdc>)
   1ad28:	e7db      	b.n	1ace2 <twi_rx_start_transfer+0x8a>
   1ad2a:	bf00      	nop
   1ad2c:	000186a0 	.word	0x000186a0
   1ad30:	0bad0000 	.word	0x0bad0000
   1ad34:	0bad0001 	.word	0x0bad0001
   1ad38:	0bae0000 	.word	0x0bae0000
   1ad3c:	0bae0002 	.word	0x0bae0002

0001ad40 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
   1ad40:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1ad44:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ad46:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1ad48:	4b04      	ldr	r3, [pc, #16]	; (1ad5c <nrf_gpio_cfg_default+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
   1ad4a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1ad4e:	bf18      	it	ne
   1ad50:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ad54:	2102      	movs	r1, #2
   1ad56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1ad5a:	4770      	bx	lr
   1ad5c:	50000300 	.word	0x50000300

0001ad60 <twi_tx_start_transfer>:
{
   1ad60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   1ad62:	4b30      	ldr	r3, [pc, #192]	; (1ae24 <twi_tx_start_transfer+0xc4>)
   1ad64:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ad66:	2300      	movs	r3, #0
   1ad68:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1ad6c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1ad70:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ad74:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1ad78:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1ad7c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1ad80:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1ad84:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
   1ad88:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   1ad8c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1ad8e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ad92:	2301      	movs	r3, #1
   1ad94:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1ad96:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1ad9a:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1ad9c:	429a      	cmp	r2, r3
   1ad9e:	bf18      	it	ne
   1ada0:	6083      	strne	r3, [r0, #8]
{
   1ada2:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   1ada4:	f008 fab7 	bl	23316 <twi_send_byte>
    if (p_cb->handler)
   1ada8:	682b      	ldr	r3, [r5, #0]
   1adaa:	b183      	cbz	r3, 1adce <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1adac:	f240 2386 	movw	r3, #646	; 0x286
   1adb0:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1adb2:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1adb4:	481c      	ldr	r0, [pc, #112]	; (1ae28 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1adb6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1adba:	b003      	add	sp, #12
   1adbc:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1adbe:	4629      	mov	r1, r5
   1adc0:	4620      	mov	r0, r4
   1adc2:	f008 fac5 	bl	23350 <twi_transfer>
        while ((hw_timeout > 0) &&
   1adc6:	b128      	cbz	r0, 1add4 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1adc8:	9b01      	ldr	r3, [sp, #4]
   1adca:	3b01      	subs	r3, #1
   1adcc:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1adce:	9b01      	ldr	r3, [sp, #4]
   1add0:	2b00      	cmp	r3, #0
   1add2:	dcf4      	bgt.n	1adbe <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1add4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1add8:	b95b      	cbnz	r3, 1adf2 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1adda:	4813      	ldr	r0, [pc, #76]	; (1ae28 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1addc:	9b01      	ldr	r3, [sp, #4]
   1adde:	2b00      	cmp	r3, #0
   1ade0:	dceb      	bgt.n	1adba <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ade2:	2300      	movs	r3, #0
   1ade4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1ade8:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1adea:	4810      	ldr	r0, [pc, #64]	; (1ae2c <twi_tx_start_transfer+0xcc>)
   1adec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1adf0:	e7e3      	b.n	1adba <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1adf2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1adf6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1adfa:	b18b      	cbz	r3, 1ae20 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1adfc:	4a0c      	ldr	r2, [pc, #48]	; (1ae30 <twi_tx_start_transfer+0xd0>)
   1adfe:	480b      	ldr	r0, [pc, #44]	; (1ae2c <twi_tx_start_transfer+0xcc>)
   1ae00:	f013 0f01 	tst.w	r3, #1
   1ae04:	bf18      	it	ne
   1ae06:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ae08:	f013 0f02 	tst.w	r3, #2
   1ae0c:	f102 0201 	add.w	r2, r2, #1
   1ae10:	bf18      	it	ne
   1ae12:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ae14:	f013 0f04 	tst.w	r3, #4
   1ae18:	4b06      	ldr	r3, [pc, #24]	; (1ae34 <twi_tx_start_transfer+0xd4>)
   1ae1a:	bf18      	it	ne
   1ae1c:	4618      	movne	r0, r3
   1ae1e:	e7dd      	b.n	1addc <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1ae20:	4802      	ldr	r0, [pc, #8]	; (1ae2c <twi_tx_start_transfer+0xcc>)
   1ae22:	e7db      	b.n	1addc <twi_tx_start_transfer+0x7c>
   1ae24:	000186a0 	.word	0x000186a0
   1ae28:	0bad0000 	.word	0x0bad0000
   1ae2c:	0bad0001 	.word	0x0bad0001
   1ae30:	0bae0000 	.word	0x0bae0000
   1ae34:	0bae0002 	.word	0x0bae0002

0001ae38 <nrfx_twi_init>:
{
   1ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ae3a:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ae3c:	4d29      	ldr	r5, [pc, #164]	; (1aee4 <nrfx_twi_init+0xac>)
   1ae3e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1ae42:	fb0c fc07 	mul.w	ip, ip, r7
   1ae46:	eb05 040c 	add.w	r4, r5, ip
   1ae4a:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1ae4e:	2e00      	cmp	r6, #0
   1ae50:	d146      	bne.n	1aee0 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ae52:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   1ae54:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1ae56:	7b4b      	ldrb	r3, [r1, #13]
   1ae58:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1ae5c:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   1ae5e:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
   1ae60:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1ae64:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   1ae68:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   1ae6c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1ae70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   1ae74:	b9e3      	cbnz	r3, 1aeb0 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
   1ae76:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   1ae78:	4b1b      	ldr	r3, [pc, #108]	; (1aee8 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
   1ae7a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1ae7e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1ae80:	2c01      	cmp	r4, #1
   1ae82:	bf18      	it	ne
   1ae84:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ae88:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
   1ae8c:	bf08      	it	eq
   1ae8e:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
   1ae90:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1ae94:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   1ae98:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1ae9a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1ae9e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1aea0:	2c01      	cmp	r4, #1
   1aea2:	bf18      	it	ne
   1aea4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1aea8:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   1aeac:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1aeb0:	7bcb      	ldrb	r3, [r1, #15]
   1aeb2:	b92b      	cbnz	r3, 1aec0 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   1aeb4:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1aeb8:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1aebc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1aec0:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1aec2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1aec6:	b11a      	cbz	r2, 1aed0 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1aec8:	f340 3007 	sbfx	r0, r0, #12, #8
   1aecc:	f7f8 f9fa 	bl	132c4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1aed0:	233c      	movs	r3, #60	; 0x3c
   1aed2:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1aed6:	4805      	ldr	r0, [pc, #20]	; (1aeec <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1aed8:	2301      	movs	r3, #1
   1aeda:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1aede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   1aee0:	4803      	ldr	r0, [pc, #12]	; (1aef0 <nrfx_twi_init+0xb8>)
   1aee2:	e7fc      	b.n	1aede <nrfx_twi_init+0xa6>
   1aee4:	20002a0c 	.word	0x20002a0c
   1aee8:	50000300 	.word	0x50000300
   1aeec:	0bad0000 	.word	0x0bad0000
   1aef0:	0bad0005 	.word	0x0bad0005

0001aef4 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1aef4:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1aef6:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1aef8:	2105      	movs	r1, #5
   1aefa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1aefe:	4a04      	ldr	r2, [pc, #16]	; (1af10 <nrfx_twi_enable+0x1c>)
   1af00:	213c      	movs	r1, #60	; 0x3c
   1af02:	fb01 2303 	mla	r3, r1, r3, r2
   1af06:	2202      	movs	r2, #2
   1af08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1af0c:	4770      	bx	lr
   1af0e:	bf00      	nop
   1af10:	20002a0c 	.word	0x20002a0c

0001af14 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1af14:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   1af16:	490b      	ldr	r1, [pc, #44]	; (1af44 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1af18:	7903      	ldrb	r3, [r0, #4]
   1af1a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1af1e:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   1af22:	f021 0103 	bic.w	r1, r1, #3
   1af26:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1af2a:	2100      	movs	r1, #0
   1af2c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1af30:	4a05      	ldr	r2, [pc, #20]	; (1af48 <nrfx_twi_disable+0x34>)
   1af32:	203c      	movs	r0, #60	; 0x3c
   1af34:	fb00 2303 	mla	r3, r0, r3, r2
   1af38:	2201      	movs	r2, #1
   1af3a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
   1af3e:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
   1af42:	4770      	bx	lr
   1af44:	00044286 	.word	0x00044286
   1af48:	20002a0c 	.word	0x20002a0c

0001af4c <nrfx_twi_uninit>:
{
   1af4c:	b570      	push	{r4, r5, r6, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1af4e:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->handler)
   1af50:	4e13      	ldr	r6, [pc, #76]	; (1afa0 <nrfx_twi_uninit+0x54>)
   1af52:	233c      	movs	r3, #60	; 0x3c
   1af54:	436b      	muls	r3, r5
{
   1af56:	4604      	mov	r4, r0
    if (p_cb->handler)
   1af58:	58f3      	ldr	r3, [r6, r3]
   1af5a:	b123      	cbz	r3, 1af66 <nrfx_twi_uninit+0x1a>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1af5c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twi));
   1af5e:	f340 3007 	sbfx	r0, r0, #12, #8
   1af62:	f7f8 f9bf 	bl	132e4 <arch_irq_disable>
    nrfx_twi_disable(p_instance);
   1af66:	4620      	mov	r0, r4
   1af68:	f7ff ffd4 	bl	1af14 <nrfx_twi_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   1af6c:	233c      	movs	r3, #60	; 0x3c
   1af6e:	fb03 6305 	mla	r3, r3, r5, r6
   1af72:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1af76:	b962      	cbnz	r2, 1af92 <nrfx_twi_uninit+0x46>
   1af78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1af7c:	b94b      	cbnz	r3, 1af92 <nrfx_twi_uninit+0x46>
        nrf_gpio_cfg_default(nrf_twi_scl_pin_get(p_instance->p_twi));
   1af7e:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
   1af80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   1af84:	f7ff fedc 	bl	1ad40 <nrf_gpio_cfg_default>
        nrf_gpio_cfg_default(nrf_twi_sda_pin_get(p_instance->p_twi));
   1af88:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SDA;
   1af8a:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
   1af8e:	f7ff fed7 	bl	1ad40 <nrf_gpio_cfg_default>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1af92:	233c      	movs	r3, #60	; 0x3c
   1af94:	fb03 6505 	mla	r5, r3, r5, r6
   1af98:	2300      	movs	r3, #0
   1af9a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1af9e:	bd70      	pop	{r4, r5, r6, pc}
   1afa0:	20002a0c 	.word	0x20002a0c

0001afa4 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1afa8:	4e32      	ldr	r6, [pc, #200]	; (1b074 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1afaa:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1afae:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1afb2:	233c      	movs	r3, #60	; 0x3c
   1afb4:	fb03 6308 	mla	r3, r3, r8, r6
{
   1afb8:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1afba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1afbe:	2b01      	cmp	r3, #1
{
   1afc0:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1afc2:	d104      	bne.n	1afce <nrfx_twi_xfer+0x2a>
   1afc4:	780b      	ldrb	r3, [r1, #0]
   1afc6:	2b01      	cmp	r3, #1
   1afc8:	d106      	bne.n	1afd8 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   1afca:	482b      	ldr	r0, [pc, #172]	; (1b078 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1afcc:	e011      	b.n	1aff2 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1afce:	2b02      	cmp	r3, #2
   1afd0:	d102      	bne.n	1afd8 <nrfx_twi_xfer+0x34>
   1afd2:	780b      	ldrb	r3, [r1, #0]
   1afd4:	2b01      	cmp	r3, #1
   1afd6:	d1f8      	bne.n	1afca <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   1afd8:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1afda:	4b28      	ldr	r3, [pc, #160]	; (1b07c <nrfx_twi_xfer+0xd8>)
   1afdc:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1afe0:	fb05 6508 	mla	r5, r5, r8, r6
   1afe4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1afe8:	b12b      	cbz	r3, 1aff6 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1afea:	68ab      	ldr	r3, [r5, #8]
        return err_code;
   1afec:	4824      	ldr	r0, [pc, #144]	; (1b080 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   1afee:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1aff6:	f087 0304 	eor.w	r3, r7, #4
   1affa:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1affe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
   1b002:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1b004:	46a6      	mov	lr, r4
   1b006:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b00a:	f105 0c0c 	add.w	ip, r5, #12
   1b00e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b012:	f8de 3000 	ldr.w	r3, [lr]
   1b016:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1b01a:	6863      	ldr	r3, [r4, #4]
   1b01c:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1b01e:	68e3      	ldr	r3, [r4, #12]
   1b020:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
   1b022:	7863      	ldrb	r3, [r4, #1]
   1b024:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1b028:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b02a:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1b02e:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b030:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1b034:	d019      	beq.n	1b06a <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1b036:	b9b3      	cbnz	r3, 1b066 <nrfx_twi_xfer+0xc2>
   1b038:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1b03c:	233c      	movs	r3, #60	; 0x3c
   1b03e:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1b042:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1b044:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1b048:	4648      	mov	r0, r9
   1b04a:	f7ff fe89 	bl	1ad60 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1b04e:	233c      	movs	r3, #60	; 0x3c
   1b050:	fb03 f808 	mul.w	r8, r3, r8
   1b054:	eb06 0208 	add.w	r2, r6, r8
   1b058:	f856 3008 	ldr.w	r3, [r6, r8]
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	d1c8      	bne.n	1aff2 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   1b060:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1b064:	e7c5      	b.n	1aff2 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1b066:	2701      	movs	r7, #1
   1b068:	e7e8      	b.n	1b03c <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1b06a:	4651      	mov	r1, sl
   1b06c:	4648      	mov	r0, r9
   1b06e:	f7ff fdf3 	bl	1ac58 <twi_rx_start_transfer>
   1b072:	e7ec      	b.n	1b04e <nrfx_twi_xfer+0xaa>
   1b074:	20002a0c 	.word	0x20002a0c
   1b078:	0bad0005 	.word	0x0bad0005
   1b07c:	00044286 	.word	0x00044286
   1b080:	0bad000b 	.word	0x0bad000b

0001b084 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1b084:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1b086:	4c29      	ldr	r4, [pc, #164]	; (1b12c <nrfx_twi_0_irq_handler+0xa8>)
   1b088:	4829      	ldr	r0, [pc, #164]	; (1b130 <nrfx_twi_0_irq_handler+0xac>)
{
   1b08a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1b08c:	4621      	mov	r1, r4
   1b08e:	f008 f95f 	bl	23350 <twi_transfer>
   1b092:	46a4      	mov	ip, r4
   1b094:	b9d8      	cbnz	r0, 1b0ce <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
   1b096:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   1b09a:	6a27      	ldr	r7, [r4, #32]
   1b09c:	b9e6      	cbnz	r6, 1b0d8 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1b09e:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1b0a0:	1e9a      	subs	r2, r3, #2
   1b0a2:	2a01      	cmp	r2, #1
   1b0a4:	d818      	bhi.n	1b0d8 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1b0a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1b0a8:	69a2      	ldr	r2, [r4, #24]
   1b0aa:	4291      	cmp	r1, r2
   1b0ac:	d114      	bne.n	1b0d8 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1b0ae:	69e2      	ldr	r2, [r4, #28]
   1b0b0:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1b0b2:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1b0b6:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1b0b8:	481d      	ldr	r0, [pc, #116]	; (1b130 <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1b0ba:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1b0bc:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1b0be:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1b0c2:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1b0c6:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1b0c8:	d103      	bne.n	1b0d2 <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1b0ca:	f7ff fe49 	bl	1ad60 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1b0ce:	b007      	add	sp, #28
   1b0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1b0d2:	f7ff fdc1 	bl	1ac58 <twi_rx_start_transfer>
   1b0d6:	e7fa      	b.n	1b0ce <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
   1b0d8:	4d16      	ldr	r5, [pc, #88]	; (1b134 <nrfx_twi_0_irq_handler+0xb0>)
   1b0da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b0dc:	ac01      	add	r4, sp, #4
   1b0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b0e0:	682b      	ldr	r3, [r5, #0]
   1b0e2:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   1b0e4:	b1f6      	cbz	r6, 1b124 <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   1b0e6:	4a12      	ldr	r2, [pc, #72]	; (1b130 <nrfx_twi_0_irq_handler+0xac>)
   1b0e8:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1b0ec:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1b0f0:	0798      	lsls	r0, r3, #30
   1b0f2:	d50e      	bpl.n	1b112 <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1b0f4:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1b0f6:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1b0fa:	2300      	movs	r3, #0
   1b0fc:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1b100:	077b      	lsls	r3, r7, #29
   1b102:	d501      	bpl.n	1b108 <nrfx_twi_0_irq_handler+0x84>
   1b104:	2e00      	cmp	r6, #0
   1b106:	d0e2      	beq.n	1b0ce <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
   1b108:	e9dc 3100 	ldrd	r3, r1, [ip]
   1b10c:	4668      	mov	r0, sp
   1b10e:	4798      	blx	r3
}
   1b110:	e7dd      	b.n	1b0ce <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1b112:	0759      	lsls	r1, r3, #29
   1b114:	d501      	bpl.n	1b11a <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1b116:	2302      	movs	r3, #2
   1b118:	e7ed      	b.n	1b0f6 <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1b11a:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1b11c:	bf4c      	ite	mi
   1b11e:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1b120:	2304      	movpl	r3, #4
   1b122:	e7e8      	b.n	1b0f6 <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
   1b124:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1b128:	e7e7      	b.n	1b0fa <nrfx_twi_0_irq_handler+0x76>
   1b12a:	bf00      	nop
   1b12c:	20002a0c 	.word	0x20002a0c
   1b130:	40003000 	.word	0x40003000
   1b134:	20002a18 	.word	0x20002a18

0001b138 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   1b138:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   1b13a:	4b12      	ldr	r3, [pc, #72]	; (1b184 <nrfx_wdt_init+0x4c>)
{
   1b13c:	4615      	mov	r5, r2
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b13e:	7902      	ldrb	r2, [r0, #4]
    p_cb->wdt_event_handler = wdt_event_handler;
   1b140:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
   1b144:	6065      	str	r5, [r4, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   1b146:	f813 4032 	ldrb.w	r4, [r3, r2, lsl #3]
   1b14a:	b9cc      	cbnz	r4, 1b180 <nrfx_wdt_init+0x48>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1b14c:	2601      	movs	r6, #1
   1b14e:	f803 6032 	strb.w	r6, [r3, r2, lsl #3]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   1b152:	6804      	ldr	r4, [r0, #0]
    p_reg->CONFIG = behaviour;
   1b154:	780b      	ldrb	r3, [r1, #0]

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   1b156:	6849      	ldr	r1, [r1, #4]
   1b158:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
   1b15c:	03c8      	lsls	r0, r1, #15
   1b15e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b162:	2300      	movs	r3, #0
   1b164:	0c49      	lsrs	r1, r1, #17
   1b166:	f7e6 fc09 	bl	197c <__aeabi_uldivmod>
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   1b16a:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    NRFX_ASSERT(ticks <= UINT32_MAX);

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   1b16e:	b12d      	cbz	r5, 1b17c <nrfx_wdt_init+0x44>
    p_reg->INTENSET = mask;
   1b170:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1b174:	f344 3007 	sbfx	r0, r4, #12, #8
   1b178:	f7f8 f8a4 	bl	132c4 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1b17c:	4802      	ldr	r0, [pc, #8]	; (1b188 <nrfx_wdt_init+0x50>)
   1b17e:	e000      	b.n	1b182 <nrfx_wdt_init+0x4a>
        return err_code;
   1b180:	4802      	ldr	r0, [pc, #8]	; (1b18c <nrfx_wdt_init+0x54>)
}
   1b182:	bd70      	pop	{r4, r5, r6, pc}
   1b184:	20002a48 	.word	0x20002a48
   1b188:	0bad0000 	.word	0x0bad0000
   1b18c:	0bad0005 	.word	0x0bad0005

0001b190 <nrfx_wdt_enable>:
void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   1b190:	6803      	ldr	r3, [r0, #0]
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b192:	7902      	ldrb	r2, [r0, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   1b194:	2101      	movs	r1, #1
   1b196:	6019      	str	r1, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1b198:	4b02      	ldr	r3, [pc, #8]	; (1b1a4 <nrfx_wdt_enable+0x14>)
   1b19a:	2102      	movs	r1, #2
   1b19c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   1b1a0:	4770      	bx	lr
   1b1a2:	bf00      	nop
   1b1a4:	20002a48 	.word	0x20002a48

0001b1a8 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   1b1a8:	b510      	push	{r4, lr}
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b1aa:	7902      	ldrb	r2, [r0, #4]
	__asm__ volatile(
   1b1ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b1b0:	f3ef 8411 	mrs	r4, BASEPRI
   1b1b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1b8:	f3bf 8f6f 	isb	sy

    NRFX_ASSERT(p_channel_id);
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   1b1bc:	4b0c      	ldr	r3, [pc, #48]	; (1b1f0 <nrfx_wdt_channel_alloc+0x48>)
   1b1be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b1c2:	785a      	ldrb	r2, [r3, #1]
   1b1c4:	2a07      	cmp	r2, #7
   1b1c6:	d810      	bhi.n	1b1ea <nrfx_wdt_channel_alloc+0x42>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   1b1c8:	700a      	strb	r2, [r1, #0]
        p_cb->alloc_index++;
   1b1ca:	1c51      	adds	r1, r2, #1
   1b1cc:	7059      	strb	r1, [r3, #1]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   1b1ce:	6801      	ldr	r1, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   1b1d0:	2301      	movs	r3, #1
   1b1d2:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   1b1d6:	4093      	lsls	r3, r2
   1b1d8:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   1b1da:	4806      	ldr	r0, [pc, #24]	; (1b1f4 <nrfx_wdt_channel_alloc+0x4c>)
   1b1dc:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   1b1e0:	f384 8811 	msr	BASEPRI, r4
   1b1e4:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   1b1e8:	bd10      	pop	{r4, pc}
        result = NRFX_ERROR_NO_MEM;
   1b1ea:	4803      	ldr	r0, [pc, #12]	; (1b1f8 <nrfx_wdt_channel_alloc+0x50>)
   1b1ec:	e7f8      	b.n	1b1e0 <nrfx_wdt_channel_alloc+0x38>
   1b1ee:	bf00      	nop
   1b1f0:	20002a48 	.word	0x20002a48
   1b1f4:	0bad0000 	.word	0x0bad0000
   1b1f8:	0bad0002 	.word	0x0bad0002

0001b1fc <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   1b1fc:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   1b1fe:	4a03      	ldr	r2, [pc, #12]	; (1b20c <nrfx_wdt_channel_feed+0x10>)
   1b200:	f501 71c0 	add.w	r1, r1, #384	; 0x180
   1b204:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   1b208:	4770      	bx	lr
   1b20a:	bf00      	nop
   1b20c:	6e524635 	.word	0x6e524635

0001b210 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   1b210:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1b212:	4c05      	ldr	r4, [pc, #20]	; (1b228 <nrfx_wdt_0_irq_handler+0x18>)
   1b214:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   1b216:	b12b      	cbz	r3, 1b224 <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   1b218:	4b04      	ldr	r3, [pc, #16]	; (1b22c <nrfx_wdt_0_irq_handler+0x1c>)
   1b21a:	685b      	ldr	r3, [r3, #4]
   1b21c:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b21e:	2300      	movs	r3, #0
   1b220:	6023      	str	r3, [r4, #0]
   1b222:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   1b224:	bd10      	pop	{r4, pc}
   1b226:	bf00      	nop
   1b228:	40010100 	.word	0x40010100
   1b22c:	20002a48 	.word	0x20002a48

0001b230 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1b230:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1b232:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b236:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b238:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1b23a:	6002      	str	r2, [r0, #0]
}
   1b23c:	4802      	ldr	r0, [pc, #8]	; (1b248 <nrf_gpio_pin_port_decode+0x18>)
   1b23e:	bf18      	it	ne
   1b240:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1b244:	4770      	bx	lr
   1b246:	bf00      	nop
   1b248:	50000300 	.word	0x50000300

0001b24c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1b24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b24e:	460c      	mov	r4, r1
   1b250:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1b252:	f008 f909 	bl	23468 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1b256:	4608      	mov	r0, r1
   1b258:	f008 f906 	bl	23468 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b25c:	a801      	add	r0, sp, #4
   1b25e:	9601      	str	r6, [sp, #4]
   1b260:	f7ff ffe6 	bl	1b230 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b264:	9b01      	ldr	r3, [sp, #4]
   1b266:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b26a:	f240 610d 	movw	r1, #1549	; 0x60d
   1b26e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b272:	a801      	add	r0, sp, #4
   1b274:	9401      	str	r4, [sp, #4]
   1b276:	f7ff ffdb 	bl	1b230 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b27a:	9b01      	ldr	r3, [sp, #4]
   1b27c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1b280:	2509      	movs	r5, #9
   1b282:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1b286:	2004      	movs	r0, #4
   1b288:	f007 ff6f 	bl	2316a <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b28c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b28e:	a801      	add	r0, sp, #4
   1b290:	9401      	str	r4, [sp, #4]
   1b292:	f7ff ffcd 	bl	1b230 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b296:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1b298:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b29c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1b29e:	07db      	lsls	r3, r3, #31
   1b2a0:	d415      	bmi.n	1b2ce <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b2a2:	a801      	add	r0, sp, #4
   1b2a4:	9601      	str	r6, [sp, #4]
   1b2a6:	f7ff ffc3 	bl	1b230 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b2aa:	9b01      	ldr	r3, [sp, #4]
   1b2ac:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1b2b0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1b2b4:	2004      	movs	r0, #4
   1b2b6:	f007 ff58 	bl	2316a <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1b2ba:	4630      	mov	r0, r6
   1b2bc:	f008 f8d4 	bl	23468 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   1b2c0:	3d01      	subs	r5, #1
   1b2c2:	2004      	movs	r0, #4
   1b2c4:	f007 ff51 	bl	2316a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1b2c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1b2cc:	d1df      	bne.n	1b28e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b2ce:	a801      	add	r0, sp, #4
   1b2d0:	9401      	str	r4, [sp, #4]
   1b2d2:	f7ff ffad 	bl	1b230 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b2d6:	9a01      	ldr	r2, [sp, #4]
   1b2d8:	2301      	movs	r3, #1
   1b2da:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1b2dc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1b2e0:	2004      	movs	r0, #4
   1b2e2:	f007 ff42 	bl	2316a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1b2e6:	4620      	mov	r0, r4
   1b2e8:	f008 f8be 	bl	23468 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1b2ec:	2004      	movs	r0, #4
   1b2ee:	f007 ff3c 	bl	2316a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b2f2:	a801      	add	r0, sp, #4
   1b2f4:	9401      	str	r4, [sp, #4]
   1b2f6:	f7ff ff9b 	bl	1b230 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b2fa:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1b2fc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1b300:	4803      	ldr	r0, [pc, #12]	; (1b310 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b302:	40d3      	lsrs	r3, r2
   1b304:	f003 0301 	and.w	r3, r3, #1
   1b308:	1ac0      	subs	r0, r0, r3
   1b30a:	b003      	add	sp, #12
   1b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b30e:	bf00      	nop
   1b310:	0bad0001 	.word	0x0bad0001

0001b314 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b314:	4b0e      	ldr	r3, [pc, #56]	; (1b350 <z_sys_init_run_level+0x3c>)
{
   1b316:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b318:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b31c:	3001      	adds	r0, #1
   1b31e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1b322:	42a6      	cmp	r6, r4
   1b324:	d800      	bhi.n	1b328 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1b326:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1b328:	e9d4 3500 	ldrd	r3, r5, [r4]
   1b32c:	4628      	mov	r0, r5
   1b32e:	4798      	blx	r3
		if (dev != NULL) {
   1b330:	b165      	cbz	r5, 1b34c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1b332:	68eb      	ldr	r3, [r5, #12]
   1b334:	b130      	cbz	r0, 1b344 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1b336:	2800      	cmp	r0, #0
   1b338:	bfb8      	it	lt
   1b33a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1b33c:	28ff      	cmp	r0, #255	; 0xff
   1b33e:	bfa8      	it	ge
   1b340:	20ff      	movge	r0, #255	; 0xff
   1b342:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1b344:	785a      	ldrb	r2, [r3, #1]
   1b346:	f042 0201 	orr.w	r2, r2, #1
   1b34a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b34c:	3408      	adds	r4, #8
   1b34e:	e7e8      	b.n	1b322 <z_sys_init_run_level+0xe>
   1b350:	00024bb0 	.word	0x00024bb0

0001b354 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   1b354:	4a03      	ldr	r2, [pc, #12]	; (1b364 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   1b356:	4b04      	ldr	r3, [pc, #16]	; (1b368 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   1b358:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   1b35a:	1a9b      	subs	r3, r3, r2
}
   1b35c:	4803      	ldr	r0, [pc, #12]	; (1b36c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   1b35e:	109b      	asrs	r3, r3, #2
}
   1b360:	4358      	muls	r0, r3
   1b362:	4770      	bx	lr
   1b364:	000240dc 	.word	0x000240dc
   1b368:	00024248 	.word	0x00024248
   1b36c:	b6db6db7 	.word	0xb6db6db7

0001b370 <z_impl_device_get_binding>:
{
   1b370:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   1b372:	4605      	mov	r5, r0
   1b374:	b910      	cbnz	r0, 1b37c <z_impl_device_get_binding+0xc>
		return NULL;
   1b376:	2400      	movs	r4, #0
}
   1b378:	4620      	mov	r0, r4
   1b37a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1b37c:	7803      	ldrb	r3, [r0, #0]
   1b37e:	2b00      	cmp	r3, #0
   1b380:	d0f9      	beq.n	1b376 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b382:	4a0f      	ldr	r2, [pc, #60]	; (1b3c0 <z_impl_device_get_binding+0x50>)
   1b384:	4c0f      	ldr	r4, [pc, #60]	; (1b3c4 <z_impl_device_get_binding+0x54>)
   1b386:	4616      	mov	r6, r2
   1b388:	4294      	cmp	r4, r2
   1b38a:	d108      	bne.n	1b39e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b38c:	4c0d      	ldr	r4, [pc, #52]	; (1b3c4 <z_impl_device_get_binding+0x54>)
   1b38e:	42b4      	cmp	r4, r6
   1b390:	d0f1      	beq.n	1b376 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b392:	4620      	mov	r0, r4
   1b394:	f008 f876 	bl	23484 <z_device_ready>
   1b398:	b950      	cbnz	r0, 1b3b0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b39a:	341c      	adds	r4, #28
   1b39c:	e7f7      	b.n	1b38e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b39e:	4620      	mov	r0, r4
   1b3a0:	f008 f870 	bl	23484 <z_device_ready>
   1b3a4:	b110      	cbz	r0, 1b3ac <z_impl_device_get_binding+0x3c>
   1b3a6:	6823      	ldr	r3, [r4, #0]
   1b3a8:	42ab      	cmp	r3, r5
   1b3aa:	d0e5      	beq.n	1b378 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b3ac:	341c      	adds	r4, #28
   1b3ae:	e7eb      	b.n	1b388 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b3b0:	6821      	ldr	r1, [r4, #0]
   1b3b2:	4628      	mov	r0, r5
   1b3b4:	f004 fff4 	bl	203a0 <strcmp>
   1b3b8:	2800      	cmp	r0, #0
   1b3ba:	d1ee      	bne.n	1b39a <z_impl_device_get_binding+0x2a>
   1b3bc:	e7dc      	b.n	1b378 <z_impl_device_get_binding+0x8>
   1b3be:	bf00      	nop
   1b3c0:	00024248 	.word	0x00024248
   1b3c4:	000240dc 	.word	0x000240dc

0001b3c8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1b3c8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1b3ca:	2300      	movs	r3, #0
{
   1b3cc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1b3ce:	2201      	movs	r2, #1
   1b3d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b3d4:	220f      	movs	r2, #15
   1b3d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   1b3da:	4c0d      	ldr	r4, [pc, #52]	; (1b410 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1b3dc:	4a0d      	ldr	r2, [pc, #52]	; (1b414 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1b3de:	9301      	str	r3, [sp, #4]
   1b3e0:	490d      	ldr	r1, [pc, #52]	; (1b418 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1b3e2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   1b3e4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1b3e8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1b3ec:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1b3f0:	9300      	str	r3, [sp, #0]
   1b3f2:	fb05 1100 	mla	r1, r5, r0, r1
   1b3f6:	4b09      	ldr	r3, [pc, #36]	; (1b41c <init_idle_thread+0x54>)
   1b3f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b3fc:	4620      	mov	r0, r4
   1b3fe:	f000 f90b 	bl	1b618 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b402:	7b63      	ldrb	r3, [r4, #13]
   1b404:	f023 0304 	bic.w	r3, r3, #4
   1b408:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1b40a:	b007      	add	sp, #28
   1b40c:	bd30      	pop	{r4, r5, pc}
   1b40e:	bf00      	nop
   1b410:	20001f80 	.word	0x20001f80
   1b414:	20002a50 	.word	0x20002a50
   1b418:	20005ce0 	.word	0x20005ce0
   1b41c:	0001b791 	.word	0x0001b791

0001b420 <bg_thread_main>:
{
   1b420:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1b422:	4b0a      	ldr	r3, [pc, #40]	; (1b44c <bg_thread_main+0x2c>)
   1b424:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b426:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1b428:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b42a:	f7ff ff73 	bl	1b314 <z_sys_init_run_level>
	boot_banner();
   1b42e:	f008 fded 	bl	2400c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b432:	2003      	movs	r0, #3
   1b434:	f7ff ff6e 	bl	1b314 <z_sys_init_run_level>
	z_init_static_threads();
   1b438:	f000 f94c 	bl	1b6d4 <z_init_static_threads>
	main();
   1b43c:	f008 fde4 	bl	24008 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b440:	4a03      	ldr	r2, [pc, #12]	; (1b450 <bg_thread_main+0x30>)
   1b442:	7b13      	ldrb	r3, [r2, #12]
   1b444:	f023 0301 	bic.w	r3, r3, #1
   1b448:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b44a:	bd08      	pop	{r3, pc}
   1b44c:	20003b40 	.word	0x20003b40
   1b450:	20002000 	.word	0x20002000

0001b454 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b454:	4802      	ldr	r0, [pc, #8]	; (1b460 <z_bss_zero+0xc>)
   1b456:	4a03      	ldr	r2, [pc, #12]	; (1b464 <z_bss_zero+0x10>)
   1b458:	2100      	movs	r1, #0
   1b45a:	1a12      	subs	r2, r2, r0
   1b45c:	f004 bfde 	b.w	2041c <memset>
   1b460:	20000cc8 	.word	0x20000cc8
   1b464:	20003d00 	.word	0x20003d00

0001b468 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1b468:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b46a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1b548 <z_cstart+0xe0>
   1b46e:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b470:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b474:	4d2e      	ldr	r5, [pc, #184]	; (1b530 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b476:	4e2f      	ldr	r6, [pc, #188]	; (1b534 <z_cstart+0xcc>)
   1b478:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b47a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1b54c <z_cstart+0xe4>
   1b47e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b482:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b484:	23e0      	movs	r3, #224	; 0xe0
   1b486:	2400      	movs	r4, #0
   1b488:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b48c:	2320      	movs	r3, #32
   1b48e:	77eb      	strb	r3, [r5, #31]
   1b490:	762c      	strb	r4, [r5, #24]
   1b492:	766c      	strb	r4, [r5, #25]
   1b494:	76ac      	strb	r4, [r5, #26]
   1b496:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b49c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b4a0:	626b      	str	r3, [r5, #36]	; 0x24
   1b4a2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b4a6:	f7f8 f93f 	bl	13728 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b4aa:	f7f7 feed 	bl	13288 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b4ae:	f04f 33ff 	mov.w	r3, #4294967295
   1b4b2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b4b4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1b4b6:	f7f8 fa61 	bl	1397c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1b4ba:	f7f8 f9d1 	bl	13860 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b4be:	f240 1301 	movw	r3, #257	; 0x101
   1b4c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1b4c6:	ab06      	add	r3, sp, #24
   1b4c8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1b4ca:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b4ce:	f007 ffd8 	bl	23482 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b4d2:	4620      	mov	r0, r4
   1b4d4:	f7ff ff1e 	bl	1b314 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b4d8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1b4da:	4d17      	ldr	r5, [pc, #92]	; (1b538 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b4dc:	f7ff ff1a 	bl	1b314 <z_sys_init_run_level>
	z_sched_init();
   1b4e0:	f000 fef0 	bl	1c2c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b4e4:	4b15      	ldr	r3, [pc, #84]	; (1b53c <z_cstart+0xd4>)
   1b4e6:	9305      	str	r3, [sp, #20]
   1b4e8:	2301      	movs	r3, #1
   1b4ea:	4915      	ldr	r1, [pc, #84]	; (1b540 <z_cstart+0xd8>)
   1b4ec:	9400      	str	r4, [sp, #0]
   1b4ee:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1b4f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b4f6:	464b      	mov	r3, r9
   1b4f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b4fc:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1b4fe:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b500:	f000 f88a 	bl	1b618 <z_setup_new_thread>
   1b504:	7b6a      	ldrb	r2, [r5, #13]
   1b506:	f022 0204 	bic.w	r2, r2, #4
   1b50a:	736a      	strb	r2, [r5, #13]
   1b50c:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   1b50e:	4628      	mov	r0, r5
   1b510:	f008 fabb 	bl	23a8a <z_ready_thread>
		init_idle_thread(i);
   1b514:	4620      	mov	r0, r4
   1b516:	f7ff ff57 	bl	1b3c8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b51a:	4b0a      	ldr	r3, [pc, #40]	; (1b544 <z_cstart+0xdc>)
   1b51c:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b51e:	464a      	mov	r2, r9
   1b520:	4639      	mov	r1, r7
   1b522:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1b524:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1b526:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b52a:	f7f7 ffcf 	bl	134cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b52e:	bf00      	nop
   1b530:	e000ed00 	.word	0xe000ed00
   1b534:	20002a50 	.word	0x20002a50
   1b538:	20002000 	.word	0x20002000
   1b53c:	0002510a 	.word	0x0002510a
   1b540:	200054c0 	.word	0x200054c0
   1b544:	20001f80 	.word	0x20001f80
   1b548:	20006660 	.word	0x20006660
   1b54c:	0001b421 	.word	0x0001b421

0001b550 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1b550:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b552:	4c06      	ldr	r4, [pc, #24]	; (1b56c <statics_init+0x1c>)
   1b554:	4d06      	ldr	r5, [pc, #24]	; (1b570 <statics_init+0x20>)
   1b556:	42ac      	cmp	r4, r5
   1b558:	d301      	bcc.n	1b55e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1b55a:	2000      	movs	r0, #0
   1b55c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b55e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1b562:	4620      	mov	r0, r4
   1b564:	f007 ffb3 	bl	234ce <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1b568:	3414      	adds	r4, #20
   1b56a:	e7f4      	b.n	1b556 <statics_init+0x6>
   1b56c:	20000ae8 	.word	0x20000ae8
   1b570:	20000afc 	.word	0x20000afc

0001b574 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1b574:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b576:	4b0e      	ldr	r3, [pc, #56]	; (1b5b0 <init_mem_slab_module+0x3c>)
   1b578:	4c0e      	ldr	r4, [pc, #56]	; (1b5b4 <init_mem_slab_module+0x40>)
   1b57a:	42a3      	cmp	r3, r4
   1b57c:	d301      	bcc.n	1b582 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1b57e:	2000      	movs	r0, #0
	return rc;
}
   1b580:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b582:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1b586:	ea41 0200 	orr.w	r2, r1, r0
   1b58a:	f012 0203 	ands.w	r2, r2, #3
   1b58e:	d10b      	bne.n	1b5a8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1b590:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b592:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b594:	42aa      	cmp	r2, r5
   1b596:	d101      	bne.n	1b59c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b598:	331c      	adds	r3, #28
   1b59a:	e7ee      	b.n	1b57a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1b59c:	695e      	ldr	r6, [r3, #20]
   1b59e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b5a0:	3201      	adds	r2, #1
		slab->free_list = p;
   1b5a2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1b5a4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1b5a6:	e7f5      	b.n	1b594 <init_mem_slab_module+0x20>
		return -EINVAL;
   1b5a8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b5ac:	e7e8      	b.n	1b580 <init_mem_slab_module+0xc>
   1b5ae:	bf00      	nop
   1b5b0:	20000a94 	.word	0x20000a94
   1b5b4:	20000ae8 	.word	0x20000ae8

0001b5b8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b5b8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1b5ba:	460c      	mov	r4, r1
   1b5bc:	4616      	mov	r6, r2
   1b5be:	461f      	mov	r7, r3
	__asm__ volatile(
   1b5c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5c4:	f3ef 8111 	mrs	r1, BASEPRI
   1b5c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1b5d0:	6943      	ldr	r3, [r0, #20]
   1b5d2:	b15b      	cbz	r3, 1b5ec <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1b5d4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b5d6:	681b      	ldr	r3, [r3, #0]
   1b5d8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b5da:	6983      	ldr	r3, [r0, #24]
   1b5dc:	3301      	adds	r3, #1
   1b5de:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b5e0:	2000      	movs	r0, #0
	__asm__ volatile(
   1b5e2:	f381 8811 	msr	BASEPRI, r1
   1b5e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1b5ea:	e011      	b.n	1b610 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1b5ec:	ea56 0207 	orrs.w	r2, r6, r7
   1b5f0:	d103      	bne.n	1b5fa <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1b5f2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b5f4:	f06f 000b 	mvn.w	r0, #11
   1b5f8:	e7f3      	b.n	1b5e2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1b5fa:	4602      	mov	r2, r0
   1b5fc:	e9cd 6700 	strd	r6, r7, [sp]
   1b600:	3008      	adds	r0, #8
   1b602:	f000 fdb1 	bl	1c168 <z_pend_curr>
		if (result == 0) {
   1b606:	b918      	cbnz	r0, 1b610 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1b608:	4b02      	ldr	r3, [pc, #8]	; (1b614 <k_mem_slab_alloc+0x5c>)
   1b60a:	689b      	ldr	r3, [r3, #8]
   1b60c:	695b      	ldr	r3, [r3, #20]
   1b60e:	6023      	str	r3, [r4, #0]
}
   1b610:	b002      	add	sp, #8
   1b612:	bdd0      	pop	{r4, r6, r7, pc}
   1b614:	20002a50 	.word	0x20002a50

0001b618 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b618:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1b61c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1b61e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1b620:	2604      	movs	r6, #4
   1b622:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1b624:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1b626:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b628:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1b62c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b62e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1b630:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1b636:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b638:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1b63c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1b63e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1b642:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1b646:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1b648:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1b64a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1b64c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b650:	9202      	str	r2, [sp, #8]
   1b652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b654:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1b656:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b65a:	9200      	str	r2, [sp, #0]
   1b65c:	4642      	mov	r2, r8
{
   1b65e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b660:	f7f7 fefe 	bl	13460 <arch_new_thread>
	if (!_current) {
   1b664:	4b04      	ldr	r3, [pc, #16]	; (1b678 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1b666:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1b668:	689b      	ldr	r3, [r3, #8]
   1b66a:	b103      	cbz	r3, 1b66e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1b66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1b66e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1b670:	4640      	mov	r0, r8
   1b672:	b004      	add	sp, #16
   1b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b678:	20002a50 	.word	0x20002a50

0001b67c <z_impl_k_thread_create>:
{
   1b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b67e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b680:	2500      	movs	r5, #0
   1b682:	9505      	str	r5, [sp, #20]
   1b684:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1b686:	9504      	str	r5, [sp, #16]
   1b688:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1b68a:	9503      	str	r5, [sp, #12]
   1b68c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b68e:	9502      	str	r5, [sp, #8]
{
   1b690:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b694:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b696:	9501      	str	r5, [sp, #4]
   1b698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1b69a:	9500      	str	r5, [sp, #0]
{
   1b69c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1b69e:	f7ff ffbb 	bl	1b618 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1b6a2:	1c7b      	adds	r3, r7, #1
   1b6a4:	bf08      	it	eq
   1b6a6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b6aa:	d005      	beq.n	1b6b8 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b6ac:	ea56 0307 	orrs.w	r3, r6, r7
   1b6b0:	d105      	bne.n	1b6be <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1b6b2:	4620      	mov	r0, r4
   1b6b4:	f000 fcfc 	bl	1c0b0 <z_sched_start>
}
   1b6b8:	4620      	mov	r0, r4
   1b6ba:	b007      	add	sp, #28
   1b6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b6be:	4904      	ldr	r1, [pc, #16]	; (1b6d0 <z_impl_k_thread_create+0x54>)
   1b6c0:	4632      	mov	r2, r6
   1b6c2:	463b      	mov	r3, r7
   1b6c4:	f104 0018 	add.w	r0, r4, #24
   1b6c8:	f000 ff94 	bl	1c5f4 <z_add_timeout>
   1b6cc:	e7f4      	b.n	1b6b8 <z_impl_k_thread_create+0x3c>
   1b6ce:	bf00      	nop
   1b6d0:	00023aab 	.word	0x00023aab

0001b6d4 <z_init_static_threads>:
{
   1b6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1b6d8:	4e2a      	ldr	r6, [pc, #168]	; (1b784 <z_init_static_threads+0xb0>)
   1b6da:	4d2b      	ldr	r5, [pc, #172]	; (1b788 <z_init_static_threads+0xb4>)
{
   1b6dc:	b086      	sub	sp, #24
   1b6de:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1b6e0:	42b5      	cmp	r5, r6
   1b6e2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1b6e6:	d310      	bcc.n	1b70a <z_init_static_threads+0x36>
	k_sched_lock();
   1b6e8:	f000 fbf6 	bl	1bed8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b6ec:	4c26      	ldr	r4, [pc, #152]	; (1b788 <z_init_static_threads+0xb4>)
   1b6ee:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1b78c <z_init_static_threads+0xb8>
   1b6f2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1b6f6:	f240 36e7 	movw	r6, #999	; 0x3e7
   1b6fa:	2700      	movs	r7, #0
   1b6fc:	4544      	cmp	r4, r8
   1b6fe:	d321      	bcc.n	1b744 <z_init_static_threads+0x70>
}
   1b700:	b006      	add	sp, #24
   1b702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1b706:	f000 bdc1 	b.w	1c28c <k_sched_unlock>
		z_setup_new_thread(
   1b70a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b70e:	9305      	str	r3, [sp, #20]
   1b710:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1b714:	9304      	str	r3, [sp, #16]
   1b716:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1b71a:	9303      	str	r3, [sp, #12]
   1b71c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1b720:	9302      	str	r3, [sp, #8]
   1b722:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1b726:	9301      	str	r3, [sp, #4]
   1b728:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1b72c:	9300      	str	r3, [sp, #0]
   1b72e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1b732:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1b736:	f7ff ff6f 	bl	1b618 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1b73a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1b73e:	655d      	str	r5, [r3, #84]	; 0x54
   1b740:	4625      	mov	r5, r4
   1b742:	e7cd      	b.n	1b6e0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b744:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b746:	1c5a      	adds	r2, r3, #1
   1b748:	d00d      	beq.n	1b766 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1b74a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b74e:	4630      	mov	r0, r6
   1b750:	4639      	mov	r1, r7
   1b752:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b756:	42b9      	cmp	r1, r7
   1b758:	bf08      	it	eq
   1b75a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1b75c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b75e:	d104      	bne.n	1b76a <z_init_static_threads+0x96>
	z_sched_start(thread);
   1b760:	4628      	mov	r0, r5
   1b762:	f000 fca5 	bl	1c0b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b766:	3430      	adds	r4, #48	; 0x30
   1b768:	e7c8      	b.n	1b6fc <z_init_static_threads+0x28>
   1b76a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b76e:	2300      	movs	r3, #0
   1b770:	f7e6 f904 	bl	197c <__aeabi_uldivmod>
   1b774:	4602      	mov	r2, r0
   1b776:	460b      	mov	r3, r1
   1b778:	f105 0018 	add.w	r0, r5, #24
   1b77c:	4651      	mov	r1, sl
   1b77e:	f000 ff39 	bl	1c5f4 <z_add_timeout>
   1b782:	e7f0      	b.n	1b766 <z_init_static_threads+0x92>
   1b784:	20000a94 	.word	0x20000a94
   1b788:	20000a34 	.word	0x20000a34
   1b78c:	00023aab 	.word	0x00023aab

0001b790 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1b790:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1b792:	4c09      	ldr	r4, [pc, #36]	; (1b7b8 <idle+0x28>)
	__asm__ volatile(
   1b794:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b798:	f3ef 8311 	mrs	r3, BASEPRI
   1b79c:	f382 8812 	msr	BASEPRI_MAX, r2
   1b7a0:	f3bf 8f6f 	isb	sy
   1b7a4:	f008 fa40 	bl	23c28 <z_get_next_timeout_expiry>
   1b7a8:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1b7aa:	f7f7 faf5 	bl	12d98 <pm_system_suspend>
   1b7ae:	2800      	cmp	r0, #0
   1b7b0:	d1f0      	bne.n	1b794 <idle+0x4>
	arch_cpu_idle();
   1b7b2:	f7f7 fd6f 	bl	13294 <arch_cpu_idle>
}
   1b7b6:	e7ed      	b.n	1b794 <idle+0x4>
   1b7b8:	20002a50 	.word	0x20002a50

0001b7bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b7bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b7c0:	4604      	mov	r4, r0
   1b7c2:	4616      	mov	r6, r2
   1b7c4:	461f      	mov	r7, r3
   1b7c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7ca:	f3ef 8811 	mrs	r8, BASEPRI
   1b7ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b7d6:	68c3      	ldr	r3, [r0, #12]
   1b7d8:	4a35      	ldr	r2, [pc, #212]	; (1b8b0 <z_impl_k_mutex_lock+0xf4>)
   1b7da:	b16b      	cbz	r3, 1b7f8 <z_impl_k_mutex_lock+0x3c>
   1b7dc:	6880      	ldr	r0, [r0, #8]
   1b7de:	6891      	ldr	r1, [r2, #8]
   1b7e0:	4288      	cmp	r0, r1
   1b7e2:	d019      	beq.n	1b818 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b7e4:	ea56 0307 	orrs.w	r3, r6, r7
   1b7e8:	d118      	bne.n	1b81c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b7ea:	f388 8811 	msr	BASEPRI, r8
   1b7ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1b7f2:	f06f 000f 	mvn.w	r0, #15
   1b7f6:	e00c      	b.n	1b812 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b7f8:	6891      	ldr	r1, [r2, #8]
   1b7fa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b7fe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b800:	3301      	adds	r3, #1
   1b802:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b804:	6893      	ldr	r3, [r2, #8]
   1b806:	60a3      	str	r3, [r4, #8]
   1b808:	f388 8811 	msr	BASEPRI, r8
   1b80c:	f3bf 8f6f 	isb	sy
		return 0;
   1b810:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b812:	b002      	add	sp, #8
   1b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b818:	6921      	ldr	r1, [r4, #16]
   1b81a:	e7f0      	b.n	1b7fe <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b81c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b820:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1b824:	4299      	cmp	r1, r3
   1b826:	bfa8      	it	ge
   1b828:	4619      	movge	r1, r3
   1b82a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1b82e:	4291      	cmp	r1, r2
   1b830:	bfb8      	it	lt
   1b832:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b834:	428b      	cmp	r3, r1
   1b836:	dd2f      	ble.n	1b898 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1b838:	f000 fcaa 	bl	1c190 <z_set_prio>
   1b83c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b83e:	e9cd 6700 	strd	r6, r7, [sp]
   1b842:	481c      	ldr	r0, [pc, #112]	; (1b8b4 <z_impl_k_mutex_lock+0xf8>)
   1b844:	4622      	mov	r2, r4
   1b846:	4641      	mov	r1, r8
   1b848:	f000 fc8e 	bl	1c168 <z_pend_curr>
	if (got_mutex == 0) {
   1b84c:	2800      	cmp	r0, #0
   1b84e:	d0e0      	beq.n	1b812 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b850:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b854:	f3ef 8611 	mrs	r6, BASEPRI
   1b858:	f383 8812 	msr	BASEPRI_MAX, r3
   1b85c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b860:	6823      	ldr	r3, [r4, #0]
   1b862:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b864:	429c      	cmp	r4, r3
   1b866:	d00a      	beq.n	1b87e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b868:	b14b      	cbz	r3, 1b87e <z_impl_k_mutex_lock+0xc2>
   1b86a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b86e:	4299      	cmp	r1, r3
   1b870:	bfa8      	it	ge
   1b872:	4619      	movge	r1, r3
   1b874:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1b878:	4299      	cmp	r1, r3
   1b87a:	bfb8      	it	lt
   1b87c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b87e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b880:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b884:	4299      	cmp	r1, r3
   1b886:	d109      	bne.n	1b89c <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   1b888:	b16d      	cbz	r5, 1b8a6 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   1b88a:	480a      	ldr	r0, [pc, #40]	; (1b8b4 <z_impl_k_mutex_lock+0xf8>)
   1b88c:	4631      	mov	r1, r6
   1b88e:	f000 fb11 	bl	1beb4 <z_reschedule>
	return -EAGAIN;
   1b892:	f06f 000a 	mvn.w	r0, #10
   1b896:	e7bc      	b.n	1b812 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1b898:	2500      	movs	r5, #0
   1b89a:	e7d0      	b.n	1b83e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   1b89c:	f000 fc78 	bl	1c190 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b8a0:	2800      	cmp	r0, #0
   1b8a2:	d1f2      	bne.n	1b88a <z_impl_k_mutex_lock+0xce>
   1b8a4:	e7f0      	b.n	1b888 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1b8a6:	f386 8811 	msr	BASEPRI, r6
   1b8aa:	f3bf 8f6f 	isb	sy
   1b8ae:	e7f0      	b.n	1b892 <z_impl_k_mutex_lock+0xd6>
   1b8b0:	20002a50 	.word	0x20002a50
   1b8b4:	20003b41 	.word	0x20003b41

0001b8b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b8b8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1b8ba:	6883      	ldr	r3, [r0, #8]
{
   1b8bc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b8be:	2b00      	cmp	r3, #0
   1b8c0:	d036      	beq.n	1b930 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b8c2:	4a1e      	ldr	r2, [pc, #120]	; (1b93c <z_impl_k_mutex_unlock+0x84>)
   1b8c4:	6892      	ldr	r2, [r2, #8]
   1b8c6:	4293      	cmp	r3, r2
   1b8c8:	d135      	bne.n	1b936 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1b8ca:	7bda      	ldrb	r2, [r3, #15]
   1b8cc:	3a01      	subs	r2, #1
   1b8ce:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1b8d0:	68c3      	ldr	r3, [r0, #12]
   1b8d2:	2b01      	cmp	r3, #1
   1b8d4:	d905      	bls.n	1b8e2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b8d6:	3b01      	subs	r3, #1
   1b8d8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1b8da:	f000 fcd7 	bl	1c28c <k_sched_unlock>

	return 0;
   1b8de:	2000      	movs	r0, #0
}
   1b8e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b8e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8e6:	f3ef 8511 	mrs	r5, BASEPRI
   1b8ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8ee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b8f2:	6901      	ldr	r1, [r0, #16]
   1b8f4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b8f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b8fa:	4299      	cmp	r1, r3
   1b8fc:	d001      	beq.n	1b902 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1b8fe:	f000 fc47 	bl	1c190 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b902:	4620      	mov	r0, r4
   1b904:	f008 f935 	bl	23b72 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b908:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b90a:	b158      	cbz	r0, 1b924 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b90c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b910:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b912:	2200      	movs	r2, #0
   1b914:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b916:	f008 f8b8 	bl	23a8a <z_ready_thread>
		z_reschedule(&lock, key);
   1b91a:	4809      	ldr	r0, [pc, #36]	; (1b940 <z_impl_k_mutex_unlock+0x88>)
   1b91c:	4629      	mov	r1, r5
   1b91e:	f000 fac9 	bl	1beb4 <z_reschedule>
   1b922:	e7da      	b.n	1b8da <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b924:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b926:	f385 8811 	msr	BASEPRI, r5
   1b92a:	f3bf 8f6f 	isb	sy
   1b92e:	e7d4      	b.n	1b8da <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b930:	f06f 0015 	mvn.w	r0, #21
   1b934:	e7d4      	b.n	1b8e0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b936:	f04f 30ff 	mov.w	r0, #4294967295
   1b93a:	e7d1      	b.n	1b8e0 <z_impl_k_mutex_unlock+0x28>
   1b93c:	20002a50 	.word	0x20002a50
   1b940:	20003b41 	.word	0x20003b41

0001b944 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b946:	4616      	mov	r6, r2
   1b948:	461f      	mov	r7, r3
	__asm__ volatile(
   1b94a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b94e:	f3ef 8511 	mrs	r5, BASEPRI
   1b952:	f383 8812 	msr	BASEPRI_MAX, r3
   1b956:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1b95a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b95c:	b19c      	cbz	r4, 1b986 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b95e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b960:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b962:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b966:	4294      	cmp	r4, r2
	list->head = node;
   1b968:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b96a:	bf08      	it	eq
   1b96c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b96e:	2101      	movs	r1, #1
   1b970:	4620      	mov	r0, r4
   1b972:	f007 fed9 	bl	23728 <z_queue_node_peek>
   1b976:	4604      	mov	r4, r0
	__asm__ volatile(
   1b978:	f385 8811 	msr	BASEPRI, r5
   1b97c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b980:	4620      	mov	r0, r4
   1b982:	b003      	add	sp, #12
   1b984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b986:	ea56 0307 	orrs.w	r3, r6, r7
   1b98a:	d0f5      	beq.n	1b978 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b98c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b990:	e9cd 6700 	strd	r6, r7, [sp]
   1b994:	4629      	mov	r1, r5
   1b996:	4610      	mov	r0, r2
   1b998:	f000 fbe6 	bl	1c168 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b99c:	2800      	cmp	r0, #0
   1b99e:	d1ef      	bne.n	1b980 <z_impl_k_queue_get+0x3c>
   1b9a0:	4b01      	ldr	r3, [pc, #4]	; (1b9a8 <z_impl_k_queue_get+0x64>)
   1b9a2:	689b      	ldr	r3, [r3, #8]
   1b9a4:	695c      	ldr	r4, [r3, #20]
   1b9a6:	e7eb      	b.n	1b980 <z_impl_k_queue_get+0x3c>
   1b9a8:	20002a50 	.word	0x20002a50

0001b9ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b9ac:	b538      	push	{r3, r4, r5, lr}
   1b9ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9b4:	f3ef 8511 	mrs	r5, BASEPRI
   1b9b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b9c0:	f008 f8d7 	bl	23b72 <z_unpend_first_thread>

	if (thread != NULL) {
   1b9c4:	b148      	cbz	r0, 1b9da <z_impl_k_sem_give+0x2e>
   1b9c6:	2200      	movs	r2, #0
   1b9c8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b9ca:	f008 f85e 	bl	23a8a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b9ce:	4629      	mov	r1, r5
   1b9d0:	4808      	ldr	r0, [pc, #32]	; (1b9f4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1b9d6:	f000 ba6d 	b.w	1beb4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b9da:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1b9de:	429a      	cmp	r2, r3
   1b9e0:	bf18      	it	ne
   1b9e2:	3301      	addne	r3, #1
   1b9e4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b9e6:	2102      	movs	r1, #2
   1b9e8:	f104 0010 	add.w	r0, r4, #16
   1b9ec:	f008 fae4 	bl	23fb8 <z_handle_obj_poll_events>
}
   1b9f0:	e7ed      	b.n	1b9ce <z_impl_k_sem_give+0x22>
   1b9f2:	bf00      	nop
   1b9f4:	20003b41 	.word	0x20003b41

0001b9f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b9fa:	4614      	mov	r4, r2
   1b9fc:	461d      	mov	r5, r3
   1b9fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba02:	f3ef 8111 	mrs	r1, BASEPRI
   1ba06:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1ba0e:	6883      	ldr	r3, [r0, #8]
   1ba10:	b143      	cbz	r3, 1ba24 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1ba12:	3b01      	subs	r3, #1
   1ba14:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1ba16:	f381 8811 	msr	BASEPRI, r1
   1ba1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1ba1e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1ba20:	b003      	add	sp, #12
   1ba22:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ba24:	ea54 0305 	orrs.w	r3, r4, r5
   1ba28:	d106      	bne.n	1ba38 <z_impl_k_sem_take+0x40>
   1ba2a:	f381 8811 	msr	BASEPRI, r1
   1ba2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1ba32:	f06f 000f 	mvn.w	r0, #15
   1ba36:	e7f3      	b.n	1ba20 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1ba38:	4602      	mov	r2, r0
   1ba3a:	e9cd 4500 	strd	r4, r5, [sp]
   1ba3e:	4802      	ldr	r0, [pc, #8]	; (1ba48 <z_impl_k_sem_take+0x50>)
   1ba40:	f000 fb92 	bl	1c168 <z_pend_curr>
	return ret;
   1ba44:	e7ec      	b.n	1ba20 <z_impl_k_sem_take+0x28>
   1ba46:	bf00      	nop
   1ba48:	20003b41 	.word	0x20003b41

0001ba4c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   1ba4c:	b570      	push	{r4, r5, r6, lr}
   1ba4e:	4604      	mov	r4, r0
	__asm__ volatile(
   1ba50:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba54:	f3ef 8511 	mrs	r5, BASEPRI
   1ba58:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba5c:	f3bf 8f6f 	isb	sy
   1ba60:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   1ba64:	4620      	mov	r0, r4
   1ba66:	f008 f884 	bl	23b72 <z_unpend_first_thread>
		if (thread == NULL) {
   1ba6a:	b118      	cbz	r0, 1ba74 <z_impl_k_sem_reset+0x28>
   1ba6c:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   1ba6e:	f008 f80c 	bl	23a8a <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   1ba72:	e7f7      	b.n	1ba64 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   1ba74:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ba76:	2102      	movs	r1, #2
   1ba78:	f104 0010 	add.w	r0, r4, #16
   1ba7c:	f008 fa9c 	bl	23fb8 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   1ba80:	4629      	mov	r1, r5
   1ba82:	4802      	ldr	r0, [pc, #8]	; (1ba8c <z_impl_k_sem_reset+0x40>)
}
   1ba84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   1ba88:	f000 ba14 	b.w	1beb4 <z_reschedule>
   1ba8c:	20003b41 	.word	0x20003b41

0001ba90 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1ba90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1ba92:	4b09      	ldr	r3, [pc, #36]	; (1bab8 <k_sys_work_q_init+0x28>)
   1ba94:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1ba96:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1ba98:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1ba9a:	9300      	str	r3, [sp, #0]
   1ba9c:	4907      	ldr	r1, [pc, #28]	; (1babc <k_sys_work_q_init+0x2c>)
   1ba9e:	4808      	ldr	r0, [pc, #32]	; (1bac0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1baa0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1baa4:	f04f 33ff 	mov.w	r3, #4294967295
   1baa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1baac:	f000 f91c 	bl	1bce8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1bab0:	4620      	mov	r0, r4
   1bab2:	b004      	add	sp, #16
   1bab4:	bd10      	pop	{r4, pc}
   1bab6:	bf00      	nop
   1bab8:	0002510f 	.word	0x0002510f
   1babc:	20006660 	.word	0x20006660
   1bac0:	20002080 	.word	0x20002080

0001bac4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bac8:	4e4b      	ldr	r6, [pc, #300]	; (1bbf8 <work_queue_main+0x134>)
{
   1baca:	b085      	sub	sp, #20
   1bacc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1bace:	f04f 38ff 	mov.w	r8, #4294967295
   1bad2:	f04f 39ff 	mov.w	r9, #4294967295
   1bad6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bada:	f3ef 8711 	mrs	r7, BASEPRI
   1bade:	f383 8812 	msr	BASEPRI_MAX, r3
   1bae2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1bae6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1baea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1baee:	b985      	cbnz	r5, 1bb12 <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1baf0:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1baf4:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1baf6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1bafa:	d433      	bmi.n	1bb64 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1bafc:	2300      	movs	r3, #0
   1bafe:	e9cd 8900 	strd	r8, r9, [sp]
   1bb02:	9302      	str	r3, [sp, #8]
   1bb04:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1bb08:	4639      	mov	r1, r7
   1bb0a:	483c      	ldr	r0, [pc, #240]	; (1bbfc <work_queue_main+0x138>)
   1bb0c:	f000 fcf6 	bl	1c4fc <z_sched_wait>
			continue;
   1bb10:	e7e1      	b.n	1bad6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bb12:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1bb16:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1bb18:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bb1c:	4295      	cmp	r5, r2
   1bb1e:	d101      	bne.n	1bb24 <work_queue_main+0x60>
	list->tail = node;
   1bb20:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1bb24:	f043 0302 	orr.w	r3, r3, #2
   1bb28:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1bb2c:	68eb      	ldr	r3, [r5, #12]
   1bb2e:	f023 0304 	bic.w	r3, r3, #4
   1bb32:	f043 0301 	orr.w	r3, r3, #1
   1bb36:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1bb38:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1bb3a:	f387 8811 	msr	BASEPRI, r7
   1bb3e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1bb42:	4628      	mov	r0, r5
   1bb44:	4798      	blx	r3
	__asm__ volatile(
   1bb46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb4a:	f3ef 8b11 	mrs	fp, BASEPRI
   1bb4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb52:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1bb56:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bb58:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1bb5a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bb5e:	d40b      	bmi.n	1bb78 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1bb60:	60ea      	str	r2, [r5, #12]
   1bb62:	e00e      	b.n	1bb82 <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1bb64:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1bb68:	2200      	movs	r2, #0
   1bb6a:	2101      	movs	r1, #1
   1bb6c:	4628      	mov	r0, r5
   1bb6e:	f008 f828 	bl	23bc2 <z_sched_wake>
   1bb72:	2800      	cmp	r0, #0
   1bb74:	d1f8      	bne.n	1bb68 <work_queue_main+0xa4>
   1bb76:	e7c1      	b.n	1bafc <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bb78:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1bb7a:	f023 0303 	bic.w	r3, r3, #3
   1bb7e:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bb80:	b970      	cbnz	r0, 1bba0 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1bb82:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1bb86:	f023 0302 	bic.w	r3, r3, #2
   1bb8a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1bb8e:	f38b 8811 	msr	BASEPRI, fp
   1bb92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1bb96:	05d8      	lsls	r0, r3, #23
   1bb98:	d49d      	bmi.n	1bad6 <work_queue_main+0x12>
	z_impl_k_yield();
   1bb9a:	f000 fb9f 	bl	1c2dc <z_impl_k_yield>
}
   1bb9e:	e79a      	b.n	1bad6 <work_queue_main+0x12>
	return node->next;
   1bba0:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bba2:	f04f 0a00 	mov.w	sl, #0
   1bba6:	2f00      	cmp	r7, #0
   1bba8:	bf38      	it	cc
   1bbaa:	2700      	movcc	r7, #0
	parent->next = child;
   1bbac:	4653      	mov	r3, sl
		if (wc->work == work) {
   1bbae:	6842      	ldr	r2, [r0, #4]
   1bbb0:	4295      	cmp	r5, r2
   1bbb2:	4601      	mov	r1, r0
   1bbb4:	d10e      	bne.n	1bbd4 <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1bbb6:	6801      	ldr	r1, [r0, #0]
   1bbb8:	f1ba 0f00 	cmp.w	sl, #0
   1bbbc:	d114      	bne.n	1bbe8 <work_queue_main+0x124>
   1bbbe:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1bbc0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bbc2:	4290      	cmp	r0, r2
   1bbc4:	d100      	bne.n	1bbc8 <work_queue_main+0x104>
	list->tail = node;
   1bbc6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1bbc8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1bbcc:	f7ff feee 	bl	1b9ac <z_impl_k_sem_give>
}
   1bbd0:	4651      	mov	r1, sl
   1bbd2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bbd4:	2f00      	cmp	r7, #0
   1bbd6:	d0d4      	beq.n	1bb82 <work_queue_main+0xbe>
	return node->next;
   1bbd8:	683a      	ldr	r2, [r7, #0]
   1bbda:	2a00      	cmp	r2, #0
   1bbdc:	bf38      	it	cc
   1bbde:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bbe0:	4638      	mov	r0, r7
   1bbe2:	468a      	mov	sl, r1
   1bbe4:	4617      	mov	r7, r2
   1bbe6:	e7e2      	b.n	1bbae <work_queue_main+0xea>
	parent->next = child;
   1bbe8:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1bbec:	6872      	ldr	r2, [r6, #4]
   1bbee:	4290      	cmp	r0, r2
	list->tail = node;
   1bbf0:	bf08      	it	eq
   1bbf2:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1bbf6:	e7e7      	b.n	1bbc8 <work_queue_main+0x104>
   1bbf8:	20002a78 	.word	0x20002a78
   1bbfc:	20003b41 	.word	0x20003b41

0001bc00 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1bc00:	68c3      	ldr	r3, [r0, #12]
{
   1bc02:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1bc04:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1bc08:	079b      	lsls	r3, r3, #30
{
   1bc0a:	4605      	mov	r5, r0
   1bc0c:	460c      	mov	r4, r1
	if (ret) {
   1bc0e:	d50d      	bpl.n	1bc2c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bc10:	2201      	movs	r2, #1
   1bc12:	2100      	movs	r1, #0
   1bc14:	f104 0008 	add.w	r0, r4, #8
   1bc18:	f007 fdef 	bl	237fa <z_impl_k_sem_init>
	parent->next = child;
   1bc1c:	2300      	movs	r3, #0
   1bc1e:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1bc20:	4b05      	ldr	r3, [pc, #20]	; (1bc38 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1bc22:	6065      	str	r5, [r4, #4]
   1bc24:	685a      	ldr	r2, [r3, #4]
   1bc26:	b91a      	cbnz	r2, 1bc30 <cancel_sync_locked+0x30>
	list->head = node;
   1bc28:	e9c3 4400 	strd	r4, r4, [r3]
}
   1bc2c:	4630      	mov	r0, r6
   1bc2e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1bc30:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bc32:	605c      	str	r4, [r3, #4]
}
   1bc34:	e7fa      	b.n	1bc2c <cancel_sync_locked+0x2c>
   1bc36:	bf00      	nop
   1bc38:	20002a78 	.word	0x20002a78

0001bc3c <submit_to_queue_locked>:
{
   1bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bc3e:	68c3      	ldr	r3, [r0, #12]
   1bc40:	079a      	lsls	r2, r3, #30
{
   1bc42:	4604      	mov	r4, r0
   1bc44:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bc46:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1bc4a:	d41f      	bmi.n	1bc8c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1bc4c:	075f      	lsls	r7, r3, #29
   1bc4e:	d41f      	bmi.n	1bc90 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1bc50:	680a      	ldr	r2, [r1, #0]
   1bc52:	b90a      	cbnz	r2, 1bc58 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1bc54:	6882      	ldr	r2, [r0, #8]
   1bc56:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1bc58:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1bc5a:	bf44      	itt	mi
   1bc5c:	68a3      	ldrmi	r3, [r4, #8]
   1bc5e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1bc60:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1bc62:	bf4c      	ite	mi
   1bc64:	2502      	movmi	r5, #2
		ret = 1;
   1bc66:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1bc68:	b37f      	cbz	r7, 1bcca <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bc6a:	4b1b      	ldr	r3, [pc, #108]	; (1bcd8 <submit_to_queue_locked+0x9c>)
   1bc6c:	689b      	ldr	r3, [r3, #8]
   1bc6e:	42bb      	cmp	r3, r7
   1bc70:	d111      	bne.n	1bc96 <submit_to_queue_locked+0x5a>
   1bc72:	f007 fcdc 	bl	2362e <k_is_in_isr>
   1bc76:	f080 0001 	eor.w	r0, r0, #1
   1bc7a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1bc7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1bc80:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1bc82:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1bc86:	d523      	bpl.n	1bcd0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1bc88:	b13a      	cbz	r2, 1bc9a <submit_to_queue_locked+0x5e>
   1bc8a:	b940      	cbnz	r0, 1bc9e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1bc8c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1bc90:	2300      	movs	r3, #0
   1bc92:	6033      	str	r3, [r6, #0]
	return ret;
   1bc94:	e013      	b.n	1bcbe <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bc96:	2000      	movs	r0, #0
   1bc98:	e7f0      	b.n	1bc7c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1bc9a:	071b      	lsls	r3, r3, #28
   1bc9c:	d4f6      	bmi.n	1bc8c <submit_to_queue_locked+0x50>
	parent->next = child;
   1bc9e:	2300      	movs	r3, #0
   1bca0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1bca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bca6:	b963      	cbnz	r3, 1bcc2 <submit_to_queue_locked+0x86>
	list->head = node;
   1bca8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1bcac:	4638      	mov	r0, r7
   1bcae:	f007 fdb4 	bl	2381a <notify_queue_locked>
	*flagp |= BIT(bit);
   1bcb2:	68e3      	ldr	r3, [r4, #12]
   1bcb4:	f043 0304 	orr.w	r3, r3, #4
   1bcb8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1bcba:	6833      	ldr	r3, [r6, #0]
   1bcbc:	60a3      	str	r3, [r4, #8]
}
   1bcbe:	4628      	mov	r0, r5
   1bcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1bcc2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bcc4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1bcc8:	e7f0      	b.n	1bcac <submit_to_queue_locked+0x70>
		return -EINVAL;
   1bcca:	f06f 0515 	mvn.w	r5, #21
   1bcce:	e7df      	b.n	1bc90 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1bcd0:	f06f 0512 	mvn.w	r5, #18
   1bcd4:	e7dc      	b.n	1bc90 <submit_to_queue_locked+0x54>
   1bcd6:	bf00      	nop
   1bcd8:	20002a50 	.word	0x20002a50

0001bcdc <k_work_submit>:
{
   1bcdc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1bcde:	4801      	ldr	r0, [pc, #4]	; (1bce4 <k_work_submit+0x8>)
   1bce0:	f007 be0b 	b.w	238fa <k_work_submit_to_queue>
   1bce4:	20002080 	.word	0x20002080

0001bce8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcea:	b089      	sub	sp, #36	; 0x24
   1bcec:	4604      	mov	r4, r0
	list->head = NULL;
   1bcee:	2000      	movs	r0, #0
	list->tail = NULL;
   1bcf0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1bcf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1bcf6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1bcfa:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1bcfe:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1bd02:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1bd06:	b31d      	cbz	r5, 1bd50 <k_work_queue_start+0x68>
   1bd08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1bd0a:	2800      	cmp	r0, #0
   1bd0c:	f240 1001 	movw	r0, #257	; 0x101
   1bd10:	bf08      	it	eq
   1bd12:	2001      	moveq	r0, #1
	*flagp = flags;
   1bd14:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bd18:	2000      	movs	r0, #0
   1bd1a:	f04f 36ff 	mov.w	r6, #4294967295
   1bd1e:	f04f 37ff 	mov.w	r7, #4294967295
   1bd22:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1bd26:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1bd2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1bd2e:	4b09      	ldr	r3, [pc, #36]	; (1bd54 <k_work_queue_start+0x6c>)
   1bd30:	9400      	str	r4, [sp, #0]
   1bd32:	4620      	mov	r0, r4
   1bd34:	f7ff fca2 	bl	1b67c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1bd38:	b125      	cbz	r5, 1bd44 <k_work_queue_start+0x5c>
   1bd3a:	6829      	ldr	r1, [r5, #0]
   1bd3c:	b111      	cbz	r1, 1bd44 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1bd3e:	4620      	mov	r0, r4
   1bd40:	f007 fc7b 	bl	2363a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1bd44:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1bd46:	b009      	add	sp, #36	; 0x24
   1bd48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1bd4c:	f007 bc78 	b.w	23640 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1bd50:	2001      	movs	r0, #1
   1bd52:	e7df      	b.n	1bd14 <k_work_queue_start+0x2c>
   1bd54:	0001bac5 	.word	0x0001bac5

0001bd58 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1bd58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bd5a:	4614      	mov	r4, r2
   1bd5c:	9001      	str	r0, [sp, #4]
   1bd5e:	461d      	mov	r5, r3
   1bd60:	4608      	mov	r0, r1
	__asm__ volatile(
   1bd62:	f04f 0140 	mov.w	r1, #64	; 0x40
   1bd66:	f3ef 8611 	mrs	r6, BASEPRI
   1bd6a:	f381 8812 	msr	BASEPRI_MAX, r1
   1bd6e:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1bd72:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1bd74:	f011 0f0e 	tst.w	r1, #14
   1bd78:	d115      	bne.n	1bda6 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bd7a:	432c      	orrs	r4, r5
   1bd7c:	d108      	bne.n	1bd90 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1bd7e:	a901      	add	r1, sp, #4
   1bd80:	f7ff ff5c 	bl	1bc3c <submit_to_queue_locked>
	__asm__ volatile(
   1bd84:	f386 8811 	msr	BASEPRI, r6
   1bd88:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1bd8c:	b002      	add	sp, #8
   1bd8e:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1bd90:	f041 0108 	orr.w	r1, r1, #8
   1bd94:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1bd96:	9901      	ldr	r1, [sp, #4]
   1bd98:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1bd9a:	3010      	adds	r0, #16
   1bd9c:	4903      	ldr	r1, [pc, #12]	; (1bdac <k_work_schedule_for_queue+0x54>)
   1bd9e:	f000 fc29 	bl	1c5f4 <z_add_timeout>
	return ret;
   1bda2:	2001      	movs	r0, #1
   1bda4:	e7ee      	b.n	1bd84 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1bda6:	2000      	movs	r0, #0
   1bda8:	e7ec      	b.n	1bd84 <k_work_schedule_for_queue+0x2c>
   1bdaa:	bf00      	nop
   1bdac:	000238ab 	.word	0x000238ab

0001bdb0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1bdb0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1bdb2:	4801      	ldr	r0, [pc, #4]	; (1bdb8 <k_work_schedule+0x8>)
   1bdb4:	f7ff bfd0 	b.w	1bd58 <k_work_schedule_for_queue>
   1bdb8:	20002080 	.word	0x20002080

0001bdbc <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1bdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bdbe:	460c      	mov	r4, r1
   1bdc0:	9001      	str	r0, [sp, #4]
   1bdc2:	4616      	mov	r6, r2
   1bdc4:	461f      	mov	r7, r3
	__asm__ volatile(
   1bdc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdca:	f3ef 8511 	mrs	r5, BASEPRI
   1bdce:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdd2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1bdd6:	4608      	mov	r0, r1
   1bdd8:	f007 fd26 	bl	23828 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bddc:	ea56 0307 	orrs.w	r3, r6, r7
   1bde0:	d109      	bne.n	1bdf6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1bde2:	a901      	add	r1, sp, #4
   1bde4:	4620      	mov	r0, r4
   1bde6:	f7ff ff29 	bl	1bc3c <submit_to_queue_locked>
	__asm__ volatile(
   1bdea:	f385 8811 	msr	BASEPRI, r5
   1bdee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1bdf2:	b003      	add	sp, #12
   1bdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1bdf6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1bdf8:	4906      	ldr	r1, [pc, #24]	; (1be14 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1bdfa:	f043 0308 	orr.w	r3, r3, #8
   1bdfe:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1be00:	9b01      	ldr	r3, [sp, #4]
   1be02:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1be04:	f104 0010 	add.w	r0, r4, #16
   1be08:	4632      	mov	r2, r6
   1be0a:	463b      	mov	r3, r7
   1be0c:	f000 fbf2 	bl	1c5f4 <z_add_timeout>
	return ret;
   1be10:	2001      	movs	r0, #1
   1be12:	e7ea      	b.n	1bdea <k_work_reschedule_for_queue+0x2e>
   1be14:	000238ab 	.word	0x000238ab

0001be18 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1be18:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1be1a:	4801      	ldr	r0, [pc, #4]	; (1be20 <k_work_reschedule+0x8>)
   1be1c:	f7ff bfce 	b.w	1bdbc <k_work_reschedule_for_queue>
   1be20:	20002080 	.word	0x20002080

0001be24 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1be24:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1be26:	4c08      	ldr	r4, [pc, #32]	; (1be48 <z_reset_time_slice+0x24>)
   1be28:	6823      	ldr	r3, [r4, #0]
   1be2a:	b15b      	cbz	r3, 1be44 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1be2c:	f7fd f87c 	bl	18f28 <sys_clock_elapsed>
   1be30:	4603      	mov	r3, r0
   1be32:	6820      	ldr	r0, [r4, #0]
   1be34:	4a05      	ldr	r2, [pc, #20]	; (1be4c <z_reset_time_slice+0x28>)
   1be36:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1be38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1be3c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1be3e:	2100      	movs	r1, #0
   1be40:	f007 bf02 	b.w	23c48 <z_set_timeout_expiry>
}
   1be44:	bd10      	pop	{r4, pc}
   1be46:	bf00      	nop
   1be48:	20002a88 	.word	0x20002a88
   1be4c:	20002a50 	.word	0x20002a50

0001be50 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be52:	4604      	mov	r4, r0
   1be54:	460d      	mov	r5, r1
	__asm__ volatile(
   1be56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be5a:	f3ef 8611 	mrs	r6, BASEPRI
   1be5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1be62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1be66:	4b10      	ldr	r3, [pc, #64]	; (1bea8 <k_sched_time_slice_set+0x58>)
   1be68:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1be6a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1be6e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1be72:	2100      	movs	r1, #0
   1be74:	611a      	str	r2, [r3, #16]
   1be76:	fbe7 0104 	umlal	r0, r1, r7, r4
   1be7a:	2300      	movs	r3, #0
   1be7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1be80:	f7e5 fd7c 	bl	197c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1be84:	2c00      	cmp	r4, #0
   1be86:	4b09      	ldr	r3, [pc, #36]	; (1beac <k_sched_time_slice_set+0x5c>)
   1be88:	dc09      	bgt.n	1be9e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1be8a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1be8c:	4b08      	ldr	r3, [pc, #32]	; (1beb0 <k_sched_time_slice_set+0x60>)
   1be8e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1be90:	f7ff ffc8 	bl	1be24 <z_reset_time_slice>
	__asm__ volatile(
   1be94:	f386 8811 	msr	BASEPRI, r6
   1be98:	f3bf 8f6f 	isb	sy
	}
}
   1be9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1be9e:	2802      	cmp	r0, #2
   1bea0:	bfb8      	it	lt
   1bea2:	2002      	movlt	r0, #2
   1bea4:	e7f1      	b.n	1be8a <k_sched_time_slice_set+0x3a>
   1bea6:	bf00      	nop
   1bea8:	20002a50 	.word	0x20002a50
   1beac:	20002a88 	.word	0x20002a88
   1beb0:	20002a84 	.word	0x20002a84

0001beb4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1beb4:	b949      	cbnz	r1, 1beca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1beb6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1beba:	b930      	cbnz	r0, 1beca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1bebc:	4b05      	ldr	r3, [pc, #20]	; (1bed4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1bebe:	69da      	ldr	r2, [r3, #28]
   1bec0:	689b      	ldr	r3, [r3, #8]
   1bec2:	429a      	cmp	r2, r3
   1bec4:	d001      	beq.n	1beca <z_reschedule+0x16>
	ret = arch_swap(key);
   1bec6:	f7f7 ba77 	b.w	133b8 <arch_swap>
   1beca:	f381 8811 	msr	BASEPRI, r1
   1bece:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1bed2:	4770      	bx	lr
   1bed4:	20002a50 	.word	0x20002a50

0001bed8 <k_sched_lock>:
	__asm__ volatile(
   1bed8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bedc:	f3ef 8111 	mrs	r1, BASEPRI
   1bee0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bee4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1bee8:	4b04      	ldr	r3, [pc, #16]	; (1befc <k_sched_lock+0x24>)
   1beea:	689a      	ldr	r2, [r3, #8]
   1beec:	7bd3      	ldrb	r3, [r2, #15]
   1beee:	3b01      	subs	r3, #1
   1bef0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1bef2:	f381 8811 	msr	BASEPRI, r1
   1bef6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1befa:	4770      	bx	lr
   1befc:	20002a50 	.word	0x20002a50

0001bf00 <update_cache>:
{
   1bf00:	b538      	push	{r3, r4, r5, lr}
   1bf02:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1bf04:	480c      	ldr	r0, [pc, #48]	; (1bf38 <update_cache+0x38>)
   1bf06:	4d0d      	ldr	r5, [pc, #52]	; (1bf3c <update_cache+0x3c>)
   1bf08:	f007 fdb5 	bl	23a76 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1bf0c:	4604      	mov	r4, r0
   1bf0e:	b900      	cbnz	r0, 1bf12 <update_cache+0x12>
   1bf10:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1bf12:	68ab      	ldr	r3, [r5, #8]
   1bf14:	b94a      	cbnz	r2, 1bf2a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1bf16:	7b5a      	ldrb	r2, [r3, #13]
   1bf18:	06d2      	lsls	r2, r2, #27
   1bf1a:	d106      	bne.n	1bf2a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1bf1c:	69a2      	ldr	r2, [r4, #24]
   1bf1e:	b922      	cbnz	r2, 1bf2a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1bf20:	89da      	ldrh	r2, [r3, #14]
   1bf22:	2a7f      	cmp	r2, #127	; 0x7f
   1bf24:	d901      	bls.n	1bf2a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1bf26:	61eb      	str	r3, [r5, #28]
}
   1bf28:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1bf2a:	429c      	cmp	r4, r3
   1bf2c:	d001      	beq.n	1bf32 <update_cache+0x32>
			z_reset_time_slice();
   1bf2e:	f7ff ff79 	bl	1be24 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1bf32:	61ec      	str	r4, [r5, #28]
}
   1bf34:	e7f8      	b.n	1bf28 <update_cache+0x28>
   1bf36:	bf00      	nop
   1bf38:	20002a70 	.word	0x20002a70
   1bf3c:	20002a50 	.word	0x20002a50

0001bf40 <move_thread_to_end_of_prio_q>:
{
   1bf40:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1bf42:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1bf46:	7b43      	ldrb	r3, [r0, #13]
   1bf48:	2a00      	cmp	r2, #0
{
   1bf4a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bf4c:	da04      	bge.n	1bf58 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bf52:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1bf54:	f007 fd3a 	bl	239cc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bf58:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1bf5a:	4a17      	ldr	r2, [pc, #92]	; (1bfb8 <move_thread_to_end_of_prio_q+0x78>)
   1bf5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bf60:	4610      	mov	r0, r2
   1bf62:	734b      	strb	r3, [r1, #13]
   1bf64:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bf68:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf6a:	4283      	cmp	r3, r0
   1bf6c:	bf08      	it	eq
   1bf6e:	2300      	moveq	r3, #0
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	bf38      	it	cc
   1bf74:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bf76:	b1cb      	cbz	r3, 1bfac <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1bf78:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1bf7c:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1bf80:	42a6      	cmp	r6, r4
   1bf82:	d00f      	beq.n	1bfa4 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1bf84:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bf86:	2c00      	cmp	r4, #0
   1bf88:	dd0c      	ble.n	1bfa4 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1bf8a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1bf8c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1bf90:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1bf92:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1bf94:	6890      	ldr	r0, [r2, #8]
   1bf96:	1a43      	subs	r3, r0, r1
   1bf98:	4258      	negs	r0, r3
}
   1bf9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1bf9e:	4158      	adcs	r0, r3
   1bfa0:	f7ff bfae 	b.w	1bf00 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1bfa4:	42ab      	cmp	r3, r5
   1bfa6:	d001      	beq.n	1bfac <move_thread_to_end_of_prio_q+0x6c>
   1bfa8:	681b      	ldr	r3, [r3, #0]
   1bfaa:	e7e4      	b.n	1bf76 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1bfac:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1bfb0:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1bfb2:	6251      	str	r1, [r2, #36]	; 0x24
}
   1bfb4:	e7ee      	b.n	1bf94 <move_thread_to_end_of_prio_q+0x54>
   1bfb6:	bf00      	nop
   1bfb8:	20002a50 	.word	0x20002a50

0001bfbc <z_time_slice>:
{
   1bfbc:	b570      	push	{r4, r5, r6, lr}
   1bfbe:	4601      	mov	r1, r0
	__asm__ volatile(
   1bfc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfc4:	f3ef 8411 	mrs	r4, BASEPRI
   1bfc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfcc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1bfd0:	4b16      	ldr	r3, [pc, #88]	; (1c02c <z_time_slice+0x70>)
   1bfd2:	4a17      	ldr	r2, [pc, #92]	; (1c030 <z_time_slice+0x74>)
   1bfd4:	6898      	ldr	r0, [r3, #8]
   1bfd6:	6815      	ldr	r5, [r2, #0]
   1bfd8:	42a8      	cmp	r0, r5
   1bfda:	461d      	mov	r5, r3
   1bfdc:	d106      	bne.n	1bfec <z_time_slice+0x30>
			z_reset_time_slice();
   1bfde:	f7ff ff21 	bl	1be24 <z_reset_time_slice>
	__asm__ volatile(
   1bfe2:	f384 8811 	msr	BASEPRI, r4
   1bfe6:	f3bf 8f6f 	isb	sy
}
   1bfea:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1bfec:	2600      	movs	r6, #0
   1bfee:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1bff0:	4a10      	ldr	r2, [pc, #64]	; (1c034 <z_time_slice+0x78>)
   1bff2:	6812      	ldr	r2, [r2, #0]
   1bff4:	b1ba      	cbz	r2, 1c026 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1bff6:	89c2      	ldrh	r2, [r0, #14]
   1bff8:	2a7f      	cmp	r2, #127	; 0x7f
   1bffa:	d814      	bhi.n	1c026 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1bffc:	7b42      	ldrb	r2, [r0, #13]
   1bffe:	06d2      	lsls	r2, r2, #27
   1c000:	d111      	bne.n	1c026 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c002:	4a0d      	ldr	r2, [pc, #52]	; (1c038 <z_time_slice+0x7c>)
   1c004:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1c008:	6812      	ldr	r2, [r2, #0]
   1c00a:	4296      	cmp	r6, r2
   1c00c:	db0b      	blt.n	1c026 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c00e:	4a0b      	ldr	r2, [pc, #44]	; (1c03c <z_time_slice+0x80>)
   1c010:	4290      	cmp	r0, r2
   1c012:	d008      	beq.n	1c026 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1c014:	691a      	ldr	r2, [r3, #16]
   1c016:	428a      	cmp	r2, r1
   1c018:	dc02      	bgt.n	1c020 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1c01a:	f7ff ff91 	bl	1bf40 <move_thread_to_end_of_prio_q>
   1c01e:	e7de      	b.n	1bfde <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1c020:	1a52      	subs	r2, r2, r1
   1c022:	611a      	str	r2, [r3, #16]
   1c024:	e7dd      	b.n	1bfe2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1c026:	2300      	movs	r3, #0
   1c028:	612b      	str	r3, [r5, #16]
   1c02a:	e7da      	b.n	1bfe2 <z_time_slice+0x26>
   1c02c:	20002a50 	.word	0x20002a50
   1c030:	20002a80 	.word	0x20002a80
   1c034:	20002a88 	.word	0x20002a88
   1c038:	20002a84 	.word	0x20002a84
   1c03c:	20001f80 	.word	0x20001f80

0001c040 <ready_thread>:
{
   1c040:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1c042:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c046:	7b42      	ldrb	r2, [r0, #13]
   1c048:	2b00      	cmp	r3, #0
   1c04a:	db2d      	blt.n	1c0a8 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c04c:	06d3      	lsls	r3, r2, #27
   1c04e:	d12b      	bne.n	1c0a8 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   1c050:	6983      	ldr	r3, [r0, #24]
   1c052:	bb4b      	cbnz	r3, 1c0a8 <ready_thread+0x68>
	return list->head == list;
   1c054:	4915      	ldr	r1, [pc, #84]	; (1c0ac <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1c056:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1c05a:	7342      	strb	r2, [r0, #13]
   1c05c:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c05e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   1c060:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c064:	4294      	cmp	r4, r2
   1c066:	bf18      	it	ne
   1c068:	4623      	movne	r3, r4
   1c06a:	2b00      	cmp	r3, #0
   1c06c:	bf38      	it	cc
   1c06e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c070:	b1ab      	cbz	r3, 1c09e <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1c072:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1c076:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1c07a:	42a6      	cmp	r6, r4
   1c07c:	d00b      	beq.n	1c096 <ready_thread+0x56>
		return b2 - b1;
   1c07e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c080:	2c00      	cmp	r4, #0
   1c082:	dd08      	ble.n	1c096 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1c084:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c086:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1c08a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1c08c:	6058      	str	r0, [r3, #4]
}
   1c08e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1c090:	2000      	movs	r0, #0
   1c092:	f7ff bf35 	b.w	1bf00 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c096:	42ab      	cmp	r3, r5
   1c098:	d001      	beq.n	1c09e <ready_thread+0x5e>
   1c09a:	681b      	ldr	r3, [r3, #0]
   1c09c:	e7e8      	b.n	1c070 <ready_thread+0x30>
	node->prev = tail;
   1c09e:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1c0a2:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1c0a4:	6248      	str	r0, [r1, #36]	; 0x24
}
   1c0a6:	e7f2      	b.n	1c08e <ready_thread+0x4e>
}
   1c0a8:	bc70      	pop	{r4, r5, r6}
   1c0aa:	4770      	bx	lr
   1c0ac:	20002a50 	.word	0x20002a50

0001c0b0 <z_sched_start>:
{
   1c0b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c0b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c0b6:	f3ef 8411 	mrs	r4, BASEPRI
   1c0ba:	f382 8812 	msr	BASEPRI_MAX, r2
   1c0be:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1c0c2:	7b42      	ldrb	r2, [r0, #13]
   1c0c4:	0751      	lsls	r1, r2, #29
   1c0c6:	d404      	bmi.n	1c0d2 <z_sched_start+0x22>
	__asm__ volatile(
   1c0c8:	f384 8811 	msr	BASEPRI, r4
   1c0cc:	f3bf 8f6f 	isb	sy
}
   1c0d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c0d2:	f022 0204 	bic.w	r2, r2, #4
   1c0d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1c0d8:	f7ff ffb2 	bl	1c040 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1c0dc:	4621      	mov	r1, r4
   1c0de:	4802      	ldr	r0, [pc, #8]	; (1c0e8 <z_sched_start+0x38>)
}
   1c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1c0e4:	f7ff bee6 	b.w	1beb4 <z_reschedule>
   1c0e8:	20003b41 	.word	0x20003b41

0001c0ec <unready_thread>:
{
   1c0ec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1c0ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1c0f2:	7b43      	ldrb	r3, [r0, #13]
   1c0f4:	2a00      	cmp	r2, #0
{
   1c0f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c0f8:	da04      	bge.n	1c104 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c0fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c100:	f007 fc64 	bl	239cc <sys_dlist_remove>
	update_cache(thread == _current);
   1c104:	4b04      	ldr	r3, [pc, #16]	; (1c118 <unready_thread+0x2c>)
   1c106:	6898      	ldr	r0, [r3, #8]
   1c108:	1a43      	subs	r3, r0, r1
   1c10a:	4258      	negs	r0, r3
   1c10c:	4158      	adcs	r0, r3
}
   1c10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1c112:	f7ff bef5 	b.w	1bf00 <update_cache>
   1c116:	bf00      	nop
   1c118:	20002a50 	.word	0x20002a50

0001c11c <pend>:
{
   1c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c120:	4606      	mov	r6, r0
   1c122:	4614      	mov	r4, r2
   1c124:	461d      	mov	r5, r3
	__asm__ volatile(
   1c126:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c12a:	f3ef 8711 	mrs	r7, BASEPRI
   1c12e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c132:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1c136:	f007 fcda 	bl	23aee <add_to_waitq_locked>
	__asm__ volatile(
   1c13a:	f387 8811 	msr	BASEPRI, r7
   1c13e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c142:	1c6b      	adds	r3, r5, #1
   1c144:	bf08      	it	eq
   1c146:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1c14a:	d008      	beq.n	1c15e <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c14c:	4622      	mov	r2, r4
   1c14e:	462b      	mov	r3, r5
   1c150:	f106 0018 	add.w	r0, r6, #24
   1c154:	4903      	ldr	r1, [pc, #12]	; (1c164 <pend+0x48>)
}
   1c156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c15a:	f000 ba4b 	b.w	1c5f4 <z_add_timeout>
   1c15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c162:	bf00      	nop
   1c164:	00023aab 	.word	0x00023aab

0001c168 <z_pend_curr>:
{
   1c168:	b510      	push	{r4, lr}
	pending_current = _current;
   1c16a:	4b07      	ldr	r3, [pc, #28]	; (1c188 <z_pend_curr+0x20>)
   1c16c:	6898      	ldr	r0, [r3, #8]
   1c16e:	4b07      	ldr	r3, [pc, #28]	; (1c18c <z_pend_curr+0x24>)
{
   1c170:	460c      	mov	r4, r1
	pending_current = _current;
   1c172:	6018      	str	r0, [r3, #0]
{
   1c174:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1c176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c17a:	f7ff ffcf 	bl	1c11c <pend>
   1c17e:	4620      	mov	r0, r4
}
   1c180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c184:	f7f7 b918 	b.w	133b8 <arch_swap>
   1c188:	20002a50 	.word	0x20002a50
   1c18c:	20002a80 	.word	0x20002a80

0001c190 <z_set_prio>:
{
   1c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c192:	4604      	mov	r4, r0
	__asm__ volatile(
   1c194:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c198:	f3ef 8611 	mrs	r6, BASEPRI
   1c19c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1a0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c1a4:	7b43      	ldrb	r3, [r0, #13]
   1c1a6:	06da      	lsls	r2, r3, #27
   1c1a8:	b249      	sxtb	r1, r1
   1c1aa:	d138      	bne.n	1c21e <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1c1ac:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1c1ae:	2d00      	cmp	r5, #0
   1c1b0:	d135      	bne.n	1c21e <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c1b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c1b8:	f007 fc08 	bl	239cc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c1bc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1c1be:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c1c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c1c4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1c1c6:	4817      	ldr	r0, [pc, #92]	; (1c224 <z_set_prio+0x94>)
   1c1c8:	4603      	mov	r3, r0
   1c1ca:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1ce:	429f      	cmp	r7, r3
   1c1d0:	bf18      	it	ne
   1c1d2:	463d      	movne	r5, r7
   1c1d4:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c1d6:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1c1d8:	461a      	mov	r2, r3
   1c1da:	462b      	mov	r3, r5
   1c1dc:	bf38      	it	cc
   1c1de:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c1e0:	b1c3      	cbz	r3, 1c214 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1c1e2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1c1e6:	42a9      	cmp	r1, r5
   1c1e8:	d010      	beq.n	1c20c <z_set_prio+0x7c>
		return b2 - b1;
   1c1ea:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c1ec:	2d00      	cmp	r5, #0
   1c1ee:	dd0d      	ble.n	1c20c <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1c1f0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c1f2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1c1f6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c1f8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1c1fa:	2001      	movs	r0, #1
   1c1fc:	f7ff fe80 	bl	1bf00 <update_cache>
   1c200:	2001      	movs	r0, #1
	__asm__ volatile(
   1c202:	f386 8811 	msr	BASEPRI, r6
   1c206:	f3bf 8f6f 	isb	sy
}
   1c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c20c:	42bb      	cmp	r3, r7
   1c20e:	d001      	beq.n	1c214 <z_set_prio+0x84>
   1c210:	681b      	ldr	r3, [r3, #0]
   1c212:	e7e5      	b.n	1c1e0 <z_set_prio+0x50>
	node->prev = tail;
   1c214:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1c218:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1c21a:	6244      	str	r4, [r0, #36]	; 0x24
}
   1c21c:	e7ed      	b.n	1c1fa <z_set_prio+0x6a>
			thread->base.prio = prio;
   1c21e:	73a1      	strb	r1, [r4, #14]
   1c220:	2000      	movs	r0, #0
   1c222:	e7ee      	b.n	1c202 <z_set_prio+0x72>
   1c224:	20002a50 	.word	0x20002a50

0001c228 <z_impl_k_thread_suspend>:
{
   1c228:	b570      	push	{r4, r5, r6, lr}
   1c22a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c22c:	3018      	adds	r0, #24
   1c22e:	f007 fce5 	bl	23bfc <z_abort_timeout>
	__asm__ volatile(
   1c232:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c236:	f3ef 8611 	mrs	r6, BASEPRI
   1c23a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c23e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c242:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1c246:	7b63      	ldrb	r3, [r4, #13]
   1c248:	2a00      	cmp	r2, #0
   1c24a:	da05      	bge.n	1c258 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c250:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c252:	4620      	mov	r0, r4
   1c254:	f007 fbba 	bl	239cc <sys_dlist_remove>
		update_cache(thread == _current);
   1c258:	4d0b      	ldr	r5, [pc, #44]	; (1c288 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c25a:	7b63      	ldrb	r3, [r4, #13]
   1c25c:	68a8      	ldr	r0, [r5, #8]
   1c25e:	f043 0310 	orr.w	r3, r3, #16
   1c262:	7363      	strb	r3, [r4, #13]
   1c264:	1b03      	subs	r3, r0, r4
   1c266:	4258      	negs	r0, r3
   1c268:	4158      	adcs	r0, r3
   1c26a:	f7ff fe49 	bl	1bf00 <update_cache>
	__asm__ volatile(
   1c26e:	f386 8811 	msr	BASEPRI, r6
   1c272:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c276:	68ab      	ldr	r3, [r5, #8]
   1c278:	42a3      	cmp	r3, r4
   1c27a:	d103      	bne.n	1c284 <z_impl_k_thread_suspend+0x5c>
}
   1c27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c280:	f007 bbef 	b.w	23a62 <z_reschedule_unlocked>
}
   1c284:	bd70      	pop	{r4, r5, r6, pc}
   1c286:	bf00      	nop
   1c288:	20002a50 	.word	0x20002a50

0001c28c <k_sched_unlock>:
{
   1c28c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c28e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c292:	f3ef 8411 	mrs	r4, BASEPRI
   1c296:	f383 8812 	msr	BASEPRI_MAX, r3
   1c29a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1c29e:	4b08      	ldr	r3, [pc, #32]	; (1c2c0 <k_sched_unlock+0x34>)
   1c2a0:	689a      	ldr	r2, [r3, #8]
   1c2a2:	7bd3      	ldrb	r3, [r2, #15]
   1c2a4:	3301      	adds	r3, #1
   1c2a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c2a8:	2000      	movs	r0, #0
   1c2aa:	f7ff fe29 	bl	1bf00 <update_cache>
	__asm__ volatile(
   1c2ae:	f384 8811 	msr	BASEPRI, r4
   1c2b2:	f3bf 8f6f 	isb	sy
}
   1c2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1c2ba:	f007 bbd2 	b.w	23a62 <z_reschedule_unlocked>
   1c2be:	bf00      	nop
   1c2c0:	20002a50 	.word	0x20002a50

0001c2c4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1c2c4:	4b04      	ldr	r3, [pc, #16]	; (1c2d8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c2c6:	2100      	movs	r1, #0
   1c2c8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1c2cc:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1c2d0:	4608      	mov	r0, r1
   1c2d2:	f7ff bdbd 	b.w	1be50 <k_sched_time_slice_set>
   1c2d6:	bf00      	nop
   1c2d8:	20002a50 	.word	0x20002a50

0001c2dc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1c2de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2e2:	f3ef 8411 	mrs	r4, BASEPRI
   1c2e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1c2ee:	491b      	ldr	r1, [pc, #108]	; (1c35c <z_impl_k_yield+0x80>)
   1c2f0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c2f2:	7b43      	ldrb	r3, [r0, #13]
   1c2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c2f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c2fa:	f007 fb67 	bl	239cc <sys_dlist_remove>
	}
	queue_thread(_current);
   1c2fe:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c300:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1c302:	4608      	mov	r0, r1
   1c304:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c308:	7353      	strb	r3, [r2, #13]
   1c30a:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c30e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c310:	4283      	cmp	r3, r0
   1c312:	bf08      	it	eq
   1c314:	2300      	moveq	r3, #0
   1c316:	2b00      	cmp	r3, #0
   1c318:	bf38      	it	cc
   1c31a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c31c:	b1cb      	cbz	r3, 1c352 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   1c31e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1c322:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1c326:	42af      	cmp	r7, r5
   1c328:	d00f      	beq.n	1c34a <z_impl_k_yield+0x6e>
		return b2 - b1;
   1c32a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c32c:	2d00      	cmp	r5, #0
   1c32e:	dd0c      	ble.n	1c34a <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1c330:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c332:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1c336:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1c338:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1c33a:	2001      	movs	r0, #1
   1c33c:	f7ff fde0 	bl	1bf00 <update_cache>
   1c340:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   1c342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c346:	f7f7 b837 	b.w	133b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1c34a:	42b3      	cmp	r3, r6
   1c34c:	d001      	beq.n	1c352 <z_impl_k_yield+0x76>
   1c34e:	681b      	ldr	r3, [r3, #0]
   1c350:	e7e4      	b.n	1c31c <z_impl_k_yield+0x40>
	node->prev = tail;
   1c352:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1c356:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1c358:	624a      	str	r2, [r1, #36]	; 0x24
}
   1c35a:	e7ee      	b.n	1c33a <z_impl_k_yield+0x5e>
   1c35c:	20002a50 	.word	0x20002a50

0001c360 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c364:	4604      	mov	r4, r0
   1c366:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1c368:	ea54 0105 	orrs.w	r1, r4, r5
   1c36c:	d104      	bne.n	1c378 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1c36e:	f7ff ffb5 	bl	1c2dc <z_impl_k_yield>
		k_yield();
		return 0;
   1c372:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1c378:	f06f 0101 	mvn.w	r1, #1
   1c37c:	1a0a      	subs	r2, r1, r0
   1c37e:	f04f 31ff 	mov.w	r1, #4294967295
   1c382:	eb61 0305 	sbc.w	r3, r1, r5
   1c386:	2a01      	cmp	r2, #1
   1c388:	f173 0300 	sbcs.w	r3, r3, #0
   1c38c:	da2a      	bge.n	1c3e4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c38e:	f007 fc75 	bl	23c7c <sys_clock_tick_get_32>
   1c392:	1906      	adds	r6, r0, r4
   1c394:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c398:	f3ef 8811 	mrs	r8, BASEPRI
   1c39c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3a0:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1c3a4:	4f11      	ldr	r7, [pc, #68]	; (1c3ec <z_tick_sleep+0x8c>)
   1c3a6:	4b12      	ldr	r3, [pc, #72]	; (1c3f0 <z_tick_sleep+0x90>)
   1c3a8:	68b8      	ldr	r0, [r7, #8]
   1c3aa:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1c3ac:	f7ff fe9e 	bl	1c0ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c3b0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c3b2:	4910      	ldr	r1, [pc, #64]	; (1c3f4 <z_tick_sleep+0x94>)
   1c3b4:	4622      	mov	r2, r4
   1c3b6:	462b      	mov	r3, r5
   1c3b8:	3018      	adds	r0, #24
   1c3ba:	f000 f91b 	bl	1c5f4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c3be:	68ba      	ldr	r2, [r7, #8]
   1c3c0:	7b53      	ldrb	r3, [r2, #13]
   1c3c2:	f043 0310 	orr.w	r3, r3, #16
   1c3c6:	7353      	strb	r3, [r2, #13]
   1c3c8:	4640      	mov	r0, r8
   1c3ca:	f7f6 fff5 	bl	133b8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c3ce:	f007 fc55 	bl	23c7c <sys_clock_tick_get_32>
   1c3d2:	1a30      	subs	r0, r6, r0
   1c3d4:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1c3d8:	2801      	cmp	r0, #1
   1c3da:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1c3de:	bfb8      	it	lt
   1c3e0:	2000      	movlt	r0, #0
   1c3e2:	e7c7      	b.n	1c374 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1c3e4:	f06f 0601 	mvn.w	r6, #1
   1c3e8:	1a36      	subs	r6, r6, r0
   1c3ea:	e7d3      	b.n	1c394 <z_tick_sleep+0x34>
   1c3ec:	20002a50 	.word	0x20002a50
   1c3f0:	20002a80 	.word	0x20002a80
   1c3f4:	00023aab 	.word	0x00023aab

0001c3f8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1c3f8:	b508      	push	{r3, lr}
   1c3fa:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c3fc:	3301      	adds	r3, #1
   1c3fe:	bf08      	it	eq
   1c400:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1c404:	d106      	bne.n	1c414 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1c406:	4b08      	ldr	r3, [pc, #32]	; (1c428 <z_impl_k_sleep+0x30>)
   1c408:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c40a:	f7ff ff0d 	bl	1c228 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1c40e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1c412:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1c414:	f7ff ffa4 	bl	1c360 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1c418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c41c:	fb80 2303 	smull	r2, r3, r0, r3
   1c420:	0bd0      	lsrs	r0, r2, #15
   1c422:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1c426:	e7f4      	b.n	1c412 <z_impl_k_sleep+0x1a>
   1c428:	20002a50 	.word	0x20002a50

0001c42c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1c42c:	4b01      	ldr	r3, [pc, #4]	; (1c434 <z_impl_z_current_get+0x8>)
   1c42e:	6898      	ldr	r0, [r3, #8]
   1c430:	4770      	bx	lr
   1c432:	bf00      	nop
   1c434:	20002a50 	.word	0x20002a50

0001c438 <z_impl_k_is_preempt_thread>:
   1c438:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1c43c:	b93b      	cbnz	r3, 1c44e <z_impl_k_is_preempt_thread+0x16>
   1c43e:	4b05      	ldr	r3, [pc, #20]	; (1c454 <z_impl_k_is_preempt_thread+0x1c>)
   1c440:	689b      	ldr	r3, [r3, #8]
   1c442:	89d8      	ldrh	r0, [r3, #14]
   1c444:	287f      	cmp	r0, #127	; 0x7f
   1c446:	bf8c      	ite	hi
   1c448:	2000      	movhi	r0, #0
   1c44a:	2001      	movls	r0, #1
   1c44c:	4770      	bx	lr
   1c44e:	2000      	movs	r0, #0
}
   1c450:	4770      	bx	lr
   1c452:	bf00      	nop
   1c454:	20002a50 	.word	0x20002a50

0001c458 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c45c:	4604      	mov	r4, r0
   1c45e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c462:	f3ef 8611 	mrs	r6, BASEPRI
   1c466:	f383 8812 	msr	BASEPRI_MAX, r3
   1c46a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1c46e:	7b43      	ldrb	r3, [r0, #13]
   1c470:	071a      	lsls	r2, r3, #28
   1c472:	d505      	bpl.n	1c480 <z_thread_abort+0x28>
	__asm__ volatile(
   1c474:	f386 8811 	msr	BASEPRI, r6
   1c478:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c480:	f023 0220 	bic.w	r2, r3, #32
   1c484:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1c488:	09d2      	lsrs	r2, r2, #7
   1c48a:	d120      	bne.n	1c4ce <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c48c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1c48e:	68a3      	ldr	r3, [r4, #8]
   1c490:	b113      	cbz	r3, 1c498 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1c492:	4620      	mov	r0, r4
   1c494:	f007 faa2 	bl	239dc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1c498:	f104 0018 	add.w	r0, r4, #24
   1c49c:	f007 fbae 	bl	23bfc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c4a0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1c4a4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1c4a8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c4aa:	42bd      	cmp	r5, r7
   1c4ac:	d000      	beq.n	1c4b0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c4ae:	b9b5      	cbnz	r5, 1c4de <z_thread_abort+0x86>
		update_cache(1);
   1c4b0:	2001      	movs	r0, #1
   1c4b2:	f7ff fd25 	bl	1bf00 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1c4b6:	4b10      	ldr	r3, [pc, #64]	; (1c4f8 <z_thread_abort+0xa0>)
   1c4b8:	689b      	ldr	r3, [r3, #8]
   1c4ba:	42a3      	cmp	r3, r4
   1c4bc:	d1da      	bne.n	1c474 <z_thread_abort+0x1c>
   1c4be:	f3ef 8305 	mrs	r3, IPSR
   1c4c2:	2b00      	cmp	r3, #0
   1c4c4:	d1d6      	bne.n	1c474 <z_thread_abort+0x1c>
   1c4c6:	4630      	mov	r0, r6
   1c4c8:	f7f6 ff76 	bl	133b8 <arch_swap>
	return ret;
   1c4cc:	e7d2      	b.n	1c474 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c4ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1c4d2:	f043 0308 	orr.w	r3, r3, #8
   1c4d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c4d8:	f007 fa78 	bl	239cc <sys_dlist_remove>
}
   1c4dc:	e7d7      	b.n	1c48e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1c4de:	4628      	mov	r0, r5
   1c4e0:	f007 fa7c 	bl	239dc <unpend_thread_no_timeout>
   1c4e4:	f105 0018 	add.w	r0, r5, #24
   1c4e8:	f007 fb88 	bl	23bfc <z_abort_timeout>
   1c4ec:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1c4f0:	4628      	mov	r0, r5
   1c4f2:	f7ff fda5 	bl	1c040 <ready_thread>
   1c4f6:	e7d7      	b.n	1c4a8 <z_thread_abort+0x50>
   1c4f8:	20002a50 	.word	0x20002a50

0001c4fc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1c4fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c4fe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1c502:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c504:	e9cd 6700 	strd	r6, r7, [sp]
   1c508:	f7ff fe2e 	bl	1c168 <z_pend_curr>

	if (data != NULL) {
   1c50c:	b11c      	cbz	r4, 1c516 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1c50e:	4b03      	ldr	r3, [pc, #12]	; (1c51c <z_sched_wait+0x20>)
   1c510:	689b      	ldr	r3, [r3, #8]
   1c512:	695b      	ldr	r3, [r3, #20]
   1c514:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c516:	b002      	add	sp, #8
   1c518:	bdd0      	pop	{r4, r6, r7, pc}
   1c51a:	bf00      	nop
   1c51c:	20002a50 	.word	0x20002a50

0001c520 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c520:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1c522:	4806      	ldr	r0, [pc, #24]	; (1c53c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1c524:	4a06      	ldr	r2, [pc, #24]	; (1c540 <z_data_copy+0x20>)
   1c526:	4907      	ldr	r1, [pc, #28]	; (1c544 <z_data_copy+0x24>)
   1c528:	1a12      	subs	r2, r2, r0
   1c52a:	f003 ff6c 	bl	20406 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c52e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1c532:	4a05      	ldr	r2, [pc, #20]	; (1c548 <z_data_copy+0x28>)
   1c534:	4905      	ldr	r1, [pc, #20]	; (1c54c <z_data_copy+0x2c>)
   1c536:	4806      	ldr	r0, [pc, #24]	; (1c550 <z_data_copy+0x30>)
   1c538:	f003 bf65 	b.w	20406 <memcpy>
   1c53c:	20000000 	.word	0x20000000
   1c540:	20000cc8 	.word	0x20000cc8
   1c544:	00025118 	.word	0x00025118
   1c548:	00000000 	.word	0x00000000
   1c54c:	00025118 	.word	0x00025118
   1c550:	20000000 	.word	0x20000000

0001c554 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c554:	4b03      	ldr	r3, [pc, #12]	; (1c564 <elapsed+0x10>)
   1c556:	681b      	ldr	r3, [r3, #0]
   1c558:	b90b      	cbnz	r3, 1c55e <elapsed+0xa>
   1c55a:	f7fc bce5 	b.w	18f28 <sys_clock_elapsed>
}
   1c55e:	2000      	movs	r0, #0
   1c560:	4770      	bx	lr
   1c562:	bf00      	nop
   1c564:	20002a8c 	.word	0x20002a8c

0001c568 <remove_timeout>:
{
   1c568:	b530      	push	{r4, r5, lr}
   1c56a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c56c:	b168      	cbz	r0, 1c58a <remove_timeout+0x22>
   1c56e:	4a0a      	ldr	r2, [pc, #40]	; (1c598 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1c570:	6852      	ldr	r2, [r2, #4]
   1c572:	4290      	cmp	r0, r2
   1c574:	d009      	beq.n	1c58a <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c576:	b143      	cbz	r3, 1c58a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c578:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c57c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c580:	1912      	adds	r2, r2, r4
   1c582:	eb45 0101 	adc.w	r1, r5, r1
   1c586:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1c58a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1c58c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c58e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c590:	2300      	movs	r3, #0
	node->prev = NULL;
   1c592:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c596:	bd30      	pop	{r4, r5, pc}
   1c598:	20000824 	.word	0x20000824

0001c59c <next_timeout>:

static int32_t next_timeout(void)
{
   1c59c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1c59e:	4b13      	ldr	r3, [pc, #76]	; (1c5ec <next_timeout+0x50>)
   1c5a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5a2:	429c      	cmp	r4, r3
   1c5a4:	bf08      	it	eq
   1c5a6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c5a8:	f7ff ffd4 	bl	1c554 <elapsed>
   1c5ac:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1c5ae:	b1bc      	cbz	r4, 1c5e0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c5b0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1c5b4:	1b40      	subs	r0, r0, r5
   1c5b6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c5ba:	2801      	cmp	r0, #1
   1c5bc:	f171 0300 	sbcs.w	r3, r1, #0
   1c5c0:	db11      	blt.n	1c5e6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c5c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c5c6:	2300      	movs	r3, #0
   1c5c8:	4282      	cmp	r2, r0
   1c5ca:	eb73 0401 	sbcs.w	r4, r3, r1
   1c5ce:	da00      	bge.n	1c5d2 <next_timeout+0x36>
   1c5d0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c5d2:	4b07      	ldr	r3, [pc, #28]	; (1c5f0 <next_timeout+0x54>)
   1c5d4:	691b      	ldr	r3, [r3, #16]
   1c5d6:	b113      	cbz	r3, 1c5de <next_timeout+0x42>
   1c5d8:	4298      	cmp	r0, r3
   1c5da:	bfa8      	it	ge
   1c5dc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c5de:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c5e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c5e4:	e7f5      	b.n	1c5d2 <next_timeout+0x36>
   1c5e6:	2000      	movs	r0, #0
   1c5e8:	e7f3      	b.n	1c5d2 <next_timeout+0x36>
   1c5ea:	bf00      	nop
   1c5ec:	20000824 	.word	0x20000824
   1c5f0:	20002a50 	.word	0x20002a50

0001c5f4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c5f8:	bf08      	it	eq
   1c5fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1c5fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c602:	4604      	mov	r4, r0
   1c604:	4692      	mov	sl, r2
   1c606:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c608:	d073      	beq.n	1c6f2 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c60a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1c60c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c610:	f3ef 8511 	mrs	r5, BASEPRI
   1c614:	f383 8812 	msr	BASEPRI_MAX, r3
   1c618:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c61c:	f06f 0301 	mvn.w	r3, #1
   1c620:	ebb3 080a 	subs.w	r8, r3, sl
   1c624:	f04f 32ff 	mov.w	r2, #4294967295
   1c628:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c62c:	f1b8 0f00 	cmp.w	r8, #0
   1c630:	f179 0100 	sbcs.w	r1, r9, #0
   1c634:	db1c      	blt.n	1c670 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c636:	4830      	ldr	r0, [pc, #192]	; (1c6f8 <z_add_timeout+0x104>)
   1c638:	e9d0 1000 	ldrd	r1, r0, [r0]
   1c63c:	1a5b      	subs	r3, r3, r1
   1c63e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1c642:	ebb3 060a 	subs.w	r6, r3, sl
   1c646:	eb62 070b 	sbc.w	r7, r2, fp
   1c64a:	2e01      	cmp	r6, #1
   1c64c:	f177 0300 	sbcs.w	r3, r7, #0
   1c650:	bfbc      	itt	lt
   1c652:	2601      	movlt	r6, #1
   1c654:	2700      	movlt	r7, #0
   1c656:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1c65a:	4a28      	ldr	r2, [pc, #160]	; (1c6fc <z_add_timeout+0x108>)
   1c65c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c660:	4293      	cmp	r3, r2
   1c662:	d11e      	bne.n	1c6a2 <z_add_timeout+0xae>
	node->prev = tail;
   1c664:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1c668:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1c66c:	6054      	str	r4, [r2, #4]
}
   1c66e:	e02d      	b.n	1c6cc <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1c670:	f7ff ff70 	bl	1c554 <elapsed>
   1c674:	f11a 0301 	adds.w	r3, sl, #1
   1c678:	9300      	str	r3, [sp, #0]
   1c67a:	f14b 0300 	adc.w	r3, fp, #0
   1c67e:	9301      	str	r3, [sp, #4]
   1c680:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c684:	1812      	adds	r2, r2, r0
   1c686:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1c68a:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1c68e:	e7e4      	b.n	1c65a <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1c690:	ebb6 0008 	subs.w	r0, r6, r8
   1c694:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1c698:	4563      	cmp	r3, ip
   1c69a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1c69e:	d0e1      	beq.n	1c664 <z_add_timeout+0x70>
   1c6a0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d0de      	beq.n	1c664 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1c6a6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1c6aa:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1c6ae:	4546      	cmp	r6, r8
   1c6b0:	eb77 0109 	sbcs.w	r1, r7, r9
   1c6b4:	daec      	bge.n	1c690 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1c6b6:	ebb8 0006 	subs.w	r0, r8, r6
   1c6ba:	eb69 0107 	sbc.w	r1, r9, r7
   1c6be:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1c6c2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1c6c4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1c6c8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1c6ca:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1c6cc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c6ce:	4293      	cmp	r3, r2
   1c6d0:	d00b      	beq.n	1c6ea <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c6d2:	429c      	cmp	r4, r3
   1c6d4:	d109      	bne.n	1c6ea <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c6d6:	f7ff ff61 	bl	1c59c <next_timeout>

			if (next_time == 0 ||
   1c6da:	b118      	cbz	r0, 1c6e4 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1c6dc:	4b08      	ldr	r3, [pc, #32]	; (1c700 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1c6de:	691b      	ldr	r3, [r3, #16]
   1c6e0:	4283      	cmp	r3, r0
   1c6e2:	d002      	beq.n	1c6ea <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1c6e4:	2100      	movs	r1, #0
   1c6e6:	f7fc fbef 	bl	18ec8 <sys_clock_set_timeout>
	__asm__ volatile(
   1c6ea:	f385 8811 	msr	BASEPRI, r5
   1c6ee:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c6f2:	b003      	add	sp, #12
   1c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6f8:	20002120 	.word	0x20002120
   1c6fc:	20000824 	.word	0x20000824
   1c700:	20002a50 	.word	0x20002a50

0001c704 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1c704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c708:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c70a:	f7ff fc57 	bl	1bfbc <z_time_slice>
	__asm__ volatile(
   1c70e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c712:	f3ef 8411 	mrs	r4, BASEPRI
   1c716:	f383 8812 	msr	BASEPRI_MAX, r3
   1c71a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c71e:	4d2c      	ldr	r5, [pc, #176]	; (1c7d0 <sys_clock_announce+0xcc>)
   1c720:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1c7d4 <sys_clock_announce+0xd0>
	return list->head == list;
   1c724:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1c7d8 <sys_clock_announce+0xd4>
   1c728:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c72a:	4651      	mov	r1, sl
   1c72c:	f8d5 c000 	ldr.w	ip, [r5]
   1c730:	f8db 0000 	ldr.w	r0, [fp]
   1c734:	4662      	mov	r2, ip
   1c736:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c738:	4558      	cmp	r0, fp
   1c73a:	e9da 8900 	ldrd	r8, r9, [sl]
   1c73e:	e9cd 2300 	strd	r2, r3, [sp]
   1c742:	d00d      	beq.n	1c760 <sys_clock_announce+0x5c>
   1c744:	b160      	cbz	r0, 1c760 <sys_clock_announce+0x5c>
   1c746:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1c74a:	45b4      	cmp	ip, r6
   1c74c:	41bb      	sbcs	r3, r7
   1c74e:	da1e      	bge.n	1c78e <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c750:	9b00      	ldr	r3, [sp, #0]
   1c752:	ebb6 0c03 	subs.w	ip, r6, r3
   1c756:	9b01      	ldr	r3, [sp, #4]
   1c758:	eb67 0603 	sbc.w	r6, r7, r3
   1c75c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1c760:	9b00      	ldr	r3, [sp, #0]
   1c762:	eb13 0208 	adds.w	r2, r3, r8
   1c766:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1c768:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1c76c:	eb43 0309 	adc.w	r3, r3, r9
   1c770:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1c774:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c776:	f7ff ff11 	bl	1c59c <next_timeout>
   1c77a:	4631      	mov	r1, r6
   1c77c:	f7fc fba4 	bl	18ec8 <sys_clock_set_timeout>
	__asm__ volatile(
   1c780:	f384 8811 	msr	BASEPRI, r4
   1c784:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c788:	b003      	add	sp, #12
   1c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1c78e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1c792:	f04f 0200 	mov.w	r2, #0
   1c796:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1c79a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1c79e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1c7a2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1c7a6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1c7aa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1c7ac:	f7ff fedc 	bl	1c568 <remove_timeout>
   1c7b0:	f384 8811 	msr	BASEPRI, r4
   1c7b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c7b8:	6883      	ldr	r3, [r0, #8]
   1c7ba:	4798      	blx	r3
	__asm__ volatile(
   1c7bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7c0:	f3ef 8411 	mrs	r4, BASEPRI
   1c7c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7c8:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1c7cc:	4901      	ldr	r1, [pc, #4]	; (1c7d4 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c7ce:	e7ad      	b.n	1c72c <sys_clock_announce+0x28>
   1c7d0:	20002a8c 	.word	0x20002a8c
   1c7d4:	20002120 	.word	0x20002120
   1c7d8:	20000824 	.word	0x20000824

0001c7dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c7dc:	b510      	push	{r4, lr}
   1c7de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7e2:	f3ef 8411 	mrs	r4, BASEPRI
   1c7e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c7ee:	f7fc fb9b 	bl	18f28 <sys_clock_elapsed>
   1c7f2:	4b06      	ldr	r3, [pc, #24]	; (1c80c <sys_clock_tick_get+0x30>)
   1c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7f8:	1812      	adds	r2, r2, r0
   1c7fa:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1c7fe:	f384 8811 	msr	BASEPRI, r4
   1c802:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c806:	4610      	mov	r0, r2
   1c808:	4619      	mov	r1, r3
   1c80a:	bd10      	pop	{r4, pc}
   1c80c:	20002120 	.word	0x20002120

0001c810 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c812:	4604      	mov	r4, r0
	__asm__ volatile(
   1c814:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c818:	f3ef 8511 	mrs	r5, BASEPRI
   1c81c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c820:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c824:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1c828:	1c56      	adds	r6, r2, #1
   1c82a:	f143 0700 	adc.w	r7, r3, #0
   1c82e:	2f00      	cmp	r7, #0
   1c830:	bf08      	it	eq
   1c832:	2e02      	cmpeq	r6, #2
   1c834:	d302      	bcc.n	1c83c <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c836:	4917      	ldr	r1, [pc, #92]	; (1c894 <z_timer_expiration_handler+0x84>)
   1c838:	f7ff fedc 	bl	1c5f4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c83c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c83e:	3301      	adds	r3, #1
   1c840:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c842:	6a23      	ldr	r3, [r4, #32]
   1c844:	b173      	cbz	r3, 1c864 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1c846:	f385 8811 	msr	BASEPRI, r5
   1c84a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1c84e:	6a23      	ldr	r3, [r4, #32]
   1c850:	4620      	mov	r0, r4
   1c852:	4798      	blx	r3
	__asm__ volatile(
   1c854:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c858:	f3ef 8511 	mrs	r5, BASEPRI
   1c85c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c860:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1c864:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c868:	42a6      	cmp	r6, r4
   1c86a:	d000      	beq.n	1c86e <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c86c:	b926      	cbnz	r6, 1c878 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   1c86e:	f385 8811 	msr	BASEPRI, r5
   1c872:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1c876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   1c878:	4630      	mov	r0, r6
   1c87a:	f007 f8c2 	bl	23a02 <z_unpend_thread_no_timeout>
   1c87e:	2300      	movs	r3, #0
   1c880:	67f3      	str	r3, [r6, #124]	; 0x7c
   1c882:	f385 8811 	msr	BASEPRI, r5
   1c886:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1c88a:	4630      	mov	r0, r6
}
   1c88c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   1c890:	f007 b8fb 	b.w	23a8a <z_ready_thread>
   1c894:	0001c811 	.word	0x0001c811

0001c898 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c898:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1c89c:	4619      	mov	r1, r3
   1c89e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c8a0:	1c4c      	adds	r4, r1, #1
{
   1c8a2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c8a4:	bf08      	it	eq
   1c8a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1c8aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1c8ae:	4680      	mov	r8, r0
   1c8b0:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c8b2:	d04c      	beq.n	1c94e <z_impl_k_timer_start+0xb6>
   1c8b4:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c8b6:	1c6b      	adds	r3, r5, #1
   1c8b8:	bf08      	it	eq
   1c8ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c8be:	4614      	mov	r4, r2
   1c8c0:	d019      	beq.n	1c8f6 <z_impl_k_timer_start+0x5e>
   1c8c2:	ea54 0305 	orrs.w	r3, r4, r5
   1c8c6:	d016      	beq.n	1c8f6 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1c8c8:	f06f 0301 	mvn.w	r3, #1
   1c8cc:	ebb3 0a02 	subs.w	sl, r3, r2
   1c8d0:	f04f 33ff 	mov.w	r3, #4294967295
   1c8d4:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c8d8:	f1ba 0f00 	cmp.w	sl, #0
   1c8dc:	f17b 0300 	sbcs.w	r3, fp, #0
   1c8e0:	da09      	bge.n	1c8f6 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1c8e2:	f112 34ff 	adds.w	r4, r2, #4294967295
   1c8e6:	f145 35ff 	adc.w	r5, r5, #4294967295
   1c8ea:	2c01      	cmp	r4, #1
   1c8ec:	f175 0300 	sbcs.w	r3, r5, #0
   1c8f0:	bfbc      	itt	lt
   1c8f2:	2401      	movlt	r4, #1
   1c8f4:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c8f6:	f06f 0301 	mvn.w	r3, #1
   1c8fa:	1a1b      	subs	r3, r3, r0
   1c8fc:	9300      	str	r3, [sp, #0]
   1c8fe:	f04f 33ff 	mov.w	r3, #4294967295
   1c902:	eb63 0301 	sbc.w	r3, r3, r1
   1c906:	9301      	str	r3, [sp, #4]
   1c908:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c90c:	2a00      	cmp	r2, #0
   1c90e:	f173 0300 	sbcs.w	r3, r3, #0
   1c912:	da0c      	bge.n	1c92e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c914:	f110 38ff 	adds.w	r8, r0, #4294967295
   1c918:	f141 39ff 	adc.w	r9, r1, #4294967295
   1c91c:	f1b8 0f00 	cmp.w	r8, #0
   1c920:	f179 0300 	sbcs.w	r3, r9, #0
   1c924:	bfbc      	itt	lt
   1c926:	f04f 0800 	movlt.w	r8, #0
   1c92a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1c92e:	4630      	mov	r0, r6
   1c930:	f007 f964 	bl	23bfc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c934:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c936:	4907      	ldr	r1, [pc, #28]	; (1c954 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1c938:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c93a:	4642      	mov	r2, r8
   1c93c:	464b      	mov	r3, r9
   1c93e:	4630      	mov	r0, r6
	timer->period = period;
   1c940:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1c944:	b002      	add	sp, #8
   1c946:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c94a:	f7ff be53 	b.w	1c5f4 <z_add_timeout>
}
   1c94e:	b002      	add	sp, #8
   1c950:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1c954:	0001c811 	.word	0x0001c811

0001c958 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c958:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c95c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c95e:	4b29      	ldr	r3, [pc, #164]	; (1ca04 <z_impl_k_poll+0xac>)
   1c960:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1c962:	2301      	movs	r3, #1
   1c964:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c968:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c96c:	ea52 0307 	orrs.w	r3, r2, r7
{
   1c970:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c972:	bf0c      	ite	eq
   1c974:	2301      	moveq	r3, #1
   1c976:	2300      	movne	r3, #0
   1c978:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1c97c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c97e:	f007 fa39 	bl	23df4 <register_events>
   1c982:	4681      	mov	r9, r0
	__asm__ volatile(
   1c984:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c988:	f3ef 8a11 	mrs	sl, BASEPRI
   1c98c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c990:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c994:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1c998:	b964      	cbnz	r4, 1c9b4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c99a:	4601      	mov	r1, r0
   1c99c:	4652      	mov	r2, sl
   1c99e:	4640      	mov	r0, r8
   1c9a0:	f007 f9c6 	bl	23d30 <clear_event_registrations>
	__asm__ volatile(
   1c9a4:	f38a 8811 	msr	BASEPRI, sl
   1c9a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c9ac:	4620      	mov	r0, r4
   1c9ae:	b002      	add	sp, #8
   1c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c9b4:	2300      	movs	r3, #0
   1c9b6:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c9ba:	ea56 0307 	orrs.w	r3, r6, r7
   1c9be:	d106      	bne.n	1c9ce <z_impl_k_poll+0x76>
   1c9c0:	f38a 8811 	msr	BASEPRI, sl
   1c9c4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c9c8:	f06f 040a 	mvn.w	r4, #10
   1c9cc:	e7ee      	b.n	1c9ac <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c9ce:	e9cd 6700 	strd	r6, r7, [sp]
   1c9d2:	4a0d      	ldr	r2, [pc, #52]	; (1ca08 <z_impl_k_poll+0xb0>)
   1c9d4:	480d      	ldr	r0, [pc, #52]	; (1ca0c <z_impl_k_poll+0xb4>)
   1c9d6:	4651      	mov	r1, sl
   1c9d8:	f7ff fbc6 	bl	1c168 <z_pend_curr>
   1c9dc:	4604      	mov	r4, r0
	__asm__ volatile(
   1c9de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9e2:	f3ef 8511 	mrs	r5, BASEPRI
   1c9e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c9ea:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c9ee:	462a      	mov	r2, r5
   1c9f0:	4649      	mov	r1, r9
   1c9f2:	4640      	mov	r0, r8
   1c9f4:	f007 f99c 	bl	23d30 <clear_event_registrations>
	__asm__ volatile(
   1c9f8:	f385 8811 	msr	BASEPRI, r5
   1c9fc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ca00:	e7d4      	b.n	1c9ac <z_impl_k_poll+0x54>
   1ca02:	bf00      	nop
   1ca04:	20002a50 	.word	0x20002a50
   1ca08:	2000082c 	.word	0x2000082c
   1ca0c:	20003b41 	.word	0x20003b41

0001ca10 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1ca10:	b538      	push	{r3, r4, r5, lr}
   1ca12:	4603      	mov	r3, r0
	__asm__ volatile(
   1ca14:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca18:	f3ef 8511 	mrs	r5, BASEPRI
   1ca1c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ca20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1ca24:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1ca26:	2101      	movs	r1, #1
   1ca28:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1ca2a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1ca2c:	4283      	cmp	r3, r0
   1ca2e:	d106      	bne.n	1ca3e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1ca30:	f385 8811 	msr	BASEPRI, r5
   1ca34:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1ca38:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1ca3a:	4620      	mov	r0, r4
   1ca3c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1ca3e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ca42:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ca44:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ca46:	2300      	movs	r3, #0
	node->prev = NULL;
   1ca48:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca4c:	f007 fa49 	bl	23ee2 <signal_poll_event>
	z_reschedule(&lock, key);
   1ca50:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ca52:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1ca54:	4801      	ldr	r0, [pc, #4]	; (1ca5c <z_impl_k_poll_signal_raise+0x4c>)
   1ca56:	f7ff fa2d 	bl	1beb4 <z_reschedule>
	return rc;
   1ca5a:	e7ee      	b.n	1ca3a <z_impl_k_poll_signal_raise+0x2a>
   1ca5c:	20003b41 	.word	0x20003b41

0001ca60 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1ca60:	b538      	push	{r3, r4, r5, lr}
   1ca62:	4604      	mov	r4, r0
   1ca64:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1ca66:	f006 fde2 	bl	2362e <k_is_in_isr>
   1ca6a:	b950      	cbnz	r0, 1ca82 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1ca6c:	4b06      	ldr	r3, [pc, #24]	; (1ca88 <z_thread_aligned_alloc+0x28>)
   1ca6e:	689b      	ldr	r3, [r3, #8]
   1ca70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1ca72:	b143      	cbz	r3, 1ca86 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   1ca74:	462a      	mov	r2, r5
   1ca76:	4621      	mov	r1, r4
   1ca78:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1ca7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1ca7e:	f007 baa9 	b.w	23fd4 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1ca82:	4b02      	ldr	r3, [pc, #8]	; (1ca8c <z_thread_aligned_alloc+0x2c>)
   1ca84:	e7f6      	b.n	1ca74 <z_thread_aligned_alloc+0x14>
}
   1ca86:	bd38      	pop	{r3, r4, r5, pc}
   1ca88:	20002a50 	.word	0x20002a50
   1ca8c:	20000ae8 	.word	0x20000ae8

0001ca90 <nrf_cc3xx_platform_init>:
   1ca90:	b510      	push	{r4, lr}
   1ca92:	4c0c      	ldr	r4, [pc, #48]	; (1cac4 <nrf_cc3xx_platform_init+0x34>)
   1ca94:	6823      	ldr	r3, [r4, #0]
   1ca96:	b113      	cbz	r3, 1ca9e <nrf_cc3xx_platform_init+0xe>
   1ca98:	4b0b      	ldr	r3, [pc, #44]	; (1cac8 <nrf_cc3xx_platform_init+0x38>)
   1ca9a:	681b      	ldr	r3, [r3, #0]
   1ca9c:	b92b      	cbnz	r3, 1caaa <nrf_cc3xx_platform_init+0x1a>
   1ca9e:	f000 fe73 	bl	1d788 <CC_LibInit>
   1caa2:	b930      	cbnz	r0, 1cab2 <nrf_cc3xx_platform_init+0x22>
   1caa4:	4b08      	ldr	r3, [pc, #32]	; (1cac8 <nrf_cc3xx_platform_init+0x38>)
   1caa6:	2201      	movs	r2, #1
   1caa8:	601a      	str	r2, [r3, #0]
   1caaa:	2301      	movs	r3, #1
   1caac:	6023      	str	r3, [r4, #0]
   1caae:	2000      	movs	r0, #0
   1cab0:	bd10      	pop	{r4, pc}
   1cab2:	3801      	subs	r0, #1
   1cab4:	2806      	cmp	r0, #6
   1cab6:	d901      	bls.n	1cabc <nrf_cc3xx_platform_init+0x2c>
   1cab8:	4804      	ldr	r0, [pc, #16]	; (1cacc <nrf_cc3xx_platform_init+0x3c>)
   1caba:	bd10      	pop	{r4, pc}
   1cabc:	4b04      	ldr	r3, [pc, #16]	; (1cad0 <nrf_cc3xx_platform_init+0x40>)
   1cabe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cac2:	bd10      	pop	{r4, pc}
   1cac4:	20002a90 	.word	0x20002a90
   1cac8:	20002a94 	.word	0x20002a94
   1cacc:	ffff8ffe 	.word	0xffff8ffe
   1cad0:	00024bc8 	.word	0x00024bc8

0001cad4 <nrf_cc3xx_platform_abort>:
   1cad4:	f3bf 8f4f 	dsb	sy
   1cad8:	4905      	ldr	r1, [pc, #20]	; (1caf0 <nrf_cc3xx_platform_abort+0x1c>)
   1cada:	4b06      	ldr	r3, [pc, #24]	; (1caf4 <nrf_cc3xx_platform_abort+0x20>)
   1cadc:	68ca      	ldr	r2, [r1, #12]
   1cade:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1cae2:	4313      	orrs	r3, r2
   1cae4:	60cb      	str	r3, [r1, #12]
   1cae6:	f3bf 8f4f 	dsb	sy
   1caea:	bf00      	nop
   1caec:	e7fd      	b.n	1caea <nrf_cc3xx_platform_abort+0x16>
   1caee:	bf00      	nop
   1caf0:	e000ed00 	.word	0xe000ed00
   1caf4:	05fa0004 	.word	0x05fa0004

0001caf8 <CC_PalAbort>:
   1caf8:	b4f0      	push	{r4, r5, r6, r7}
   1cafa:	4f09      	ldr	r7, [pc, #36]	; (1cb20 <CC_PalAbort+0x28>)
   1cafc:	4e09      	ldr	r6, [pc, #36]	; (1cb24 <CC_PalAbort+0x2c>)
   1cafe:	4c0a      	ldr	r4, [pc, #40]	; (1cb28 <CC_PalAbort+0x30>)
   1cb00:	4a0a      	ldr	r2, [pc, #40]	; (1cb2c <CC_PalAbort+0x34>)
   1cb02:	4d0b      	ldr	r5, [pc, #44]	; (1cb30 <CC_PalAbort+0x38>)
   1cb04:	490b      	ldr	r1, [pc, #44]	; (1cb34 <CC_PalAbort+0x3c>)
   1cb06:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1cb0a:	603b      	str	r3, [r7, #0]
   1cb0c:	6852      	ldr	r2, [r2, #4]
   1cb0e:	6033      	str	r3, [r6, #0]
   1cb10:	6023      	str	r3, [r4, #0]
   1cb12:	2400      	movs	r4, #0
   1cb14:	602b      	str	r3, [r5, #0]
   1cb16:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1cb1a:	bcf0      	pop	{r4, r5, r6, r7}
   1cb1c:	4710      	bx	r2
   1cb1e:	bf00      	nop
   1cb20:	5002b400 	.word	0x5002b400
   1cb24:	5002b404 	.word	0x5002b404
   1cb28:	5002b408 	.word	0x5002b408
   1cb2c:	20000834 	.word	0x20000834
   1cb30:	5002b40c 	.word	0x5002b40c
   1cb34:	5002a000 	.word	0x5002a000

0001cb38 <nrf_cc3xx_platform_set_abort>:
   1cb38:	e9d0 1200 	ldrd	r1, r2, [r0]
   1cb3c:	4b01      	ldr	r3, [pc, #4]	; (1cb44 <nrf_cc3xx_platform_set_abort+0xc>)
   1cb3e:	e9c3 1200 	strd	r1, r2, [r3]
   1cb42:	4770      	bx	lr
   1cb44:	20000834 	.word	0x20000834

0001cb48 <nrf_cc3xx_platform_ctr_drbg_init>:
   1cb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb4c:	4c15      	ldr	r4, [pc, #84]	; (1cba4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1cb4e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1cbac <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1cb52:	2800      	cmp	r0, #0
   1cb54:	bf18      	it	ne
   1cb56:	4604      	movne	r4, r0
   1cb58:	b083      	sub	sp, #12
   1cb5a:	6820      	ldr	r0, [r4, #0]
   1cb5c:	4540      	cmp	r0, r8
   1cb5e:	d01d      	beq.n	1cb9c <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1cb60:	460d      	mov	r5, r1
   1cb62:	4620      	mov	r0, r4
   1cb64:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1cb68:	f104 0904 	add.w	r9, r4, #4
   1cb6c:	4616      	mov	r6, r2
   1cb6e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1cb72:	f000 f8d3 	bl	1cd1c <mbedtls_platform_zeroize>
   1cb76:	4648      	mov	r0, r9
   1cb78:	f000 fcf2 	bl	1d560 <cc_mbedtls_entropy_init>
   1cb7c:	4638      	mov	r0, r7
   1cb7e:	f000 fb1f 	bl	1d1c0 <cc_mbedtls_ctr_drbg_init>
   1cb82:	4909      	ldr	r1, [pc, #36]	; (1cba8 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1cb84:	9600      	str	r6, [sp, #0]
   1cb86:	464a      	mov	r2, r9
   1cb88:	4638      	mov	r0, r7
   1cb8a:	462b      	mov	r3, r5
   1cb8c:	f000 fb2e 	bl	1d1ec <cc_mbedtls_ctr_drbg_seed>
   1cb90:	b908      	cbnz	r0, 1cb96 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1cb92:	f8c4 8000 	str.w	r8, [r4]
   1cb96:	b003      	add	sp, #12
   1cb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb9c:	2000      	movs	r0, #0
   1cb9e:	b003      	add	sp, #12
   1cba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cba4:	20003b44 	.word	0x20003b44
   1cba8:	0001d5dd 	.word	0x0001d5dd
   1cbac:	5ac9bca5 	.word	0x5ac9bca5

0001cbb0 <nrf_cc3xx_platform_ctr_drbg_get>:
   1cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbb2:	4c0d      	ldr	r4, [pc, #52]	; (1cbe8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1cbb4:	4e0d      	ldr	r6, [pc, #52]	; (1cbec <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1cbb6:	2800      	cmp	r0, #0
   1cbb8:	bf08      	it	eq
   1cbba:	4620      	moveq	r0, r4
   1cbbc:	b083      	sub	sp, #12
   1cbbe:	6807      	ldr	r7, [r0, #0]
   1cbc0:	42b7      	cmp	r7, r6
   1cbc2:	d10e      	bne.n	1cbe2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1cbc4:	2600      	movs	r6, #0
   1cbc6:	461d      	mov	r5, r3
   1cbc8:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1cbcc:	9600      	str	r6, [sp, #0]
   1cbce:	4633      	mov	r3, r6
   1cbd0:	4614      	mov	r4, r2
   1cbd2:	f000 fb57 	bl	1d284 <cc_mbedtls_ctr_drbg_random_with_add>
   1cbd6:	2800      	cmp	r0, #0
   1cbd8:	bf18      	it	ne
   1cbda:	4634      	movne	r4, r6
   1cbdc:	602c      	str	r4, [r5, #0]
   1cbde:	b003      	add	sp, #12
   1cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cbe2:	4803      	ldr	r0, [pc, #12]	; (1cbf0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1cbe4:	e7fb      	b.n	1cbde <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1cbe6:	bf00      	nop
   1cbe8:	20003b44 	.word	0x20003b44
   1cbec:	5ac9bca5 	.word	0x5ac9bca5
   1cbf0:	ffff8fe8 	.word	0xffff8fe8

0001cbf4 <mutex_free>:
   1cbf4:	b510      	push	{r4, lr}
   1cbf6:	4604      	mov	r4, r0
   1cbf8:	b130      	cbz	r0, 1cc08 <mutex_free+0x14>
   1cbfa:	6863      	ldr	r3, [r4, #4]
   1cbfc:	06db      	lsls	r3, r3, #27
   1cbfe:	d502      	bpl.n	1cc06 <mutex_free+0x12>
   1cc00:	2300      	movs	r3, #0
   1cc02:	6023      	str	r3, [r4, #0]
   1cc04:	6063      	str	r3, [r4, #4]
   1cc06:	bd10      	pop	{r4, pc}
   1cc08:	4b02      	ldr	r3, [pc, #8]	; (1cc14 <mutex_free+0x20>)
   1cc0a:	4803      	ldr	r0, [pc, #12]	; (1cc18 <mutex_free+0x24>)
   1cc0c:	685b      	ldr	r3, [r3, #4]
   1cc0e:	4798      	blx	r3
   1cc10:	e7f3      	b.n	1cbfa <mutex_free+0x6>
   1cc12:	bf00      	nop
   1cc14:	20000834 	.word	0x20000834
   1cc18:	00024be4 	.word	0x00024be4

0001cc1c <mutex_unlock>:
   1cc1c:	b168      	cbz	r0, 1cc3a <mutex_unlock+0x1e>
   1cc1e:	6843      	ldr	r3, [r0, #4]
   1cc20:	b13b      	cbz	r3, 1cc32 <mutex_unlock+0x16>
   1cc22:	06db      	lsls	r3, r3, #27
   1cc24:	d507      	bpl.n	1cc36 <mutex_unlock+0x1a>
   1cc26:	f3bf 8f5f 	dmb	sy
   1cc2a:	2300      	movs	r3, #0
   1cc2c:	6003      	str	r3, [r0, #0]
   1cc2e:	4618      	mov	r0, r3
   1cc30:	4770      	bx	lr
   1cc32:	4803      	ldr	r0, [pc, #12]	; (1cc40 <mutex_unlock+0x24>)
   1cc34:	4770      	bx	lr
   1cc36:	4803      	ldr	r0, [pc, #12]	; (1cc44 <mutex_unlock+0x28>)
   1cc38:	4770      	bx	lr
   1cc3a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cc3e:	4770      	bx	lr
   1cc40:	ffff8fea 	.word	0xffff8fea
   1cc44:	ffff8fe9 	.word	0xffff8fe9

0001cc48 <mutex_init>:
   1cc48:	b510      	push	{r4, lr}
   1cc4a:	4604      	mov	r4, r0
   1cc4c:	b120      	cbz	r0, 1cc58 <mutex_init+0x10>
   1cc4e:	2200      	movs	r2, #0
   1cc50:	2311      	movs	r3, #17
   1cc52:	6022      	str	r2, [r4, #0]
   1cc54:	6063      	str	r3, [r4, #4]
   1cc56:	bd10      	pop	{r4, pc}
   1cc58:	4801      	ldr	r0, [pc, #4]	; (1cc60 <mutex_init+0x18>)
   1cc5a:	f7ff ff4d 	bl	1caf8 <CC_PalAbort>
   1cc5e:	e7f6      	b.n	1cc4e <mutex_init+0x6>
   1cc60:	00024c0c 	.word	0x00024c0c

0001cc64 <mutex_lock>:
   1cc64:	b1c0      	cbz	r0, 1cc98 <mutex_lock+0x34>
   1cc66:	6843      	ldr	r3, [r0, #4]
   1cc68:	b1a3      	cbz	r3, 1cc94 <mutex_lock+0x30>
   1cc6a:	06db      	lsls	r3, r3, #27
   1cc6c:	d510      	bpl.n	1cc90 <mutex_lock+0x2c>
   1cc6e:	2201      	movs	r2, #1
   1cc70:	f3bf 8f5b 	dmb	ish
   1cc74:	e850 3f00 	ldrex	r3, [r0]
   1cc78:	e840 2100 	strex	r1, r2, [r0]
   1cc7c:	2900      	cmp	r1, #0
   1cc7e:	d1f9      	bne.n	1cc74 <mutex_lock+0x10>
   1cc80:	f3bf 8f5b 	dmb	ish
   1cc84:	2b01      	cmp	r3, #1
   1cc86:	d0f3      	beq.n	1cc70 <mutex_lock+0xc>
   1cc88:	f3bf 8f5f 	dmb	sy
   1cc8c:	2000      	movs	r0, #0
   1cc8e:	4770      	bx	lr
   1cc90:	4803      	ldr	r0, [pc, #12]	; (1cca0 <mutex_lock+0x3c>)
   1cc92:	4770      	bx	lr
   1cc94:	4803      	ldr	r0, [pc, #12]	; (1cca4 <mutex_lock+0x40>)
   1cc96:	4770      	bx	lr
   1cc98:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1cc9c:	4770      	bx	lr
   1cc9e:	bf00      	nop
   1cca0:	ffff8fe9 	.word	0xffff8fe9
   1cca4:	ffff8fea 	.word	0xffff8fea

0001cca8 <nrf_cc3xx_platform_set_mutexes>:
   1cca8:	b570      	push	{r4, r5, r6, lr}
   1ccaa:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ccae:	4c13      	ldr	r4, [pc, #76]	; (1ccfc <nrf_cc3xx_platform_set_mutexes+0x54>)
   1ccb0:	4d13      	ldr	r5, [pc, #76]	; (1cd00 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1ccb2:	e9c4 2300 	strd	r2, r3, [r4]
   1ccb6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1ccba:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1ccbe:	4b11      	ldr	r3, [pc, #68]	; (1cd04 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1ccc0:	6808      	ldr	r0, [r1, #0]
   1ccc2:	6018      	str	r0, [r3, #0]
   1ccc4:	6848      	ldr	r0, [r1, #4]
   1ccc6:	6058      	str	r0, [r3, #4]
   1ccc8:	6888      	ldr	r0, [r1, #8]
   1ccca:	6098      	str	r0, [r3, #8]
   1cccc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1ccd0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1ccd4:	60de      	str	r6, [r3, #12]
   1ccd6:	6118      	str	r0, [r3, #16]
   1ccd8:	06cb      	lsls	r3, r1, #27
   1ccda:	d50d      	bpl.n	1ccf8 <nrf_cc3xx_platform_set_mutexes+0x50>
   1ccdc:	2300      	movs	r3, #0
   1ccde:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1cce2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1cce6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1ccea:	4790      	blx	r2
   1ccec:	6823      	ldr	r3, [r4, #0]
   1ccee:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1ccf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ccf6:	4718      	bx	r3
   1ccf8:	bd70      	pop	{r4, r5, r6, pc}
   1ccfa:	bf00      	nop
   1ccfc:	20000844 	.word	0x20000844
   1cd00:	20003b44 	.word	0x20003b44
   1cd04:	20000854 	.word	0x20000854

0001cd08 <mbedtls_zeroize_internal>:
   1cd08:	b138      	cbz	r0, 1cd1a <mbedtls_zeroize_internal+0x12>
   1cd0a:	b131      	cbz	r1, 1cd1a <mbedtls_zeroize_internal+0x12>
   1cd0c:	4401      	add	r1, r0
   1cd0e:	2200      	movs	r2, #0
   1cd10:	4603      	mov	r3, r0
   1cd12:	3001      	adds	r0, #1
   1cd14:	4281      	cmp	r1, r0
   1cd16:	701a      	strb	r2, [r3, #0]
   1cd18:	d1fa      	bne.n	1cd10 <mbedtls_zeroize_internal+0x8>
   1cd1a:	4770      	bx	lr

0001cd1c <mbedtls_platform_zeroize>:
   1cd1c:	b138      	cbz	r0, 1cd2e <mbedtls_platform_zeroize+0x12>
   1cd1e:	b131      	cbz	r1, 1cd2e <mbedtls_platform_zeroize+0x12>
   1cd20:	4401      	add	r1, r0
   1cd22:	2200      	movs	r2, #0
   1cd24:	4603      	mov	r3, r0
   1cd26:	3001      	adds	r0, #1
   1cd28:	4288      	cmp	r0, r1
   1cd2a:	701a      	strb	r2, [r3, #0]
   1cd2c:	d1fa      	bne.n	1cd24 <mbedtls_platform_zeroize+0x8>
   1cd2e:	4770      	bx	lr

0001cd30 <block_cipher_df>:
   1cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd34:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1cd38:	b0b1      	sub	sp, #196	; 0xc4
   1cd3a:	f200 812e 	bhi.w	1cf9a <block_cipher_df+0x26a>
   1cd3e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1cfac <block_cipher_df+0x27c>
   1cd42:	4614      	mov	r4, r2
   1cd44:	460d      	mov	r5, r1
   1cd46:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1cd4a:	2100      	movs	r1, #0
   1cd4c:	4682      	mov	sl, r0
   1cd4e:	4648      	mov	r0, r9
   1cd50:	f003 fb64 	bl	2041c <memset>
   1cd54:	a813      	add	r0, sp, #76	; 0x4c
   1cd56:	f001 f9e5 	bl	1e124 <cc_mbedtls_aes_init>
   1cd5a:	2600      	movs	r6, #0
   1cd5c:	4629      	mov	r1, r5
   1cd5e:	2320      	movs	r3, #32
   1cd60:	ba65      	rev16	r5, r4
   1cd62:	4622      	mov	r2, r4
   1cd64:	f109 0018 	add.w	r0, r9, #24
   1cd68:	f8a9 5012 	strh.w	r5, [r9, #18]
   1cd6c:	f889 3017 	strb.w	r3, [r9, #23]
   1cd70:	f8a9 6010 	strh.w	r6, [r9, #16]
   1cd74:	f003 fb47 	bl	20406 <memcpy>
   1cd78:	eb09 0304 	add.w	r3, r9, r4
   1cd7c:	2280      	movs	r2, #128	; 0x80
   1cd7e:	4d88      	ldr	r5, [pc, #544]	; (1cfa0 <block_cipher_df+0x270>)
   1cd80:	761a      	strb	r2, [r3, #24]
   1cd82:	4b88      	ldr	r3, [pc, #544]	; (1cfa4 <block_cipher_df+0x274>)
   1cd84:	9503      	str	r5, [sp, #12]
   1cd86:	9304      	str	r3, [sp, #16]
   1cd88:	a813      	add	r0, sp, #76	; 0x4c
   1cd8a:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1cd8e:	a903      	add	r1, sp, #12
   1cd90:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1cd94:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1cd98:	f001 f9da 	bl	1e150 <cc_mbedtls_aes_setkey_enc>
   1cd9c:	4680      	mov	r8, r0
   1cd9e:	2800      	cmp	r0, #0
   1cda0:	f040 80da 	bne.w	1cf58 <block_cipher_df+0x228>
   1cda4:	f104 0319 	add.w	r3, r4, #25
   1cda8:	9301      	str	r3, [sp, #4]
   1cdaa:	af07      	add	r7, sp, #28
   1cdac:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1cdb0:	2210      	movs	r2, #16
   1cdb2:	2100      	movs	r1, #0
   1cdb4:	4638      	mov	r0, r7
   1cdb6:	f003 fb31 	bl	2041c <memset>
   1cdba:	4c7b      	ldr	r4, [pc, #492]	; (1cfa8 <block_cipher_df+0x278>)
   1cdbc:	9d01      	ldr	r5, [sp, #4]
   1cdbe:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1cdc2:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1cdc6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1cdca:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1cdce:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1cdd2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1cdd6:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1cdda:	404e      	eors	r6, r1
   1cddc:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1cde0:	f88d 601d 	strb.w	r6, [sp, #29]
   1cde4:	ea8e 0303 	eor.w	r3, lr, r3
   1cde8:	4050      	eors	r0, r2
   1cdea:	ea8c 0101 	eor.w	r1, ip, r1
   1cdee:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1cdf2:	f88d 301c 	strb.w	r3, [sp, #28]
   1cdf6:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1cdfa:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1cdfe:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1ce02:	f88d 001e 	strb.w	r0, [sp, #30]
   1ce06:	f88d 101f 	strb.w	r1, [sp, #31]
   1ce0a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1ce0e:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1ce12:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1ce16:	405a      	eors	r2, r3
   1ce18:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1ce1c:	f88d 2020 	strb.w	r2, [sp, #32]
   1ce20:	ea8c 0606 	eor.w	r6, ip, r6
   1ce24:	4048      	eors	r0, r1
   1ce26:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1ce2a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1ce2e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1ce32:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1ce36:	ea8e 0303 	eor.w	r3, lr, r3
   1ce3a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1ce3e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1ce42:	ea8c 0101 	eor.w	r1, ip, r1
   1ce46:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1ce4a:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1ce4e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1ce52:	ea82 020c 	eor.w	r2, r2, ip
   1ce56:	4073      	eors	r3, r6
   1ce58:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1ce5c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1ce60:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1ce64:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1ce68:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1ce6c:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1ce70:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1ce74:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1ce78:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1ce7c:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1ce80:	ea8e 0202 	eor.w	r2, lr, r2
   1ce84:	4041      	eors	r1, r0
   1ce86:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1ce8a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1ce8e:	4073      	eors	r3, r6
   1ce90:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1ce94:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1ce98:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1ce9c:	ea8c 0000 	eor.w	r0, ip, r0
   1cea0:	4056      	eors	r6, r2
   1cea2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1cea6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1ceaa:	463b      	mov	r3, r7
   1ceac:	463a      	mov	r2, r7
   1ceae:	2101      	movs	r1, #1
   1ceb0:	a813      	add	r0, sp, #76	; 0x4c
   1ceb2:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1ceb6:	f001 f965 	bl	1e184 <cc_mbedtls_aes_crypt_ecb>
   1ceba:	2d10      	cmp	r5, #16
   1cebc:	bf94      	ite	ls
   1cebe:	1b6d      	subls	r5, r5, r5
   1cec0:	3d10      	subhi	r5, #16
   1cec2:	2800      	cmp	r0, #0
   1cec4:	d167      	bne.n	1cf96 <block_cipher_df+0x266>
   1cec6:	3410      	adds	r4, #16
   1cec8:	2d00      	cmp	r5, #0
   1ceca:	f47f af78 	bne.w	1cdbe <block_cipher_df+0x8e>
   1cece:	eb0b 0008 	add.w	r0, fp, r8
   1ced2:	2210      	movs	r2, #16
   1ced4:	4639      	mov	r1, r7
   1ced6:	f003 fa96 	bl	20406 <memcpy>
   1ceda:	f899 3003 	ldrb.w	r3, [r9, #3]
   1cede:	f108 0810 	add.w	r8, r8, #16
   1cee2:	3301      	adds	r3, #1
   1cee4:	f1b8 0f20 	cmp.w	r8, #32
   1cee8:	f889 3003 	strb.w	r3, [r9, #3]
   1ceec:	f47f af60 	bne.w	1cdb0 <block_cipher_df+0x80>
   1cef0:	2280      	movs	r2, #128	; 0x80
   1cef2:	4659      	mov	r1, fp
   1cef4:	a813      	add	r0, sp, #76	; 0x4c
   1cef6:	f001 f92b 	bl	1e150 <cc_mbedtls_aes_setkey_enc>
   1cefa:	4680      	mov	r8, r0
   1cefc:	bb78      	cbnz	r0, 1cf5e <block_cipher_df+0x22e>
   1cefe:	f10a 0520 	add.w	r5, sl, #32
   1cf02:	4654      	mov	r4, sl
   1cf04:	ab0f      	add	r3, sp, #60	; 0x3c
   1cf06:	461a      	mov	r2, r3
   1cf08:	2101      	movs	r1, #1
   1cf0a:	a813      	add	r0, sp, #76	; 0x4c
   1cf0c:	f001 f93a 	bl	1e184 <cc_mbedtls_aes_crypt_ecb>
   1cf10:	2210      	movs	r2, #16
   1cf12:	4680      	mov	r8, r0
   1cf14:	a90f      	add	r1, sp, #60	; 0x3c
   1cf16:	4620      	mov	r0, r4
   1cf18:	4414      	add	r4, r2
   1cf1a:	f1b8 0f00 	cmp.w	r8, #0
   1cf1e:	d11e      	bne.n	1cf5e <block_cipher_df+0x22e>
   1cf20:	f003 fa71 	bl	20406 <memcpy>
   1cf24:	42ac      	cmp	r4, r5
   1cf26:	d1ed      	bne.n	1cf04 <block_cipher_df+0x1d4>
   1cf28:	a813      	add	r0, sp, #76	; 0x4c
   1cf2a:	f001 f90b 	bl	1e144 <cc_mbedtls_aes_free>
   1cf2e:	481f      	ldr	r0, [pc, #124]	; (1cfac <block_cipher_df+0x27c>)
   1cf30:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cf34:	f7ff fef2 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf38:	4658      	mov	r0, fp
   1cf3a:	2120      	movs	r1, #32
   1cf3c:	f7ff feee 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf40:	a803      	add	r0, sp, #12
   1cf42:	2110      	movs	r1, #16
   1cf44:	f7ff feea 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf48:	4638      	mov	r0, r7
   1cf4a:	2110      	movs	r1, #16
   1cf4c:	f7ff fee6 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf50:	4640      	mov	r0, r8
   1cf52:	b031      	add	sp, #196	; 0xc4
   1cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf58:	af07      	add	r7, sp, #28
   1cf5a:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1cf5e:	a813      	add	r0, sp, #76	; 0x4c
   1cf60:	f001 f8f0 	bl	1e144 <cc_mbedtls_aes_free>
   1cf64:	4811      	ldr	r0, [pc, #68]	; (1cfac <block_cipher_df+0x27c>)
   1cf66:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cf6a:	f7ff fed7 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf6e:	4658      	mov	r0, fp
   1cf70:	2120      	movs	r1, #32
   1cf72:	f7ff fed3 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf76:	a803      	add	r0, sp, #12
   1cf78:	2110      	movs	r1, #16
   1cf7a:	f7ff fecf 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf7e:	4638      	mov	r0, r7
   1cf80:	2110      	movs	r1, #16
   1cf82:	f7ff fecb 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf86:	4650      	mov	r0, sl
   1cf88:	2120      	movs	r1, #32
   1cf8a:	f7ff fec7 	bl	1cd1c <mbedtls_platform_zeroize>
   1cf8e:	4640      	mov	r0, r8
   1cf90:	b031      	add	sp, #196	; 0xc4
   1cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf96:	4680      	mov	r8, r0
   1cf98:	e7e1      	b.n	1cf5e <block_cipher_df+0x22e>
   1cf9a:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1cf9e:	e7f6      	b.n	1cf8e <block_cipher_df+0x25e>
   1cfa0:	03020100 	.word	0x03020100
   1cfa4:	07060504 	.word	0x07060504
   1cfa8:	20002ab8 	.word	0x20002ab8
   1cfac:	20002aa8 	.word	0x20002aa8

0001cfb0 <ctr_drbg_update_internal>:
   1cfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfb4:	b088      	sub	sp, #32
   1cfb6:	4604      	mov	r4, r0
   1cfb8:	2220      	movs	r2, #32
   1cfba:	460d      	mov	r5, r1
   1cfbc:	4668      	mov	r0, sp
   1cfbe:	2100      	movs	r1, #0
   1cfc0:	eb04 0802 	add.w	r8, r4, r2
   1cfc4:	f003 fa2a 	bl	2041c <memset>
   1cfc8:	466e      	mov	r6, sp
   1cfca:	7be2      	ldrb	r2, [r4, #15]
   1cfcc:	3201      	adds	r2, #1
   1cfce:	b2d2      	uxtb	r2, r2
   1cfd0:	73e2      	strb	r2, [r4, #15]
   1cfd2:	2a00      	cmp	r2, #0
   1cfd4:	d14d      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1cfd6:	7ba2      	ldrb	r2, [r4, #14]
   1cfd8:	3201      	adds	r2, #1
   1cfda:	b2d2      	uxtb	r2, r2
   1cfdc:	73a2      	strb	r2, [r4, #14]
   1cfde:	2a00      	cmp	r2, #0
   1cfe0:	d147      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1cfe2:	7b63      	ldrb	r3, [r4, #13]
   1cfe4:	3301      	adds	r3, #1
   1cfe6:	b2db      	uxtb	r3, r3
   1cfe8:	7363      	strb	r3, [r4, #13]
   1cfea:	2b00      	cmp	r3, #0
   1cfec:	d141      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1cfee:	7b23      	ldrb	r3, [r4, #12]
   1cff0:	3301      	adds	r3, #1
   1cff2:	b2db      	uxtb	r3, r3
   1cff4:	7323      	strb	r3, [r4, #12]
   1cff6:	2b00      	cmp	r3, #0
   1cff8:	d13b      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1cffa:	7ae3      	ldrb	r3, [r4, #11]
   1cffc:	3301      	adds	r3, #1
   1cffe:	b2db      	uxtb	r3, r3
   1d000:	72e3      	strb	r3, [r4, #11]
   1d002:	2b00      	cmp	r3, #0
   1d004:	d135      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1d006:	7aa3      	ldrb	r3, [r4, #10]
   1d008:	3301      	adds	r3, #1
   1d00a:	b2db      	uxtb	r3, r3
   1d00c:	72a3      	strb	r3, [r4, #10]
   1d00e:	2b00      	cmp	r3, #0
   1d010:	d12f      	bne.n	1d072 <ctr_drbg_update_internal+0xc2>
   1d012:	7a63      	ldrb	r3, [r4, #9]
   1d014:	3301      	adds	r3, #1
   1d016:	b2db      	uxtb	r3, r3
   1d018:	7263      	strb	r3, [r4, #9]
   1d01a:	bb53      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d01c:	7a23      	ldrb	r3, [r4, #8]
   1d01e:	3301      	adds	r3, #1
   1d020:	b2db      	uxtb	r3, r3
   1d022:	7223      	strb	r3, [r4, #8]
   1d024:	bb2b      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d026:	79e3      	ldrb	r3, [r4, #7]
   1d028:	3301      	adds	r3, #1
   1d02a:	b2db      	uxtb	r3, r3
   1d02c:	71e3      	strb	r3, [r4, #7]
   1d02e:	bb03      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d030:	79a3      	ldrb	r3, [r4, #6]
   1d032:	3301      	adds	r3, #1
   1d034:	b2db      	uxtb	r3, r3
   1d036:	71a3      	strb	r3, [r4, #6]
   1d038:	b9db      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d03a:	7963      	ldrb	r3, [r4, #5]
   1d03c:	3301      	adds	r3, #1
   1d03e:	b2db      	uxtb	r3, r3
   1d040:	7163      	strb	r3, [r4, #5]
   1d042:	b9b3      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d044:	7923      	ldrb	r3, [r4, #4]
   1d046:	3301      	adds	r3, #1
   1d048:	b2db      	uxtb	r3, r3
   1d04a:	7123      	strb	r3, [r4, #4]
   1d04c:	b98b      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d04e:	78e3      	ldrb	r3, [r4, #3]
   1d050:	3301      	adds	r3, #1
   1d052:	b2db      	uxtb	r3, r3
   1d054:	70e3      	strb	r3, [r4, #3]
   1d056:	b963      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d058:	78a3      	ldrb	r3, [r4, #2]
   1d05a:	3301      	adds	r3, #1
   1d05c:	b2db      	uxtb	r3, r3
   1d05e:	70a3      	strb	r3, [r4, #2]
   1d060:	b93b      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d062:	7863      	ldrb	r3, [r4, #1]
   1d064:	3301      	adds	r3, #1
   1d066:	b2db      	uxtb	r3, r3
   1d068:	7063      	strb	r3, [r4, #1]
   1d06a:	b913      	cbnz	r3, 1d072 <ctr_drbg_update_internal+0xc2>
   1d06c:	7823      	ldrb	r3, [r4, #0]
   1d06e:	3301      	adds	r3, #1
   1d070:	7023      	strb	r3, [r4, #0]
   1d072:	4633      	mov	r3, r6
   1d074:	4622      	mov	r2, r4
   1d076:	2101      	movs	r1, #1
   1d078:	4640      	mov	r0, r8
   1d07a:	f001 f883 	bl	1e184 <cc_mbedtls_aes_crypt_ecb>
   1d07e:	4607      	mov	r7, r0
   1d080:	2800      	cmp	r0, #0
   1d082:	d12b      	bne.n	1d0dc <ctr_drbg_update_internal+0x12c>
   1d084:	3610      	adds	r6, #16
   1d086:	ab08      	add	r3, sp, #32
   1d088:	429e      	cmp	r6, r3
   1d08a:	d19e      	bne.n	1cfca <ctr_drbg_update_internal+0x1a>
   1d08c:	9e01      	ldr	r6, [sp, #4]
   1d08e:	686a      	ldr	r2, [r5, #4]
   1d090:	9f00      	ldr	r7, [sp, #0]
   1d092:	6829      	ldr	r1, [r5, #0]
   1d094:	68ab      	ldr	r3, [r5, #8]
   1d096:	4072      	eors	r2, r6
   1d098:	9e02      	ldr	r6, [sp, #8]
   1d09a:	9201      	str	r2, [sp, #4]
   1d09c:	4079      	eors	r1, r7
   1d09e:	4073      	eors	r3, r6
   1d0a0:	9100      	str	r1, [sp, #0]
   1d0a2:	9e03      	ldr	r6, [sp, #12]
   1d0a4:	68e9      	ldr	r1, [r5, #12]
   1d0a6:	692a      	ldr	r2, [r5, #16]
   1d0a8:	9302      	str	r3, [sp, #8]
   1d0aa:	4071      	eors	r1, r6
   1d0ac:	9e04      	ldr	r6, [sp, #16]
   1d0ae:	696b      	ldr	r3, [r5, #20]
   1d0b0:	9103      	str	r1, [sp, #12]
   1d0b2:	4056      	eors	r6, r2
   1d0b4:	9a05      	ldr	r2, [sp, #20]
   1d0b6:	9604      	str	r6, [sp, #16]
   1d0b8:	ea83 0102 	eor.w	r1, r3, r2
   1d0bc:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1d0c0:	9d06      	ldr	r5, [sp, #24]
   1d0c2:	9105      	str	r1, [sp, #20]
   1d0c4:	4055      	eors	r5, r2
   1d0c6:	9a07      	ldr	r2, [sp, #28]
   1d0c8:	4640      	mov	r0, r8
   1d0ca:	4053      	eors	r3, r2
   1d0cc:	4669      	mov	r1, sp
   1d0ce:	2280      	movs	r2, #128	; 0x80
   1d0d0:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1d0d4:	f001 f83c 	bl	1e150 <cc_mbedtls_aes_setkey_enc>
   1d0d8:	4607      	mov	r7, r0
   1d0da:	b138      	cbz	r0, 1d0ec <ctr_drbg_update_internal+0x13c>
   1d0dc:	4668      	mov	r0, sp
   1d0de:	2120      	movs	r1, #32
   1d0e0:	f7ff fe1c 	bl	1cd1c <mbedtls_platform_zeroize>
   1d0e4:	4638      	mov	r0, r7
   1d0e6:	b008      	add	sp, #32
   1d0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d0ec:	2210      	movs	r2, #16
   1d0ee:	4620      	mov	r0, r4
   1d0f0:	eb0d 0102 	add.w	r1, sp, r2
   1d0f4:	f003 f987 	bl	20406 <memcpy>
   1d0f8:	e7f0      	b.n	1d0dc <ctr_drbg_update_internal+0x12c>
   1d0fa:	bf00      	nop

0001d0fc <mbedtls_ctr_drbg_reseed_internal>:
   1d0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d100:	4604      	mov	r4, r0
   1d102:	6980      	ldr	r0, [r0, #24]
   1d104:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1d108:	d852      	bhi.n	1d1b0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d10a:	461d      	mov	r5, r3
   1d10c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1d110:	42ab      	cmp	r3, r5
   1d112:	d34d      	bcc.n	1d1b0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d114:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1d118:	1a18      	subs	r0, r3, r0
   1d11a:	4290      	cmp	r0, r2
   1d11c:	4616      	mov	r6, r2
   1d11e:	d347      	bcc.n	1d1b0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1d120:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d1bc <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1d124:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1d128:	460f      	mov	r7, r1
   1d12a:	4648      	mov	r0, r9
   1d12c:	2100      	movs	r1, #0
   1d12e:	f003 f975 	bl	2041c <memset>
   1d132:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1d136:	69a2      	ldr	r2, [r4, #24]
   1d138:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1d13c:	4649      	mov	r1, r9
   1d13e:	4798      	blx	r3
   1d140:	2800      	cmp	r0, #0
   1d142:	d138      	bne.n	1d1b6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d144:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1d148:	b13d      	cbz	r5, 1d15a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1d14a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1d14e:	462a      	mov	r2, r5
   1d150:	eb09 0108 	add.w	r1, r9, r8
   1d154:	4798      	blx	r3
   1d156:	bb70      	cbnz	r0, 1d1b6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1d158:	44a8      	add	r8, r5
   1d15a:	b107      	cbz	r7, 1d15e <mbedtls_ctr_drbg_reseed_internal+0x62>
   1d15c:	b9c6      	cbnz	r6, 1d190 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1d15e:	4917      	ldr	r1, [pc, #92]	; (1d1bc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d160:	4642      	mov	r2, r8
   1d162:	4608      	mov	r0, r1
   1d164:	f7ff fde4 	bl	1cd30 <block_cipher_df>
   1d168:	4605      	mov	r5, r0
   1d16a:	b138      	cbz	r0, 1d17c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d16c:	4813      	ldr	r0, [pc, #76]	; (1d1bc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d16e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d172:	f7ff fdd3 	bl	1cd1c <mbedtls_platform_zeroize>
   1d176:	4628      	mov	r0, r5
   1d178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d17c:	490f      	ldr	r1, [pc, #60]	; (1d1bc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d17e:	4620      	mov	r0, r4
   1d180:	f7ff ff16 	bl	1cfb0 <ctr_drbg_update_internal>
   1d184:	4605      	mov	r5, r0
   1d186:	2800      	cmp	r0, #0
   1d188:	d1f0      	bne.n	1d16c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d18a:	2301      	movs	r3, #1
   1d18c:	6123      	str	r3, [r4, #16]
   1d18e:	e7ed      	b.n	1d16c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d190:	4639      	mov	r1, r7
   1d192:	eb09 0008 	add.w	r0, r9, r8
   1d196:	4632      	mov	r2, r6
   1d198:	f003 f935 	bl	20406 <memcpy>
   1d19c:	4907      	ldr	r1, [pc, #28]	; (1d1bc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1d19e:	44b0      	add	r8, r6
   1d1a0:	4642      	mov	r2, r8
   1d1a2:	4608      	mov	r0, r1
   1d1a4:	f7ff fdc4 	bl	1cd30 <block_cipher_df>
   1d1a8:	4605      	mov	r5, r0
   1d1aa:	2800      	cmp	r0, #0
   1d1ac:	d1de      	bne.n	1d16c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1d1ae:	e7e5      	b.n	1d17c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1d1b0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1d1b4:	e7df      	b.n	1d176 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d1b6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1d1ba:	e7dc      	b.n	1d176 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1d1bc:	20002c48 	.word	0x20002c48

0001d1c0 <cc_mbedtls_ctr_drbg_init>:
   1d1c0:	b510      	push	{r4, lr}
   1d1c2:	22a4      	movs	r2, #164	; 0xa4
   1d1c4:	4604      	mov	r4, r0
   1d1c6:	2100      	movs	r1, #0
   1d1c8:	f003 f928 	bl	2041c <memset>
   1d1cc:	4b06      	ldr	r3, [pc, #24]	; (1d1e8 <cc_mbedtls_ctr_drbg_init+0x28>)
   1d1ce:	f04f 31ff 	mov.w	r1, #4294967295
   1d1d2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1d1d6:	6121      	str	r1, [r4, #16]
   1d1d8:	61e2      	str	r2, [r4, #28]
   1d1da:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1d1de:	681b      	ldr	r3, [r3, #0]
   1d1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d1e4:	4718      	bx	r3
   1d1e6:	bf00      	nop
   1d1e8:	20000898 	.word	0x20000898

0001d1ec <cc_mbedtls_ctr_drbg_seed>:
   1d1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d1f0:	b085      	sub	sp, #20
   1d1f2:	4605      	mov	r5, r0
   1d1f4:	460f      	mov	r7, r1
   1d1f6:	4616      	mov	r6, r2
   1d1f8:	4668      	mov	r0, sp
   1d1fa:	2210      	movs	r2, #16
   1d1fc:	2100      	movs	r1, #0
   1d1fe:	4699      	mov	r9, r3
   1d200:	f003 f90c 	bl	2041c <memset>
   1d204:	4b1d      	ldr	r3, [pc, #116]	; (1d27c <cc_mbedtls_ctr_drbg_seed+0x90>)
   1d206:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1d20a:	681b      	ldr	r3, [r3, #0]
   1d20c:	4640      	mov	r0, r8
   1d20e:	4798      	blx	r3
   1d210:	b120      	cbz	r0, 1d21c <cc_mbedtls_ctr_drbg_seed+0x30>
   1d212:	4604      	mov	r4, r0
   1d214:	4620      	mov	r0, r4
   1d216:	b005      	add	sp, #20
   1d218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d21c:	f105 0420 	add.w	r4, r5, #32
   1d220:	4620      	mov	r0, r4
   1d222:	f000 ff7f 	bl	1e124 <cc_mbedtls_aes_init>
   1d226:	69aa      	ldr	r2, [r5, #24]
   1d228:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1d22c:	692e      	ldr	r6, [r5, #16]
   1d22e:	b9e2      	cbnz	r2, 1d26a <cc_mbedtls_ctr_drbg_seed+0x7e>
   1d230:	2220      	movs	r2, #32
   1d232:	2e00      	cmp	r6, #0
   1d234:	61aa      	str	r2, [r5, #24]
   1d236:	db1f      	blt.n	1d278 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d238:	4620      	mov	r0, r4
   1d23a:	4669      	mov	r1, sp
   1d23c:	2280      	movs	r2, #128	; 0x80
   1d23e:	f000 ff87 	bl	1e150 <cc_mbedtls_aes_setkey_enc>
   1d242:	4604      	mov	r4, r0
   1d244:	b930      	cbnz	r0, 1d254 <cc_mbedtls_ctr_drbg_seed+0x68>
   1d246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d248:	4633      	mov	r3, r6
   1d24a:	4649      	mov	r1, r9
   1d24c:	4628      	mov	r0, r5
   1d24e:	f7ff ff55 	bl	1d0fc <mbedtls_ctr_drbg_reseed_internal>
   1d252:	4604      	mov	r4, r0
   1d254:	4b0a      	ldr	r3, [pc, #40]	; (1d280 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1d256:	4640      	mov	r0, r8
   1d258:	681b      	ldr	r3, [r3, #0]
   1d25a:	4798      	blx	r3
   1d25c:	2800      	cmp	r0, #0
   1d25e:	bf18      	it	ne
   1d260:	4604      	movne	r4, r0
   1d262:	4620      	mov	r0, r4
   1d264:	b005      	add	sp, #20
   1d266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d26a:	2e00      	cmp	r6, #0
   1d26c:	dae4      	bge.n	1d238 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d26e:	2a17      	cmp	r2, #23
   1d270:	d802      	bhi.n	1d278 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1d272:	1c53      	adds	r3, r2, #1
   1d274:	085e      	lsrs	r6, r3, #1
   1d276:	e7df      	b.n	1d238 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d278:	2600      	movs	r6, #0
   1d27a:	e7dd      	b.n	1d238 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1d27c:	2000089c 	.word	0x2000089c
   1d280:	200008a0 	.word	0x200008a0

0001d284 <cc_mbedtls_ctr_drbg_random_with_add>:
   1d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d288:	b08d      	sub	sp, #52	; 0x34
   1d28a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1d28e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1d292:	f200 80e4 	bhi.w	1d45e <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1d296:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1d29a:	f200 80dd 	bhi.w	1d458 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1d29e:	4604      	mov	r4, r0
   1d2a0:	4615      	mov	r5, r2
   1d2a2:	460e      	mov	r6, r1
   1d2a4:	2220      	movs	r2, #32
   1d2a6:	2100      	movs	r1, #0
   1d2a8:	a804      	add	r0, sp, #16
   1d2aa:	461f      	mov	r7, r3
   1d2ac:	f003 f8b6 	bl	2041c <memset>
   1d2b0:	4b6c      	ldr	r3, [pc, #432]	; (1d464 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1d2b2:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1d2b6:	681b      	ldr	r3, [r3, #0]
   1d2b8:	4648      	mov	r0, r9
   1d2ba:	4798      	blx	r3
   1d2bc:	4683      	mov	fp, r0
   1d2be:	2800      	cmp	r0, #0
   1d2c0:	f040 8093 	bne.w	1d3ea <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1d2c4:	6922      	ldr	r2, [r4, #16]
   1d2c6:	69e3      	ldr	r3, [r4, #28]
   1d2c8:	429a      	cmp	r2, r3
   1d2ca:	f300 8092 	bgt.w	1d3f2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1d2ce:	6963      	ldr	r3, [r4, #20]
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	f040 808e 	bne.w	1d3f2 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1d2d6:	f1b8 0f00 	cmp.w	r8, #0
   1d2da:	f040 80a9 	bne.w	1d430 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1d2de:	f8df a188 	ldr.w	sl, [pc, #392]	; 1d468 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1d2e2:	466f      	mov	r7, sp
   1d2e4:	2d00      	cmp	r5, #0
   1d2e6:	f000 8098 	beq.w	1d41a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1d2ea:	f104 0820 	add.w	r8, r4, #32
   1d2ee:	466f      	mov	r7, sp
   1d2f0:	e00e      	b.n	1d310 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1d2f2:	2d10      	cmp	r5, #16
   1d2f4:	46ab      	mov	fp, r5
   1d2f6:	bf28      	it	cs
   1d2f8:	f04f 0b10 	movcs.w	fp, #16
   1d2fc:	4630      	mov	r0, r6
   1d2fe:	465a      	mov	r2, fp
   1d300:	4639      	mov	r1, r7
   1d302:	f003 f880 	bl	20406 <memcpy>
   1d306:	ebb5 050b 	subs.w	r5, r5, fp
   1d30a:	445e      	add	r6, fp
   1d30c:	f000 8085 	beq.w	1d41a <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1d310:	7be3      	ldrb	r3, [r4, #15]
   1d312:	3301      	adds	r3, #1
   1d314:	b2db      	uxtb	r3, r3
   1d316:	73e3      	strb	r3, [r4, #15]
   1d318:	2b00      	cmp	r3, #0
   1d31a:	d14d      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d31c:	7ba3      	ldrb	r3, [r4, #14]
   1d31e:	3301      	adds	r3, #1
   1d320:	b2db      	uxtb	r3, r3
   1d322:	73a3      	strb	r3, [r4, #14]
   1d324:	2b00      	cmp	r3, #0
   1d326:	d147      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d328:	7b63      	ldrb	r3, [r4, #13]
   1d32a:	3301      	adds	r3, #1
   1d32c:	b2db      	uxtb	r3, r3
   1d32e:	7363      	strb	r3, [r4, #13]
   1d330:	2b00      	cmp	r3, #0
   1d332:	d141      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d334:	7b23      	ldrb	r3, [r4, #12]
   1d336:	3301      	adds	r3, #1
   1d338:	b2db      	uxtb	r3, r3
   1d33a:	7323      	strb	r3, [r4, #12]
   1d33c:	2b00      	cmp	r3, #0
   1d33e:	d13b      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d340:	7ae3      	ldrb	r3, [r4, #11]
   1d342:	3301      	adds	r3, #1
   1d344:	b2db      	uxtb	r3, r3
   1d346:	72e3      	strb	r3, [r4, #11]
   1d348:	2b00      	cmp	r3, #0
   1d34a:	d135      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d34c:	7aa3      	ldrb	r3, [r4, #10]
   1d34e:	3301      	adds	r3, #1
   1d350:	b2db      	uxtb	r3, r3
   1d352:	72a3      	strb	r3, [r4, #10]
   1d354:	2b00      	cmp	r3, #0
   1d356:	d12f      	bne.n	1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d358:	7a63      	ldrb	r3, [r4, #9]
   1d35a:	3301      	adds	r3, #1
   1d35c:	b2db      	uxtb	r3, r3
   1d35e:	7263      	strb	r3, [r4, #9]
   1d360:	bb53      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d362:	7a23      	ldrb	r3, [r4, #8]
   1d364:	3301      	adds	r3, #1
   1d366:	b2db      	uxtb	r3, r3
   1d368:	7223      	strb	r3, [r4, #8]
   1d36a:	bb2b      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d36c:	79e3      	ldrb	r3, [r4, #7]
   1d36e:	3301      	adds	r3, #1
   1d370:	b2db      	uxtb	r3, r3
   1d372:	71e3      	strb	r3, [r4, #7]
   1d374:	bb03      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d376:	79a3      	ldrb	r3, [r4, #6]
   1d378:	3301      	adds	r3, #1
   1d37a:	b2db      	uxtb	r3, r3
   1d37c:	71a3      	strb	r3, [r4, #6]
   1d37e:	b9db      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d380:	7963      	ldrb	r3, [r4, #5]
   1d382:	3301      	adds	r3, #1
   1d384:	b2db      	uxtb	r3, r3
   1d386:	7163      	strb	r3, [r4, #5]
   1d388:	b9b3      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d38a:	7923      	ldrb	r3, [r4, #4]
   1d38c:	3301      	adds	r3, #1
   1d38e:	b2db      	uxtb	r3, r3
   1d390:	7123      	strb	r3, [r4, #4]
   1d392:	b98b      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d394:	78e3      	ldrb	r3, [r4, #3]
   1d396:	3301      	adds	r3, #1
   1d398:	b2db      	uxtb	r3, r3
   1d39a:	70e3      	strb	r3, [r4, #3]
   1d39c:	b963      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d39e:	78a3      	ldrb	r3, [r4, #2]
   1d3a0:	3301      	adds	r3, #1
   1d3a2:	b2db      	uxtb	r3, r3
   1d3a4:	70a3      	strb	r3, [r4, #2]
   1d3a6:	b93b      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d3a8:	7863      	ldrb	r3, [r4, #1]
   1d3aa:	3301      	adds	r3, #1
   1d3ac:	b2db      	uxtb	r3, r3
   1d3ae:	7063      	strb	r3, [r4, #1]
   1d3b0:	b913      	cbnz	r3, 1d3b8 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1d3b2:	7823      	ldrb	r3, [r4, #0]
   1d3b4:	3301      	adds	r3, #1
   1d3b6:	7023      	strb	r3, [r4, #0]
   1d3b8:	463b      	mov	r3, r7
   1d3ba:	4622      	mov	r2, r4
   1d3bc:	2101      	movs	r1, #1
   1d3be:	4640      	mov	r0, r8
   1d3c0:	f000 fee0 	bl	1e184 <cc_mbedtls_aes_crypt_ecb>
   1d3c4:	4683      	mov	fp, r0
   1d3c6:	2800      	cmp	r0, #0
   1d3c8:	d093      	beq.n	1d2f2 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1d3ca:	f8da 3000 	ldr.w	r3, [sl]
   1d3ce:	4648      	mov	r0, r9
   1d3d0:	4798      	blx	r3
   1d3d2:	2120      	movs	r1, #32
   1d3d4:	4603      	mov	r3, r0
   1d3d6:	a804      	add	r0, sp, #16
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	bf18      	it	ne
   1d3dc:	469b      	movne	fp, r3
   1d3de:	f7ff fc9d 	bl	1cd1c <mbedtls_platform_zeroize>
   1d3e2:	4638      	mov	r0, r7
   1d3e4:	2110      	movs	r1, #16
   1d3e6:	f7ff fc99 	bl	1cd1c <mbedtls_platform_zeroize>
   1d3ea:	4658      	mov	r0, fp
   1d3ec:	b00d      	add	sp, #52	; 0x34
   1d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3f2:	4642      	mov	r2, r8
   1d3f4:	4639      	mov	r1, r7
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	4620      	mov	r0, r4
   1d3fa:	f7ff fe7f 	bl	1d0fc <mbedtls_ctr_drbg_reseed_internal>
   1d3fe:	f8df a068 	ldr.w	sl, [pc, #104]	; 1d468 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1d402:	2800      	cmp	r0, #0
   1d404:	f43f af6d 	beq.w	1d2e2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1d408:	f8da 3000 	ldr.w	r3, [sl]
   1d40c:	4648      	mov	r0, r9
   1d40e:	4798      	blx	r3
   1d410:	4683      	mov	fp, r0
   1d412:	2800      	cmp	r0, #0
   1d414:	f43f af65 	beq.w	1d2e2 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1d418:	e7e7      	b.n	1d3ea <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1d41a:	a904      	add	r1, sp, #16
   1d41c:	4620      	mov	r0, r4
   1d41e:	f7ff fdc7 	bl	1cfb0 <ctr_drbg_update_internal>
   1d422:	4683      	mov	fp, r0
   1d424:	2800      	cmp	r0, #0
   1d426:	d1d0      	bne.n	1d3ca <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1d428:	6923      	ldr	r3, [r4, #16]
   1d42a:	3301      	adds	r3, #1
   1d42c:	6123      	str	r3, [r4, #16]
   1d42e:	e7cc      	b.n	1d3ca <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1d430:	4642      	mov	r2, r8
   1d432:	4639      	mov	r1, r7
   1d434:	a804      	add	r0, sp, #16
   1d436:	f7ff fc7b 	bl	1cd30 <block_cipher_df>
   1d43a:	4683      	mov	fp, r0
   1d43c:	b118      	cbz	r0, 1d446 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1d43e:	f8df a028 	ldr.w	sl, [pc, #40]	; 1d468 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1d442:	466f      	mov	r7, sp
   1d444:	e7c1      	b.n	1d3ca <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1d446:	a904      	add	r1, sp, #16
   1d448:	4620      	mov	r0, r4
   1d44a:	f7ff fdb1 	bl	1cfb0 <ctr_drbg_update_internal>
   1d44e:	4683      	mov	fp, r0
   1d450:	2800      	cmp	r0, #0
   1d452:	f43f af44 	beq.w	1d2de <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1d456:	e7f2      	b.n	1d43e <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1d458:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1d45c:	e7c5      	b.n	1d3ea <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1d45e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1d462:	e7c2      	b.n	1d3ea <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1d464:	2000089c 	.word	0x2000089c
   1d468:	200008a0 	.word	0x200008a0

0001d46c <entropy_update>:
   1d46c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d470:	2b20      	cmp	r3, #32
   1d472:	b08b      	sub	sp, #44	; 0x2c
   1d474:	461d      	mov	r5, r3
   1d476:	4606      	mov	r6, r0
   1d478:	4689      	mov	r9, r1
   1d47a:	4690      	mov	r8, r2
   1d47c:	d826      	bhi.n	1d4cc <entropy_update+0x60>
   1d47e:	b2db      	uxtb	r3, r3
   1d480:	af02      	add	r7, sp, #8
   1d482:	6831      	ldr	r1, [r6, #0]
   1d484:	f88d 9004 	strb.w	r9, [sp, #4]
   1d488:	f88d 3005 	strb.w	r3, [sp, #5]
   1d48c:	f106 0904 	add.w	r9, r6, #4
   1d490:	b921      	cbnz	r1, 1d49c <entropy_update+0x30>
   1d492:	4648      	mov	r0, r9
   1d494:	f000 feba 	bl	1e20c <cc_mbedtls_sha256_starts>
   1d498:	4604      	mov	r4, r0
   1d49a:	b940      	cbnz	r0, 1d4ae <entropy_update+0x42>
   1d49c:	2301      	movs	r3, #1
   1d49e:	6033      	str	r3, [r6, #0]
   1d4a0:	2202      	movs	r2, #2
   1d4a2:	a901      	add	r1, sp, #4
   1d4a4:	4648      	mov	r0, r9
   1d4a6:	f000 fec5 	bl	1e234 <cc_mbedtls_sha256_update>
   1d4aa:	4604      	mov	r4, r0
   1d4ac:	b138      	cbz	r0, 1d4be <entropy_update+0x52>
   1d4ae:	4638      	mov	r0, r7
   1d4b0:	2120      	movs	r1, #32
   1d4b2:	f7ff fc33 	bl	1cd1c <mbedtls_platform_zeroize>
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	b00b      	add	sp, #44	; 0x2c
   1d4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d4be:	462a      	mov	r2, r5
   1d4c0:	4641      	mov	r1, r8
   1d4c2:	4648      	mov	r0, r9
   1d4c4:	f000 feb6 	bl	1e234 <cc_mbedtls_sha256_update>
   1d4c8:	4604      	mov	r4, r0
   1d4ca:	e7f0      	b.n	1d4ae <entropy_update+0x42>
   1d4cc:	af02      	add	r7, sp, #8
   1d4ce:	4619      	mov	r1, r3
   1d4d0:	4610      	mov	r0, r2
   1d4d2:	2300      	movs	r3, #0
   1d4d4:	463a      	mov	r2, r7
   1d4d6:	f000 ffad 	bl	1e434 <cc_mbedtls_sha256>
   1d4da:	4604      	mov	r4, r0
   1d4dc:	2800      	cmp	r0, #0
   1d4de:	d1e6      	bne.n	1d4ae <entropy_update+0x42>
   1d4e0:	2320      	movs	r3, #32
   1d4e2:	461d      	mov	r5, r3
   1d4e4:	46b8      	mov	r8, r7
   1d4e6:	e7cc      	b.n	1d482 <entropy_update+0x16>

0001d4e8 <entropy_gather_internal.part.0>:
   1d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4ea:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1d4ee:	b0a7      	sub	sp, #156	; 0x9c
   1d4f0:	2b00      	cmp	r3, #0
   1d4f2:	bfd8      	it	le
   1d4f4:	ae02      	addle	r6, sp, #8
   1d4f6:	dd2c      	ble.n	1d552 <entropy_gather_internal.part.0+0x6a>
   1d4f8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1d4fc:	4605      	mov	r5, r0
   1d4fe:	2300      	movs	r3, #0
   1d500:	ae02      	add	r6, sp, #8
   1d502:	9301      	str	r3, [sp, #4]
   1d504:	f1a4 0701 	sub.w	r7, r4, #1
   1d508:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1d50c:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1d510:	4631      	mov	r1, r6
   1d512:	ab01      	add	r3, sp, #4
   1d514:	2290      	movs	r2, #144	; 0x90
   1d516:	47a0      	blx	r4
   1d518:	fab7 f787 	clz	r7, r7
   1d51c:	097f      	lsrs	r7, r7, #5
   1d51e:	4604      	mov	r4, r0
   1d520:	b910      	cbnz	r0, 1d528 <entropy_gather_internal.part.0+0x40>
   1d522:	9b01      	ldr	r3, [sp, #4]
   1d524:	b93b      	cbnz	r3, 1d536 <entropy_gather_internal.part.0+0x4e>
   1d526:	b1a7      	cbz	r7, 1d552 <entropy_gather_internal.part.0+0x6a>
   1d528:	4630      	mov	r0, r6
   1d52a:	2190      	movs	r1, #144	; 0x90
   1d52c:	f7ff fbf6 	bl	1cd1c <mbedtls_platform_zeroize>
   1d530:	4620      	mov	r0, r4
   1d532:	b027      	add	sp, #156	; 0x9c
   1d534:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d536:	4601      	mov	r1, r0
   1d538:	4632      	mov	r2, r6
   1d53a:	4628      	mov	r0, r5
   1d53c:	f7ff ff96 	bl	1d46c <entropy_update>
   1d540:	b950      	cbnz	r0, 1d558 <entropy_gather_internal.part.0+0x70>
   1d542:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1d546:	9a01      	ldr	r2, [sp, #4]
   1d548:	4413      	add	r3, r2
   1d54a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1d54e:	2f00      	cmp	r7, #0
   1d550:	d1ea      	bne.n	1d528 <entropy_gather_internal.part.0+0x40>
   1d552:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d556:	e7e7      	b.n	1d528 <entropy_gather_internal.part.0+0x40>
   1d558:	4604      	mov	r4, r0
   1d55a:	4620      	mov	r0, r4
   1d55c:	b027      	add	sp, #156	; 0x9c
   1d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d560 <cc_mbedtls_entropy_init>:
   1d560:	b570      	push	{r4, r5, r6, lr}
   1d562:	2500      	movs	r5, #0
   1d564:	4604      	mov	r4, r0
   1d566:	4629      	mov	r1, r5
   1d568:	2214      	movs	r2, #20
   1d56a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1d56e:	30f8      	adds	r0, #248	; 0xf8
   1d570:	f002 ff54 	bl	2041c <memset>
   1d574:	4b15      	ldr	r3, [pc, #84]	; (1d5cc <cc_mbedtls_entropy_init+0x6c>)
   1d576:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1d57a:	681b      	ldr	r3, [r3, #0]
   1d57c:	4630      	mov	r0, r6
   1d57e:	4798      	blx	r3
   1d580:	4620      	mov	r0, r4
   1d582:	f840 5b04 	str.w	r5, [r0], #4
   1d586:	f000 fe27 	bl	1e1d8 <cc_mbedtls_sha256_init>
   1d58a:	4b11      	ldr	r3, [pc, #68]	; (1d5d0 <cc_mbedtls_entropy_init+0x70>)
   1d58c:	4630      	mov	r0, r6
   1d58e:	681b      	ldr	r3, [r3, #0]
   1d590:	4798      	blx	r3
   1d592:	b9c8      	cbnz	r0, 1d5c8 <cc_mbedtls_entropy_init+0x68>
   1d594:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d598:	42ab      	cmp	r3, r5
   1d59a:	dc0f      	bgt.n	1d5bc <cc_mbedtls_entropy_init+0x5c>
   1d59c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d5a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d5a4:	490b      	ldr	r1, [pc, #44]	; (1d5d4 <cc_mbedtls_entropy_init+0x74>)
   1d5a6:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1d5aa:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1d5ae:	3301      	adds	r3, #1
   1d5b0:	2020      	movs	r0, #32
   1d5b2:	2101      	movs	r1, #1
   1d5b4:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1d5b8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1d5bc:	4b06      	ldr	r3, [pc, #24]	; (1d5d8 <cc_mbedtls_entropy_init+0x78>)
   1d5be:	4630      	mov	r0, r6
   1d5c0:	681b      	ldr	r3, [r3, #0]
   1d5c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d5c6:	4718      	bx	r3
   1d5c8:	bd70      	pop	{r4, r5, r6, pc}
   1d5ca:	bf00      	nop
   1d5cc:	20000898 	.word	0x20000898
   1d5d0:	2000089c 	.word	0x2000089c
   1d5d4:	0001e029 	.word	0x0001e029
   1d5d8:	200008a0 	.word	0x200008a0

0001d5dc <cc_mbedtls_entropy_func>:
   1d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5e0:	2a20      	cmp	r2, #32
   1d5e2:	b088      	sub	sp, #32
   1d5e4:	d876      	bhi.n	1d6d4 <cc_mbedtls_entropy_func+0xf8>
   1d5e6:	4b3d      	ldr	r3, [pc, #244]	; (1d6dc <cc_mbedtls_entropy_func+0x100>)
   1d5e8:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1d5ec:	681b      	ldr	r3, [r3, #0]
   1d5ee:	4604      	mov	r4, r0
   1d5f0:	4648      	mov	r0, r9
   1d5f2:	4617      	mov	r7, r2
   1d5f4:	4688      	mov	r8, r1
   1d5f6:	4798      	blx	r3
   1d5f8:	4605      	mov	r5, r0
   1d5fa:	bba0      	cbnz	r0, 1d666 <cc_mbedtls_entropy_func+0x8a>
   1d5fc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d600:	f240 1601 	movw	r6, #257	; 0x101
   1d604:	e001      	b.n	1d60a <cc_mbedtls_entropy_func+0x2e>
   1d606:	3e01      	subs	r6, #1
   1d608:	d060      	beq.n	1d6cc <cc_mbedtls_entropy_func+0xf0>
   1d60a:	4620      	mov	r0, r4
   1d60c:	b37b      	cbz	r3, 1d66e <cc_mbedtls_entropy_func+0x92>
   1d60e:	f7ff ff6b 	bl	1d4e8 <entropy_gather_internal.part.0>
   1d612:	4605      	mov	r5, r0
   1d614:	bb68      	cbnz	r0, 1d672 <cc_mbedtls_entropy_func+0x96>
   1d616:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d61a:	2b00      	cmp	r3, #0
   1d61c:	ddf3      	ble.n	1d606 <cc_mbedtls_entropy_func+0x2a>
   1d61e:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1d622:	4290      	cmp	r0, r2
   1d624:	d3ef      	bcc.n	1d606 <cc_mbedtls_entropy_func+0x2a>
   1d626:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1d62a:	2a01      	cmp	r2, #1
   1d62c:	d1eb      	bne.n	1d606 <cc_mbedtls_entropy_func+0x2a>
   1d62e:	281f      	cmp	r0, #31
   1d630:	d9e9      	bls.n	1d606 <cc_mbedtls_entropy_func+0x2a>
   1d632:	466e      	mov	r6, sp
   1d634:	4629      	mov	r1, r5
   1d636:	2220      	movs	r2, #32
   1d638:	4630      	mov	r0, r6
   1d63a:	f104 0a04 	add.w	sl, r4, #4
   1d63e:	f002 feed 	bl	2041c <memset>
   1d642:	4631      	mov	r1, r6
   1d644:	4650      	mov	r0, sl
   1d646:	f000 fe1f 	bl	1e288 <cc_mbedtls_sha256_finish>
   1d64a:	4605      	mov	r5, r0
   1d64c:	b198      	cbz	r0, 1d676 <cc_mbedtls_entropy_func+0x9a>
   1d64e:	4630      	mov	r0, r6
   1d650:	2120      	movs	r1, #32
   1d652:	f7ff fb63 	bl	1cd1c <mbedtls_platform_zeroize>
   1d656:	4b22      	ldr	r3, [pc, #136]	; (1d6e0 <cc_mbedtls_entropy_func+0x104>)
   1d658:	4648      	mov	r0, r9
   1d65a:	681b      	ldr	r3, [r3, #0]
   1d65c:	4798      	blx	r3
   1d65e:	2800      	cmp	r0, #0
   1d660:	bf18      	it	ne
   1d662:	f06f 051d 	mvnne.w	r5, #29
   1d666:	4628      	mov	r0, r5
   1d668:	b008      	add	sp, #32
   1d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d66e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d672:	466e      	mov	r6, sp
   1d674:	e7eb      	b.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d676:	4650      	mov	r0, sl
   1d678:	f000 fdc2 	bl	1e200 <cc_mbedtls_sha256_free>
   1d67c:	4650      	mov	r0, sl
   1d67e:	f000 fdab 	bl	1e1d8 <cc_mbedtls_sha256_init>
   1d682:	4629      	mov	r1, r5
   1d684:	4650      	mov	r0, sl
   1d686:	f000 fdc1 	bl	1e20c <cc_mbedtls_sha256_starts>
   1d68a:	4605      	mov	r5, r0
   1d68c:	2800      	cmp	r0, #0
   1d68e:	d1de      	bne.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d690:	4650      	mov	r0, sl
   1d692:	2220      	movs	r2, #32
   1d694:	4631      	mov	r1, r6
   1d696:	f000 fdcd 	bl	1e234 <cc_mbedtls_sha256_update>
   1d69a:	4605      	mov	r5, r0
   1d69c:	2800      	cmp	r0, #0
   1d69e:	d1d6      	bne.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d6a0:	4603      	mov	r3, r0
   1d6a2:	4632      	mov	r2, r6
   1d6a4:	2120      	movs	r1, #32
   1d6a6:	4630      	mov	r0, r6
   1d6a8:	f000 fec4 	bl	1e434 <cc_mbedtls_sha256>
   1d6ac:	4605      	mov	r5, r0
   1d6ae:	2800      	cmp	r0, #0
   1d6b0:	d1cd      	bne.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d6b2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d6b6:	2b00      	cmp	r3, #0
   1d6b8:	bfc4      	itt	gt
   1d6ba:	2300      	movgt	r3, #0
   1d6bc:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1d6c0:	463a      	mov	r2, r7
   1d6c2:	4640      	mov	r0, r8
   1d6c4:	4631      	mov	r1, r6
   1d6c6:	f002 fe9e 	bl	20406 <memcpy>
   1d6ca:	e7c0      	b.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d6cc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d6d0:	466e      	mov	r6, sp
   1d6d2:	e7bc      	b.n	1d64e <cc_mbedtls_entropy_func+0x72>
   1d6d4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d6d8:	e7c5      	b.n	1d666 <cc_mbedtls_entropy_func+0x8a>
   1d6da:	bf00      	nop
   1d6dc:	2000089c 	.word	0x2000089c
   1d6e0:	200008a0 	.word	0x200008a0

0001d6e4 <RndStartupTest.constprop.0>:
   1d6e4:	b530      	push	{r4, r5, lr}
   1d6e6:	b0c3      	sub	sp, #268	; 0x10c
   1d6e8:	22dc      	movs	r2, #220	; 0xdc
   1d6ea:	2100      	movs	r1, #0
   1d6ec:	a80b      	add	r0, sp, #44	; 0x2c
   1d6ee:	f002 fe95 	bl	2041c <memset>
   1d6f2:	2228      	movs	r2, #40	; 0x28
   1d6f4:	2100      	movs	r1, #0
   1d6f6:	a801      	add	r0, sp, #4
   1d6f8:	f002 fe90 	bl	2041c <memset>
   1d6fc:	a801      	add	r0, sp, #4
   1d6fe:	f000 fec1 	bl	1e484 <RNG_PLAT_SetUserRngParameters>
   1d702:	4604      	mov	r4, r0
   1d704:	b110      	cbz	r0, 1d70c <RndStartupTest.constprop.0+0x28>
   1d706:	4620      	mov	r0, r4
   1d708:	b043      	add	sp, #268	; 0x10c
   1d70a:	bd30      	pop	{r4, r5, pc}
   1d70c:	4d18      	ldr	r5, [pc, #96]	; (1d770 <RndStartupTest.constprop.0+0x8c>)
   1d70e:	f04f 31ff 	mov.w	r1, #4294967295
   1d712:	6828      	ldr	r0, [r5, #0]
   1d714:	f000 f93c 	bl	1d990 <CC_PalMutexLock>
   1d718:	4604      	mov	r4, r0
   1d71a:	b9c0      	cbnz	r0, 1d74e <RndStartupTest.constprop.0+0x6a>
   1d71c:	2000      	movs	r0, #0
   1d71e:	f000 f967 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1d722:	bb00      	cbnz	r0, 1d766 <RndStartupTest.constprop.0+0x82>
   1d724:	4a13      	ldr	r2, [pc, #76]	; (1d774 <RndStartupTest.constprop.0+0x90>)
   1d726:	a901      	add	r1, sp, #4
   1d728:	a80b      	add	r0, sp, #44	; 0x2c
   1d72a:	f000 fc6f 	bl	1e00c <LLF_RND_RunTrngStartupTest>
   1d72e:	4604      	mov	r4, r0
   1d730:	2001      	movs	r0, #1
   1d732:	f000 f95d 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1d736:	b990      	cbnz	r0, 1d75e <RndStartupTest.constprop.0+0x7a>
   1d738:	6828      	ldr	r0, [r5, #0]
   1d73a:	f000 f931 	bl	1d9a0 <CC_PalMutexUnlock>
   1d73e:	2800      	cmp	r0, #0
   1d740:	d0e1      	beq.n	1d706 <RndStartupTest.constprop.0+0x22>
   1d742:	480d      	ldr	r0, [pc, #52]	; (1d778 <RndStartupTest.constprop.0+0x94>)
   1d744:	f7ff f9d8 	bl	1caf8 <CC_PalAbort>
   1d748:	4620      	mov	r0, r4
   1d74a:	b043      	add	sp, #268	; 0x10c
   1d74c:	bd30      	pop	{r4, r5, pc}
   1d74e:	480b      	ldr	r0, [pc, #44]	; (1d77c <RndStartupTest.constprop.0+0x98>)
   1d750:	f7ff f9d2 	bl	1caf8 <CC_PalAbort>
   1d754:	2c01      	cmp	r4, #1
   1d756:	bf08      	it	eq
   1d758:	2405      	moveq	r4, #5
   1d75a:	d0ed      	beq.n	1d738 <RndStartupTest.constprop.0+0x54>
   1d75c:	e7de      	b.n	1d71c <RndStartupTest.constprop.0+0x38>
   1d75e:	4808      	ldr	r0, [pc, #32]	; (1d780 <RndStartupTest.constprop.0+0x9c>)
   1d760:	f7ff f9ca 	bl	1caf8 <CC_PalAbort>
   1d764:	e7e8      	b.n	1d738 <RndStartupTest.constprop.0+0x54>
   1d766:	4807      	ldr	r0, [pc, #28]	; (1d784 <RndStartupTest.constprop.0+0xa0>)
   1d768:	f7ff f9c6 	bl	1caf8 <CC_PalAbort>
   1d76c:	e7da      	b.n	1d724 <RndStartupTest.constprop.0+0x40>
   1d76e:	bf00      	nop
   1d770:	20000894 	.word	0x20000894
   1d774:	20002e30 	.word	0x20002e30
   1d778:	00024c88 	.word	0x00024c88
   1d77c:	00024c30 	.word	0x00024c30
   1d780:	00024c68 	.word	0x00024c68
   1d784:	00024c48 	.word	0x00024c48

0001d788 <CC_LibInit>:
   1d788:	b510      	push	{r4, lr}
   1d78a:	b082      	sub	sp, #8
   1d78c:	f000 f854 	bl	1d838 <CC_HalInit>
   1d790:	b128      	cbz	r0, 1d79e <CC_LibInit+0x16>
   1d792:	f000 f8a3 	bl	1d8dc <CC_PalTerminate>
   1d796:	2403      	movs	r4, #3
   1d798:	4620      	mov	r0, r4
   1d79a:	b002      	add	sp, #8
   1d79c:	bd10      	pop	{r4, pc}
   1d79e:	f000 f86f 	bl	1d880 <CC_PalInit>
   1d7a2:	b9d0      	cbnz	r0, 1d7da <CC_LibInit+0x52>
   1d7a4:	f000 f924 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1d7a8:	b9d8      	cbnz	r0, 1d7e2 <CC_LibInit+0x5a>
   1d7aa:	4b1e      	ldr	r3, [pc, #120]	; (1d824 <CC_LibInit+0x9c>)
   1d7ac:	681b      	ldr	r3, [r3, #0]
   1d7ae:	0e1b      	lsrs	r3, r3, #24
   1d7b0:	2bf0      	cmp	r3, #240	; 0xf0
   1d7b2:	d10a      	bne.n	1d7ca <CC_LibInit+0x42>
   1d7b4:	4a1c      	ldr	r2, [pc, #112]	; (1d828 <CC_LibInit+0xa0>)
   1d7b6:	4b1d      	ldr	r3, [pc, #116]	; (1d82c <CC_LibInit+0xa4>)
   1d7b8:	6812      	ldr	r2, [r2, #0]
   1d7ba:	429a      	cmp	r2, r3
   1d7bc:	d029      	beq.n	1d812 <CC_LibInit+0x8a>
   1d7be:	f000 f83d 	bl	1d83c <CC_HalTerminate>
   1d7c2:	2407      	movs	r4, #7
   1d7c4:	f000 f88a 	bl	1d8dc <CC_PalTerminate>
   1d7c8:	e7e6      	b.n	1d798 <CC_LibInit+0x10>
   1d7ca:	f000 f837 	bl	1d83c <CC_HalTerminate>
   1d7ce:	f000 f885 	bl	1d8dc <CC_PalTerminate>
   1d7d2:	2406      	movs	r4, #6
   1d7d4:	4620      	mov	r0, r4
   1d7d6:	b002      	add	sp, #8
   1d7d8:	bd10      	pop	{r4, pc}
   1d7da:	2404      	movs	r4, #4
   1d7dc:	4620      	mov	r0, r4
   1d7de:	b002      	add	sp, #8
   1d7e0:	bd10      	pop	{r4, pc}
   1d7e2:	f000 f82b 	bl	1d83c <CC_HalTerminate>
   1d7e6:	f000 f879 	bl	1d8dc <CC_PalTerminate>
   1d7ea:	f7ff ff7b 	bl	1d6e4 <RndStartupTest.constprop.0>
   1d7ee:	4604      	mov	r4, r0
   1d7f0:	b958      	cbnz	r0, 1d80a <CC_LibInit+0x82>
   1d7f2:	4602      	mov	r2, r0
   1d7f4:	4601      	mov	r1, r0
   1d7f6:	f7ff f9a7 	bl	1cb48 <nrf_cc3xx_platform_ctr_drbg_init>
   1d7fa:	b930      	cbnz	r0, 1d80a <CC_LibInit+0x82>
   1d7fc:	490c      	ldr	r1, [pc, #48]	; (1d830 <CC_LibInit+0xa8>)
   1d7fe:	ab01      	add	r3, sp, #4
   1d800:	2268      	movs	r2, #104	; 0x68
   1d802:	f7ff f9d5 	bl	1cbb0 <nrf_cc3xx_platform_ctr_drbg_get>
   1d806:	2800      	cmp	r0, #0
   1d808:	d0c6      	beq.n	1d798 <CC_LibInit+0x10>
   1d80a:	2405      	movs	r4, #5
   1d80c:	4620      	mov	r0, r4
   1d80e:	b002      	add	sp, #8
   1d810:	bd10      	pop	{r4, pc}
   1d812:	2001      	movs	r0, #1
   1d814:	f000 f8ec 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1d818:	2800      	cmp	r0, #0
   1d81a:	d1e2      	bne.n	1d7e2 <CC_LibInit+0x5a>
   1d81c:	4b05      	ldr	r3, [pc, #20]	; (1d834 <CC_LibInit+0xac>)
   1d81e:	6018      	str	r0, [r3, #0]
   1d820:	e7e3      	b.n	1d7ea <CC_LibInit+0x62>
   1d822:	bf00      	nop
   1d824:	5002b928 	.word	0x5002b928
   1d828:	5002ba24 	.word	0x5002ba24
   1d82c:	20e00000 	.word	0x20e00000
   1d830:	20002dc8 	.word	0x20002dc8
   1d834:	5002ba0c 	.word	0x5002ba0c

0001d838 <CC_HalInit>:
   1d838:	2000      	movs	r0, #0
   1d83a:	4770      	bx	lr

0001d83c <CC_HalTerminate>:
   1d83c:	2000      	movs	r0, #0
   1d83e:	4770      	bx	lr

0001d840 <CC_HalClearInterruptBit>:
   1d840:	0543      	lsls	r3, r0, #21
   1d842:	d503      	bpl.n	1d84c <CC_HalClearInterruptBit+0xc>
   1d844:	4b03      	ldr	r3, [pc, #12]	; (1d854 <CC_HalClearInterruptBit+0x14>)
   1d846:	f04f 32ff 	mov.w	r2, #4294967295
   1d84a:	601a      	str	r2, [r3, #0]
   1d84c:	4b02      	ldr	r3, [pc, #8]	; (1d858 <CC_HalClearInterruptBit+0x18>)
   1d84e:	6018      	str	r0, [r3, #0]
   1d850:	4770      	bx	lr
   1d852:	bf00      	nop
   1d854:	5002b108 	.word	0x5002b108
   1d858:	5002ba08 	.word	0x5002ba08

0001d85c <CC_HalMaskInterrupt>:
   1d85c:	4b01      	ldr	r3, [pc, #4]	; (1d864 <CC_HalMaskInterrupt+0x8>)
   1d85e:	6018      	str	r0, [r3, #0]
   1d860:	4770      	bx	lr
   1d862:	bf00      	nop
   1d864:	5002ba04 	.word	0x5002ba04

0001d868 <CC_HalWaitInterrupt>:
   1d868:	b108      	cbz	r0, 1d86e <CC_HalWaitInterrupt+0x6>
   1d86a:	f000 b86f 	b.w	1d94c <CC_PalWaitInterrupt>
   1d86e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d872:	4770      	bx	lr

0001d874 <CC_HalWaitInterruptRND>:
   1d874:	b108      	cbz	r0, 1d87a <CC_HalWaitInterruptRND+0x6>
   1d876:	f000 b84f 	b.w	1d918 <CC_PalWaitInterruptRND>
   1d87a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d87e:	4770      	bx	lr

0001d880 <CC_PalInit>:
   1d880:	b510      	push	{r4, lr}
   1d882:	4811      	ldr	r0, [pc, #68]	; (1d8c8 <CC_PalInit+0x48>)
   1d884:	f000 f870 	bl	1d968 <CC_PalMutexCreate>
   1d888:	b100      	cbz	r0, 1d88c <CC_PalInit+0xc>
   1d88a:	bd10      	pop	{r4, pc}
   1d88c:	480f      	ldr	r0, [pc, #60]	; (1d8cc <CC_PalInit+0x4c>)
   1d88e:	f000 f86b 	bl	1d968 <CC_PalMutexCreate>
   1d892:	2800      	cmp	r0, #0
   1d894:	d1f9      	bne.n	1d88a <CC_PalInit+0xa>
   1d896:	4c0e      	ldr	r4, [pc, #56]	; (1d8d0 <CC_PalInit+0x50>)
   1d898:	4620      	mov	r0, r4
   1d89a:	f000 f865 	bl	1d968 <CC_PalMutexCreate>
   1d89e:	2800      	cmp	r0, #0
   1d8a0:	d1f3      	bne.n	1d88a <CC_PalInit+0xa>
   1d8a2:	4b0c      	ldr	r3, [pc, #48]	; (1d8d4 <CC_PalInit+0x54>)
   1d8a4:	480c      	ldr	r0, [pc, #48]	; (1d8d8 <CC_PalInit+0x58>)
   1d8a6:	601c      	str	r4, [r3, #0]
   1d8a8:	f000 f85e 	bl	1d968 <CC_PalMutexCreate>
   1d8ac:	4601      	mov	r1, r0
   1d8ae:	2800      	cmp	r0, #0
   1d8b0:	d1eb      	bne.n	1d88a <CC_PalInit+0xa>
   1d8b2:	f000 f82d 	bl	1d910 <CC_PalDmaInit>
   1d8b6:	4604      	mov	r4, r0
   1d8b8:	b108      	cbz	r0, 1d8be <CC_PalInit+0x3e>
   1d8ba:	4620      	mov	r0, r4
   1d8bc:	bd10      	pop	{r4, pc}
   1d8be:	f000 f879 	bl	1d9b4 <CC_PalPowerSaveModeInit>
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	e7fa      	b.n	1d8bc <CC_PalInit+0x3c>
   1d8c6:	bf00      	nop
   1d8c8:	20000890 	.word	0x20000890
   1d8cc:	20000884 	.word	0x20000884
   1d8d0:	2000088c 	.word	0x2000088c
   1d8d4:	20000894 	.word	0x20000894
   1d8d8:	20000888 	.word	0x20000888

0001d8dc <CC_PalTerminate>:
   1d8dc:	b508      	push	{r3, lr}
   1d8de:	4808      	ldr	r0, [pc, #32]	; (1d900 <CC_PalTerminate+0x24>)
   1d8e0:	f000 f84c 	bl	1d97c <CC_PalMutexDestroy>
   1d8e4:	4807      	ldr	r0, [pc, #28]	; (1d904 <CC_PalTerminate+0x28>)
   1d8e6:	f000 f849 	bl	1d97c <CC_PalMutexDestroy>
   1d8ea:	4807      	ldr	r0, [pc, #28]	; (1d908 <CC_PalTerminate+0x2c>)
   1d8ec:	f000 f846 	bl	1d97c <CC_PalMutexDestroy>
   1d8f0:	4806      	ldr	r0, [pc, #24]	; (1d90c <CC_PalTerminate+0x30>)
   1d8f2:	f000 f843 	bl	1d97c <CC_PalMutexDestroy>
   1d8f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d8fa:	f000 b80b 	b.w	1d914 <CC_PalDmaTerminate>
   1d8fe:	bf00      	nop
   1d900:	20000890 	.word	0x20000890
   1d904:	20000884 	.word	0x20000884
   1d908:	2000088c 	.word	0x2000088c
   1d90c:	20000888 	.word	0x20000888

0001d910 <CC_PalDmaInit>:
   1d910:	2000      	movs	r0, #0
   1d912:	4770      	bx	lr

0001d914 <CC_PalDmaTerminate>:
   1d914:	4770      	bx	lr
   1d916:	bf00      	nop

0001d918 <CC_PalWaitInterruptRND>:
   1d918:	b410      	push	{r4}
   1d91a:	4c08      	ldr	r4, [pc, #32]	; (1d93c <CC_PalWaitInterruptRND+0x24>)
   1d91c:	4602      	mov	r2, r0
   1d91e:	6823      	ldr	r3, [r4, #0]
   1d920:	4213      	tst	r3, r2
   1d922:	d0fc      	beq.n	1d91e <CC_PalWaitInterruptRND+0x6>
   1d924:	b121      	cbz	r1, 1d930 <CC_PalWaitInterruptRND+0x18>
   1d926:	4b06      	ldr	r3, [pc, #24]	; (1d940 <CC_PalWaitInterruptRND+0x28>)
   1d928:	4806      	ldr	r0, [pc, #24]	; (1d944 <CC_PalWaitInterruptRND+0x2c>)
   1d92a:	681b      	ldr	r3, [r3, #0]
   1d92c:	600b      	str	r3, [r1, #0]
   1d92e:	6003      	str	r3, [r0, #0]
   1d930:	4b05      	ldr	r3, [pc, #20]	; (1d948 <CC_PalWaitInterruptRND+0x30>)
   1d932:	601a      	str	r2, [r3, #0]
   1d934:	2000      	movs	r0, #0
   1d936:	bc10      	pop	{r4}
   1d938:	4770      	bx	lr
   1d93a:	bf00      	nop
   1d93c:	5002ba00 	.word	0x5002ba00
   1d940:	5002b104 	.word	0x5002b104
   1d944:	5002b108 	.word	0x5002b108
   1d948:	5002ba08 	.word	0x5002ba08

0001d94c <CC_PalWaitInterrupt>:
   1d94c:	4904      	ldr	r1, [pc, #16]	; (1d960 <CC_PalWaitInterrupt+0x14>)
   1d94e:	4602      	mov	r2, r0
   1d950:	680b      	ldr	r3, [r1, #0]
   1d952:	421a      	tst	r2, r3
   1d954:	d0fc      	beq.n	1d950 <CC_PalWaitInterrupt+0x4>
   1d956:	4b03      	ldr	r3, [pc, #12]	; (1d964 <CC_PalWaitInterrupt+0x18>)
   1d958:	2000      	movs	r0, #0
   1d95a:	601a      	str	r2, [r3, #0]
   1d95c:	4770      	bx	lr
   1d95e:	bf00      	nop
   1d960:	5002ba00 	.word	0x5002ba00
   1d964:	5002ba08 	.word	0x5002ba08

0001d968 <CC_PalMutexCreate>:
   1d968:	b508      	push	{r3, lr}
   1d96a:	4b03      	ldr	r3, [pc, #12]	; (1d978 <CC_PalMutexCreate+0x10>)
   1d96c:	6802      	ldr	r2, [r0, #0]
   1d96e:	681b      	ldr	r3, [r3, #0]
   1d970:	6810      	ldr	r0, [r2, #0]
   1d972:	4798      	blx	r3
   1d974:	2000      	movs	r0, #0
   1d976:	bd08      	pop	{r3, pc}
   1d978:	20000844 	.word	0x20000844

0001d97c <CC_PalMutexDestroy>:
   1d97c:	b508      	push	{r3, lr}
   1d97e:	4b03      	ldr	r3, [pc, #12]	; (1d98c <CC_PalMutexDestroy+0x10>)
   1d980:	6802      	ldr	r2, [r0, #0]
   1d982:	685b      	ldr	r3, [r3, #4]
   1d984:	6810      	ldr	r0, [r2, #0]
   1d986:	4798      	blx	r3
   1d988:	2000      	movs	r0, #0
   1d98a:	bd08      	pop	{r3, pc}
   1d98c:	20000844 	.word	0x20000844

0001d990 <CC_PalMutexLock>:
   1d990:	4b02      	ldr	r3, [pc, #8]	; (1d99c <CC_PalMutexLock+0xc>)
   1d992:	6802      	ldr	r2, [r0, #0]
   1d994:	689b      	ldr	r3, [r3, #8]
   1d996:	6810      	ldr	r0, [r2, #0]
   1d998:	4718      	bx	r3
   1d99a:	bf00      	nop
   1d99c:	20000844 	.word	0x20000844

0001d9a0 <CC_PalMutexUnlock>:
   1d9a0:	b508      	push	{r3, lr}
   1d9a2:	4b03      	ldr	r3, [pc, #12]	; (1d9b0 <CC_PalMutexUnlock+0x10>)
   1d9a4:	6802      	ldr	r2, [r0, #0]
   1d9a6:	68db      	ldr	r3, [r3, #12]
   1d9a8:	6810      	ldr	r0, [r2, #0]
   1d9aa:	4798      	blx	r3
   1d9ac:	2000      	movs	r0, #0
   1d9ae:	bd08      	pop	{r3, pc}
   1d9b0:	20000844 	.word	0x20000844

0001d9b4 <CC_PalPowerSaveModeInit>:
   1d9b4:	b570      	push	{r4, r5, r6, lr}
   1d9b6:	4c09      	ldr	r4, [pc, #36]	; (1d9dc <CC_PalPowerSaveModeInit+0x28>)
   1d9b8:	4d09      	ldr	r5, [pc, #36]	; (1d9e0 <CC_PalPowerSaveModeInit+0x2c>)
   1d9ba:	6920      	ldr	r0, [r4, #16]
   1d9bc:	68ab      	ldr	r3, [r5, #8]
   1d9be:	4798      	blx	r3
   1d9c0:	b118      	cbz	r0, 1d9ca <CC_PalPowerSaveModeInit+0x16>
   1d9c2:	4b08      	ldr	r3, [pc, #32]	; (1d9e4 <CC_PalPowerSaveModeInit+0x30>)
   1d9c4:	4808      	ldr	r0, [pc, #32]	; (1d9e8 <CC_PalPowerSaveModeInit+0x34>)
   1d9c6:	685b      	ldr	r3, [r3, #4]
   1d9c8:	4798      	blx	r3
   1d9ca:	4a08      	ldr	r2, [pc, #32]	; (1d9ec <CC_PalPowerSaveModeInit+0x38>)
   1d9cc:	68eb      	ldr	r3, [r5, #12]
   1d9ce:	6920      	ldr	r0, [r4, #16]
   1d9d0:	2100      	movs	r1, #0
   1d9d2:	6011      	str	r1, [r2, #0]
   1d9d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d9d8:	4718      	bx	r3
   1d9da:	bf00      	nop
   1d9dc:	20000854 	.word	0x20000854
   1d9e0:	20000844 	.word	0x20000844
   1d9e4:	20000834 	.word	0x20000834
   1d9e8:	00024ca0 	.word	0x00024ca0
   1d9ec:	20003050 	.word	0x20003050

0001d9f0 <CC_PalPowerSaveModeSelect>:
   1d9f0:	b570      	push	{r4, r5, r6, lr}
   1d9f2:	4d1a      	ldr	r5, [pc, #104]	; (1da5c <CC_PalPowerSaveModeSelect+0x6c>)
   1d9f4:	4e1a      	ldr	r6, [pc, #104]	; (1da60 <CC_PalPowerSaveModeSelect+0x70>)
   1d9f6:	4604      	mov	r4, r0
   1d9f8:	68b2      	ldr	r2, [r6, #8]
   1d9fa:	6928      	ldr	r0, [r5, #16]
   1d9fc:	4790      	blx	r2
   1d9fe:	b9f0      	cbnz	r0, 1da3e <CC_PalPowerSaveModeSelect+0x4e>
   1da00:	b15c      	cbz	r4, 1da1a <CC_PalPowerSaveModeSelect+0x2a>
   1da02:	4c18      	ldr	r4, [pc, #96]	; (1da64 <CC_PalPowerSaveModeSelect+0x74>)
   1da04:	6823      	ldr	r3, [r4, #0]
   1da06:	b1ab      	cbz	r3, 1da34 <CC_PalPowerSaveModeSelect+0x44>
   1da08:	2b01      	cmp	r3, #1
   1da0a:	d01a      	beq.n	1da42 <CC_PalPowerSaveModeSelect+0x52>
   1da0c:	3b01      	subs	r3, #1
   1da0e:	6023      	str	r3, [r4, #0]
   1da10:	6928      	ldr	r0, [r5, #16]
   1da12:	68f3      	ldr	r3, [r6, #12]
   1da14:	4798      	blx	r3
   1da16:	2000      	movs	r0, #0
   1da18:	bd70      	pop	{r4, r5, r6, pc}
   1da1a:	4c12      	ldr	r4, [pc, #72]	; (1da64 <CC_PalPowerSaveModeSelect+0x74>)
   1da1c:	6821      	ldr	r1, [r4, #0]
   1da1e:	b939      	cbnz	r1, 1da30 <CC_PalPowerSaveModeSelect+0x40>
   1da20:	4b11      	ldr	r3, [pc, #68]	; (1da68 <CC_PalPowerSaveModeSelect+0x78>)
   1da22:	4a12      	ldr	r2, [pc, #72]	; (1da6c <CC_PalPowerSaveModeSelect+0x7c>)
   1da24:	2001      	movs	r0, #1
   1da26:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1da2a:	6813      	ldr	r3, [r2, #0]
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	d1fc      	bne.n	1da2a <CC_PalPowerSaveModeSelect+0x3a>
   1da30:	3101      	adds	r1, #1
   1da32:	6021      	str	r1, [r4, #0]
   1da34:	68f3      	ldr	r3, [r6, #12]
   1da36:	6928      	ldr	r0, [r5, #16]
   1da38:	4798      	blx	r3
   1da3a:	2000      	movs	r0, #0
   1da3c:	bd70      	pop	{r4, r5, r6, pc}
   1da3e:	480c      	ldr	r0, [pc, #48]	; (1da70 <CC_PalPowerSaveModeSelect+0x80>)
   1da40:	bd70      	pop	{r4, r5, r6, pc}
   1da42:	4a0a      	ldr	r2, [pc, #40]	; (1da6c <CC_PalPowerSaveModeSelect+0x7c>)
   1da44:	6813      	ldr	r3, [r2, #0]
   1da46:	2b00      	cmp	r3, #0
   1da48:	d1fc      	bne.n	1da44 <CC_PalPowerSaveModeSelect+0x54>
   1da4a:	4a07      	ldr	r2, [pc, #28]	; (1da68 <CC_PalPowerSaveModeSelect+0x78>)
   1da4c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1da50:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1da54:	f7ff ff02 	bl	1d85c <CC_HalMaskInterrupt>
   1da58:	6823      	ldr	r3, [r4, #0]
   1da5a:	e7d7      	b.n	1da0c <CC_PalPowerSaveModeSelect+0x1c>
   1da5c:	20000854 	.word	0x20000854
   1da60:	20000844 	.word	0x20000844
   1da64:	20003050 	.word	0x20003050
   1da68:	5002a000 	.word	0x5002a000
   1da6c:	5002b910 	.word	0x5002b910
   1da70:	ffff8fe9 	.word	0xffff8fe9

0001da74 <mutex_init>:
   1da74:	4b01      	ldr	r3, [pc, #4]	; (1da7c <mutex_init+0x8>)
   1da76:	681b      	ldr	r3, [r3, #0]
   1da78:	4718      	bx	r3
   1da7a:	bf00      	nop
   1da7c:	20000844 	.word	0x20000844

0001da80 <mutex_lock>:
   1da80:	4b01      	ldr	r3, [pc, #4]	; (1da88 <mutex_lock+0x8>)
   1da82:	689b      	ldr	r3, [r3, #8]
   1da84:	4718      	bx	r3
   1da86:	bf00      	nop
   1da88:	20000844 	.word	0x20000844

0001da8c <mutex_unlock>:
   1da8c:	4b01      	ldr	r3, [pc, #4]	; (1da94 <mutex_unlock+0x8>)
   1da8e:	68db      	ldr	r3, [r3, #12]
   1da90:	4718      	bx	r3
   1da92:	bf00      	nop
   1da94:	20000844 	.word	0x20000844

0001da98 <startTrngHW>:
   1da98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da9c:	2800      	cmp	r0, #0
   1da9e:	d07b      	beq.n	1db98 <startTrngHW+0x100>
   1daa0:	460c      	mov	r4, r1
   1daa2:	2900      	cmp	r1, #0
   1daa4:	d078      	beq.n	1db98 <startTrngHW+0x100>
   1daa6:	461d      	mov	r5, r3
   1daa8:	2b00      	cmp	r3, #0
   1daaa:	d075      	beq.n	1db98 <startTrngHW+0x100>
   1daac:	4606      	mov	r6, r0
   1daae:	b122      	cbz	r2, 1daba <startTrngHW+0x22>
   1dab0:	2201      	movs	r2, #1
   1dab2:	2300      	movs	r3, #0
   1dab4:	602a      	str	r2, [r5, #0]
   1dab6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1daba:	682b      	ldr	r3, [r5, #0]
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d067      	beq.n	1db90 <startTrngHW+0xf8>
   1dac0:	4629      	mov	r1, r5
   1dac2:	4620      	mov	r0, r4
   1dac4:	f000 fda4 	bl	1e610 <LLF_RND_GetFastestRosc>
   1dac8:	4607      	mov	r7, r0
   1daca:	2800      	cmp	r0, #0
   1dacc:	d161      	bne.n	1db92 <startTrngHW+0xfa>
   1dace:	6828      	ldr	r0, [r5, #0]
   1dad0:	4621      	mov	r1, r4
   1dad2:	f000 fd7f 	bl	1e5d4 <LLF_RND_GetRoscSampleCnt>
   1dad6:	4607      	mov	r7, r0
   1dad8:	2800      	cmp	r0, #0
   1dada:	d15a      	bne.n	1db92 <startTrngHW+0xfa>
   1dadc:	682b      	ldr	r3, [r5, #0]
   1dade:	2b08      	cmp	r3, #8
   1dae0:	d069      	beq.n	1dbb6 <startTrngHW+0x11e>
   1dae2:	2b04      	cmp	r3, #4
   1dae4:	d06a      	beq.n	1dbbc <startTrngHW+0x124>
   1dae6:	f1a3 0802 	sub.w	r8, r3, #2
   1daea:	fab8 f888 	clz	r8, r8
   1daee:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1daf2:	4b34      	ldr	r3, [pc, #208]	; (1dbc4 <startTrngHW+0x12c>)
   1daf4:	4934      	ldr	r1, [pc, #208]	; (1dbc8 <startTrngHW+0x130>)
   1daf6:	4a35      	ldr	r2, [pc, #212]	; (1dbcc <startTrngHW+0x134>)
   1daf8:	2001      	movs	r0, #1
   1dafa:	6018      	str	r0, [r3, #0]
   1dafc:	469c      	mov	ip, r3
   1dafe:	6008      	str	r0, [r1, #0]
   1db00:	f8cc 0000 	str.w	r0, [ip]
   1db04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1db06:	6013      	str	r3, [r2, #0]
   1db08:	6811      	ldr	r1, [r2, #0]
   1db0a:	428b      	cmp	r3, r1
   1db0c:	d1f8      	bne.n	1db00 <startTrngHW+0x68>
   1db0e:	4b30      	ldr	r3, [pc, #192]	; (1dbd0 <startTrngHW+0x138>)
   1db10:	f04f 0900 	mov.w	r9, #0
   1db14:	f8c3 9000 	str.w	r9, [r3]
   1db18:	f04f 30ff 	mov.w	r0, #4294967295
   1db1c:	f7ff fe90 	bl	1d840 <CC_HalClearInterruptBit>
   1db20:	4b2c      	ldr	r3, [pc, #176]	; (1dbd4 <startTrngHW+0x13c>)
   1db22:	f06f 021b 	mvn.w	r2, #27
   1db26:	601a      	str	r2, [r3, #0]
   1db28:	4648      	mov	r0, r9
   1db2a:	f7ff fe97 	bl	1d85c <CC_HalMaskInterrupt>
   1db2e:	4a2a      	ldr	r2, [pc, #168]	; (1dbd8 <startTrngHW+0x140>)
   1db30:	4b2a      	ldr	r3, [pc, #168]	; (1dbdc <startTrngHW+0x144>)
   1db32:	f8c2 8000 	str.w	r8, [r2]
   1db36:	6818      	ldr	r0, [r3, #0]
   1db38:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1db3c:	f7ff fe8e 	bl	1d85c <CC_HalMaskInterrupt>
   1db40:	4b27      	ldr	r3, [pc, #156]	; (1dbe0 <startTrngHW+0x148>)
   1db42:	220a      	movs	r2, #10
   1db44:	601a      	str	r2, [r3, #0]
   1db46:	9908      	ldr	r1, [sp, #32]
   1db48:	6923      	ldr	r3, [r4, #16]
   1db4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1db4c:	2901      	cmp	r1, #1
   1db4e:	d027      	beq.n	1dba0 <startTrngHW+0x108>
   1db50:	4924      	ldr	r1, [pc, #144]	; (1dbe4 <startTrngHW+0x14c>)
   1db52:	fba1 1303 	umull	r1, r3, r1, r3
   1db56:	091b      	lsrs	r3, r3, #4
   1db58:	fb03 f302 	mul.w	r3, r3, r2
   1db5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1db60:	4921      	ldr	r1, [pc, #132]	; (1dbe8 <startTrngHW+0x150>)
   1db62:	4a1b      	ldr	r2, [pc, #108]	; (1dbd0 <startTrngHW+0x138>)
   1db64:	03db      	lsls	r3, r3, #15
   1db66:	099b      	lsrs	r3, r3, #6
   1db68:	600b      	str	r3, [r1, #0]
   1db6a:	2301      	movs	r3, #1
   1db6c:	6013      	str	r3, [r2, #0]
   1db6e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   1db72:	682a      	ldr	r2, [r5, #0]
   1db74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1db78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1db7c:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1db80:	682a      	ldr	r2, [r5, #0]
   1db82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db86:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1db8a:	4638      	mov	r0, r7
   1db8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db90:	4f16      	ldr	r7, [pc, #88]	; (1dbec <startTrngHW+0x154>)
   1db92:	4638      	mov	r0, r7
   1db94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db98:	4f15      	ldr	r7, [pc, #84]	; (1dbf0 <startTrngHW+0x158>)
   1db9a:	4638      	mov	r0, r7
   1db9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dba4:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1dba8:	3101      	adds	r1, #1
   1dbaa:	d002      	beq.n	1dbb2 <startTrngHW+0x11a>
   1dbac:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1dbb0:	e7ce      	b.n	1db50 <startTrngHW+0xb8>
   1dbb2:	2316      	movs	r3, #22
   1dbb4:	e7d0      	b.n	1db58 <startTrngHW+0xc0>
   1dbb6:	f04f 0803 	mov.w	r8, #3
   1dbba:	e79a      	b.n	1daf2 <startTrngHW+0x5a>
   1dbbc:	f04f 0802 	mov.w	r8, #2
   1dbc0:	e797      	b.n	1daf2 <startTrngHW+0x5a>
   1dbc2:	bf00      	nop
   1dbc4:	5002b1c4 	.word	0x5002b1c4
   1dbc8:	5002b140 	.word	0x5002b140
   1dbcc:	5002b130 	.word	0x5002b130
   1dbd0:	5002b12c 	.word	0x5002b12c
   1dbd4:	5002b100 	.word	0x5002b100
   1dbd8:	5002b10c 	.word	0x5002b10c
   1dbdc:	5002ba04 	.word	0x5002ba04
   1dbe0:	5002b138 	.word	0x5002b138
   1dbe4:	aaaaaaab 	.word	0xaaaaaaab
   1dbe8:	5002b1d8 	.word	0x5002b1d8
   1dbec:	00f10c31 	.word	0x00f10c31
   1dbf0:	00f10c35 	.word	0x00f10c35

0001dbf4 <LLF_RND_RepetitionCounterTest.part.0>:
   1dbf4:	b4f0      	push	{r4, r5, r6, r7}
   1dbf6:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1dbfa:	2400      	movs	r4, #0
   1dbfc:	f10c 3cff 	add.w	ip, ip, #4294967295
   1dc00:	4626      	mov	r6, r4
   1dc02:	4627      	mov	r7, r4
   1dc04:	e006      	b.n	1dc14 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1dc06:	429f      	cmp	r7, r3
   1dc08:	d016      	beq.n	1dc38 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1dc0a:	2601      	movs	r6, #1
   1dc0c:	4565      	cmp	r5, ip
   1dc0e:	d819      	bhi.n	1dc44 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1dc10:	462c      	mov	r4, r5
   1dc12:	461f      	mov	r7, r3
   1dc14:	0963      	lsrs	r3, r4, #5
   1dc16:	f004 011f 	and.w	r1, r4, #31
   1dc1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1dc1e:	291f      	cmp	r1, #31
   1dc20:	fa23 f301 	lsr.w	r3, r3, r1
   1dc24:	f104 0501 	add.w	r5, r4, #1
   1dc28:	bf18      	it	ne
   1dc2a:	f003 0301 	andne.w	r3, r3, #1
   1dc2e:	2c00      	cmp	r4, #0
   1dc30:	d1e9      	bne.n	1dc06 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1dc32:	2601      	movs	r6, #1
   1dc34:	4635      	mov	r5, r6
   1dc36:	e7eb      	b.n	1dc10 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1dc38:	3601      	adds	r6, #1
   1dc3a:	4296      	cmp	r6, r2
   1dc3c:	d1e6      	bne.n	1dc0c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1dc3e:	4803      	ldr	r0, [pc, #12]	; (1dc4c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1dc40:	bcf0      	pop	{r4, r5, r6, r7}
   1dc42:	4770      	bx	lr
   1dc44:	2000      	movs	r0, #0
   1dc46:	bcf0      	pop	{r4, r5, r6, r7}
   1dc48:	4770      	bx	lr
   1dc4a:	bf00      	nop
   1dc4c:	00f10c36 	.word	0x00f10c36

0001dc50 <LLF_RND_AdaptiveProportionTest>:
   1dc50:	2800      	cmp	r0, #0
   1dc52:	d061      	beq.n	1dd18 <LLF_RND_AdaptiveProportionTest+0xc8>
   1dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc58:	1e4c      	subs	r4, r1, #1
   1dc5a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1dc5e:	d227      	bcs.n	1dcb0 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc60:	b333      	cbz	r3, 1dcb0 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc62:	b32a      	cbz	r2, 1dcb0 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc64:	00cd      	lsls	r5, r1, #3
   1dc66:	2b01      	cmp	r3, #1
   1dc68:	f105 3eff 	add.w	lr, r5, #4294967295
   1dc6c:	d030      	beq.n	1dcd0 <LLF_RND_AdaptiveProportionTest+0x80>
   1dc6e:	2100      	movs	r1, #0
   1dc70:	468c      	mov	ip, r1
   1dc72:	460f      	mov	r7, r1
   1dc74:	460e      	mov	r6, r1
   1dc76:	f103 38ff 	add.w	r8, r3, #4294967295
   1dc7a:	094c      	lsrs	r4, r1, #5
   1dc7c:	f001 051f 	and.w	r5, r1, #31
   1dc80:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1dc84:	2d1f      	cmp	r5, #31
   1dc86:	fa24 f405 	lsr.w	r4, r4, r5
   1dc8a:	bf18      	it	ne
   1dc8c:	f004 0401 	andne.w	r4, r4, #1
   1dc90:	b921      	cbnz	r1, 1dc9c <LLF_RND_AdaptiveProportionTest+0x4c>
   1dc92:	2601      	movs	r6, #1
   1dc94:	46b4      	mov	ip, r6
   1dc96:	4631      	mov	r1, r6
   1dc98:	4627      	mov	r7, r4
   1dc9a:	e7ee      	b.n	1dc7a <LLF_RND_AdaptiveProportionTest+0x2a>
   1dc9c:	42b3      	cmp	r3, r6
   1dc9e:	d013      	beq.n	1dcc8 <LLF_RND_AdaptiveProportionTest+0x78>
   1dca0:	42a7      	cmp	r7, r4
   1dca2:	d101      	bne.n	1dca8 <LLF_RND_AdaptiveProportionTest+0x58>
   1dca4:	f10c 0c01 	add.w	ip, ip, #1
   1dca8:	4546      	cmp	r6, r8
   1dcaa:	d104      	bne.n	1dcb6 <LLF_RND_AdaptiveProportionTest+0x66>
   1dcac:	4562      	cmp	r2, ip
   1dcae:	d202      	bcs.n	1dcb6 <LLF_RND_AdaptiveProportionTest+0x66>
   1dcb0:	481a      	ldr	r0, [pc, #104]	; (1dd1c <LLF_RND_AdaptiveProportionTest+0xcc>)
   1dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcb6:	463c      	mov	r4, r7
   1dcb8:	3101      	adds	r1, #1
   1dcba:	458e      	cmp	lr, r1
   1dcbc:	f106 0601 	add.w	r6, r6, #1
   1dcc0:	d2ea      	bcs.n	1dc98 <LLF_RND_AdaptiveProportionTest+0x48>
   1dcc2:	2000      	movs	r0, #0
   1dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dcc8:	2600      	movs	r6, #0
   1dcca:	f04f 0c01 	mov.w	ip, #1
   1dcce:	e7f3      	b.n	1dcb8 <LLF_RND_AdaptiveProportionTest+0x68>
   1dcd0:	2600      	movs	r6, #0
   1dcd2:	46b4      	mov	ip, r6
   1dcd4:	4637      	mov	r7, r6
   1dcd6:	4634      	mov	r4, r6
   1dcd8:	0961      	lsrs	r1, r4, #5
   1dcda:	f004 031f 	and.w	r3, r4, #31
   1dcde:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1dce2:	2b1f      	cmp	r3, #31
   1dce4:	fa21 f103 	lsr.w	r1, r1, r3
   1dce8:	bf18      	it	ne
   1dcea:	f001 0101 	andne.w	r1, r1, #1
   1dcee:	b13c      	cbz	r4, 1dd00 <LLF_RND_AdaptiveProportionTest+0xb0>
   1dcf0:	b95f      	cbnz	r7, 1dd0a <LLF_RND_AdaptiveProportionTest+0xba>
   1dcf2:	458c      	cmp	ip, r1
   1dcf4:	d001      	beq.n	1dcfa <LLF_RND_AdaptiveProportionTest+0xaa>
   1dcf6:	4661      	mov	r1, ip
   1dcf8:	e008      	b.n	1dd0c <LLF_RND_AdaptiveProportionTest+0xbc>
   1dcfa:	3601      	adds	r6, #1
   1dcfc:	4661      	mov	r1, ip
   1dcfe:	e005      	b.n	1dd0c <LLF_RND_AdaptiveProportionTest+0xbc>
   1dd00:	2601      	movs	r6, #1
   1dd02:	4634      	mov	r4, r6
   1dd04:	468c      	mov	ip, r1
   1dd06:	2701      	movs	r7, #1
   1dd08:	e7e6      	b.n	1dcd8 <LLF_RND_AdaptiveProportionTest+0x88>
   1dd0a:	463e      	mov	r6, r7
   1dd0c:	42b2      	cmp	r2, r6
   1dd0e:	d3cf      	bcc.n	1dcb0 <LLF_RND_AdaptiveProportionTest+0x60>
   1dd10:	3401      	adds	r4, #1
   1dd12:	42ac      	cmp	r4, r5
   1dd14:	d1f6      	bne.n	1dd04 <LLF_RND_AdaptiveProportionTest+0xb4>
   1dd16:	e7d4      	b.n	1dcc2 <LLF_RND_AdaptiveProportionTest+0x72>
   1dd18:	4800      	ldr	r0, [pc, #0]	; (1dd1c <LLF_RND_AdaptiveProportionTest+0xcc>)
   1dd1a:	4770      	bx	lr
   1dd1c:	00f10c37 	.word	0x00f10c37

0001dd20 <getTrngSource>:
   1dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd24:	b08d      	sub	sp, #52	; 0x34
   1dd26:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1dd2a:	4607      	mov	r7, r0
   1dd2c:	460c      	mov	r4, r1
   1dd2e:	2d00      	cmp	r5, #0
   1dd30:	d14d      	bne.n	1ddce <getTrngSource+0xae>
   1dd32:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1dd36:	601e      	str	r6, [r3, #0]
   1dd38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dd3a:	2100      	movs	r1, #0
   1dd3c:	6019      	str	r1, [r3, #0]
   1dd3e:	2a00      	cmp	r2, #0
   1dd40:	f000 8120 	beq.w	1df84 <getTrngSource+0x264>
   1dd44:	4a9b      	ldr	r2, [pc, #620]	; (1dfb4 <getTrngSource+0x294>)
   1dd46:	4b9c      	ldr	r3, [pc, #624]	; (1dfb8 <getTrngSource+0x298>)
   1dd48:	6811      	ldr	r1, [r2, #0]
   1dd4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1dd4c:	681b      	ldr	r3, [r3, #0]
   1dd4e:	429a      	cmp	r2, r3
   1dd50:	d148      	bne.n	1dde4 <getTrngSource+0xc4>
   1dd52:	290a      	cmp	r1, #10
   1dd54:	d146      	bne.n	1dde4 <getTrngSource+0xc4>
   1dd56:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1dd5a:	9304      	str	r3, [sp, #16]
   1dd5c:	4b97      	ldr	r3, [pc, #604]	; (1dfbc <getTrngSource+0x29c>)
   1dd5e:	fba3 230a 	umull	r2, r3, r3, sl
   1dd62:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1dd66:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1dd6a:	f106 0208 	add.w	r2, r6, #8
   1dd6e:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1dd72:	2304      	movs	r3, #4
   1dd74:	9203      	str	r2, [sp, #12]
   1dd76:	9302      	str	r3, [sp, #8]
   1dd78:	46b8      	mov	r8, r7
   1dd7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dd7c:	f8c3 a000 	str.w	sl, [r3]
   1dd80:	f1ba 0f00 	cmp.w	sl, #0
   1dd84:	f000 80c4 	beq.w	1df10 <getTrngSource+0x1f0>
   1dd88:	9e03      	ldr	r6, [sp, #12]
   1dd8a:	4655      	mov	r5, sl
   1dd8c:	f04f 0900 	mov.w	r9, #0
   1dd90:	f000 fc4e 	bl	1e630 <LLF_RND_TurnOffTrng>
   1dd94:	2300      	movs	r3, #0
   1dd96:	9305      	str	r3, [sp, #20]
   1dd98:	f1b8 0f00 	cmp.w	r8, #0
   1dd9c:	f000 80e6 	beq.w	1df6c <getTrngSource+0x24c>
   1dda0:	2c00      	cmp	r4, #0
   1dda2:	f000 80e3 	beq.w	1df6c <getTrngSource+0x24c>
   1dda6:	9b04      	ldr	r3, [sp, #16]
   1dda8:	2b00      	cmp	r3, #0
   1ddaa:	f000 80dd 	beq.w	1df68 <getTrngSource+0x248>
   1ddae:	a904      	add	r1, sp, #16
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	f000 fc2d 	bl	1e610 <LLF_RND_GetFastestRosc>
   1ddb6:	b1b8      	cbz	r0, 1dde8 <getTrngSource+0xc8>
   1ddb8:	4b81      	ldr	r3, [pc, #516]	; (1dfc0 <getTrngSource+0x2a0>)
   1ddba:	4298      	cmp	r0, r3
   1ddbc:	f040 80a8 	bne.w	1df10 <getTrngSource+0x1f0>
   1ddc0:	9002      	str	r0, [sp, #8]
   1ddc2:	f000 fc35 	bl	1e630 <LLF_RND_TurnOffTrng>
   1ddc6:	9802      	ldr	r0, [sp, #8]
   1ddc8:	b00d      	add	sp, #52	; 0x34
   1ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1ddd2:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1ddd6:	3001      	adds	r0, #1
   1ddd8:	bf14      	ite	ne
   1ddda:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1ddde:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1dde2:	e7a8      	b.n	1dd36 <getTrngSource+0x16>
   1dde4:	4877      	ldr	r0, [pc, #476]	; (1dfc4 <getTrngSource+0x2a4>)
   1dde6:	e7eb      	b.n	1ddc0 <getTrngSource+0xa0>
   1dde8:	9804      	ldr	r0, [sp, #16]
   1ddea:	4621      	mov	r1, r4
   1ddec:	f000 fbf2 	bl	1e5d4 <LLF_RND_GetRoscSampleCnt>
   1ddf0:	2800      	cmp	r0, #0
   1ddf2:	d1e1      	bne.n	1ddb8 <getTrngSource+0x98>
   1ddf4:	9f04      	ldr	r7, [sp, #16]
   1ddf6:	2f08      	cmp	r7, #8
   1ddf8:	f000 80ba 	beq.w	1df70 <getTrngSource+0x250>
   1ddfc:	2f04      	cmp	r7, #4
   1ddfe:	f000 80b9 	beq.w	1df74 <getTrngSource+0x254>
   1de02:	f1a7 0702 	sub.w	r7, r7, #2
   1de06:	fab7 f787 	clz	r7, r7
   1de0a:	097f      	lsrs	r7, r7, #5
   1de0c:	496e      	ldr	r1, [pc, #440]	; (1dfc8 <getTrngSource+0x2a8>)
   1de0e:	2301      	movs	r3, #1
   1de10:	600b      	str	r3, [r1, #0]
   1de12:	f841 3c84 	str.w	r3, [r1, #-132]
   1de16:	4619      	mov	r1, r3
   1de18:	4b6b      	ldr	r3, [pc, #428]	; (1dfc8 <getTrngSource+0x2a8>)
   1de1a:	4867      	ldr	r0, [pc, #412]	; (1dfb8 <getTrngSource+0x298>)
   1de1c:	6019      	str	r1, [r3, #0]
   1de1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1de20:	6003      	str	r3, [r0, #0]
   1de22:	6800      	ldr	r0, [r0, #0]
   1de24:	4283      	cmp	r3, r0
   1de26:	d1f7      	bne.n	1de18 <getTrngSource+0xf8>
   1de28:	4a68      	ldr	r2, [pc, #416]	; (1dfcc <getTrngSource+0x2ac>)
   1de2a:	2300      	movs	r3, #0
   1de2c:	6013      	str	r3, [r2, #0]
   1de2e:	f04f 30ff 	mov.w	r0, #4294967295
   1de32:	f7ff fd05 	bl	1d840 <CC_HalClearInterruptBit>
   1de36:	2300      	movs	r3, #0
   1de38:	4618      	mov	r0, r3
   1de3a:	4b65      	ldr	r3, [pc, #404]	; (1dfd0 <getTrngSource+0x2b0>)
   1de3c:	f06f 011b 	mvn.w	r1, #27
   1de40:	6019      	str	r1, [r3, #0]
   1de42:	f7ff fd0b 	bl	1d85c <CC_HalMaskInterrupt>
   1de46:	4963      	ldr	r1, [pc, #396]	; (1dfd4 <getTrngSource+0x2b4>)
   1de48:	4b63      	ldr	r3, [pc, #396]	; (1dfd8 <getTrngSource+0x2b8>)
   1de4a:	600f      	str	r7, [r1, #0]
   1de4c:	6818      	ldr	r0, [r3, #0]
   1de4e:	4f5b      	ldr	r7, [pc, #364]	; (1dfbc <getTrngSource+0x29c>)
   1de50:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1de54:	f7ff fd02 	bl	1d85c <CC_HalMaskInterrupt>
   1de58:	4b56      	ldr	r3, [pc, #344]	; (1dfb4 <getTrngSource+0x294>)
   1de5a:	4860      	ldr	r0, [pc, #384]	; (1dfdc <getTrngSource+0x2bc>)
   1de5c:	210a      	movs	r1, #10
   1de5e:	6019      	str	r1, [r3, #0]
   1de60:	6921      	ldr	r1, [r4, #16]
   1de62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1de64:	fba7 c101 	umull	ip, r1, r7, r1
   1de68:	0909      	lsrs	r1, r1, #4
   1de6a:	fb03 f301 	mul.w	r3, r3, r1
   1de6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1de72:	03db      	lsls	r3, r3, #15
   1de74:	099b      	lsrs	r3, r3, #6
   1de76:	6003      	str	r3, [r0, #0]
   1de78:	4b54      	ldr	r3, [pc, #336]	; (1dfcc <getTrngSource+0x2ac>)
   1de7a:	2201      	movs	r2, #1
   1de7c:	601a      	str	r2, [r3, #0]
   1de7e:	9904      	ldr	r1, [sp, #16]
   1de80:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1de84:	020b      	lsls	r3, r1, #8
   1de86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1de8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1de8e:	4313      	orrs	r3, r2
   1de90:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1de94:	a805      	add	r0, sp, #20
   1de96:	f000 fb8d 	bl	1e5b4 <LLF_RND_WaitRngInterrupt>
   1de9a:	9b05      	ldr	r3, [sp, #20]
   1de9c:	f003 031a 	and.w	r3, r3, #26
   1dea0:	4303      	orrs	r3, r0
   1dea2:	d135      	bne.n	1df10 <getTrngSource+0x1f0>
   1dea4:	4a4e      	ldr	r2, [pc, #312]	; (1dfe0 <getTrngSource+0x2c0>)
   1dea6:	4b4f      	ldr	r3, [pc, #316]	; (1dfe4 <getTrngSource+0x2c4>)
   1dea8:	6812      	ldr	r2, [r2, #0]
   1deaa:	9206      	str	r2, [sp, #24]
   1deac:	681a      	ldr	r2, [r3, #0]
   1deae:	9207      	str	r2, [sp, #28]
   1deb0:	685a      	ldr	r2, [r3, #4]
   1deb2:	9208      	str	r2, [sp, #32]
   1deb4:	689a      	ldr	r2, [r3, #8]
   1deb6:	9209      	str	r2, [sp, #36]	; 0x24
   1deb8:	68da      	ldr	r2, [r3, #12]
   1deba:	920a      	str	r2, [sp, #40]	; 0x28
   1debc:	3310      	adds	r3, #16
   1debe:	fba7 2705 	umull	r2, r7, r7, r5
   1dec2:	681b      	ldr	r3, [r3, #0]
   1dec4:	930b      	str	r3, [sp, #44]	; 0x2c
   1dec6:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1deca:	d102      	bne.n	1ded2 <getTrngSource+0x1b2>
   1decc:	f1bb 0f00 	cmp.w	fp, #0
   1ded0:	d141      	bne.n	1df56 <getTrngSource+0x236>
   1ded2:	2218      	movs	r2, #24
   1ded4:	4630      	mov	r0, r6
   1ded6:	eb0d 0102 	add.w	r1, sp, r2
   1deda:	f000 fb0f 	bl	1e4fc <CC_PalMemCopyPlat>
   1dede:	3d18      	subs	r5, #24
   1dee0:	3618      	adds	r6, #24
   1dee2:	f109 0901 	add.w	r9, r9, #1
   1dee6:	2d00      	cmp	r5, #0
   1dee8:	f47f af52 	bne.w	1dd90 <getTrngSource+0x70>
   1deec:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1def0:	d85d      	bhi.n	1dfae <getTrngSource+0x28e>
   1def2:	9d03      	ldr	r5, [sp, #12]
   1def4:	6962      	ldr	r2, [r4, #20]
   1def6:	4651      	mov	r1, sl
   1def8:	4628      	mov	r0, r5
   1defa:	f7ff fe7b 	bl	1dbf4 <LLF_RND_RepetitionCounterTest.part.0>
   1defe:	2800      	cmp	r0, #0
   1df00:	d04b      	beq.n	1df9a <getTrngSource+0x27a>
   1df02:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1df04:	2300      	movs	r3, #0
   1df06:	6013      	str	r3, [r2, #0]
   1df08:	4b2d      	ldr	r3, [pc, #180]	; (1dfc0 <getTrngSource+0x2a0>)
   1df0a:	4298      	cmp	r0, r3
   1df0c:	f43f af58 	beq.w	1ddc0 <getTrngSource+0xa0>
   1df10:	9d04      	ldr	r5, [sp, #16]
   1df12:	2d08      	cmp	r5, #8
   1df14:	d034      	beq.n	1df80 <getTrngSource+0x260>
   1df16:	2200      	movs	r2, #0
   1df18:	ab04      	add	r3, sp, #16
   1df1a:	006d      	lsls	r5, r5, #1
   1df1c:	9200      	str	r2, [sp, #0]
   1df1e:	4621      	mov	r1, r4
   1df20:	4640      	mov	r0, r8
   1df22:	9504      	str	r5, [sp, #16]
   1df24:	f7ff fdb8 	bl	1da98 <startTrngHW>
   1df28:	4b2f      	ldr	r3, [pc, #188]	; (1dfe8 <getTrngSource+0x2c8>)
   1df2a:	4298      	cmp	r0, r3
   1df2c:	d024      	beq.n	1df78 <getTrngSource+0x258>
   1df2e:	2800      	cmp	r0, #0
   1df30:	f47f af46 	bne.w	1ddc0 <getTrngSource+0xa0>
   1df34:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1df38:	0a13      	lsrs	r3, r2, #8
   1df3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1df3e:	4313      	orrs	r3, r2
   1df40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1df44:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1df48:	9b02      	ldr	r3, [sp, #8]
   1df4a:	3b01      	subs	r3, #1
   1df4c:	9302      	str	r3, [sp, #8]
   1df4e:	f47f af14 	bne.w	1dd7a <getTrngSource+0x5a>
   1df52:	2000      	movs	r0, #0
   1df54:	e734      	b.n	1ddc0 <getTrngSource+0xa0>
   1df56:	4630      	mov	r0, r6
   1df58:	465a      	mov	r2, fp
   1df5a:	a906      	add	r1, sp, #24
   1df5c:	f000 face 	bl	1e4fc <CC_PalMemCopyPlat>
   1df60:	eba5 050b 	sub.w	r5, r5, fp
   1df64:	445e      	add	r6, fp
   1df66:	e7bc      	b.n	1dee2 <getTrngSource+0x1c2>
   1df68:	481f      	ldr	r0, [pc, #124]	; (1dfe8 <getTrngSource+0x2c8>)
   1df6a:	e725      	b.n	1ddb8 <getTrngSource+0x98>
   1df6c:	481f      	ldr	r0, [pc, #124]	; (1dfec <getTrngSource+0x2cc>)
   1df6e:	e723      	b.n	1ddb8 <getTrngSource+0x98>
   1df70:	2703      	movs	r7, #3
   1df72:	e74b      	b.n	1de0c <getTrngSource+0xec>
   1df74:	2702      	movs	r7, #2
   1df76:	e749      	b.n	1de0c <getTrngSource+0xec>
   1df78:	6a23      	ldr	r3, [r4, #32]
   1df7a:	2b00      	cmp	r3, #0
   1df7c:	f43f af20 	beq.w	1ddc0 <getTrngSource+0xa0>
   1df80:	481b      	ldr	r0, [pc, #108]	; (1dff0 <getTrngSource+0x2d0>)
   1df82:	e71d      	b.n	1ddc0 <getTrngSource+0xa0>
   1df84:	9500      	str	r5, [sp, #0]
   1df86:	ab04      	add	r3, sp, #16
   1df88:	2201      	movs	r2, #1
   1df8a:	4621      	mov	r1, r4
   1df8c:	4638      	mov	r0, r7
   1df8e:	f7ff fd83 	bl	1da98 <startTrngHW>
   1df92:	2800      	cmp	r0, #0
   1df94:	f43f aee2 	beq.w	1dd5c <getTrngSource+0x3c>
   1df98:	e712      	b.n	1ddc0 <getTrngSource+0xa0>
   1df9a:	69a2      	ldr	r2, [r4, #24]
   1df9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1dfa0:	4651      	mov	r1, sl
   1dfa2:	4628      	mov	r0, r5
   1dfa4:	f7ff fe54 	bl	1dc50 <LLF_RND_AdaptiveProportionTest>
   1dfa8:	2800      	cmp	r0, #0
   1dfaa:	d1aa      	bne.n	1df02 <getTrngSource+0x1e2>
   1dfac:	e7d1      	b.n	1df52 <getTrngSource+0x232>
   1dfae:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dfb0:	601d      	str	r5, [r3, #0]
   1dfb2:	e7ad      	b.n	1df10 <getTrngSource+0x1f0>
   1dfb4:	5002b138 	.word	0x5002b138
   1dfb8:	5002b130 	.word	0x5002b130
   1dfbc:	aaaaaaab 	.word	0xaaaaaaab
   1dfc0:	00f10c02 	.word	0x00f10c02
   1dfc4:	00f10c30 	.word	0x00f10c30
   1dfc8:	5002b1c4 	.word	0x5002b1c4
   1dfcc:	5002b12c 	.word	0x5002b12c
   1dfd0:	5002b100 	.word	0x5002b100
   1dfd4:	5002b10c 	.word	0x5002b10c
   1dfd8:	5002ba04 	.word	0x5002ba04
   1dfdc:	5002b1d8 	.word	0x5002b1d8
   1dfe0:	5002b114 	.word	0x5002b114
   1dfe4:	5002b118 	.word	0x5002b118
   1dfe8:	00f10c31 	.word	0x00f10c31
   1dfec:	00f10c35 	.word	0x00f10c35
   1dff0:	00f10c32 	.word	0x00f10c32

0001dff4 <LLF_RND_GetTrngSource>:
   1dff4:	b430      	push	{r4, r5}
   1dff6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1dffa:	9d04      	ldr	r5, [sp, #16]
   1dffc:	9402      	str	r4, [sp, #8]
   1dffe:	2400      	movs	r4, #0
   1e000:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1e004:	bc30      	pop	{r4, r5}
   1e006:	f7ff be8b 	b.w	1dd20 <getTrngSource>
   1e00a:	bf00      	nop

0001e00c <LLF_RND_RunTrngStartupTest>:
   1e00c:	b510      	push	{r4, lr}
   1e00e:	b086      	sub	sp, #24
   1e010:	ab05      	add	r3, sp, #20
   1e012:	2401      	movs	r4, #1
   1e014:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1e018:	9300      	str	r3, [sp, #0]
   1e01a:	2200      	movs	r2, #0
   1e01c:	ab04      	add	r3, sp, #16
   1e01e:	f7ff fe7f 	bl	1dd20 <getTrngSource>
   1e022:	b006      	add	sp, #24
   1e024:	bd10      	pop	{r4, pc}
   1e026:	bf00      	nop

0001e028 <mbedtls_hardware_poll>:
   1e028:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e02a:	b089      	sub	sp, #36	; 0x24
   1e02c:	9205      	str	r2, [sp, #20]
   1e02e:	2900      	cmp	r1, #0
   1e030:	d064      	beq.n	1e0fc <mbedtls_hardware_poll+0xd4>
   1e032:	461c      	mov	r4, r3
   1e034:	2b00      	cmp	r3, #0
   1e036:	d061      	beq.n	1e0fc <mbedtls_hardware_poll+0xd4>
   1e038:	4615      	mov	r5, r2
   1e03a:	2a00      	cmp	r2, #0
   1e03c:	d05e      	beq.n	1e0fc <mbedtls_hardware_poll+0xd4>
   1e03e:	4f31      	ldr	r7, [pc, #196]	; (1e104 <mbedtls_hardware_poll+0xdc>)
   1e040:	460e      	mov	r6, r1
   1e042:	6838      	ldr	r0, [r7, #0]
   1e044:	f04f 31ff 	mov.w	r1, #4294967295
   1e048:	f7ff fca2 	bl	1d990 <CC_PalMutexLock>
   1e04c:	2800      	cmp	r0, #0
   1e04e:	d14b      	bne.n	1e0e8 <mbedtls_hardware_poll+0xc0>
   1e050:	2000      	movs	r0, #0
   1e052:	f7ff fccd 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e056:	2800      	cmp	r0, #0
   1e058:	d142      	bne.n	1e0e0 <mbedtls_hardware_poll+0xb8>
   1e05a:	482b      	ldr	r0, [pc, #172]	; (1e108 <mbedtls_hardware_poll+0xe0>)
   1e05c:	f000 fa12 	bl	1e484 <RNG_PLAT_SetUserRngParameters>
   1e060:	b1d8      	cbz	r0, 1e09a <mbedtls_hardware_poll+0x72>
   1e062:	2001      	movs	r0, #1
   1e064:	f04f 36ff 	mov.w	r6, #4294967295
   1e068:	f7ff fcc2 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e06c:	2800      	cmp	r0, #0
   1e06e:	d133      	bne.n	1e0d8 <mbedtls_hardware_poll+0xb0>
   1e070:	4826      	ldr	r0, [pc, #152]	; (1e10c <mbedtls_hardware_poll+0xe4>)
   1e072:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e076:	f7fe fe47 	bl	1cd08 <mbedtls_zeroize_internal>
   1e07a:	4825      	ldr	r0, [pc, #148]	; (1e110 <mbedtls_hardware_poll+0xe8>)
   1e07c:	21dc      	movs	r1, #220	; 0xdc
   1e07e:	f7fe fe43 	bl	1cd08 <mbedtls_zeroize_internal>
   1e082:	4821      	ldr	r0, [pc, #132]	; (1e108 <mbedtls_hardware_poll+0xe0>)
   1e084:	2128      	movs	r1, #40	; 0x28
   1e086:	f7fe fe3f 	bl	1cd08 <mbedtls_zeroize_internal>
   1e08a:	6838      	ldr	r0, [r7, #0]
   1e08c:	f7ff fc88 	bl	1d9a0 <CC_PalMutexUnlock>
   1e090:	2800      	cmp	r0, #0
   1e092:	d12d      	bne.n	1e0f0 <mbedtls_hardware_poll+0xc8>
   1e094:	4630      	mov	r0, r6
   1e096:	b009      	add	sp, #36	; 0x24
   1e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e09a:	491c      	ldr	r1, [pc, #112]	; (1e10c <mbedtls_hardware_poll+0xe4>)
   1e09c:	9003      	str	r0, [sp, #12]
   1e09e:	ab07      	add	r3, sp, #28
   1e0a0:	4602      	mov	r2, r0
   1e0a2:	9102      	str	r1, [sp, #8]
   1e0a4:	9300      	str	r3, [sp, #0]
   1e0a6:	4918      	ldr	r1, [pc, #96]	; (1e108 <mbedtls_hardware_poll+0xe0>)
   1e0a8:	4819      	ldr	r0, [pc, #100]	; (1e110 <mbedtls_hardware_poll+0xe8>)
   1e0aa:	9401      	str	r4, [sp, #4]
   1e0ac:	ab05      	add	r3, sp, #20
   1e0ae:	f7ff ffa1 	bl	1dff4 <LLF_RND_GetTrngSource>
   1e0b2:	4603      	mov	r3, r0
   1e0b4:	2800      	cmp	r0, #0
   1e0b6:	d1d4      	bne.n	1e062 <mbedtls_hardware_poll+0x3a>
   1e0b8:	6822      	ldr	r2, [r4, #0]
   1e0ba:	42aa      	cmp	r2, r5
   1e0bc:	d3d1      	bcc.n	1e062 <mbedtls_hardware_poll+0x3a>
   1e0be:	9907      	ldr	r1, [sp, #28]
   1e0c0:	4630      	mov	r0, r6
   1e0c2:	3108      	adds	r1, #8
   1e0c4:	462a      	mov	r2, r5
   1e0c6:	461e      	mov	r6, r3
   1e0c8:	f000 fa18 	bl	1e4fc <CC_PalMemCopyPlat>
   1e0cc:	6025      	str	r5, [r4, #0]
   1e0ce:	2001      	movs	r0, #1
   1e0d0:	f7ff fc8e 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e0d4:	2800      	cmp	r0, #0
   1e0d6:	d0cb      	beq.n	1e070 <mbedtls_hardware_poll+0x48>
   1e0d8:	480e      	ldr	r0, [pc, #56]	; (1e114 <mbedtls_hardware_poll+0xec>)
   1e0da:	f7fe fd0d 	bl	1caf8 <CC_PalAbort>
   1e0de:	e7c7      	b.n	1e070 <mbedtls_hardware_poll+0x48>
   1e0e0:	480d      	ldr	r0, [pc, #52]	; (1e118 <mbedtls_hardware_poll+0xf0>)
   1e0e2:	f7fe fd09 	bl	1caf8 <CC_PalAbort>
   1e0e6:	e7b8      	b.n	1e05a <mbedtls_hardware_poll+0x32>
   1e0e8:	480c      	ldr	r0, [pc, #48]	; (1e11c <mbedtls_hardware_poll+0xf4>)
   1e0ea:	f7fe fd05 	bl	1caf8 <CC_PalAbort>
   1e0ee:	e7af      	b.n	1e050 <mbedtls_hardware_poll+0x28>
   1e0f0:	480b      	ldr	r0, [pc, #44]	; (1e120 <mbedtls_hardware_poll+0xf8>)
   1e0f2:	f7fe fd01 	bl	1caf8 <CC_PalAbort>
   1e0f6:	4630      	mov	r0, r6
   1e0f8:	b009      	add	sp, #36	; 0x24
   1e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e0fc:	f04f 36ff 	mov.w	r6, #4294967295
   1e100:	e7c8      	b.n	1e094 <mbedtls_hardware_poll+0x6c>
   1e102:	bf00      	nop
   1e104:	20000894 	.word	0x20000894
   1e108:	20003350 	.word	0x20003350
   1e10c:	20003130 	.word	0x20003130
   1e110:	20003054 	.word	0x20003054
   1e114:	00024c68 	.word	0x00024c68
   1e118:	00024c48 	.word	0x00024c48
   1e11c:	00024c30 	.word	0x00024c30
   1e120:	00024cc0 	.word	0x00024cc0

0001e124 <cc_mbedtls_aes_init>:
   1e124:	b510      	push	{r4, lr}
   1e126:	4604      	mov	r4, r0
   1e128:	b130      	cbz	r0, 1e138 <cc_mbedtls_aes_init+0x14>
   1e12a:	2200      	movs	r2, #0
   1e12c:	2301      	movs	r3, #1
   1e12e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1e132:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1e136:	bd10      	pop	{r4, pc}
   1e138:	4801      	ldr	r0, [pc, #4]	; (1e140 <cc_mbedtls_aes_init+0x1c>)
   1e13a:	f7fe fcdd 	bl	1caf8 <CC_PalAbort>
   1e13e:	e7f4      	b.n	1e12a <cc_mbedtls_aes_init+0x6>
   1e140:	00024cd8 	.word	0x00024cd8

0001e144 <cc_mbedtls_aes_free>:
   1e144:	b118      	cbz	r0, 1e14e <cc_mbedtls_aes_free+0xa>
   1e146:	2274      	movs	r2, #116	; 0x74
   1e148:	2100      	movs	r1, #0
   1e14a:	f000 b9d9 	b.w	1e500 <CC_PalMemSetPlat>
   1e14e:	4770      	bx	lr

0001e150 <cc_mbedtls_aes_setkey_enc>:
   1e150:	b190      	cbz	r0, 1e178 <cc_mbedtls_aes_setkey_enc+0x28>
   1e152:	b1a1      	cbz	r1, 1e17e <cc_mbedtls_aes_setkey_enc+0x2e>
   1e154:	b510      	push	{r4, lr}
   1e156:	2a80      	cmp	r2, #128	; 0x80
   1e158:	f04f 0400 	mov.w	r4, #0
   1e15c:	6384      	str	r4, [r0, #56]	; 0x38
   1e15e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1e162:	d106      	bne.n	1e172 <cc_mbedtls_aes_setkey_enc+0x22>
   1e164:	6304      	str	r4, [r0, #48]	; 0x30
   1e166:	2210      	movs	r2, #16
   1e168:	3010      	adds	r0, #16
   1e16a:	f000 f9c7 	bl	1e4fc <CC_PalMemCopyPlat>
   1e16e:	4620      	mov	r0, r4
   1e170:	bd10      	pop	{r4, pc}
   1e172:	f06f 001f 	mvn.w	r0, #31
   1e176:	bd10      	pop	{r4, pc}
   1e178:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e17c:	4770      	bx	lr
   1e17e:	f06f 001f 	mvn.w	r0, #31
   1e182:	4770      	bx	lr

0001e184 <cc_mbedtls_aes_crypt_ecb>:
   1e184:	b320      	cbz	r0, 1e1d0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e186:	b31a      	cbz	r2, 1e1d0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e188:	b313      	cbz	r3, 1e1d0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e18a:	2901      	cmp	r1, #1
   1e18c:	d820      	bhi.n	1e1d0 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1e18e:	b570      	push	{r4, r5, r6, lr}
   1e190:	4604      	mov	r4, r0
   1e192:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1e194:	b086      	sub	sp, #24
   1e196:	d016      	beq.n	1e1c6 <cc_mbedtls_aes_crypt_ecb+0x42>
   1e198:	2901      	cmp	r1, #1
   1e19a:	d116      	bne.n	1e1ca <cc_mbedtls_aes_crypt_ecb+0x46>
   1e19c:	2100      	movs	r1, #0
   1e19e:	2510      	movs	r5, #16
   1e1a0:	ae04      	add	r6, sp, #16
   1e1a2:	6361      	str	r1, [r4, #52]	; 0x34
   1e1a4:	4610      	mov	r0, r2
   1e1a6:	e9cd 5600 	strd	r5, r6, [sp]
   1e1aa:	aa02      	add	r2, sp, #8
   1e1ac:	4629      	mov	r1, r5
   1e1ae:	f000 fa4d 	bl	1e64c <SetDataBuffersInfo>
   1e1b2:	b950      	cbnz	r0, 1e1ca <cc_mbedtls_aes_crypt_ecb+0x46>
   1e1b4:	462b      	mov	r3, r5
   1e1b6:	4632      	mov	r2, r6
   1e1b8:	a902      	add	r1, sp, #8
   1e1ba:	4620      	mov	r0, r4
   1e1bc:	f000 fcda 	bl	1eb74 <ProcessAesDrv>
   1e1c0:	b918      	cbnz	r0, 1e1ca <cc_mbedtls_aes_crypt_ecb+0x46>
   1e1c2:	b006      	add	sp, #24
   1e1c4:	bd70      	pop	{r4, r5, r6, pc}
   1e1c6:	2900      	cmp	r1, #0
   1e1c8:	d0e8      	beq.n	1e19c <cc_mbedtls_aes_crypt_ecb+0x18>
   1e1ca:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e1ce:	e7f8      	b.n	1e1c2 <cc_mbedtls_aes_crypt_ecb+0x3e>
   1e1d0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e1d4:	4770      	bx	lr
   1e1d6:	bf00      	nop

0001e1d8 <cc_mbedtls_sha256_init>:
   1e1d8:	b510      	push	{r4, lr}
   1e1da:	4604      	mov	r4, r0
   1e1dc:	b128      	cbz	r0, 1e1ea <cc_mbedtls_sha256_init+0x12>
   1e1de:	4620      	mov	r0, r4
   1e1e0:	21f0      	movs	r1, #240	; 0xf0
   1e1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e1e6:	f000 b98d 	b.w	1e504 <CC_PalMemSetZeroPlat>
   1e1ea:	4804      	ldr	r0, [pc, #16]	; (1e1fc <cc_mbedtls_sha256_init+0x24>)
   1e1ec:	f7fe fc84 	bl	1caf8 <CC_PalAbort>
   1e1f0:	4620      	mov	r0, r4
   1e1f2:	21f0      	movs	r1, #240	; 0xf0
   1e1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e1f8:	f000 b984 	b.w	1e504 <CC_PalMemSetZeroPlat>
   1e1fc:	00024cec 	.word	0x00024cec

0001e200 <cc_mbedtls_sha256_free>:
   1e200:	b110      	cbz	r0, 1e208 <cc_mbedtls_sha256_free+0x8>
   1e202:	21f0      	movs	r1, #240	; 0xf0
   1e204:	f7fe bd80 	b.w	1cd08 <mbedtls_zeroize_internal>
   1e208:	4770      	bx	lr
   1e20a:	bf00      	nop

0001e20c <cc_mbedtls_sha256_starts>:
   1e20c:	b508      	push	{r3, lr}
   1e20e:	b161      	cbz	r1, 1e22a <cc_mbedtls_sha256_starts+0x1e>
   1e210:	2901      	cmp	r1, #1
   1e212:	d107      	bne.n	1e224 <cc_mbedtls_sha256_starts+0x18>
   1e214:	2102      	movs	r1, #2
   1e216:	f000 f85b 	bl	1e2d0 <mbedtls_sha_starts_internal>
   1e21a:	2800      	cmp	r0, #0
   1e21c:	bf18      	it	ne
   1e21e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e222:	bd08      	pop	{r3, pc}
   1e224:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e228:	bd08      	pop	{r3, pc}
   1e22a:	2101      	movs	r1, #1
   1e22c:	f000 f850 	bl	1e2d0 <mbedtls_sha_starts_internal>
   1e230:	e7f3      	b.n	1e21a <cc_mbedtls_sha256_starts+0xe>
   1e232:	bf00      	nop

0001e234 <cc_mbedtls_sha256_update>:
   1e234:	b570      	push	{r4, r5, r6, lr}
   1e236:	188e      	adds	r6, r1, r2
   1e238:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1e23c:	b0a0      	sub	sp, #128	; 0x80
   1e23e:	460b      	mov	r3, r1
   1e240:	4614      	mov	r4, r2
   1e242:	4605      	mov	r5, r0
   1e244:	d801      	bhi.n	1e24a <cc_mbedtls_sha256_update+0x16>
   1e246:	2a80      	cmp	r2, #128	; 0x80
   1e248:	d90c      	bls.n	1e264 <cc_mbedtls_sha256_update+0x30>
   1e24a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e24e:	d917      	bls.n	1e280 <cc_mbedtls_sha256_update+0x4c>
   1e250:	4622      	mov	r2, r4
   1e252:	4619      	mov	r1, r3
   1e254:	4628      	mov	r0, r5
   1e256:	f000 f87d 	bl	1e354 <mbedtls_sha_update_internal>
   1e25a:	4604      	mov	r4, r0
   1e25c:	b984      	cbnz	r4, 1e280 <cc_mbedtls_sha256_update+0x4c>
   1e25e:	4620      	mov	r0, r4
   1e260:	b020      	add	sp, #128	; 0x80
   1e262:	bd70      	pop	{r4, r5, r6, pc}
   1e264:	4668      	mov	r0, sp
   1e266:	f000 f949 	bl	1e4fc <CC_PalMemCopyPlat>
   1e26a:	4622      	mov	r2, r4
   1e26c:	4669      	mov	r1, sp
   1e26e:	4628      	mov	r0, r5
   1e270:	f000 f870 	bl	1e354 <mbedtls_sha_update_internal>
   1e274:	2180      	movs	r1, #128	; 0x80
   1e276:	4604      	mov	r4, r0
   1e278:	4668      	mov	r0, sp
   1e27a:	f000 f943 	bl	1e504 <CC_PalMemSetZeroPlat>
   1e27e:	e7ed      	b.n	1e25c <cc_mbedtls_sha256_update+0x28>
   1e280:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1e284:	e7eb      	b.n	1e25e <cc_mbedtls_sha256_update+0x2a>
   1e286:	bf00      	nop

0001e288 <cc_mbedtls_sha256_finish>:
   1e288:	b570      	push	{r4, r5, r6, lr}
   1e28a:	b1e8      	cbz	r0, 1e2c8 <cc_mbedtls_sha256_finish+0x40>
   1e28c:	460e      	mov	r6, r1
   1e28e:	b1d9      	cbz	r1, 1e2c8 <cc_mbedtls_sha256_finish+0x40>
   1e290:	4604      	mov	r4, r0
   1e292:	f000 f831 	bl	1e2f8 <mbedtls_sha_finish_internal>
   1e296:	4605      	mov	r5, r0
   1e298:	b9b0      	cbnz	r0, 1e2c8 <cc_mbedtls_sha256_finish+0x40>
   1e29a:	6823      	ldr	r3, [r4, #0]
   1e29c:	2b01      	cmp	r3, #1
   1e29e:	d00b      	beq.n	1e2b8 <cc_mbedtls_sha256_finish+0x30>
   1e2a0:	2b02      	cmp	r3, #2
   1e2a2:	d001      	beq.n	1e2a8 <cc_mbedtls_sha256_finish+0x20>
   1e2a4:	4628      	mov	r0, r5
   1e2a6:	bd70      	pop	{r4, r5, r6, pc}
   1e2a8:	f104 0108 	add.w	r1, r4, #8
   1e2ac:	4630      	mov	r0, r6
   1e2ae:	221c      	movs	r2, #28
   1e2b0:	f000 f924 	bl	1e4fc <CC_PalMemCopyPlat>
   1e2b4:	4628      	mov	r0, r5
   1e2b6:	bd70      	pop	{r4, r5, r6, pc}
   1e2b8:	f104 0108 	add.w	r1, r4, #8
   1e2bc:	4630      	mov	r0, r6
   1e2be:	2220      	movs	r2, #32
   1e2c0:	f000 f91c 	bl	1e4fc <CC_PalMemCopyPlat>
   1e2c4:	4628      	mov	r0, r5
   1e2c6:	bd70      	pop	{r4, r5, r6, pc}
   1e2c8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e2cc:	e7ea      	b.n	1e2a4 <cc_mbedtls_sha256_finish+0x1c>
   1e2ce:	bf00      	nop

0001e2d0 <mbedtls_sha_starts_internal>:
   1e2d0:	b178      	cbz	r0, 1e2f2 <mbedtls_sha_starts_internal+0x22>
   1e2d2:	b538      	push	{r3, r4, r5, lr}
   1e2d4:	4604      	mov	r4, r0
   1e2d6:	460d      	mov	r5, r1
   1e2d8:	21f0      	movs	r1, #240	; 0xf0
   1e2da:	f000 f913 	bl	1e504 <CC_PalMemSetZeroPlat>
   1e2de:	2340      	movs	r3, #64	; 0x40
   1e2e0:	6025      	str	r5, [r4, #0]
   1e2e2:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	f000 f9e5 	bl	1e6b4 <InitHashDrv>
   1e2ea:	3800      	subs	r0, #0
   1e2ec:	bf18      	it	ne
   1e2ee:	2001      	movne	r0, #1
   1e2f0:	bd38      	pop	{r3, r4, r5, pc}
   1e2f2:	2001      	movs	r0, #1
   1e2f4:	4770      	bx	lr
   1e2f6:	bf00      	nop

0001e2f8 <mbedtls_sha_finish_internal>:
   1e2f8:	b570      	push	{r4, r5, r6, lr}
   1e2fa:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e2fc:	b0a4      	sub	sp, #144	; 0x90
   1e2fe:	4604      	mov	r4, r0
   1e300:	ae04      	add	r6, sp, #16
   1e302:	b9e5      	cbnz	r5, 1e33e <mbedtls_sha_finish_internal+0x46>
   1e304:	2201      	movs	r2, #1
   1e306:	2300      	movs	r3, #0
   1e308:	6062      	str	r2, [r4, #4]
   1e30a:	4630      	mov	r0, r6
   1e30c:	e9cd 3300 	strd	r3, r3, [sp]
   1e310:	aa02      	add	r2, sp, #8
   1e312:	4629      	mov	r1, r5
   1e314:	f000 f99a 	bl	1e64c <SetDataBuffersInfo>
   1e318:	b110      	cbz	r0, 1e320 <mbedtls_sha_finish_internal+0x28>
   1e31a:	2001      	movs	r0, #1
   1e31c:	b024      	add	sp, #144	; 0x90
   1e31e:	bd70      	pop	{r4, r5, r6, pc}
   1e320:	462a      	mov	r2, r5
   1e322:	a902      	add	r1, sp, #8
   1e324:	4620      	mov	r0, r4
   1e326:	f000 f9ef 	bl	1e708 <ProcessHashDrv>
   1e32a:	2800      	cmp	r0, #0
   1e32c:	d1f5      	bne.n	1e31a <mbedtls_sha_finish_internal+0x22>
   1e32e:	4620      	mov	r0, r4
   1e330:	f000 fb18 	bl	1e964 <FinishHashDrv>
   1e334:	2800      	cmp	r0, #0
   1e336:	d1f0      	bne.n	1e31a <mbedtls_sha_finish_internal+0x22>
   1e338:	6620      	str	r0, [r4, #96]	; 0x60
   1e33a:	b024      	add	sp, #144	; 0x90
   1e33c:	bd70      	pop	{r4, r5, r6, pc}
   1e33e:	2d80      	cmp	r5, #128	; 0x80
   1e340:	462a      	mov	r2, r5
   1e342:	4630      	mov	r0, r6
   1e344:	bf28      	it	cs
   1e346:	2280      	movcs	r2, #128	; 0x80
   1e348:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1e34c:	f000 f8d6 	bl	1e4fc <CC_PalMemCopyPlat>
   1e350:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e352:	e7d7      	b.n	1e304 <mbedtls_sha_finish_internal+0xc>

0001e354 <mbedtls_sha_update_internal>:
   1e354:	2800      	cmp	r0, #0
   1e356:	d054      	beq.n	1e402 <mbedtls_sha_update_internal+0xae>
   1e358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e35a:	4614      	mov	r4, r2
   1e35c:	b0a5      	sub	sp, #148	; 0x94
   1e35e:	b1b2      	cbz	r2, 1e38e <mbedtls_sha_update_internal+0x3a>
   1e360:	460e      	mov	r6, r1
   1e362:	b351      	cbz	r1, 1e3ba <mbedtls_sha_update_internal+0x66>
   1e364:	4605      	mov	r5, r0
   1e366:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1e36a:	1a1a      	subs	r2, r3, r0
   1e36c:	fbb2 f7f3 	udiv	r7, r2, r3
   1e370:	fb03 2717 	mls	r7, r3, r7, r2
   1e374:	42a7      	cmp	r7, r4
   1e376:	bf28      	it	cs
   1e378:	4627      	movcs	r7, r4
   1e37a:	2f00      	cmp	r7, #0
   1e37c:	d143      	bne.n	1e406 <mbedtls_sha_update_internal+0xb2>
   1e37e:	4283      	cmp	r3, r0
   1e380:	d008      	beq.n	1e394 <mbedtls_sha_update_internal+0x40>
   1e382:	fbb4 f7f3 	udiv	r7, r4, r3
   1e386:	fb03 f707 	mul.w	r7, r3, r7
   1e38a:	b9cf      	cbnz	r7, 1e3c0 <mbedtls_sha_update_internal+0x6c>
   1e38c:	bb6c      	cbnz	r4, 1e3ea <mbedtls_sha_update_internal+0x96>
   1e38e:	2000      	movs	r0, #0
   1e390:	b025      	add	sp, #148	; 0x94
   1e392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e394:	2b80      	cmp	r3, #128	; 0x80
   1e396:	bf28      	it	cs
   1e398:	2380      	movcs	r3, #128	; 0x80
   1e39a:	461a      	mov	r2, r3
   1e39c:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e3a0:	a804      	add	r0, sp, #16
   1e3a2:	f000 f8ab 	bl	1e4fc <CC_PalMemCopyPlat>
   1e3a6:	2300      	movs	r3, #0
   1e3a8:	e9cd 3300 	strd	r3, r3, [sp]
   1e3ac:	a804      	add	r0, sp, #16
   1e3ae:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e3b0:	aa02      	add	r2, sp, #8
   1e3b2:	f000 f94b 	bl	1e64c <SetDataBuffersInfo>
   1e3b6:	2800      	cmp	r0, #0
   1e3b8:	d032      	beq.n	1e420 <mbedtls_sha_update_internal+0xcc>
   1e3ba:	2001      	movs	r0, #1
   1e3bc:	b025      	add	sp, #148	; 0x94
   1e3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e3c0:	2300      	movs	r3, #0
   1e3c2:	e9cd 3300 	strd	r3, r3, [sp]
   1e3c6:	aa02      	add	r2, sp, #8
   1e3c8:	4639      	mov	r1, r7
   1e3ca:	4630      	mov	r0, r6
   1e3cc:	f000 f93e 	bl	1e64c <SetDataBuffersInfo>
   1e3d0:	2800      	cmp	r0, #0
   1e3d2:	d1f2      	bne.n	1e3ba <mbedtls_sha_update_internal+0x66>
   1e3d4:	a902      	add	r1, sp, #8
   1e3d6:	463a      	mov	r2, r7
   1e3d8:	4628      	mov	r0, r5
   1e3da:	f000 f995 	bl	1e708 <ProcessHashDrv>
   1e3de:	2800      	cmp	r0, #0
   1e3e0:	d1eb      	bne.n	1e3ba <mbedtls_sha_update_internal+0x66>
   1e3e2:	1be4      	subs	r4, r4, r7
   1e3e4:	443e      	add	r6, r7
   1e3e6:	2c00      	cmp	r4, #0
   1e3e8:	d0d1      	beq.n	1e38e <mbedtls_sha_update_internal+0x3a>
   1e3ea:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e3ec:	3019      	adds	r0, #25
   1e3ee:	4622      	mov	r2, r4
   1e3f0:	4631      	mov	r1, r6
   1e3f2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e3f6:	f000 f881 	bl	1e4fc <CC_PalMemCopyPlat>
   1e3fa:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1e3fc:	4422      	add	r2, r4
   1e3fe:	662a      	str	r2, [r5, #96]	; 0x60
   1e400:	e7c5      	b.n	1e38e <mbedtls_sha_update_internal+0x3a>
   1e402:	2001      	movs	r0, #1
   1e404:	4770      	bx	lr
   1e406:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e40a:	4418      	add	r0, r3
   1e40c:	463a      	mov	r2, r7
   1e40e:	f000 f875 	bl	1e4fc <CC_PalMemCopyPlat>
   1e412:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1e416:	4438      	add	r0, r7
   1e418:	443e      	add	r6, r7
   1e41a:	1be4      	subs	r4, r4, r7
   1e41c:	6628      	str	r0, [r5, #96]	; 0x60
   1e41e:	e7ae      	b.n	1e37e <mbedtls_sha_update_internal+0x2a>
   1e420:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e422:	a902      	add	r1, sp, #8
   1e424:	4628      	mov	r0, r5
   1e426:	f000 f96f 	bl	1e708 <ProcessHashDrv>
   1e42a:	2800      	cmp	r0, #0
   1e42c:	d1c5      	bne.n	1e3ba <mbedtls_sha_update_internal+0x66>
   1e42e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e430:	6628      	str	r0, [r5, #96]	; 0x60
   1e432:	e7a6      	b.n	1e382 <mbedtls_sha_update_internal+0x2e>

0001e434 <cc_mbedtls_sha256>:
   1e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e436:	461c      	mov	r4, r3
   1e438:	4605      	mov	r5, r0
   1e43a:	4811      	ldr	r0, [pc, #68]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e43c:	460e      	mov	r6, r1
   1e43e:	4617      	mov	r7, r2
   1e440:	f7ff feca 	bl	1e1d8 <cc_mbedtls_sha256_init>
   1e444:	4621      	mov	r1, r4
   1e446:	480e      	ldr	r0, [pc, #56]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e448:	f7ff fee0 	bl	1e20c <cc_mbedtls_sha256_starts>
   1e44c:	4604      	mov	r4, r0
   1e44e:	b120      	cbz	r0, 1e45a <cc_mbedtls_sha256+0x26>
   1e450:	480b      	ldr	r0, [pc, #44]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e452:	f7ff fed5 	bl	1e200 <cc_mbedtls_sha256_free>
   1e456:	4620      	mov	r0, r4
   1e458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e45a:	4809      	ldr	r0, [pc, #36]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e45c:	4632      	mov	r2, r6
   1e45e:	4629      	mov	r1, r5
   1e460:	f7ff fee8 	bl	1e234 <cc_mbedtls_sha256_update>
   1e464:	4604      	mov	r4, r0
   1e466:	2800      	cmp	r0, #0
   1e468:	d1f2      	bne.n	1e450 <cc_mbedtls_sha256+0x1c>
   1e46a:	4639      	mov	r1, r7
   1e46c:	4804      	ldr	r0, [pc, #16]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e46e:	f7ff ff0b 	bl	1e288 <cc_mbedtls_sha256_finish>
   1e472:	4604      	mov	r4, r0
   1e474:	4802      	ldr	r0, [pc, #8]	; (1e480 <cc_mbedtls_sha256+0x4c>)
   1e476:	f7ff fec3 	bl	1e200 <cc_mbedtls_sha256_free>
   1e47a:	4620      	mov	r0, r4
   1e47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e47e:	bf00      	nop
   1e480:	20003378 	.word	0x20003378

0001e484 <RNG_PLAT_SetUserRngParameters>:
   1e484:	b530      	push	{r4, r5, lr}
   1e486:	b083      	sub	sp, #12
   1e488:	231c      	movs	r3, #28
   1e48a:	a901      	add	r1, sp, #4
   1e48c:	4604      	mov	r4, r0
   1e48e:	9301      	str	r3, [sp, #4]
   1e490:	f000 f83c 	bl	1e50c <CC_PalTrngParamGet>
   1e494:	4605      	mov	r5, r0
   1e496:	b938      	cbnz	r0, 1e4a8 <RNG_PLAT_SetUserRngParameters+0x24>
   1e498:	9b01      	ldr	r3, [sp, #4]
   1e49a:	2b1c      	cmp	r3, #28
   1e49c:	d007      	beq.n	1e4ae <RNG_PLAT_SetUserRngParameters+0x2a>
   1e49e:	4d15      	ldr	r5, [pc, #84]	; (1e4f4 <RNG_PLAT_SetUserRngParameters+0x70>)
   1e4a0:	4620      	mov	r0, r4
   1e4a2:	211c      	movs	r1, #28
   1e4a4:	f000 f82e 	bl	1e504 <CC_PalMemSetZeroPlat>
   1e4a8:	4628      	mov	r0, r5
   1e4aa:	b003      	add	sp, #12
   1e4ac:	bd30      	pop	{r4, r5, pc}
   1e4ae:	e9d4 3200 	ldrd	r3, r2, [r4]
   1e4b2:	2101      	movs	r1, #1
   1e4b4:	3b00      	subs	r3, #0
   1e4b6:	bf18      	it	ne
   1e4b8:	2301      	movne	r3, #1
   1e4ba:	61e1      	str	r1, [r4, #28]
   1e4bc:	b10a      	cbz	r2, 1e4c2 <RNG_PLAT_SetUserRngParameters+0x3e>
   1e4be:	f043 0302 	orr.w	r3, r3, #2
   1e4c2:	68a2      	ldr	r2, [r4, #8]
   1e4c4:	b932      	cbnz	r2, 1e4d4 <RNG_PLAT_SetUserRngParameters+0x50>
   1e4c6:	68e2      	ldr	r2, [r4, #12]
   1e4c8:	b942      	cbnz	r2, 1e4dc <RNG_PLAT_SetUserRngParameters+0x58>
   1e4ca:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e4ce:	b97b      	cbnz	r3, 1e4f0 <RNG_PLAT_SetUserRngParameters+0x6c>
   1e4d0:	4d09      	ldr	r5, [pc, #36]	; (1e4f8 <RNG_PLAT_SetUserRngParameters+0x74>)
   1e4d2:	e7e5      	b.n	1e4a0 <RNG_PLAT_SetUserRngParameters+0x1c>
   1e4d4:	68e2      	ldr	r2, [r4, #12]
   1e4d6:	f043 0304 	orr.w	r3, r3, #4
   1e4da:	b13a      	cbz	r2, 1e4ec <RNG_PLAT_SetUserRngParameters+0x68>
   1e4dc:	f043 0308 	orr.w	r3, r3, #8
   1e4e0:	2200      	movs	r2, #0
   1e4e2:	4628      	mov	r0, r5
   1e4e4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e4e8:	b003      	add	sp, #12
   1e4ea:	bd30      	pop	{r4, r5, pc}
   1e4ec:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e4f0:	4615      	mov	r5, r2
   1e4f2:	e7d9      	b.n	1e4a8 <RNG_PLAT_SetUserRngParameters+0x24>
   1e4f4:	00f00c37 	.word	0x00f00c37
   1e4f8:	00f00c0e 	.word	0x00f00c0e

0001e4fc <CC_PalMemCopyPlat>:
   1e4fc:	f001 bf6c 	b.w	203d8 <memmove>

0001e500 <CC_PalMemSetPlat>:
   1e500:	f001 bf8c 	b.w	2041c <memset>

0001e504 <CC_PalMemSetZeroPlat>:
   1e504:	460a      	mov	r2, r1
   1e506:	2100      	movs	r1, #0
   1e508:	f001 bf88 	b.w	2041c <memset>

0001e50c <CC_PalTrngParamGet>:
   1e50c:	b118      	cbz	r0, 1e516 <CC_PalTrngParamGet+0xa>
   1e50e:	b111      	cbz	r1, 1e516 <CC_PalTrngParamGet+0xa>
   1e510:	680b      	ldr	r3, [r1, #0]
   1e512:	2b1c      	cmp	r3, #28
   1e514:	d001      	beq.n	1e51a <CC_PalTrngParamGet+0xe>
   1e516:	2001      	movs	r0, #1
   1e518:	4770      	bx	lr
   1e51a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e51e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1e522:	3201      	adds	r2, #1
   1e524:	bf14      	ite	ne
   1e526:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1e52a:	f241 225c 	movweq	r2, #4700	; 0x125c
   1e52e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e532:	6002      	str	r2, [r0, #0]
   1e534:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1e538:	3201      	adds	r2, #1
   1e53a:	bf14      	ite	ne
   1e53c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1e540:	f641 1264 	movweq	r2, #6500	; 0x1964
   1e544:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e548:	6042      	str	r2, [r0, #4]
   1e54a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e54e:	3201      	adds	r2, #1
   1e550:	bf14      	ite	ne
   1e552:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e556:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e55a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e55e:	6082      	str	r2, [r0, #8]
   1e560:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e564:	3201      	adds	r2, #1
   1e566:	bf14      	ite	ne
   1e568:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e56c:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e574:	60c2      	str	r2, [r0, #12]
   1e576:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e57a:	3201      	adds	r2, #1
   1e57c:	bf14      	ite	ne
   1e57e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e582:	2290      	moveq	r2, #144	; 0x90
   1e584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e588:	6102      	str	r2, [r0, #16]
   1e58a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e58e:	3201      	adds	r2, #1
   1e590:	bf14      	ite	ne
   1e592:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e596:	2251      	moveq	r2, #81	; 0x51
   1e598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e59c:	6142      	str	r2, [r0, #20]
   1e59e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e5a2:	3201      	adds	r2, #1
   1e5a4:	bf14      	ite	ne
   1e5a6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e5aa:	f240 3337 	movweq	r3, #823	; 0x337
   1e5ae:	6183      	str	r3, [r0, #24]
   1e5b0:	2000      	movs	r0, #0
   1e5b2:	4770      	bx	lr

0001e5b4 <LLF_RND_WaitRngInterrupt>:
   1e5b4:	b508      	push	{r3, lr}
   1e5b6:	4601      	mov	r1, r0
   1e5b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e5bc:	f7ff f95a 	bl	1d874 <CC_HalWaitInterruptRND>
   1e5c0:	4902      	ldr	r1, [pc, #8]	; (1e5cc <LLF_RND_WaitRngInterrupt+0x18>)
   1e5c2:	4a03      	ldr	r2, [pc, #12]	; (1e5d0 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e5c4:	2300      	movs	r3, #0
   1e5c6:	600b      	str	r3, [r1, #0]
   1e5c8:	6013      	str	r3, [r2, #0]
   1e5ca:	bd08      	pop	{r3, pc}
   1e5cc:	5002b1c8 	.word	0x5002b1c8
   1e5d0:	5002b12c 	.word	0x5002b12c

0001e5d4 <LLF_RND_GetRoscSampleCnt>:
   1e5d4:	3801      	subs	r0, #1
   1e5d6:	2807      	cmp	r0, #7
   1e5d8:	d805      	bhi.n	1e5e6 <LLF_RND_GetRoscSampleCnt+0x12>
   1e5da:	e8df f000 	tbb	[pc, r0]
   1e5de:	0e0a      	.short	0x0e0a
   1e5e0:	04041204 	.word	0x04041204
   1e5e4:	0604      	.short	0x0604
   1e5e6:	4809      	ldr	r0, [pc, #36]	; (1e60c <LLF_RND_GetRoscSampleCnt+0x38>)
   1e5e8:	4770      	bx	lr
   1e5ea:	68cb      	ldr	r3, [r1, #12]
   1e5ec:	624b      	str	r3, [r1, #36]	; 0x24
   1e5ee:	2000      	movs	r0, #0
   1e5f0:	4770      	bx	lr
   1e5f2:	680b      	ldr	r3, [r1, #0]
   1e5f4:	624b      	str	r3, [r1, #36]	; 0x24
   1e5f6:	2000      	movs	r0, #0
   1e5f8:	4770      	bx	lr
   1e5fa:	684b      	ldr	r3, [r1, #4]
   1e5fc:	624b      	str	r3, [r1, #36]	; 0x24
   1e5fe:	2000      	movs	r0, #0
   1e600:	4770      	bx	lr
   1e602:	688b      	ldr	r3, [r1, #8]
   1e604:	624b      	str	r3, [r1, #36]	; 0x24
   1e606:	2000      	movs	r0, #0
   1e608:	4770      	bx	lr
   1e60a:	bf00      	nop
   1e60c:	00f10c31 	.word	0x00f10c31

0001e610 <LLF_RND_GetFastestRosc>:
   1e610:	680b      	ldr	r3, [r1, #0]
   1e612:	e002      	b.n	1e61a <LLF_RND_GetFastestRosc+0xa>
   1e614:	2b08      	cmp	r3, #8
   1e616:	600b      	str	r3, [r1, #0]
   1e618:	d806      	bhi.n	1e628 <LLF_RND_GetFastestRosc+0x18>
   1e61a:	6a02      	ldr	r2, [r0, #32]
   1e61c:	4213      	tst	r3, r2
   1e61e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e622:	d0f7      	beq.n	1e614 <LLF_RND_GetFastestRosc+0x4>
   1e624:	2000      	movs	r0, #0
   1e626:	4770      	bx	lr
   1e628:	4800      	ldr	r0, [pc, #0]	; (1e62c <LLF_RND_GetFastestRosc+0x1c>)
   1e62a:	4770      	bx	lr
   1e62c:	00f10c31 	.word	0x00f10c31

0001e630 <LLF_RND_TurnOffTrng>:
   1e630:	4904      	ldr	r1, [pc, #16]	; (1e644 <LLF_RND_TurnOffTrng+0x14>)
   1e632:	4a05      	ldr	r2, [pc, #20]	; (1e648 <LLF_RND_TurnOffTrng+0x18>)
   1e634:	2300      	movs	r3, #0
   1e636:	600b      	str	r3, [r1, #0]
   1e638:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e63c:	6013      	str	r3, [r2, #0]
   1e63e:	f7ff b8ff 	b.w	1d840 <CC_HalClearInterruptBit>
   1e642:	bf00      	nop
   1e644:	5002b12c 	.word	0x5002b12c
   1e648:	5002b1c4 	.word	0x5002b1c4

0001e64c <SetDataBuffersInfo>:
   1e64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e64e:	b083      	sub	sp, #12
   1e650:	2400      	movs	r4, #0
   1e652:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e656:	f88d 4007 	strb.w	r4, [sp, #7]
   1e65a:	d325      	bcc.n	1e6a8 <SetDataBuffersInfo+0x5c>
   1e65c:	460c      	mov	r4, r1
   1e65e:	4404      	add	r4, r0
   1e660:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1e664:	4605      	mov	r5, r0
   1e666:	d81f      	bhi.n	1e6a8 <SetDataBuffersInfo+0x5c>
   1e668:	4617      	mov	r7, r2
   1e66a:	461e      	mov	r6, r3
   1e66c:	2201      	movs	r2, #1
   1e66e:	f10d 0307 	add.w	r3, sp, #7
   1e672:	f000 fe7f 	bl	1f374 <CC_PalDataBufferAttrGet>
   1e676:	4604      	mov	r4, r0
   1e678:	b9b0      	cbnz	r0, 1e6a8 <SetDataBuffersInfo+0x5c>
   1e67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e67c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e680:	603d      	str	r5, [r7, #0]
   1e682:	713b      	strb	r3, [r7, #4]
   1e684:	b192      	cbz	r2, 1e6ac <SetDataBuffersInfo+0x60>
   1e686:	b14e      	cbz	r6, 1e69c <SetDataBuffersInfo+0x50>
   1e688:	4602      	mov	r2, r0
   1e68a:	9908      	ldr	r1, [sp, #32]
   1e68c:	f10d 0307 	add.w	r3, sp, #7
   1e690:	4630      	mov	r0, r6
   1e692:	f000 fe6f 	bl	1f374 <CC_PalDataBufferAttrGet>
   1e696:	b938      	cbnz	r0, 1e6a8 <SetDataBuffersInfo+0x5c>
   1e698:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e69e:	4620      	mov	r0, r4
   1e6a0:	6016      	str	r6, [r2, #0]
   1e6a2:	7113      	strb	r3, [r2, #4]
   1e6a4:	b003      	add	sp, #12
   1e6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6a8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1e6ac:	4620      	mov	r0, r4
   1e6ae:	b003      	add	sp, #12
   1e6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6b2:	bf00      	nop

0001e6b4 <InitHashDrv>:
   1e6b4:	b1e8      	cbz	r0, 1e6f2 <InitHashDrv+0x3e>
   1e6b6:	b510      	push	{r4, lr}
   1e6b8:	6804      	ldr	r4, [r0, #0]
   1e6ba:	2c01      	cmp	r4, #1
   1e6bc:	d004      	beq.n	1e6c8 <InitHashDrv+0x14>
   1e6be:	2c02      	cmp	r4, #2
   1e6c0:	d010      	beq.n	1e6e4 <InitHashDrv+0x30>
   1e6c2:	b144      	cbz	r4, 1e6d6 <InitHashDrv+0x22>
   1e6c4:	480c      	ldr	r0, [pc, #48]	; (1e6f8 <InitHashDrv+0x44>)
   1e6c6:	bd10      	pop	{r4, pc}
   1e6c8:	490c      	ldr	r1, [pc, #48]	; (1e6fc <InitHashDrv+0x48>)
   1e6ca:	2220      	movs	r2, #32
   1e6cc:	3008      	adds	r0, #8
   1e6ce:	f7ff ff15 	bl	1e4fc <CC_PalMemCopyPlat>
   1e6d2:	2000      	movs	r0, #0
   1e6d4:	bd10      	pop	{r4, pc}
   1e6d6:	490a      	ldr	r1, [pc, #40]	; (1e700 <InitHashDrv+0x4c>)
   1e6d8:	2214      	movs	r2, #20
   1e6da:	3008      	adds	r0, #8
   1e6dc:	f7ff ff0e 	bl	1e4fc <CC_PalMemCopyPlat>
   1e6e0:	4620      	mov	r0, r4
   1e6e2:	bd10      	pop	{r4, pc}
   1e6e4:	4907      	ldr	r1, [pc, #28]	; (1e704 <InitHashDrv+0x50>)
   1e6e6:	2220      	movs	r2, #32
   1e6e8:	3008      	adds	r0, #8
   1e6ea:	f7ff ff07 	bl	1e4fc <CC_PalMemCopyPlat>
   1e6ee:	2000      	movs	r0, #0
   1e6f0:	bd10      	pop	{r4, pc}
   1e6f2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e6f6:	4770      	bx	lr
   1e6f8:	00f30001 	.word	0x00f30001
   1e6fc:	00024d30 	.word	0x00024d30
   1e700:	00024cfc 	.word	0x00024cfc
   1e704:	00024d10 	.word	0x00024d10

0001e708 <ProcessHashDrv>:
   1e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e70c:	2900      	cmp	r1, #0
   1e70e:	f000 80ef 	beq.w	1e8f0 <ProcessHashDrv+0x1e8>
   1e712:	4604      	mov	r4, r0
   1e714:	2800      	cmp	r0, #0
   1e716:	f000 80ef 	beq.w	1e8f8 <ProcessHashDrv+0x1f0>
   1e71a:	6803      	ldr	r3, [r0, #0]
   1e71c:	4617      	mov	r7, r2
   1e71e:	460e      	mov	r6, r1
   1e720:	2b00      	cmp	r3, #0
   1e722:	f000 80b9 	beq.w	1e898 <ProcessHashDrv+0x190>
   1e726:	3b01      	subs	r3, #1
   1e728:	2b01      	cmp	r3, #1
   1e72a:	f200 80cd 	bhi.w	1e8c8 <ProcessHashDrv+0x1c0>
   1e72e:	4874      	ldr	r0, [pc, #464]	; (1e900 <ProcessHashDrv+0x1f8>)
   1e730:	f04f 31ff 	mov.w	r1, #4294967295
   1e734:	f04f 0802 	mov.w	r8, #2
   1e738:	f7ff f92a 	bl	1d990 <CC_PalMutexLock>
   1e73c:	2800      	cmp	r0, #0
   1e73e:	f040 80b5 	bne.w	1e8ac <ProcessHashDrv+0x1a4>
   1e742:	2000      	movs	r0, #0
   1e744:	f7ff f954 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e748:	4605      	mov	r5, r0
   1e74a:	2800      	cmp	r0, #0
   1e74c:	f040 80b8 	bne.w	1e8c0 <ProcessHashDrv+0x1b8>
   1e750:	4a6c      	ldr	r2, [pc, #432]	; (1e904 <ProcessHashDrv+0x1fc>)
   1e752:	6813      	ldr	r3, [r2, #0]
   1e754:	2b00      	cmp	r3, #0
   1e756:	d1fc      	bne.n	1e752 <ProcessHashDrv+0x4a>
   1e758:	486b      	ldr	r0, [pc, #428]	; (1e908 <ProcessHashDrv+0x200>)
   1e75a:	6803      	ldr	r3, [r0, #0]
   1e75c:	2b00      	cmp	r3, #0
   1e75e:	d1fc      	bne.n	1e75a <ProcessHashDrv+0x52>
   1e760:	f04f 30ff 	mov.w	r0, #4294967295
   1e764:	f7ff f86c 	bl	1d840 <CC_HalClearInterruptBit>
   1e768:	4b68      	ldr	r3, [pc, #416]	; (1e90c <ProcessHashDrv+0x204>)
   1e76a:	6818      	ldr	r0, [r3, #0]
   1e76c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e770:	f7ff f874 	bl	1d85c <CC_HalMaskInterrupt>
   1e774:	4866      	ldr	r0, [pc, #408]	; (1e910 <ProcessHashDrv+0x208>)
   1e776:	4a67      	ldr	r2, [pc, #412]	; (1e914 <ProcessHashDrv+0x20c>)
   1e778:	4967      	ldr	r1, [pc, #412]	; (1e918 <ProcessHashDrv+0x210>)
   1e77a:	2301      	movs	r3, #1
   1e77c:	6003      	str	r3, [r0, #0]
   1e77e:	2007      	movs	r0, #7
   1e780:	6010      	str	r0, [r2, #0]
   1e782:	600b      	str	r3, [r1, #0]
   1e784:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1e788:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e78a:	6013      	str	r3, [r2, #0]
   1e78c:	4b63      	ldr	r3, [pc, #396]	; (1e91c <ProcessHashDrv+0x214>)
   1e78e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1e790:	6051      	str	r1, [r2, #4]
   1e792:	f8c3 8000 	str.w	r8, [r3]
   1e796:	6823      	ldr	r3, [r4, #0]
   1e798:	b15b      	cbz	r3, 1e7b2 <ProcessHashDrv+0xaa>
   1e79a:	3b01      	subs	r3, #1
   1e79c:	2b01      	cmp	r3, #1
   1e79e:	d817      	bhi.n	1e7d0 <ProcessHashDrv+0xc8>
   1e7a0:	4b5f      	ldr	r3, [pc, #380]	; (1e920 <ProcessHashDrv+0x218>)
   1e7a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e7a4:	601a      	str	r2, [r3, #0]
   1e7a6:	6a22      	ldr	r2, [r4, #32]
   1e7a8:	f843 2c04 	str.w	r2, [r3, #-4]
   1e7ac:	69e2      	ldr	r2, [r4, #28]
   1e7ae:	f843 2c08 	str.w	r2, [r3, #-8]
   1e7b2:	4b5c      	ldr	r3, [pc, #368]	; (1e924 <ProcessHashDrv+0x21c>)
   1e7b4:	69a2      	ldr	r2, [r4, #24]
   1e7b6:	601a      	str	r2, [r3, #0]
   1e7b8:	6962      	ldr	r2, [r4, #20]
   1e7ba:	f843 2c04 	str.w	r2, [r3, #-4]
   1e7be:	6922      	ldr	r2, [r4, #16]
   1e7c0:	f843 2c08 	str.w	r2, [r3, #-8]
   1e7c4:	68e2      	ldr	r2, [r4, #12]
   1e7c6:	f843 2c0c 	str.w	r2, [r3, #-12]
   1e7ca:	68a2      	ldr	r2, [r4, #8]
   1e7cc:	f843 2c10 	str.w	r2, [r3, #-16]
   1e7d0:	4a55      	ldr	r2, [pc, #340]	; (1e928 <ProcessHashDrv+0x220>)
   1e7d2:	6813      	ldr	r3, [r2, #0]
   1e7d4:	2b00      	cmp	r3, #0
   1e7d6:	d1fc      	bne.n	1e7d2 <ProcessHashDrv+0xca>
   1e7d8:	2f00      	cmp	r7, #0
   1e7da:	d059      	beq.n	1e890 <ProcessHashDrv+0x188>
   1e7dc:	6863      	ldr	r3, [r4, #4]
   1e7de:	2b01      	cmp	r3, #1
   1e7e0:	bf04      	itt	eq
   1e7e2:	4a52      	ldreq	r2, [pc, #328]	; (1e92c <ProcessHashDrv+0x224>)
   1e7e4:	6013      	streq	r3, [r2, #0]
   1e7e6:	4a52      	ldr	r2, [pc, #328]	; (1e930 <ProcessHashDrv+0x228>)
   1e7e8:	4b52      	ldr	r3, [pc, #328]	; (1e934 <ProcessHashDrv+0x22c>)
   1e7ea:	6831      	ldr	r1, [r6, #0]
   1e7ec:	6011      	str	r1, [r2, #0]
   1e7ee:	2040      	movs	r0, #64	; 0x40
   1e7f0:	601f      	str	r7, [r3, #0]
   1e7f2:	f7ff f839 	bl	1d868 <CC_HalWaitInterrupt>
   1e7f6:	4605      	mov	r5, r0
   1e7f8:	4a4b      	ldr	r2, [pc, #300]	; (1e928 <ProcessHashDrv+0x220>)
   1e7fa:	6813      	ldr	r3, [r2, #0]
   1e7fc:	2b00      	cmp	r3, #0
   1e7fe:	d1fc      	bne.n	1e7fa <ProcessHashDrv+0xf2>
   1e800:	4a41      	ldr	r2, [pc, #260]	; (1e908 <ProcessHashDrv+0x200>)
   1e802:	6813      	ldr	r3, [r2, #0]
   1e804:	2b00      	cmp	r3, #0
   1e806:	d1fc      	bne.n	1e802 <ProcessHashDrv+0xfa>
   1e808:	6823      	ldr	r3, [r4, #0]
   1e80a:	b15b      	cbz	r3, 1e824 <ProcessHashDrv+0x11c>
   1e80c:	3b01      	subs	r3, #1
   1e80e:	2b01      	cmp	r3, #1
   1e810:	d817      	bhi.n	1e842 <ProcessHashDrv+0x13a>
   1e812:	4a43      	ldr	r2, [pc, #268]	; (1e920 <ProcessHashDrv+0x218>)
   1e814:	4b48      	ldr	r3, [pc, #288]	; (1e938 <ProcessHashDrv+0x230>)
   1e816:	6812      	ldr	r2, [r2, #0]
   1e818:	6262      	str	r2, [r4, #36]	; 0x24
   1e81a:	681a      	ldr	r2, [r3, #0]
   1e81c:	6222      	str	r2, [r4, #32]
   1e81e:	3b04      	subs	r3, #4
   1e820:	681b      	ldr	r3, [r3, #0]
   1e822:	61e3      	str	r3, [r4, #28]
   1e824:	4a3f      	ldr	r2, [pc, #252]	; (1e924 <ProcessHashDrv+0x21c>)
   1e826:	4b45      	ldr	r3, [pc, #276]	; (1e93c <ProcessHashDrv+0x234>)
   1e828:	6812      	ldr	r2, [r2, #0]
   1e82a:	61a2      	str	r2, [r4, #24]
   1e82c:	681a      	ldr	r2, [r3, #0]
   1e82e:	6162      	str	r2, [r4, #20]
   1e830:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1e834:	6122      	str	r2, [r4, #16]
   1e836:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1e83a:	60e2      	str	r2, [r4, #12]
   1e83c:	3b0c      	subs	r3, #12
   1e83e:	681b      	ldr	r3, [r3, #0]
   1e840:	60a3      	str	r3, [r4, #8]
   1e842:	4b3f      	ldr	r3, [pc, #252]	; (1e940 <ProcessHashDrv+0x238>)
   1e844:	4a3f      	ldr	r2, [pc, #252]	; (1e944 <ProcessHashDrv+0x23c>)
   1e846:	681b      	ldr	r3, [r3, #0]
   1e848:	64a3      	str	r3, [r4, #72]	; 0x48
   1e84a:	6812      	ldr	r2, [r2, #0]
   1e84c:	4b32      	ldr	r3, [pc, #200]	; (1e918 <ProcessHashDrv+0x210>)
   1e84e:	64e2      	str	r2, [r4, #76]	; 0x4c
   1e850:	4836      	ldr	r0, [pc, #216]	; (1e92c <ProcessHashDrv+0x224>)
   1e852:	493d      	ldr	r1, [pc, #244]	; (1e948 <ProcessHashDrv+0x240>)
   1e854:	2201      	movs	r2, #1
   1e856:	601a      	str	r2, [r3, #0]
   1e858:	2300      	movs	r3, #0
   1e85a:	4a33      	ldr	r2, [pc, #204]	; (1e928 <ProcessHashDrv+0x220>)
   1e85c:	6003      	str	r3, [r0, #0]
   1e85e:	600b      	str	r3, [r1, #0]
   1e860:	6813      	ldr	r3, [r2, #0]
   1e862:	2b00      	cmp	r3, #0
   1e864:	d1fc      	bne.n	1e860 <ProcessHashDrv+0x158>
   1e866:	4a2a      	ldr	r2, [pc, #168]	; (1e910 <ProcessHashDrv+0x208>)
   1e868:	6013      	str	r3, [r2, #0]
   1e86a:	2d00      	cmp	r5, #0
   1e86c:	d13a      	bne.n	1e8e4 <ProcessHashDrv+0x1dc>
   1e86e:	4b27      	ldr	r3, [pc, #156]	; (1e90c <ProcessHashDrv+0x204>)
   1e870:	6818      	ldr	r0, [r3, #0]
   1e872:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e876:	f7fe fff1 	bl	1d85c <CC_HalMaskInterrupt>
   1e87a:	2001      	movs	r0, #1
   1e87c:	f7ff f8b8 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e880:	bb60      	cbnz	r0, 1e8dc <ProcessHashDrv+0x1d4>
   1e882:	481f      	ldr	r0, [pc, #124]	; (1e900 <ProcessHashDrv+0x1f8>)
   1e884:	f7ff f88c 	bl	1d9a0 <CC_PalMutexUnlock>
   1e888:	bb10      	cbnz	r0, 1e8d0 <ProcessHashDrv+0x1c8>
   1e88a:	4628      	mov	r0, r5
   1e88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e890:	4b2d      	ldr	r3, [pc, #180]	; (1e948 <ProcessHashDrv+0x240>)
   1e892:	2204      	movs	r2, #4
   1e894:	601a      	str	r2, [r3, #0]
   1e896:	e7af      	b.n	1e7f8 <ProcessHashDrv+0xf0>
   1e898:	4819      	ldr	r0, [pc, #100]	; (1e900 <ProcessHashDrv+0x1f8>)
   1e89a:	f04f 31ff 	mov.w	r1, #4294967295
   1e89e:	f04f 0801 	mov.w	r8, #1
   1e8a2:	f7ff f875 	bl	1d990 <CC_PalMutexLock>
   1e8a6:	2800      	cmp	r0, #0
   1e8a8:	f43f af4b 	beq.w	1e742 <ProcessHashDrv+0x3a>
   1e8ac:	4827      	ldr	r0, [pc, #156]	; (1e94c <ProcessHashDrv+0x244>)
   1e8ae:	f7fe f923 	bl	1caf8 <CC_PalAbort>
   1e8b2:	2000      	movs	r0, #0
   1e8b4:	f7ff f89c 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1e8b8:	4605      	mov	r5, r0
   1e8ba:	2800      	cmp	r0, #0
   1e8bc:	f43f af48 	beq.w	1e750 <ProcessHashDrv+0x48>
   1e8c0:	4823      	ldr	r0, [pc, #140]	; (1e950 <ProcessHashDrv+0x248>)
   1e8c2:	f7fe f919 	bl	1caf8 <CC_PalAbort>
   1e8c6:	e743      	b.n	1e750 <ProcessHashDrv+0x48>
   1e8c8:	4d22      	ldr	r5, [pc, #136]	; (1e954 <ProcessHashDrv+0x24c>)
   1e8ca:	4628      	mov	r0, r5
   1e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8d0:	4821      	ldr	r0, [pc, #132]	; (1e958 <ProcessHashDrv+0x250>)
   1e8d2:	f7fe f911 	bl	1caf8 <CC_PalAbort>
   1e8d6:	4628      	mov	r0, r5
   1e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8dc:	481f      	ldr	r0, [pc, #124]	; (1e95c <ProcessHashDrv+0x254>)
   1e8de:	f7fe f90b 	bl	1caf8 <CC_PalAbort>
   1e8e2:	e7ce      	b.n	1e882 <ProcessHashDrv+0x17a>
   1e8e4:	f104 0008 	add.w	r0, r4, #8
   1e8e8:	2110      	movs	r1, #16
   1e8ea:	f7ff fe0b 	bl	1e504 <CC_PalMemSetZeroPlat>
   1e8ee:	e7be      	b.n	1e86e <ProcessHashDrv+0x166>
   1e8f0:	4d1b      	ldr	r5, [pc, #108]	; (1e960 <ProcessHashDrv+0x258>)
   1e8f2:	4628      	mov	r0, r5
   1e8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8f8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1e8fc:	e7c5      	b.n	1e88a <ProcessHashDrv+0x182>
   1e8fe:	bf00      	nop
   1e900:	20000890 	.word	0x20000890
   1e904:	5002b91c 	.word	0x5002b91c
   1e908:	5002bc20 	.word	0x5002bc20
   1e90c:	5002ba04 	.word	0x5002ba04
   1e910:	5002b818 	.word	0x5002b818
   1e914:	5002b900 	.word	0x5002b900
   1e918:	5002b7c4 	.word	0x5002b7c4
   1e91c:	5002b7c0 	.word	0x5002b7c0
   1e920:	5002b65c 	.word	0x5002b65c
   1e924:	5002b650 	.word	0x5002b650
   1e928:	5002b910 	.word	0x5002b910
   1e92c:	5002b684 	.word	0x5002b684
   1e930:	5002bc28 	.word	0x5002bc28
   1e934:	5002bc2c 	.word	0x5002bc2c
   1e938:	5002b658 	.word	0x5002b658
   1e93c:	5002b64c 	.word	0x5002b64c
   1e940:	5002b7cc 	.word	0x5002b7cc
   1e944:	5002b7d0 	.word	0x5002b7d0
   1e948:	5002b7c8 	.word	0x5002b7c8
   1e94c:	00024c30 	.word	0x00024c30
   1e950:	00024c48 	.word	0x00024c48
   1e954:	00f30001 	.word	0x00f30001
   1e958:	00024c88 	.word	0x00024c88
   1e95c:	00024c68 	.word	0x00024c68
   1e960:	00f30003 	.word	0x00f30003

0001e964 <FinishHashDrv>:
   1e964:	2800      	cmp	r0, #0
   1e966:	d03b      	beq.n	1e9e0 <FinishHashDrv+0x7c>
   1e968:	b4f0      	push	{r4, r5, r6, r7}
   1e96a:	b082      	sub	sp, #8
   1e96c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e96e:	9301      	str	r3, [sp, #4]
   1e970:	6883      	ldr	r3, [r0, #8]
   1e972:	fa93 fc83 	rev.w	ip, r3
   1e976:	9b01      	ldr	r3, [sp, #4]
   1e978:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1e97c:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1e980:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1e984:	ba1b      	rev	r3, r3
   1e986:	6243      	str	r3, [r0, #36]	; 0x24
   1e988:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e98a:	9301      	str	r3, [sp, #4]
   1e98c:	ba09      	rev	r1, r1
   1e98e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1e990:	61c1      	str	r1, [r0, #28]
   1e992:	ba12      	rev	r2, r2
   1e994:	6202      	str	r2, [r0, #32]
   1e996:	ba3f      	rev	r7, r7
   1e998:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1e99c:	ba36      	rev	r6, r6
   1e99e:	ba2d      	rev	r5, r5
   1e9a0:	ba24      	rev	r4, r4
   1e9a2:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1e9a6:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1e9aa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1e9ac:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1e9ae:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1e9b0:	6184      	str	r4, [r0, #24]
   1e9b2:	fa93 fc83 	rev.w	ip, r3
   1e9b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1e9b8:	9b01      	ldr	r3, [sp, #4]
   1e9ba:	ba3f      	rev	r7, r7
   1e9bc:	ba36      	rev	r6, r6
   1e9be:	ba2d      	rev	r5, r5
   1e9c0:	ba24      	rev	r4, r4
   1e9c2:	ba09      	rev	r1, r1
   1e9c4:	ba12      	rev	r2, r2
   1e9c6:	ba1b      	rev	r3, r3
   1e9c8:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1e9cc:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1e9d0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e9d4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e9d8:	2000      	movs	r0, #0
   1e9da:	b002      	add	sp, #8
   1e9dc:	bcf0      	pop	{r4, r5, r6, r7}
   1e9de:	4770      	bx	lr
   1e9e0:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e9e4:	4770      	bx	lr
   1e9e6:	bf00      	nop

0001e9e8 <LoadAesKey>:
   1e9e8:	2800      	cmp	r0, #0
   1e9ea:	d03b      	beq.n	1ea64 <LoadAesKey+0x7c>
   1e9ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e9f0:	2b00      	cmp	r3, #0
   1e9f2:	d02c      	beq.n	1ea4e <LoadAesKey+0x66>
   1e9f4:	2b03      	cmp	r3, #3
   1e9f6:	b510      	push	{r4, lr}
   1e9f8:	d00f      	beq.n	1ea1a <LoadAesKey+0x32>
   1e9fa:	481c      	ldr	r0, [pc, #112]	; (1ea6c <LoadAesKey+0x84>)
   1e9fc:	4c1c      	ldr	r4, [pc, #112]	; (1ea70 <LoadAesKey+0x88>)
   1e9fe:	6822      	ldr	r2, [r4, #0]
   1ea00:	4b1c      	ldr	r3, [pc, #112]	; (1ea74 <LoadAesKey+0x8c>)
   1ea02:	6812      	ldr	r2, [r2, #0]
   1ea04:	601a      	str	r2, [r3, #0]
   1ea06:	6822      	ldr	r2, [r4, #0]
   1ea08:	6852      	ldr	r2, [r2, #4]
   1ea0a:	605a      	str	r2, [r3, #4]
   1ea0c:	6822      	ldr	r2, [r4, #0]
   1ea0e:	6892      	ldr	r2, [r2, #8]
   1ea10:	609a      	str	r2, [r3, #8]
   1ea12:	6822      	ldr	r2, [r4, #0]
   1ea14:	68d2      	ldr	r2, [r2, #12]
   1ea16:	60da      	str	r2, [r3, #12]
   1ea18:	bd10      	pop	{r4, pc}
   1ea1a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1ea1c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1ea1e:	4c14      	ldr	r4, [pc, #80]	; (1ea70 <LoadAesKey+0x88>)
   1ea20:	f000 fba4 	bl	1f16c <kmu_validate_kdr_slot_and_size>
   1ea24:	2800      	cmp	r0, #0
   1ea26:	d1ea      	bne.n	1e9fe <LoadAesKey+0x16>
   1ea28:	6821      	ldr	r1, [r4, #0]
   1ea2a:	4a12      	ldr	r2, [pc, #72]	; (1ea74 <LoadAesKey+0x8c>)
   1ea2c:	6809      	ldr	r1, [r1, #0]
   1ea2e:	6011      	str	r1, [r2, #0]
   1ea30:	6821      	ldr	r1, [r4, #0]
   1ea32:	4b11      	ldr	r3, [pc, #68]	; (1ea78 <LoadAesKey+0x90>)
   1ea34:	6849      	ldr	r1, [r1, #4]
   1ea36:	6019      	str	r1, [r3, #0]
   1ea38:	6821      	ldr	r1, [r4, #0]
   1ea3a:	6889      	ldr	r1, [r1, #8]
   1ea3c:	6091      	str	r1, [r2, #8]
   1ea3e:	6822      	ldr	r2, [r4, #0]
   1ea40:	68d2      	ldr	r2, [r2, #12]
   1ea42:	609a      	str	r2, [r3, #8]
   1ea44:	f000 fb9e 	bl	1f184 <kmu_use_kdr_key>
   1ea48:	2800      	cmp	r0, #0
   1ea4a:	d1d8      	bne.n	1e9fe <LoadAesKey+0x16>
   1ea4c:	bd10      	pop	{r4, pc}
   1ea4e:	4a09      	ldr	r2, [pc, #36]	; (1ea74 <LoadAesKey+0x8c>)
   1ea50:	6901      	ldr	r1, [r0, #16]
   1ea52:	6011      	str	r1, [r2, #0]
   1ea54:	6941      	ldr	r1, [r0, #20]
   1ea56:	6051      	str	r1, [r2, #4]
   1ea58:	6981      	ldr	r1, [r0, #24]
   1ea5a:	6091      	str	r1, [r2, #8]
   1ea5c:	69c1      	ldr	r1, [r0, #28]
   1ea5e:	60d1      	str	r1, [r2, #12]
   1ea60:	4618      	mov	r0, r3
   1ea62:	4770      	bx	lr
   1ea64:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1ea68:	4770      	bx	lr
   1ea6a:	bf00      	nop
   1ea6c:	00f10009 	.word	0x00f10009
   1ea70:	20000880 	.word	0x20000880
   1ea74:	5002b400 	.word	0x5002b400
   1ea78:	5002b404 	.word	0x5002b404

0001ea7c <InitAes.part.0>:
   1ea7c:	4a32      	ldr	r2, [pc, #200]	; (1eb48 <InitAes.part.0+0xcc>)
   1ea7e:	b510      	push	{r4, lr}
   1ea80:	4604      	mov	r4, r0
   1ea82:	6813      	ldr	r3, [r2, #0]
   1ea84:	2b00      	cmp	r3, #0
   1ea86:	d1fc      	bne.n	1ea82 <InitAes.part.0+0x6>
   1ea88:	4a30      	ldr	r2, [pc, #192]	; (1eb4c <InitAes.part.0+0xd0>)
   1ea8a:	6813      	ldr	r3, [r2, #0]
   1ea8c:	2b00      	cmp	r3, #0
   1ea8e:	d1fc      	bne.n	1ea8a <InitAes.part.0+0xe>
   1ea90:	4a2f      	ldr	r2, [pc, #188]	; (1eb50 <InitAes.part.0+0xd4>)
   1ea92:	6813      	ldr	r3, [r2, #0]
   1ea94:	2b00      	cmp	r3, #0
   1ea96:	d1fc      	bne.n	1ea92 <InitAes.part.0+0x16>
   1ea98:	4a2e      	ldr	r2, [pc, #184]	; (1eb54 <InitAes.part.0+0xd8>)
   1ea9a:	6813      	ldr	r3, [r2, #0]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d1fc      	bne.n	1ea9a <InitAes.part.0+0x1e>
   1eaa0:	4a2d      	ldr	r2, [pc, #180]	; (1eb58 <InitAes.part.0+0xdc>)
   1eaa2:	6813      	ldr	r3, [r2, #0]
   1eaa4:	2b00      	cmp	r3, #0
   1eaa6:	d1fc      	bne.n	1eaa2 <InitAes.part.0+0x26>
   1eaa8:	4a2c      	ldr	r2, [pc, #176]	; (1eb5c <InitAes.part.0+0xe0>)
   1eaaa:	6813      	ldr	r3, [r2, #0]
   1eaac:	2b00      	cmp	r3, #0
   1eaae:	d1fc      	bne.n	1eaaa <InitAes.part.0+0x2e>
   1eab0:	f04f 30ff 	mov.w	r0, #4294967295
   1eab4:	f7fe fec4 	bl	1d840 <CC_HalClearInterruptBit>
   1eab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eaba:	f023 0304 	bic.w	r3, r3, #4
   1eabe:	2b03      	cmp	r3, #3
   1eac0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1eac2:	d036      	beq.n	1eb32 <InitAes.part.0+0xb6>
   1eac4:	2b01      	cmp	r3, #1
   1eac6:	4b26      	ldr	r3, [pc, #152]	; (1eb60 <InitAes.part.0+0xe4>)
   1eac8:	6818      	ldr	r0, [r3, #0]
   1eaca:	bf0c      	ite	eq
   1eacc:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1ead0:	f020 0020 	bicne.w	r0, r0, #32
   1ead4:	f7fe fec2 	bl	1d85c <CC_HalMaskInterrupt>
   1ead8:	4b22      	ldr	r3, [pc, #136]	; (1eb64 <InitAes.part.0+0xe8>)
   1eada:	4a1b      	ldr	r2, [pc, #108]	; (1eb48 <InitAes.part.0+0xcc>)
   1eadc:	2101      	movs	r1, #1
   1eade:	6019      	str	r1, [r3, #0]
   1eae0:	6813      	ldr	r3, [r2, #0]
   1eae2:	2b00      	cmp	r3, #0
   1eae4:	d1fc      	bne.n	1eae0 <InitAes.part.0+0x64>
   1eae6:	4a19      	ldr	r2, [pc, #100]	; (1eb4c <InitAes.part.0+0xd0>)
   1eae8:	6813      	ldr	r3, [r2, #0]
   1eaea:	2b00      	cmp	r3, #0
   1eaec:	d1fc      	bne.n	1eae8 <InitAes.part.0+0x6c>
   1eaee:	491e      	ldr	r1, [pc, #120]	; (1eb68 <InitAes.part.0+0xec>)
   1eaf0:	4a15      	ldr	r2, [pc, #84]	; (1eb48 <InitAes.part.0+0xcc>)
   1eaf2:	600b      	str	r3, [r1, #0]
   1eaf4:	6813      	ldr	r3, [r2, #0]
   1eaf6:	2b00      	cmp	r3, #0
   1eaf8:	d1fc      	bne.n	1eaf4 <InitAes.part.0+0x78>
   1eafa:	4a14      	ldr	r2, [pc, #80]	; (1eb4c <InitAes.part.0+0xd0>)
   1eafc:	6813      	ldr	r3, [r2, #0]
   1eafe:	2b00      	cmp	r3, #0
   1eb00:	d1fc      	bne.n	1eafc <InitAes.part.0+0x80>
   1eb02:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1eb04:	f022 0104 	bic.w	r1, r2, #4
   1eb08:	2903      	cmp	r1, #3
   1eb0a:	bf18      	it	ne
   1eb0c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1eb0e:	4917      	ldr	r1, [pc, #92]	; (1eb6c <InitAes.part.0+0xf0>)
   1eb10:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1eb14:	bf18      	it	ne
   1eb16:	f003 0301 	andne.w	r3, r3, #1
   1eb1a:	f002 021c 	and.w	r2, r2, #28
   1eb1e:	4313      	orrs	r3, r2
   1eb20:	600b      	str	r3, [r1, #0]
   1eb22:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eb24:	2b07      	cmp	r3, #7
   1eb26:	d102      	bne.n	1eb2e <InitAes.part.0+0xb2>
   1eb28:	4b11      	ldr	r3, [pc, #68]	; (1eb70 <InitAes.part.0+0xf4>)
   1eb2a:	2201      	movs	r2, #1
   1eb2c:	601a      	str	r2, [r3, #0]
   1eb2e:	2000      	movs	r0, #0
   1eb30:	bd10      	pop	{r4, pc}
   1eb32:	2b01      	cmp	r3, #1
   1eb34:	4b0a      	ldr	r3, [pc, #40]	; (1eb60 <InitAes.part.0+0xe4>)
   1eb36:	6818      	ldr	r0, [r3, #0]
   1eb38:	bf0c      	ite	eq
   1eb3a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1eb3e:	f020 0010 	bicne.w	r0, r0, #16
   1eb42:	f7fe fe8b 	bl	1d85c <CC_HalMaskInterrupt>
   1eb46:	e7c7      	b.n	1ead8 <InitAes.part.0+0x5c>
   1eb48:	5002b910 	.word	0x5002b910
   1eb4c:	5002b470 	.word	0x5002b470
   1eb50:	5002bd20 	.word	0x5002bd20
   1eb54:	5002bc20 	.word	0x5002bc20
   1eb58:	5002bd38 	.word	0x5002bd38
   1eb5c:	5002bc38 	.word	0x5002bc38
   1eb60:	5002ba04 	.word	0x5002ba04
   1eb64:	5002b900 	.word	0x5002b900
   1eb68:	5002b4bc 	.word	0x5002b4bc
   1eb6c:	5002b4c0 	.word	0x5002b4c0
   1eb70:	5002b47c 	.word	0x5002b47c

0001eb74 <ProcessAesDrv>:
   1eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb78:	b087      	sub	sp, #28
   1eb7a:	2900      	cmp	r1, #0
   1eb7c:	f000 80a5 	beq.w	1ecca <ProcessAesDrv+0x156>
   1eb80:	4616      	mov	r6, r2
   1eb82:	2a00      	cmp	r2, #0
   1eb84:	f000 80a1 	beq.w	1ecca <ProcessAesDrv+0x156>
   1eb88:	4604      	mov	r4, r0
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	f000 813f 	beq.w	1ee0e <ProcessAesDrv+0x29a>
   1eb90:	461f      	mov	r7, r3
   1eb92:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1eb94:	460d      	mov	r5, r1
   1eb96:	2b00      	cmp	r3, #0
   1eb98:	d150      	bne.n	1ec3c <ProcessAesDrv+0xc8>
   1eb9a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1eb9e:	d252      	bcs.n	1ec46 <ProcessAesDrv+0xd2>
   1eba0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1eba4:	2b04      	cmp	r3, #4
   1eba6:	f000 8109 	beq.w	1edbc <ProcessAesDrv+0x248>
   1ebaa:	f04f 0800 	mov.w	r8, #0
   1ebae:	48aa      	ldr	r0, [pc, #680]	; (1ee58 <ProcessAesDrv+0x2e4>)
   1ebb0:	f04f 31ff 	mov.w	r1, #4294967295
   1ebb4:	f7fe feec 	bl	1d990 <CC_PalMutexLock>
   1ebb8:	2800      	cmp	r0, #0
   1ebba:	f040 80de 	bne.w	1ed7a <ProcessAesDrv+0x206>
   1ebbe:	2000      	movs	r0, #0
   1ebc0:	f7fe ff16 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1ebc4:	2800      	cmp	r0, #0
   1ebc6:	f040 80e1 	bne.w	1ed8c <ProcessAesDrv+0x218>
   1ebca:	4ba4      	ldr	r3, [pc, #656]	; (1ee5c <ProcessAesDrv+0x2e8>)
   1ebcc:	4aa4      	ldr	r2, [pc, #656]	; (1ee60 <ProcessAesDrv+0x2ec>)
   1ebce:	2101      	movs	r1, #1
   1ebd0:	6019      	str	r1, [r3, #0]
   1ebd2:	6813      	ldr	r3, [r2, #0]
   1ebd4:	2b00      	cmp	r3, #0
   1ebd6:	d1fc      	bne.n	1ebd2 <ProcessAesDrv+0x5e>
   1ebd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ebda:	2b03      	cmp	r3, #3
   1ebdc:	dc39      	bgt.n	1ec52 <ProcessAesDrv+0xde>
   1ebde:	2b00      	cmp	r3, #0
   1ebe0:	da3a      	bge.n	1ec58 <ProcessAesDrv+0xe4>
   1ebe2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1eeac <ProcessAesDrv+0x338>
   1ebe6:	4a9e      	ldr	r2, [pc, #632]	; (1ee60 <ProcessAesDrv+0x2ec>)
   1ebe8:	6813      	ldr	r3, [r2, #0]
   1ebea:	2b00      	cmp	r3, #0
   1ebec:	d1fc      	bne.n	1ebe8 <ProcessAesDrv+0x74>
   1ebee:	f1b8 0f00 	cmp.w	r8, #0
   1ebf2:	f040 80da 	bne.w	1edaa <ProcessAesDrv+0x236>
   1ebf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ebf8:	f023 0304 	bic.w	r3, r3, #4
   1ebfc:	2b03      	cmp	r3, #3
   1ebfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ec00:	d058      	beq.n	1ecb4 <ProcessAesDrv+0x140>
   1ec02:	2b01      	cmp	r3, #1
   1ec04:	4b97      	ldr	r3, [pc, #604]	; (1ee64 <ProcessAesDrv+0x2f0>)
   1ec06:	6818      	ldr	r0, [r3, #0]
   1ec08:	bf0c      	ite	eq
   1ec0a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1ec0e:	f040 0020 	orrne.w	r0, r0, #32
   1ec12:	f7fe fe23 	bl	1d85c <CC_HalMaskInterrupt>
   1ec16:	4b91      	ldr	r3, [pc, #580]	; (1ee5c <ProcessAesDrv+0x2e8>)
   1ec18:	2200      	movs	r2, #0
   1ec1a:	601a      	str	r2, [r3, #0]
   1ec1c:	2001      	movs	r0, #1
   1ec1e:	f7fe fee7 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1ec22:	2800      	cmp	r0, #0
   1ec24:	f040 80bd 	bne.w	1eda2 <ProcessAesDrv+0x22e>
   1ec28:	488b      	ldr	r0, [pc, #556]	; (1ee58 <ProcessAesDrv+0x2e4>)
   1ec2a:	f7fe feb9 	bl	1d9a0 <CC_PalMutexUnlock>
   1ec2e:	2800      	cmp	r0, #0
   1ec30:	f040 80b0 	bne.w	1ed94 <ProcessAesDrv+0x220>
   1ec34:	4648      	mov	r0, r9
   1ec36:	b007      	add	sp, #28
   1ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec3c:	2b01      	cmp	r3, #1
   1ec3e:	d1af      	bne.n	1eba0 <ProcessAesDrv+0x2c>
   1ec40:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1ec44:	d3ac      	bcc.n	1eba0 <ProcessAesDrv+0x2c>
   1ec46:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1eeb0 <ProcessAesDrv+0x33c>
   1ec4a:	4648      	mov	r0, r9
   1ec4c:	b007      	add	sp, #28
   1ec4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec52:	3b06      	subs	r3, #6
   1ec54:	2b01      	cmp	r3, #1
   1ec56:	d8c4      	bhi.n	1ebe2 <ProcessAesDrv+0x6e>
   1ec58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ec5a:	2b01      	cmp	r3, #1
   1ec5c:	f200 80d4 	bhi.w	1ee08 <ProcessAesDrv+0x294>
   1ec60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ec62:	2b01      	cmp	r3, #1
   1ec64:	d837      	bhi.n	1ecd6 <ProcessAesDrv+0x162>
   1ec66:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ec68:	2b01      	cmp	r3, #1
   1ec6a:	f200 8131 	bhi.w	1eed0 <ProcessAesDrv+0x35c>
   1ec6e:	4620      	mov	r0, r4
   1ec70:	f7ff ff04 	bl	1ea7c <InitAes.part.0>
   1ec74:	4681      	mov	r9, r0
   1ec76:	2800      	cmp	r0, #0
   1ec78:	d1b5      	bne.n	1ebe6 <ProcessAesDrv+0x72>
   1ec7a:	4620      	mov	r0, r4
   1ec7c:	f7ff feb4 	bl	1e9e8 <LoadAesKey>
   1ec80:	4681      	mov	r9, r0
   1ec82:	2800      	cmp	r0, #0
   1ec84:	d1af      	bne.n	1ebe6 <ProcessAesDrv+0x72>
   1ec86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ec88:	2b07      	cmp	r3, #7
   1ec8a:	d8aa      	bhi.n	1ebe2 <ProcessAesDrv+0x6e>
   1ec8c:	a201      	add	r2, pc, #4	; (adr r2, 1ec94 <ProcessAesDrv+0x120>)
   1ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ec92:	bf00      	nop
   1ec94:	0001ecf1 	.word	0x0001ecf1
   1ec98:	0001ecdd 	.word	0x0001ecdd
   1ec9c:	0001ee4d 	.word	0x0001ee4d
   1eca0:	0001ecdd 	.word	0x0001ecdd
   1eca4:	0001ebe3 	.word	0x0001ebe3
   1eca8:	0001ebe3 	.word	0x0001ebe3
   1ecac:	0001ee4d 	.word	0x0001ee4d
   1ecb0:	0001ecdd 	.word	0x0001ecdd
   1ecb4:	2b01      	cmp	r3, #1
   1ecb6:	4b6b      	ldr	r3, [pc, #428]	; (1ee64 <ProcessAesDrv+0x2f0>)
   1ecb8:	6818      	ldr	r0, [r3, #0]
   1ecba:	bf0c      	ite	eq
   1ecbc:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1ecc0:	f040 0010 	orrne.w	r0, r0, #16
   1ecc4:	f7fe fdca 	bl	1d85c <CC_HalMaskInterrupt>
   1ecc8:	e7a5      	b.n	1ec16 <ProcessAesDrv+0xa2>
   1ecca:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1eeb4 <ProcessAesDrv+0x340>
   1ecce:	4648      	mov	r0, r9
   1ecd0:	b007      	add	sp, #28
   1ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecd6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1eeb8 <ProcessAesDrv+0x344>
   1ecda:	e784      	b.n	1ebe6 <ProcessAesDrv+0x72>
   1ecdc:	4b62      	ldr	r3, [pc, #392]	; (1ee68 <ProcessAesDrv+0x2f4>)
   1ecde:	6822      	ldr	r2, [r4, #0]
   1ece0:	601a      	str	r2, [r3, #0]
   1ece2:	6862      	ldr	r2, [r4, #4]
   1ece4:	605a      	str	r2, [r3, #4]
   1ece6:	68a2      	ldr	r2, [r4, #8]
   1ece8:	609a      	str	r2, [r3, #8]
   1ecea:	68e2      	ldr	r2, [r4, #12]
   1ecec:	60da      	str	r2, [r3, #12]
   1ecee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ecf0:	682a      	ldr	r2, [r5, #0]
   1ecf2:	f023 0304 	bic.w	r3, r3, #4
   1ecf6:	2b03      	cmp	r3, #3
   1ecf8:	d009      	beq.n	1ed0e <ProcessAesDrv+0x19a>
   1ecfa:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ecfc:	6833      	ldr	r3, [r6, #0]
   1ecfe:	2901      	cmp	r1, #1
   1ed00:	bf07      	ittee	eq
   1ed02:	485a      	ldreq	r0, [pc, #360]	; (1ee6c <ProcessAesDrv+0x2f8>)
   1ed04:	495a      	ldreq	r1, [pc, #360]	; (1ee70 <ProcessAesDrv+0x2fc>)
   1ed06:	485b      	ldrne	r0, [pc, #364]	; (1ee74 <ProcessAesDrv+0x300>)
   1ed08:	495b      	ldrne	r1, [pc, #364]	; (1ee78 <ProcessAesDrv+0x304>)
   1ed0a:	6003      	str	r3, [r0, #0]
   1ed0c:	600f      	str	r7, [r1, #0]
   1ed0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ed10:	2b01      	cmp	r3, #1
   1ed12:	bf0b      	itete	eq
   1ed14:	4b59      	ldreq	r3, [pc, #356]	; (1ee7c <ProcessAesDrv+0x308>)
   1ed16:	4b5a      	ldrne	r3, [pc, #360]	; (1ee80 <ProcessAesDrv+0x30c>)
   1ed18:	495a      	ldreq	r1, [pc, #360]	; (1ee84 <ProcessAesDrv+0x310>)
   1ed1a:	495b      	ldrne	r1, [pc, #364]	; (1ee88 <ProcessAesDrv+0x314>)
   1ed1c:	600a      	str	r2, [r1, #0]
   1ed1e:	601f      	str	r7, [r3, #0]
   1ed20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ed22:	f023 0304 	bic.w	r3, r3, #4
   1ed26:	2b03      	cmp	r3, #3
   1ed28:	d074      	beq.n	1ee14 <ProcessAesDrv+0x2a0>
   1ed2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ed2c:	2b01      	cmp	r3, #1
   1ed2e:	bf0c      	ite	eq
   1ed30:	2080      	moveq	r0, #128	; 0x80
   1ed32:	2020      	movne	r0, #32
   1ed34:	f7fe fd98 	bl	1d868 <CC_HalWaitInterrupt>
   1ed38:	4681      	mov	r9, r0
   1ed3a:	2800      	cmp	r0, #0
   1ed3c:	f47f af53 	bne.w	1ebe6 <ProcessAesDrv+0x72>
   1ed40:	4b47      	ldr	r3, [pc, #284]	; (1ee60 <ProcessAesDrv+0x2ec>)
   1ed42:	681a      	ldr	r2, [r3, #0]
   1ed44:	2a00      	cmp	r2, #0
   1ed46:	d1fc      	bne.n	1ed42 <ProcessAesDrv+0x1ce>
   1ed48:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ed4a:	3b01      	subs	r3, #1
   1ed4c:	4691      	mov	r9, r2
   1ed4e:	2b06      	cmp	r3, #6
   1ed50:	d810      	bhi.n	1ed74 <ProcessAesDrv+0x200>
   1ed52:	e8df f003 	tbb	[pc, r3]
   1ed56:	7d04      	.short	0x7d04
   1ed58:	7d0f0f04 	.word	0x7d0f0f04
   1ed5c:	04          	.byte	0x04
   1ed5d:	00          	.byte	0x00
   1ed5e:	4a42      	ldr	r2, [pc, #264]	; (1ee68 <ProcessAesDrv+0x2f4>)
   1ed60:	4b4a      	ldr	r3, [pc, #296]	; (1ee8c <ProcessAesDrv+0x318>)
   1ed62:	6812      	ldr	r2, [r2, #0]
   1ed64:	6022      	str	r2, [r4, #0]
   1ed66:	681a      	ldr	r2, [r3, #0]
   1ed68:	6062      	str	r2, [r4, #4]
   1ed6a:	685a      	ldr	r2, [r3, #4]
   1ed6c:	60a2      	str	r2, [r4, #8]
   1ed6e:	3308      	adds	r3, #8
   1ed70:	681b      	ldr	r3, [r3, #0]
   1ed72:	60e3      	str	r3, [r4, #12]
   1ed74:	2301      	movs	r3, #1
   1ed76:	65a3      	str	r3, [r4, #88]	; 0x58
   1ed78:	e735      	b.n	1ebe6 <ProcessAesDrv+0x72>
   1ed7a:	4845      	ldr	r0, [pc, #276]	; (1ee90 <ProcessAesDrv+0x31c>)
   1ed7c:	f7fd febc 	bl	1caf8 <CC_PalAbort>
   1ed80:	2000      	movs	r0, #0
   1ed82:	f7fe fe35 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1ed86:	2800      	cmp	r0, #0
   1ed88:	f43f af1f 	beq.w	1ebca <ProcessAesDrv+0x56>
   1ed8c:	4841      	ldr	r0, [pc, #260]	; (1ee94 <ProcessAesDrv+0x320>)
   1ed8e:	f7fd feb3 	bl	1caf8 <CC_PalAbort>
   1ed92:	e71a      	b.n	1ebca <ProcessAesDrv+0x56>
   1ed94:	4840      	ldr	r0, [pc, #256]	; (1ee98 <ProcessAesDrv+0x324>)
   1ed96:	f7fd feaf 	bl	1caf8 <CC_PalAbort>
   1ed9a:	4648      	mov	r0, r9
   1ed9c:	b007      	add	sp, #28
   1ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eda2:	483e      	ldr	r0, [pc, #248]	; (1ee9c <ProcessAesDrv+0x328>)
   1eda4:	f7fd fea8 	bl	1caf8 <CC_PalAbort>
   1eda8:	e73e      	b.n	1ec28 <ProcessAesDrv+0xb4>
   1edaa:	2304      	movs	r3, #4
   1edac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1edb0:	2120      	movs	r1, #32
   1edb2:	f104 0010 	add.w	r0, r4, #16
   1edb6:	f7ff fba5 	bl	1e504 <CC_PalMemSetZeroPlat>
   1edba:	e71c      	b.n	1ebf6 <ProcessAesDrv+0x82>
   1edbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1edbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1edc0:	f000 f9c8 	bl	1f154 <kmu_validate_slot_and_size>
   1edc4:	b9e8      	cbnz	r0, 1ee02 <ProcessAesDrv+0x28e>
   1edc6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1eebc <ProcessAesDrv+0x348>
   1edca:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1eec0 <ProcessAesDrv+0x34c>
   1edce:	f8d8 3000 	ldr.w	r3, [r8]
   1edd2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1eec4 <ProcessAesDrv+0x350>
   1edd6:	681b      	ldr	r3, [r3, #0]
   1edd8:	f8cb 3000 	str.w	r3, [fp]
   1eddc:	f8d8 3000 	ldr.w	r3, [r8]
   1ede0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1eec8 <ProcessAesDrv+0x354>
   1ede4:	685b      	ldr	r3, [r3, #4]
   1ede6:	f8ca 3000 	str.w	r3, [sl]
   1edea:	f8d8 3000 	ldr.w	r3, [r8]
   1edee:	4a2c      	ldr	r2, [pc, #176]	; (1eea0 <ProcessAesDrv+0x32c>)
   1edf0:	689b      	ldr	r3, [r3, #8]
   1edf2:	f8c9 3000 	str.w	r3, [r9]
   1edf6:	f8d8 3000 	ldr.w	r3, [r8]
   1edfa:	68db      	ldr	r3, [r3, #12]
   1edfc:	6013      	str	r3, [r2, #0]
   1edfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1ee00:	b171      	cbz	r1, 1ee20 <ProcessAesDrv+0x2ac>
   1ee02:	f04f 0801 	mov.w	r8, #1
   1ee06:	e6d2      	b.n	1ebae <ProcessAesDrv+0x3a>
   1ee08:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1eecc <ProcessAesDrv+0x358>
   1ee0c:	e6eb      	b.n	1ebe6 <ProcessAesDrv+0x72>
   1ee0e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1ee12:	e70f      	b.n	1ec34 <ProcessAesDrv+0xc0>
   1ee14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ee16:	2b01      	cmp	r3, #1
   1ee18:	bf0c      	ite	eq
   1ee1a:	2040      	moveq	r0, #64	; 0x40
   1ee1c:	2010      	movne	r0, #16
   1ee1e:	e789      	b.n	1ed34 <ProcessAesDrv+0x1c0>
   1ee20:	f104 0310 	add.w	r3, r4, #16
   1ee24:	4618      	mov	r0, r3
   1ee26:	9305      	str	r3, [sp, #20]
   1ee28:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1ee2c:	e9cd 3200 	strd	r3, r2, [sp]
   1ee30:	9002      	str	r0, [sp, #8]
   1ee32:	2010      	movs	r0, #16
   1ee34:	9003      	str	r0, [sp, #12]
   1ee36:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1ee3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1ee3c:	f000 f9ae 	bl	1f19c <kmu_derive_cmac>
   1ee40:	2800      	cmp	r0, #0
   1ee42:	d148      	bne.n	1eed6 <ProcessAesDrv+0x362>
   1ee44:	2300      	movs	r3, #0
   1ee46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1ee4a:	e7da      	b.n	1ee02 <ProcessAesDrv+0x28e>
   1ee4c:	4b15      	ldr	r3, [pc, #84]	; (1eea4 <ProcessAesDrv+0x330>)
   1ee4e:	e746      	b.n	1ecde <ProcessAesDrv+0x16a>
   1ee50:	4a14      	ldr	r2, [pc, #80]	; (1eea4 <ProcessAesDrv+0x330>)
   1ee52:	4b15      	ldr	r3, [pc, #84]	; (1eea8 <ProcessAesDrv+0x334>)
   1ee54:	e785      	b.n	1ed62 <ProcessAesDrv+0x1ee>
   1ee56:	bf00      	nop
   1ee58:	20000890 	.word	0x20000890
   1ee5c:	5002b810 	.word	0x5002b810
   1ee60:	5002b910 	.word	0x5002b910
   1ee64:	5002ba04 	.word	0x5002ba04
   1ee68:	5002b440 	.word	0x5002b440
   1ee6c:	5002bd28 	.word	0x5002bd28
   1ee70:	5002bd2c 	.word	0x5002bd2c
   1ee74:	5002bd30 	.word	0x5002bd30
   1ee78:	5002bd34 	.word	0x5002bd34
   1ee7c:	5002bc2c 	.word	0x5002bc2c
   1ee80:	5002bc34 	.word	0x5002bc34
   1ee84:	5002bc28 	.word	0x5002bc28
   1ee88:	5002bc30 	.word	0x5002bc30
   1ee8c:	5002b444 	.word	0x5002b444
   1ee90:	00024c30 	.word	0x00024c30
   1ee94:	00024c48 	.word	0x00024c48
   1ee98:	00024c88 	.word	0x00024c88
   1ee9c:	00024c68 	.word	0x00024c68
   1eea0:	5002b40c 	.word	0x5002b40c
   1eea4:	5002b460 	.word	0x5002b460
   1eea8:	5002b464 	.word	0x5002b464
   1eeac:	00f10001 	.word	0x00f10001
   1eeb0:	00f10005 	.word	0x00f10005
   1eeb4:	00f1000b 	.word	0x00f1000b
   1eeb8:	00f10003 	.word	0x00f10003
   1eebc:	20000880 	.word	0x20000880
   1eec0:	5002b400 	.word	0x5002b400
   1eec4:	5002b404 	.word	0x5002b404
   1eec8:	5002b408 	.word	0x5002b408
   1eecc:	00f10002 	.word	0x00f10002
   1eed0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1ef0c <ProcessAesDrv+0x398>
   1eed4:	e687      	b.n	1ebe6 <ProcessAesDrv+0x72>
   1eed6:	f8d8 3000 	ldr.w	r3, [r8]
   1eeda:	4a0b      	ldr	r2, [pc, #44]	; (1ef08 <ProcessAesDrv+0x394>)
   1eedc:	681b      	ldr	r3, [r3, #0]
   1eede:	f8cb 3000 	str.w	r3, [fp]
   1eee2:	f8d8 3000 	ldr.w	r3, [r8]
   1eee6:	685b      	ldr	r3, [r3, #4]
   1eee8:	f8ca 3000 	str.w	r3, [sl]
   1eeec:	f8d8 3000 	ldr.w	r3, [r8]
   1eef0:	689b      	ldr	r3, [r3, #8]
   1eef2:	f8c9 3000 	str.w	r3, [r9]
   1eef6:	f8d8 3000 	ldr.w	r3, [r8]
   1eefa:	68db      	ldr	r3, [r3, #12]
   1eefc:	6013      	str	r3, [r2, #0]
   1eefe:	9805      	ldr	r0, [sp, #20]
   1ef00:	2110      	movs	r1, #16
   1ef02:	f7ff faff 	bl	1e504 <CC_PalMemSetZeroPlat>
   1ef06:	e79d      	b.n	1ee44 <ProcessAesDrv+0x2d0>
   1ef08:	5002b40c 	.word	0x5002b40c
   1ef0c:	00f10004 	.word	0x00f10004

0001ef10 <FinishAesDrv>:
   1ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef14:	b301      	cbz	r1, 1ef58 <FinishAesDrv+0x48>
   1ef16:	b1fa      	cbz	r2, 1ef58 <FinishAesDrv+0x48>
   1ef18:	4604      	mov	r4, r0
   1ef1a:	2800      	cmp	r0, #0
   1ef1c:	d07a      	beq.n	1f014 <FinishAesDrv+0x104>
   1ef1e:	461d      	mov	r5, r3
   1ef20:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ef22:	2b07      	cmp	r3, #7
   1ef24:	460e      	mov	r6, r1
   1ef26:	d01b      	beq.n	1ef60 <FinishAesDrv+0x50>
   1ef28:	b95d      	cbnz	r5, 1ef42 <FinishAesDrv+0x32>
   1ef2a:	2b03      	cmp	r3, #3
   1ef2c:	d110      	bne.n	1ef50 <FinishAesDrv+0x40>
   1ef2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ef30:	b973      	cbnz	r3, 1ef50 <FinishAesDrv+0x40>
   1ef32:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1ef36:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1ef3a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1ef3e:	600b      	str	r3, [r1, #0]
   1ef40:	2510      	movs	r5, #16
   1ef42:	462b      	mov	r3, r5
   1ef44:	4631      	mov	r1, r6
   1ef46:	4620      	mov	r0, r4
   1ef48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ef4c:	f7ff be12 	b.w	1eb74 <ProcessAesDrv>
   1ef50:	462f      	mov	r7, r5
   1ef52:	4638      	mov	r0, r7
   1ef54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef58:	4f66      	ldr	r7, [pc, #408]	; (1f0f4 <FinishAesDrv+0x1e4>)
   1ef5a:	4638      	mov	r0, r7
   1ef5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef60:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ef62:	2b00      	cmp	r3, #0
   1ef64:	d159      	bne.n	1f01a <FinishAesDrv+0x10a>
   1ef66:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ef6a:	d25b      	bcs.n	1f024 <FinishAesDrv+0x114>
   1ef6c:	b915      	cbnz	r5, 1ef74 <FinishAesDrv+0x64>
   1ef6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ef70:	2b00      	cmp	r3, #0
   1ef72:	d157      	bne.n	1f024 <FinishAesDrv+0x114>
   1ef74:	4860      	ldr	r0, [pc, #384]	; (1f0f8 <FinishAesDrv+0x1e8>)
   1ef76:	f04f 31ff 	mov.w	r1, #4294967295
   1ef7a:	f7fe fd09 	bl	1d990 <CC_PalMutexLock>
   1ef7e:	2800      	cmp	r0, #0
   1ef80:	f040 8097 	bne.w	1f0b2 <FinishAesDrv+0x1a2>
   1ef84:	2000      	movs	r0, #0
   1ef86:	f7fe fd33 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1ef8a:	2800      	cmp	r0, #0
   1ef8c:	f040 808d 	bne.w	1f0aa <FinishAesDrv+0x19a>
   1ef90:	4b5a      	ldr	r3, [pc, #360]	; (1f0fc <FinishAesDrv+0x1ec>)
   1ef92:	4a5b      	ldr	r2, [pc, #364]	; (1f100 <FinishAesDrv+0x1f0>)
   1ef94:	2101      	movs	r1, #1
   1ef96:	6019      	str	r1, [r3, #0]
   1ef98:	6813      	ldr	r3, [r2, #0]
   1ef9a:	2b00      	cmp	r3, #0
   1ef9c:	d1fc      	bne.n	1ef98 <FinishAesDrv+0x88>
   1ef9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1efa0:	2b03      	cmp	r3, #3
   1efa2:	dd20      	ble.n	1efe6 <FinishAesDrv+0xd6>
   1efa4:	3b06      	subs	r3, #6
   1efa6:	2b01      	cmp	r3, #1
   1efa8:	d81f      	bhi.n	1efea <FinishAesDrv+0xda>
   1efaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1efac:	2b01      	cmp	r3, #1
   1efae:	d83b      	bhi.n	1f028 <FinishAesDrv+0x118>
   1efb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1efb2:	2b01      	cmp	r3, #1
   1efb4:	f200 8085 	bhi.w	1f0c2 <FinishAesDrv+0x1b2>
   1efb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1efba:	2b01      	cmp	r3, #1
   1efbc:	f200 8083 	bhi.w	1f0c6 <FinishAesDrv+0x1b6>
   1efc0:	4620      	mov	r0, r4
   1efc2:	f7ff fd5b 	bl	1ea7c <InitAes.part.0>
   1efc6:	4607      	mov	r7, r0
   1efc8:	b980      	cbnz	r0, 1efec <FinishAesDrv+0xdc>
   1efca:	4620      	mov	r0, r4
   1efcc:	f7ff fd0c 	bl	1e9e8 <LoadAesKey>
   1efd0:	4607      	mov	r7, r0
   1efd2:	b958      	cbnz	r0, 1efec <FinishAesDrv+0xdc>
   1efd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1efd6:	2b07      	cmp	r3, #7
   1efd8:	d807      	bhi.n	1efea <FinishAesDrv+0xda>
   1efda:	e8df f003 	tbb	[pc, r3]
   1efde:	2730      	.short	0x2730
   1efe0:	06062755 	.word	0x06062755
   1efe4:	2755      	.short	0x2755
   1efe6:	2b00      	cmp	r3, #0
   1efe8:	dadf      	bge.n	1efaa <FinishAesDrv+0x9a>
   1efea:	4f46      	ldr	r7, [pc, #280]	; (1f104 <FinishAesDrv+0x1f4>)
   1efec:	4a44      	ldr	r2, [pc, #272]	; (1f100 <FinishAesDrv+0x1f0>)
   1efee:	6813      	ldr	r3, [r2, #0]
   1eff0:	2b00      	cmp	r3, #0
   1eff2:	d1fc      	bne.n	1efee <FinishAesDrv+0xde>
   1eff4:	4a41      	ldr	r2, [pc, #260]	; (1f0fc <FinishAesDrv+0x1ec>)
   1eff6:	2001      	movs	r0, #1
   1eff8:	6013      	str	r3, [r2, #0]
   1effa:	f7fe fcf9 	bl	1d9f0 <CC_PalPowerSaveModeSelect>
   1effe:	2800      	cmp	r0, #0
   1f000:	d15b      	bne.n	1f0ba <FinishAesDrv+0x1aa>
   1f002:	483d      	ldr	r0, [pc, #244]	; (1f0f8 <FinishAesDrv+0x1e8>)
   1f004:	f7fe fccc 	bl	1d9a0 <CC_PalMutexUnlock>
   1f008:	2800      	cmp	r0, #0
   1f00a:	d0a2      	beq.n	1ef52 <FinishAesDrv+0x42>
   1f00c:	483e      	ldr	r0, [pc, #248]	; (1f108 <FinishAesDrv+0x1f8>)
   1f00e:	f7fd fd73 	bl	1caf8 <CC_PalAbort>
   1f012:	e79e      	b.n	1ef52 <FinishAesDrv+0x42>
   1f014:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1f018:	e79b      	b.n	1ef52 <FinishAesDrv+0x42>
   1f01a:	2b01      	cmp	r3, #1
   1f01c:	d1a6      	bne.n	1ef6c <FinishAesDrv+0x5c>
   1f01e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1f022:	d3a3      	bcc.n	1ef6c <FinishAesDrv+0x5c>
   1f024:	4f39      	ldr	r7, [pc, #228]	; (1f10c <FinishAesDrv+0x1fc>)
   1f026:	e794      	b.n	1ef52 <FinishAesDrv+0x42>
   1f028:	4f39      	ldr	r7, [pc, #228]	; (1f110 <FinishAesDrv+0x200>)
   1f02a:	e7df      	b.n	1efec <FinishAesDrv+0xdc>
   1f02c:	4b39      	ldr	r3, [pc, #228]	; (1f114 <FinishAesDrv+0x204>)
   1f02e:	6822      	ldr	r2, [r4, #0]
   1f030:	601a      	str	r2, [r3, #0]
   1f032:	6862      	ldr	r2, [r4, #4]
   1f034:	605a      	str	r2, [r3, #4]
   1f036:	68a2      	ldr	r2, [r4, #8]
   1f038:	609a      	str	r2, [r3, #8]
   1f03a:	68e2      	ldr	r2, [r4, #12]
   1f03c:	60da      	str	r2, [r3, #12]
   1f03e:	4936      	ldr	r1, [pc, #216]	; (1f118 <FinishAesDrv+0x208>)
   1f040:	4a36      	ldr	r2, [pc, #216]	; (1f11c <FinishAesDrv+0x20c>)
   1f042:	2301      	movs	r3, #1
   1f044:	600b      	str	r3, [r1, #0]
   1f046:	6015      	str	r5, [r2, #0]
   1f048:	2d00      	cmp	r5, #0
   1f04a:	d13e      	bne.n	1f0ca <FinishAesDrv+0x1ba>
   1f04c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1f04e:	b90a      	cbnz	r2, 1f054 <FinishAesDrv+0x144>
   1f050:	4a33      	ldr	r2, [pc, #204]	; (1f120 <FinishAesDrv+0x210>)
   1f052:	6013      	str	r3, [r2, #0]
   1f054:	4b2a      	ldr	r3, [pc, #168]	; (1f100 <FinishAesDrv+0x1f0>)
   1f056:	681f      	ldr	r7, [r3, #0]
   1f058:	2f00      	cmp	r7, #0
   1f05a:	d1fc      	bne.n	1f056 <FinishAesDrv+0x146>
   1f05c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f05e:	3b01      	subs	r3, #1
   1f060:	2b06      	cmp	r3, #6
   1f062:	d8c3      	bhi.n	1efec <FinishAesDrv+0xdc>
   1f064:	a201      	add	r2, pc, #4	; (adr r2, 1f06c <FinishAesDrv+0x15c>)
   1f066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f06a:	bf00      	nop
   1f06c:	0001f08d 	.word	0x0001f08d
   1f070:	0001f0a5 	.word	0x0001f0a5
   1f074:	0001f08d 	.word	0x0001f08d
   1f078:	0001efed 	.word	0x0001efed
   1f07c:	0001efed 	.word	0x0001efed
   1f080:	0001f0a5 	.word	0x0001f0a5
   1f084:	0001f08d 	.word	0x0001f08d
   1f088:	4b26      	ldr	r3, [pc, #152]	; (1f124 <FinishAesDrv+0x214>)
   1f08a:	e7d0      	b.n	1f02e <FinishAesDrv+0x11e>
   1f08c:	4a21      	ldr	r2, [pc, #132]	; (1f114 <FinishAesDrv+0x204>)
   1f08e:	4b26      	ldr	r3, [pc, #152]	; (1f128 <FinishAesDrv+0x218>)
   1f090:	6812      	ldr	r2, [r2, #0]
   1f092:	6022      	str	r2, [r4, #0]
   1f094:	681a      	ldr	r2, [r3, #0]
   1f096:	6062      	str	r2, [r4, #4]
   1f098:	685a      	ldr	r2, [r3, #4]
   1f09a:	60a2      	str	r2, [r4, #8]
   1f09c:	3308      	adds	r3, #8
   1f09e:	681b      	ldr	r3, [r3, #0]
   1f0a0:	60e3      	str	r3, [r4, #12]
   1f0a2:	e7a3      	b.n	1efec <FinishAesDrv+0xdc>
   1f0a4:	4a1f      	ldr	r2, [pc, #124]	; (1f124 <FinishAesDrv+0x214>)
   1f0a6:	4b21      	ldr	r3, [pc, #132]	; (1f12c <FinishAesDrv+0x21c>)
   1f0a8:	e7f2      	b.n	1f090 <FinishAesDrv+0x180>
   1f0aa:	4821      	ldr	r0, [pc, #132]	; (1f130 <FinishAesDrv+0x220>)
   1f0ac:	f7fd fd24 	bl	1caf8 <CC_PalAbort>
   1f0b0:	e76e      	b.n	1ef90 <FinishAesDrv+0x80>
   1f0b2:	4820      	ldr	r0, [pc, #128]	; (1f134 <FinishAesDrv+0x224>)
   1f0b4:	f7fd fd20 	bl	1caf8 <CC_PalAbort>
   1f0b8:	e764      	b.n	1ef84 <FinishAesDrv+0x74>
   1f0ba:	481f      	ldr	r0, [pc, #124]	; (1f138 <FinishAesDrv+0x228>)
   1f0bc:	f7fd fd1c 	bl	1caf8 <CC_PalAbort>
   1f0c0:	e79f      	b.n	1f002 <FinishAesDrv+0xf2>
   1f0c2:	4f1e      	ldr	r7, [pc, #120]	; (1f13c <FinishAesDrv+0x22c>)
   1f0c4:	e792      	b.n	1efec <FinishAesDrv+0xdc>
   1f0c6:	4f1e      	ldr	r7, [pc, #120]	; (1f140 <FinishAesDrv+0x230>)
   1f0c8:	e790      	b.n	1efec <FinishAesDrv+0xdc>
   1f0ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1f0cc:	6833      	ldr	r3, [r6, #0]
   1f0ce:	2a01      	cmp	r2, #1
   1f0d0:	d00a      	beq.n	1f0e8 <FinishAesDrv+0x1d8>
   1f0d2:	491c      	ldr	r1, [pc, #112]	; (1f144 <FinishAesDrv+0x234>)
   1f0d4:	4a1c      	ldr	r2, [pc, #112]	; (1f148 <FinishAesDrv+0x238>)
   1f0d6:	600b      	str	r3, [r1, #0]
   1f0d8:	2010      	movs	r0, #16
   1f0da:	6015      	str	r5, [r2, #0]
   1f0dc:	f7fe fbc4 	bl	1d868 <CC_HalWaitInterrupt>
   1f0e0:	4607      	mov	r7, r0
   1f0e2:	2800      	cmp	r0, #0
   1f0e4:	d0b6      	beq.n	1f054 <FinishAesDrv+0x144>
   1f0e6:	e781      	b.n	1efec <FinishAesDrv+0xdc>
   1f0e8:	4918      	ldr	r1, [pc, #96]	; (1f14c <FinishAesDrv+0x23c>)
   1f0ea:	4a19      	ldr	r2, [pc, #100]	; (1f150 <FinishAesDrv+0x240>)
   1f0ec:	600b      	str	r3, [r1, #0]
   1f0ee:	2040      	movs	r0, #64	; 0x40
   1f0f0:	6015      	str	r5, [r2, #0]
   1f0f2:	e7f3      	b.n	1f0dc <FinishAesDrv+0x1cc>
   1f0f4:	00f1000b 	.word	0x00f1000b
   1f0f8:	20000890 	.word	0x20000890
   1f0fc:	5002b810 	.word	0x5002b810
   1f100:	5002b910 	.word	0x5002b910
   1f104:	00f10001 	.word	0x00f10001
   1f108:	00024c88 	.word	0x00024c88
   1f10c:	00f10005 	.word	0x00f10005
   1f110:	00f10002 	.word	0x00f10002
   1f114:	5002b440 	.word	0x5002b440
   1f118:	5002b47c 	.word	0x5002b47c
   1f11c:	5002b4bc 	.word	0x5002b4bc
   1f120:	5002b524 	.word	0x5002b524
   1f124:	5002b460 	.word	0x5002b460
   1f128:	5002b444 	.word	0x5002b444
   1f12c:	5002b464 	.word	0x5002b464
   1f130:	00024c48 	.word	0x00024c48
   1f134:	00024c30 	.word	0x00024c30
   1f138:	00024c68 	.word	0x00024c68
   1f13c:	00f10003 	.word	0x00f10003
   1f140:	00f10004 	.word	0x00f10004
   1f144:	5002bc30 	.word	0x5002bc30
   1f148:	5002bc34 	.word	0x5002bc34
   1f14c:	5002bc28 	.word	0x5002bc28
   1f150:	5002bc2c 	.word	0x5002bc2c

0001f154 <kmu_validate_slot_and_size>:
   1f154:	b921      	cbnz	r1, 1f160 <kmu_validate_slot_and_size+0xc>
   1f156:	4b03      	ldr	r3, [pc, #12]	; (1f164 <kmu_validate_slot_and_size+0x10>)
   1f158:	2800      	cmp	r0, #0
   1f15a:	bf18      	it	ne
   1f15c:	4618      	movne	r0, r3
   1f15e:	4770      	bx	lr
   1f160:	4801      	ldr	r0, [pc, #4]	; (1f168 <kmu_validate_slot_and_size+0x14>)
   1f162:	4770      	bx	lr
   1f164:	00f70001 	.word	0x00f70001
   1f168:	00f70003 	.word	0x00f70003

0001f16c <kmu_validate_kdr_slot_and_size>:
   1f16c:	b921      	cbnz	r1, 1f178 <kmu_validate_kdr_slot_and_size+0xc>
   1f16e:	4b03      	ldr	r3, [pc, #12]	; (1f17c <kmu_validate_kdr_slot_and_size+0x10>)
   1f170:	2800      	cmp	r0, #0
   1f172:	bf18      	it	ne
   1f174:	4618      	movne	r0, r3
   1f176:	4770      	bx	lr
   1f178:	4801      	ldr	r0, [pc, #4]	; (1f180 <kmu_validate_kdr_slot_and_size+0x14>)
   1f17a:	4770      	bx	lr
   1f17c:	00f70001 	.word	0x00f70001
   1f180:	00f70003 	.word	0x00f70003

0001f184 <kmu_use_kdr_key>:
   1f184:	4903      	ldr	r1, [pc, #12]	; (1f194 <kmu_use_kdr_key+0x10>)
   1f186:	4b04      	ldr	r3, [pc, #16]	; (1f198 <kmu_use_kdr_key+0x14>)
   1f188:	2000      	movs	r0, #0
   1f18a:	2201      	movs	r2, #1
   1f18c:	6008      	str	r0, [r1, #0]
   1f18e:	601a      	str	r2, [r3, #0]
   1f190:	4770      	bx	lr
   1f192:	bf00      	nop
   1f194:	5002ba38 	.word	0x5002ba38
   1f198:	5002b478 	.word	0x5002b478

0001f19c <kmu_derive_cmac>:
   1f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1a0:	b0cd      	sub	sp, #308	; 0x134
   1f1a2:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1f1a6:	460f      	mov	r7, r1
   1f1a8:	2100      	movs	r1, #0
   1f1aa:	460c      	mov	r4, r1
   1f1ac:	4681      	mov	r9, r0
   1f1ae:	4616      	mov	r6, r2
   1f1b0:	a80e      	add	r0, sp, #56	; 0x38
   1f1b2:	2274      	movs	r2, #116	; 0x74
   1f1b4:	469b      	mov	fp, r3
   1f1b6:	f001 f931 	bl	2041c <memset>
   1f1ba:	4621      	mov	r1, r4
   1f1bc:	2280      	movs	r2, #128	; 0x80
   1f1be:	a82c      	add	r0, sp, #176	; 0xb0
   1f1c0:	942b      	str	r4, [sp, #172]	; 0xac
   1f1c2:	f001 f92b 	bl	2041c <memset>
   1f1c6:	2384      	movs	r3, #132	; 0x84
   1f1c8:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f1cc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1f1d0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1f1d4:	9305      	str	r3, [sp, #20]
   1f1d6:	d860      	bhi.n	1f29a <kmu_derive_cmac+0xfe>
   1f1d8:	ab05      	add	r3, sp, #20
   1f1da:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1f1de:	9301      	str	r3, [sp, #4]
   1f1e0:	9502      	str	r5, [sp, #8]
   1f1e2:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1f1e6:	4659      	mov	r1, fp
   1f1e8:	4630      	mov	r0, r6
   1f1ea:	f8cd a000 	str.w	sl, [sp]
   1f1ee:	f000 f865 	bl	1f2bc <UtilCmacBuildDataForDerivation>
   1f1f2:	2800      	cmp	r0, #0
   1f1f4:	d14c      	bne.n	1f290 <kmu_derive_cmac+0xf4>
   1f1f6:	2303      	movs	r3, #3
   1f1f8:	f88d 3013 	strb.w	r3, [sp, #19]
   1f1fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f200:	901c      	str	r0, [sp, #112]	; 0x70
   1f202:	2200      	movs	r2, #0
   1f204:	2110      	movs	r1, #16
   1f206:	a80e      	add	r0, sp, #56	; 0x38
   1f208:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1f20c:	2607      	movs	r6, #7
   1f20e:	2301      	movs	r3, #1
   1f210:	2401      	movs	r4, #1
   1f212:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1f216:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1f21a:	971a      	str	r7, [sp, #104]	; 0x68
   1f21c:	961b      	str	r6, [sp, #108]	; 0x6c
   1f21e:	9426      	str	r4, [sp, #152]	; 0x98
   1f220:	f10d 0920 	add.w	r9, sp, #32
   1f224:	f7ff f96e 	bl	1e504 <CC_PalMemSetZeroPlat>
   1f228:	2110      	movs	r1, #16
   1f22a:	e9cd 1900 	strd	r1, r9, [sp]
   1f22e:	ab0a      	add	r3, sp, #40	; 0x28
   1f230:	9905      	ldr	r1, [sp, #20]
   1f232:	4650      	mov	r0, sl
   1f234:	aa06      	add	r2, sp, #24
   1f236:	f7ff fa09 	bl	1e64c <SetDataBuffersInfo>
   1f23a:	4607      	mov	r7, r0
   1f23c:	b150      	cbz	r0, 1f254 <kmu_derive_cmac+0xb8>
   1f23e:	e01e      	b.n	1f27e <kmu_derive_cmac+0xe2>
   1f240:	f7ff f95c 	bl	1e4fc <CC_PalMemCopyPlat>
   1f244:	2110      	movs	r1, #16
   1f246:	a80e      	add	r0, sp, #56	; 0x38
   1f248:	f7ff f95c 	bl	1e504 <CC_PalMemSetZeroPlat>
   1f24c:	3401      	adds	r4, #1
   1f24e:	1bad      	subs	r5, r5, r6
   1f250:	b2e4      	uxtb	r4, r4
   1f252:	d027      	beq.n	1f2a4 <kmu_derive_cmac+0x108>
   1f254:	9b05      	ldr	r3, [sp, #20]
   1f256:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1f25a:	2d10      	cmp	r5, #16
   1f25c:	464a      	mov	r2, r9
   1f25e:	a906      	add	r1, sp, #24
   1f260:	a80e      	add	r0, sp, #56	; 0x38
   1f262:	462e      	mov	r6, r5
   1f264:	bf28      	it	cs
   1f266:	2610      	movcs	r6, #16
   1f268:	f7ff fe52 	bl	1ef10 <FinishAesDrv>
   1f26c:	4603      	mov	r3, r0
   1f26e:	4632      	mov	r2, r6
   1f270:	eb08 0007 	add.w	r0, r8, r7
   1f274:	a90e      	add	r1, sp, #56	; 0x38
   1f276:	4437      	add	r7, r6
   1f278:	2b00      	cmp	r3, #0
   1f27a:	d0e1      	beq.n	1f240 <kmu_derive_cmac+0xa4>
   1f27c:	461f      	mov	r7, r3
   1f27e:	a80e      	add	r0, sp, #56	; 0x38
   1f280:	2274      	movs	r2, #116	; 0x74
   1f282:	2100      	movs	r1, #0
   1f284:	f7ff f93c 	bl	1e500 <CC_PalMemSetPlat>
   1f288:	4638      	mov	r0, r7
   1f28a:	b04d      	add	sp, #308	; 0x134
   1f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f290:	4f08      	ldr	r7, [pc, #32]	; (1f2b4 <kmu_derive_cmac+0x118>)
   1f292:	4638      	mov	r0, r7
   1f294:	b04d      	add	sp, #308	; 0x134
   1f296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f29a:	4f07      	ldr	r7, [pc, #28]	; (1f2b8 <kmu_derive_cmac+0x11c>)
   1f29c:	4638      	mov	r0, r7
   1f29e:	b04d      	add	sp, #308	; 0x134
   1f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2a4:	a80e      	add	r0, sp, #56	; 0x38
   1f2a6:	2274      	movs	r2, #116	; 0x74
   1f2a8:	2100      	movs	r1, #0
   1f2aa:	462f      	mov	r7, r5
   1f2ac:	f7ff f928 	bl	1e500 <CC_PalMemSetPlat>
   1f2b0:	e7ea      	b.n	1f288 <kmu_derive_cmac+0xec>
   1f2b2:	bf00      	nop
   1f2b4:	00f1000e 	.word	0x00f1000e
   1f2b8:	00f1000f 	.word	0x00f1000f

0001f2bc <UtilCmacBuildDataForDerivation>:
   1f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2c0:	b082      	sub	sp, #8
   1f2c2:	2600      	movs	r6, #0
   1f2c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f2c6:	9601      	str	r6, [sp, #4]
   1f2c8:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f2cc:	d83c      	bhi.n	1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2ce:	00ee      	lsls	r6, r5, #3
   1f2d0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1f2d4:	f101 35ff 	add.w	r5, r1, #4294967295
   1f2d8:	461f      	mov	r7, r3
   1f2da:	bf34      	ite	cc
   1f2dc:	2303      	movcc	r3, #3
   1f2de:	2304      	movcs	r3, #4
   1f2e0:	2d3f      	cmp	r5, #63	; 0x3f
   1f2e2:	460c      	mov	r4, r1
   1f2e4:	9300      	str	r3, [sp, #0]
   1f2e6:	d82f      	bhi.n	1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2e8:	b370      	cbz	r0, 1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2ea:	4690      	mov	r8, r2
   1f2ec:	b117      	cbz	r7, 1f2f4 <UtilCmacBuildDataForDerivation+0x38>
   1f2ee:	b35a      	cbz	r2, 1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2f0:	2f40      	cmp	r7, #64	; 0x40
   1f2f2:	d829      	bhi.n	1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2f4:	9a08      	ldr	r2, [sp, #32]
   1f2f6:	b33a      	cbz	r2, 1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f2fa:	6811      	ldr	r1, [r2, #0]
   1f2fc:	b321      	cbz	r1, 1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f2fe:	19e2      	adds	r2, r4, r7
   1f300:	4413      	add	r3, r2
   1f302:	4299      	cmp	r1, r3
   1f304:	d320      	bcc.n	1f348 <UtilCmacBuildDataForDerivation+0x8c>
   1f306:	9b08      	ldr	r3, [sp, #32]
   1f308:	4622      	mov	r2, r4
   1f30a:	4601      	mov	r1, r0
   1f30c:	1c58      	adds	r0, r3, #1
   1f30e:	f7ff f8f5 	bl	1e4fc <CC_PalMemCopyPlat>
   1f312:	9b08      	ldr	r3, [sp, #32]
   1f314:	4423      	add	r3, r4
   1f316:	2200      	movs	r2, #0
   1f318:	3402      	adds	r4, #2
   1f31a:	705a      	strb	r2, [r3, #1]
   1f31c:	bb07      	cbnz	r7, 1f360 <UtilCmacBuildDataForDerivation+0xa4>
   1f31e:	2eff      	cmp	r6, #255	; 0xff
   1f320:	9600      	str	r6, [sp, #0]
   1f322:	d915      	bls.n	1f350 <UtilCmacBuildDataForDerivation+0x94>
   1f324:	9b08      	ldr	r3, [sp, #32]
   1f326:	0235      	lsls	r5, r6, #8
   1f328:	b2ad      	uxth	r5, r5
   1f32a:	1918      	adds	r0, r3, r4
   1f32c:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1f330:	2202      	movs	r2, #2
   1f332:	a901      	add	r1, sp, #4
   1f334:	9501      	str	r5, [sp, #4]
   1f336:	f7ff f8e1 	bl	1e4fc <CC_PalMemCopyPlat>
   1f33a:	3402      	adds	r4, #2
   1f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f33e:	2000      	movs	r0, #0
   1f340:	601c      	str	r4, [r3, #0]
   1f342:	b002      	add	sp, #8
   1f344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f348:	4809      	ldr	r0, [pc, #36]	; (1f370 <UtilCmacBuildDataForDerivation+0xb4>)
   1f34a:	b002      	add	sp, #8
   1f34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f350:	9b08      	ldr	r3, [sp, #32]
   1f352:	2201      	movs	r2, #1
   1f354:	1918      	adds	r0, r3, r4
   1f356:	4669      	mov	r1, sp
   1f358:	f7ff f8d0 	bl	1e4fc <CC_PalMemCopyPlat>
   1f35c:	3401      	adds	r4, #1
   1f35e:	e7ed      	b.n	1f33c <UtilCmacBuildDataForDerivation+0x80>
   1f360:	9b08      	ldr	r3, [sp, #32]
   1f362:	4641      	mov	r1, r8
   1f364:	1918      	adds	r0, r3, r4
   1f366:	463a      	mov	r2, r7
   1f368:	f7ff f8c8 	bl	1e4fc <CC_PalMemCopyPlat>
   1f36c:	443c      	add	r4, r7
   1f36e:	e7d6      	b.n	1f31e <UtilCmacBuildDataForDerivation+0x62>
   1f370:	80000006 	.word	0x80000006

0001f374 <CC_PalDataBufferAttrGet>:
   1f374:	2000      	movs	r0, #0
   1f376:	7018      	strb	r0, [r3, #0]
   1f378:	4770      	bx	lr
   1f37a:	bf00      	nop

0001f37c <clear_id_work_function>:
{
   1f37c:	b508      	push	{r3, lr}
    ret = nvs_delete(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY);
   1f37e:	f7f2 fbe7 	bl	11b50 <get_file_system_handle>
   1f382:	2100      	movs	r1, #0
   1f384:	f000 fd54 	bl	1fe30 <nvs_delete>
    sys_reboot(SYS_REBOOT_WARM);
   1f388:	2000      	movs	r0, #0
   1f38a:	f7f3 f915 	bl	125b8 <sys_reboot>

0001f38e <on_cccd_changed_measurement>:
        break;

    default:
        LOG_INF("Error, CCCD has been set to an invalid value");
    }
}
   1f38e:	4770      	bx	lr

0001f390 <on_read_light_exposure>:
                             sizeof(humidity_value));
}

static ssize_t on_read_light_exposure(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                      void *buf, uint16_t len, uint16_t offset)
{
   1f390:	b510      	push	{r4, lr}
   1f392:	b086      	sub	sp, #24
    struct sensor_value lux;
    sensor_sample_fetch_chan(bh1750_device, SENSOR_CHAN_LIGHT);
    sensor_channel_get(bh1750_device, SENSOR_CHAN_LIGHT, &lux);
    light_exposure = lux.val1;
#else
    light_exposure = 4500;
   1f394:	f241 1494 	movw	r4, #4500	; 0x1194
   1f398:	9405      	str	r4, [sp, #20]
#endif
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &light_exposure,
   1f39a:	2404      	movs	r4, #4
   1f39c:	9402      	str	r4, [sp, #8]
   1f39e:	ac05      	add	r4, sp, #20
   1f3a0:	9401      	str	r4, [sp, #4]
   1f3a2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1f3a6:	9400      	str	r4, [sp, #0]
   1f3a8:	f002 fe47 	bl	2203a <bt_gatt_attr_read>
                             sizeof(light_exposure));
}
   1f3ac:	b006      	add	sp, #24
   1f3ae:	bd10      	pop	{r4, pc}

0001f3b0 <on_read_soil_moisture>:

static ssize_t on_read_soil_moisture(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                     void *buf, uint16_t len, uint16_t offset)
{
   1f3b0:	b510      	push	{r4, lr}
   1f3b2:	b086      	sub	sp, #24
   
    adc_measure_soil_moisture();
    soil_moisture = adc_get_soil_moisture();
    gpio_disable_soil_moisture();
#else
    soil_moisture = 8000; // 50%
   1f3b4:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
   1f3b8:	9405      	str	r4, [sp, #20]
#endif
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &soil_moisture,
   1f3ba:	2404      	movs	r4, #4
   1f3bc:	9402      	str	r4, [sp, #8]
   1f3be:	ac05      	add	r4, sp, #20
   1f3c0:	9401      	str	r4, [sp, #4]
   1f3c2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1f3c6:	9400      	str	r4, [sp, #0]
   1f3c8:	f002 fe37 	bl	2203a <bt_gatt_attr_read>
                             sizeof(soil_moisture));
}
   1f3cc:	b006      	add	sp, #24
   1f3ce:	bd10      	pop	{r4, pc}

0001f3d0 <on_read_temperature>:
{
   1f3d0:	b510      	push	{r4, lr}
   1f3d2:	b086      	sub	sp, #24
    temperature_value = 3250;
   1f3d4:	f640 44b2 	movw	r4, #3250	; 0xcb2
   1f3d8:	9405      	str	r4, [sp, #20]
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &temperature_value,
   1f3da:	2404      	movs	r4, #4
   1f3dc:	9402      	str	r4, [sp, #8]
   1f3de:	ac05      	add	r4, sp, #20
   1f3e0:	9401      	str	r4, [sp, #4]
   1f3e2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1f3e6:	9400      	str	r4, [sp, #0]
   1f3e8:	f002 fe27 	bl	2203a <bt_gatt_attr_read>
}
   1f3ec:	b006      	add	sp, #24
   1f3ee:	bd10      	pop	{r4, pc}

0001f3f0 <on_read_humidity>:
{
   1f3f0:	b510      	push	{r4, lr}
   1f3f2:	b086      	sub	sp, #24
    humidity_value = 6000;
   1f3f4:	f241 7470 	movw	r4, #6000	; 0x1770
   1f3f8:	9405      	str	r4, [sp, #20]
    return bt_gatt_attr_read(conn, attr, buf, len, offset, &humidity_value,
   1f3fa:	2404      	movs	r4, #4
   1f3fc:	9402      	str	r4, [sp, #8]
   1f3fe:	ac05      	add	r4, sp, #20
   1f400:	9401      	str	r4, [sp, #4]
   1f402:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1f406:	9400      	str	r4, [sp, #0]
   1f408:	f002 fe17 	bl	2203a <bt_gatt_attr_read>
}
   1f40c:	b006      	add	sp, #24
   1f40e:	bd10      	pop	{r4, pc}

0001f410 <disconnected>:
}
   1f410:	4770      	bx	lr

0001f412 <le_param_req>:
}
   1f412:	2001      	movs	r0, #1
   1f414:	4770      	bx	lr

0001f416 <le_param_updated>:
{
   1f416:	b500      	push	{lr}
   1f418:	b089      	sub	sp, #36	; 0x24
    if (bt_conn_get_info(conn, &info))
   1f41a:	a901      	add	r1, sp, #4
   1f41c:	f7f6 fa78 	bl	15910 <bt_conn_get_info>
}
   1f420:	b009      	add	sp, #36	; 0x24
   1f422:	f85d fb04 	ldr.w	pc, [sp], #4

0001f426 <on_read_battery_level>:

static ssize_t on_read_battery_level(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                void *buf, uint16_t len, uint16_t offset)
{
   1f426:	b510      	push	{r4, lr}
   1f428:	b086      	sub	sp, #24
    
    int32_t battery_level = 64;
   1f42a:	2440      	movs	r4, #64	; 0x40
   1f42c:	9405      	str	r4, [sp, #20]

    return bt_gatt_attr_read(conn, attr, buf, len, offset, &battery_level,
   1f42e:	2404      	movs	r4, #4
   1f430:	9402      	str	r4, [sp, #8]
   1f432:	ac05      	add	r4, sp, #20
   1f434:	9401      	str	r4, [sp, #4]
   1f436:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1f43a:	9400      	str	r4, [sp, #0]
   1f43c:	f002 fdfd 	bl	2203a <bt_gatt_attr_read>
                             sizeof(battery_level));
}
   1f440:	b006      	add	sp, #24
   1f442:	bd10      	pop	{r4, pc}

0001f444 <on_read_configuration_id>:

static ssize_t on_read_configuration_id(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                void *buf, uint16_t len, uint16_t offset)
{
   1f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f448:	b086      	sub	sp, #24
    
    uint8_t configuration_id;

    // Read stored configuration id
    nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &configuration_id, sizeof(configuration_id));
   1f44a:	f10d 0817 	add.w	r8, sp, #23
{
   1f44e:	460d      	mov	r5, r1
   1f450:	4616      	mov	r6, r2
   1f452:	461f      	mov	r7, r3
   1f454:	4604      	mov	r4, r0
    nvs_read(get_file_system_handle(), DEVICE_CONFIGURATION_FLASH_KEY, &configuration_id, sizeof(configuration_id));
   1f456:	f7f2 fb7b 	bl	11b50 <get_file_system_handle>
   1f45a:	4642      	mov	r2, r8
   1f45c:	2301      	movs	r3, #1
   1f45e:	2100      	movs	r1, #0
   1f460:	f000 fd41 	bl	1fee6 <nvs_read>

    return bt_gatt_attr_read(conn, attr, buf, len, offset, &configuration_id,
   1f464:	2301      	movs	r3, #1
   1f466:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1f46a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1f46e:	9300      	str	r3, [sp, #0]
   1f470:	4632      	mov	r2, r6
   1f472:	463b      	mov	r3, r7
   1f474:	4629      	mov	r1, r5
   1f476:	4620      	mov	r0, r4
   1f478:	f002 fddf 	bl	2203a <bt_gatt_attr_read>
                             sizeof(configuration_id));
}
   1f47c:	b006      	add	sp, #24
   1f47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f482 <bh1750_channel_get>:
    val->val1 = bh1750_data->lux;
   1f482:	6903      	ldr	r3, [r0, #16]
   1f484:	889b      	ldrh	r3, [r3, #4]
   1f486:	6013      	str	r3, [r2, #0]
    val->val2 = 0;
   1f488:	2300      	movs	r3, #0
   1f48a:	6053      	str	r3, [r2, #4]
}
   1f48c:	4770      	bx	lr

0001f48e <adc_calibration_sampling_done_callback>:
}
   1f48e:	2002      	movs	r0, #2
   1f490:	4770      	bx	lr

0001f492 <adc_calibration_timer_handler>:
{
   1f492:	b508      	push	{r3, lr}
    struct k_work *adc_calibration_item = get_adc_calibrate_work_item();
   1f494:	f7f2 fb36 	bl	11b04 <get_adc_calibrate_work_item>
}
   1f498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    k_work_submit(adc_calibration_item);
   1f49c:	f7fc bc1e 	b.w	1bcdc <k_work_submit>

0001f4a0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f4a0:	4603      	mov	r3, r0
   1f4a2:	b140      	cbz	r0, 1f4b6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f4a4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f4a6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f4aa:	2a02      	cmp	r2, #2
   1f4ac:	d006      	beq.n	1f4bc <sys_notify_validate+0x1c>
   1f4ae:	2a03      	cmp	r2, #3
   1f4b0:	d004      	beq.n	1f4bc <sys_notify_validate+0x1c>
   1f4b2:	2a01      	cmp	r2, #1
   1f4b4:	d005      	beq.n	1f4c2 <sys_notify_validate+0x22>
		return -EINVAL;
   1f4b6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f4ba:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f4bc:	681a      	ldr	r2, [r3, #0]
   1f4be:	2a00      	cmp	r2, #0
   1f4c0:	d0f9      	beq.n	1f4b6 <sys_notify_validate+0x16>
		notify->result = 0;
   1f4c2:	2000      	movs	r0, #0
   1f4c4:	6098      	str	r0, [r3, #8]
   1f4c6:	4770      	bx	lr

0001f4c8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f4c8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f4ca:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f4ce:	2a02      	cmp	r2, #2
{
   1f4d0:	b510      	push	{r4, lr}
   1f4d2:	4603      	mov	r3, r0
	notify->result = res;
   1f4d4:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f4d6:	d00a      	beq.n	1f4ee <sys_notify_finalize+0x26>
   1f4d8:	2a03      	cmp	r2, #3
   1f4da:	d10b      	bne.n	1f4f4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f4dc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f4de:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f4e0:	2200      	movs	r2, #0
   1f4e2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f4e4:	b108      	cbz	r0, 1f4ea <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f4e6:	f7fd fa93 	bl	1ca10 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f4ea:	4620      	mov	r0, r4
   1f4ec:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f4ee:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f4f0:	2400      	movs	r4, #0
		break;
   1f4f2:	e7f5      	b.n	1f4e0 <sys_notify_finalize+0x18>
	switch (method) {
   1f4f4:	2400      	movs	r4, #0
   1f4f6:	4620      	mov	r0, r4
   1f4f8:	e7f2      	b.n	1f4e0 <sys_notify_finalize+0x18>

0001f4fa <arch_printk_char_out>:
}
   1f4fa:	2000      	movs	r0, #0
   1f4fc:	4770      	bx	lr

0001f4fe <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   1f4fe:	b40f      	push	{r0, r1, r2, r3}
   1f500:	b507      	push	{r0, r1, r2, lr}
   1f502:	a904      	add	r1, sp, #16
   1f504:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f508:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1f50a:	f7f2 fba1 	bl	11c50 <vprintk>
	}
	va_end(ap);
}
   1f50e:	b003      	add	sp, #12
   1f510:	f85d eb04 	ldr.w	lr, [sp], #4
   1f514:	b004      	add	sp, #16
   1f516:	4770      	bx	lr

0001f518 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f518:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f51a:	f013 0307 	ands.w	r3, r3, #7
   1f51e:	d105      	bne.n	1f52c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f520:	6803      	ldr	r3, [r0, #0]
   1f522:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1f524:	bf0c      	ite	eq
   1f526:	2000      	moveq	r0, #0
   1f528:	2003      	movne	r0, #3
   1f52a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f52c:	2b02      	cmp	r3, #2
   1f52e:	d105      	bne.n	1f53c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f530:	8b43      	ldrh	r3, [r0, #26]
   1f532:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1f534:	bf14      	ite	ne
   1f536:	2000      	movne	r0, #0
   1f538:	2004      	moveq	r0, #4
   1f53a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f53c:	2b01      	cmp	r3, #1
   1f53e:	d105      	bne.n	1f54c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f540:	6803      	ldr	r3, [r0, #0]
   1f542:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1f544:	bf0c      	ite	eq
   1f546:	2000      	moveq	r0, #0
   1f548:	2005      	movne	r0, #5
   1f54a:	4770      	bx	lr
	int evt = EVT_NOP;
   1f54c:	2000      	movs	r0, #0
}
   1f54e:	4770      	bx	lr

0001f550 <notify_one>:
{
   1f550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f554:	460d      	mov	r5, r1
   1f556:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f558:	4619      	mov	r1, r3
   1f55a:	1d28      	adds	r0, r5, #4
{
   1f55c:	4690      	mov	r8, r2
   1f55e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f560:	f7ff ffb2 	bl	1f4c8 <sys_notify_finalize>
	if (cb) {
   1f564:	4604      	mov	r4, r0
   1f566:	b138      	cbz	r0, 1f578 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f568:	4633      	mov	r3, r6
   1f56a:	4642      	mov	r2, r8
   1f56c:	4629      	mov	r1, r5
   1f56e:	4638      	mov	r0, r7
   1f570:	46a4      	mov	ip, r4
}
   1f572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f576:	4760      	bx	ip
}
   1f578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f57c <transition_complete>:
{
   1f57c:	b410      	push	{r4}
	__asm__ volatile(
   1f57e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f582:	f3ef 8211 	mrs	r2, BASEPRI
   1f586:	f384 8812 	msr	BASEPRI_MAX, r4
   1f58a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f58e:	6141      	str	r1, [r0, #20]
}
   1f590:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f592:	2101      	movs	r1, #1
   1f594:	f7f2 bb6a 	b.w	11c6c <process_event>

0001f598 <validate_args>:
{
   1f598:	b510      	push	{r4, lr}
   1f59a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f59c:	b140      	cbz	r0, 1f5b0 <validate_args+0x18>
   1f59e:	b139      	cbz	r1, 1f5b0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f5a0:	1d08      	adds	r0, r1, #4
   1f5a2:	f7ff ff7d 	bl	1f4a0 <sys_notify_validate>
	if ((rv == 0)
   1f5a6:	b928      	cbnz	r0, 1f5b4 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f5a8:	68a3      	ldr	r3, [r4, #8]
   1f5aa:	f033 0303 	bics.w	r3, r3, #3
   1f5ae:	d001      	beq.n	1f5b4 <validate_args+0x1c>
		rv = -EINVAL;
   1f5b0:	f06f 0015 	mvn.w	r0, #21
}
   1f5b4:	bd10      	pop	{r4, pc}

0001f5b6 <onoff_manager_init>:
{
   1f5b6:	b538      	push	{r3, r4, r5, lr}
   1f5b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f5ba:	4605      	mov	r5, r0
   1f5bc:	b158      	cbz	r0, 1f5d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f5be:	b151      	cbz	r1, 1f5d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f5c0:	680b      	ldr	r3, [r1, #0]
   1f5c2:	b143      	cbz	r3, 1f5d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f5c4:	684b      	ldr	r3, [r1, #4]
   1f5c6:	b133      	cbz	r3, 1f5d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f5c8:	221c      	movs	r2, #28
   1f5ca:	2100      	movs	r1, #0
   1f5cc:	f000 ff26 	bl	2041c <memset>
   1f5d0:	612c      	str	r4, [r5, #16]
	return 0;
   1f5d2:	2000      	movs	r0, #0
}
   1f5d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f5d6:	f06f 0015 	mvn.w	r0, #21
   1f5da:	e7fb      	b.n	1f5d4 <onoff_manager_init+0x1e>

0001f5dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f5dc:	b570      	push	{r4, r5, r6, lr}
   1f5de:	4604      	mov	r4, r0
   1f5e0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f5e2:	f7ff ffd9 	bl	1f598 <validate_args>

	if (rv < 0) {
   1f5e6:	1e05      	subs	r5, r0, #0
   1f5e8:	db31      	blt.n	1f64e <onoff_request+0x72>
   1f5ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f5ee:	f3ef 8111 	mrs	r1, BASEPRI
   1f5f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f5f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f5fa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f5fc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f5fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f602:	42ab      	cmp	r3, r5
   1f604:	f000 0207 	and.w	r2, r0, #7
   1f608:	d02e      	beq.n	1f668 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f60a:	2a02      	cmp	r2, #2
   1f60c:	d10e      	bne.n	1f62c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f60e:	3301      	adds	r3, #1
   1f610:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f612:	4615      	mov	r5, r2
		notify = true;
   1f614:	2301      	movs	r3, #1
	__asm__ volatile(
   1f616:	f381 8811 	msr	BASEPRI, r1
   1f61a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f61e:	b1b3      	cbz	r3, 1f64e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f620:	2300      	movs	r3, #0
   1f622:	4631      	mov	r1, r6
   1f624:	4620      	mov	r0, r4
   1f626:	f7ff ff93 	bl	1f550 <notify_one>
   1f62a:	e010      	b.n	1f64e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f62c:	0783      	lsls	r3, r0, #30
   1f62e:	d001      	beq.n	1f634 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f630:	2a06      	cmp	r2, #6
   1f632:	d10e      	bne.n	1f652 <onoff_request+0x76>
	parent->next = child;
   1f634:	2300      	movs	r3, #0
   1f636:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1f638:	6863      	ldr	r3, [r4, #4]
   1f63a:	b993      	cbnz	r3, 1f662 <onoff_request+0x86>
	list->head = node;
   1f63c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f640:	4615      	mov	r5, r2
   1f642:	b962      	cbnz	r2, 1f65e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f644:	460a      	mov	r2, r1
   1f646:	4620      	mov	r0, r4
   1f648:	2102      	movs	r1, #2
   1f64a:	f7f2 fb0f 	bl	11c6c <process_event>
		}
	}

	return rv;
}
   1f64e:	4628      	mov	r0, r5
   1f650:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f652:	2a05      	cmp	r2, #5
   1f654:	bf0c      	ite	eq
   1f656:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1f65a:	f06f 0504 	mvnne.w	r5, #4
   1f65e:	2300      	movs	r3, #0
   1f660:	e7d9      	b.n	1f616 <onoff_request+0x3a>
	parent->next = child;
   1f662:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f664:	6066      	str	r6, [r4, #4]
}
   1f666:	e7eb      	b.n	1f640 <onoff_request+0x64>
		rv = -EAGAIN;
   1f668:	f06f 050a 	mvn.w	r5, #10
   1f66c:	e7f7      	b.n	1f65e <onoff_request+0x82>

0001f66e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f66e:	4604      	mov	r4, r0
   1f670:	b508      	push	{r3, lr}
   1f672:	4608      	mov	r0, r1
   1f674:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1f676:	461a      	mov	r2, r3
   1f678:	47a0      	blx	r4
	return z_impl_z_current_get();
   1f67a:	f7fc fed7 	bl	1c42c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1f67e:	f7f4 f8dd 	bl	1383c <z_impl_k_thread_abort>

0001f682 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1f682:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1f686:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1f688:	0840      	lsrs	r0, r0, #1
   1f68a:	4770      	bx	lr

0001f68c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f68e:	4603      	mov	r3, r0
   1f690:	460c      	mov	r4, r1
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f692:	f7ff fff6 	bl	1f682 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1f696:	fab0 f080 	clz	r0, r0
   1f69a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1f69e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   1f6a2:	00ca      	lsls	r2, r1, #3
   1f6a4:	f8dc 6010 	ldr.w	r6, [ip, #16]
   1f6a8:	1d17      	adds	r7, r2, #4
   1f6aa:	b28d      	uxth	r5, r1
   1f6ac:	3206      	adds	r2, #6
   1f6ae:	b956      	cbnz	r6, 1f6c6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1f6b0:	2101      	movs	r1, #1
   1f6b2:	fa01 f000 	lsl.w	r0, r1, r0
   1f6b6:	68d9      	ldr	r1, [r3, #12]
   1f6b8:	4301      	orrs	r1, r0
   1f6ba:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1f6bc:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1f6c0:	53dd      	strh	r5, [r3, r7]
   1f6c2:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1f6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1f6c6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1f6c8:	3104      	adds	r1, #4
   1f6ca:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1f6cc:	53d8      	strh	r0, [r3, r7]
   1f6ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f6d2:	529e      	strh	r6, [r3, r2]
   1f6d4:	80c5      	strh	r5, [r0, #6]
   1f6d6:	525d      	strh	r5, [r3, r1]
   1f6d8:	e7f4      	b.n	1f6c4 <free_list_add+0x38>

0001f6da <free_list_remove_bidx>:
{
   1f6da:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1f6dc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1f6e0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1f6e2:	4299      	cmp	r1, r3
   1f6e4:	f102 0104 	add.w	r1, r2, #4
   1f6e8:	d10a      	bne.n	1f700 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1f6ea:	2301      	movs	r3, #1
   1f6ec:	fa03 f202 	lsl.w	r2, r3, r2
   1f6f0:	68c3      	ldr	r3, [r0, #12]
   1f6f2:	ea23 0302 	bic.w	r3, r3, r2
   1f6f6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1f6f8:	2300      	movs	r3, #0
   1f6fa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1f6fe:	bd10      	pop	{r4, pc}
   1f700:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1f702:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1f706:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1f70a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f70e:	80cb      	strh	r3, [r1, #6]
   1f710:	8082      	strh	r2, [r0, #4]
}
   1f712:	e7f4      	b.n	1f6fe <free_list_remove_bidx+0x24>

0001f714 <free_list_remove>:
{
   1f714:	b510      	push	{r4, lr}
   1f716:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f718:	f7ff ffb3 	bl	1f682 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1f71c:	fab0 f280 	clz	r2, r0
}
   1f720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   1f724:	f1c2 021f 	rsb	r2, r2, #31
   1f728:	4618      	mov	r0, r3
   1f72a:	f7ff bfd6 	b.w	1f6da <free_list_remove_bidx>

0001f72e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1f72e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f732:	fab1 f581 	clz	r5, r1
   1f736:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1f73a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1f73e:	4603      	mov	r3, r0
	if (b->next) {
   1f740:	693a      	ldr	r2, [r7, #16]
{
   1f742:	460e      	mov	r6, r1
	if (b->next) {
   1f744:	b1ca      	cbz	r2, 1f77a <alloc_chunk+0x4c>
   1f746:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1f74a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1f74c:	4618      	mov	r0, r3
   1f74e:	4621      	mov	r1, r4
   1f750:	f7ff ff97 	bl	1f682 <chunk_size>
   1f754:	42b0      	cmp	r0, r6
   1f756:	d307      	bcc.n	1f768 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1f758:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1f75a:	4621      	mov	r1, r4
   1f75c:	4618      	mov	r0, r3
   1f75e:	f7ff ffbc 	bl	1f6da <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1f762:	4620      	mov	r0, r4
   1f764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1f768:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1f76c:	f1b8 0801 	subs.w	r8, r8, #1
   1f770:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   1f772:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   1f774:	d001      	beq.n	1f77a <alloc_chunk+0x4c>
   1f776:	428a      	cmp	r2, r1
   1f778:	d1e7      	bne.n	1f74a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1f77a:	68d9      	ldr	r1, [r3, #12]
   1f77c:	f1c5 0520 	rsb	r5, r5, #32
   1f780:	f04f 34ff 	mov.w	r4, #4294967295
   1f784:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   1f786:	400c      	ands	r4, r1
   1f788:	d0eb      	beq.n	1f762 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1f78a:	fa94 f2a4 	rbit	r2, r4
   1f78e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1f792:	1d11      	adds	r1, r2, #4
   1f794:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1f798:	e7df      	b.n	1f75a <alloc_chunk+0x2c>

0001f79a <merge_chunks>:
{
   1f79a:	b538      	push	{r3, r4, r5, lr}
   1f79c:	4603      	mov	r3, r0
   1f79e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f7a0:	f7ff ff6f 	bl	1f682 <chunk_size>
   1f7a4:	4611      	mov	r1, r2
   1f7a6:	4604      	mov	r4, r0
   1f7a8:	4618      	mov	r0, r3
   1f7aa:	f7ff ff6a 	bl	1f682 <chunk_size>
   1f7ae:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   1f7b0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f7b4:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   1f7b6:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   1f7b8:	4618      	mov	r0, r3
   1f7ba:	4611      	mov	r1, r2
   1f7bc:	f7ff ff61 	bl	1f682 <chunk_size>
	void *cmem = &buf[c];
   1f7c0:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1f7c2:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   1f7c6:	bd38      	pop	{r3, r4, r5, pc}

0001f7c8 <split_chunks>:
{
   1f7c8:	b538      	push	{r3, r4, r5, lr}
   1f7ca:	4603      	mov	r3, r0
   1f7cc:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1f7ce:	f7ff ff58 	bl	1f682 <chunk_size>
	chunksz_t lsz = rc - lc;
   1f7d2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1f7d4:	1aa5      	subs	r5, r4, r2
   1f7d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1f7da:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f7dc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1f7de:	8060      	strh	r0, [r4, #2]
   1f7e0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f7e4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1f7e6:	8044      	strh	r4, [r0, #2]
   1f7e8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1f7ec:	4618      	mov	r0, r3
   1f7ee:	4611      	mov	r1, r2
   1f7f0:	f7ff ff47 	bl	1f682 <chunk_size>
	void *cmem = &buf[c];
   1f7f4:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   1f7f6:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   1f7fa:	bd38      	pop	{r3, r4, r5, pc}

0001f7fc <free_chunk>:
{
   1f7fc:	b538      	push	{r3, r4, r5, lr}
   1f7fe:	4605      	mov	r5, r0
   1f800:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   1f802:	f7ff ff3e 	bl	1f682 <chunk_size>
   1f806:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1f808:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f80c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1f80e:	07da      	lsls	r2, r3, #31
   1f810:	d40a      	bmi.n	1f828 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1f812:	4628      	mov	r0, r5
   1f814:	f7ff ff7e 	bl	1f714 <free_list_remove>
	return c + chunk_size(h, c);
   1f818:	4621      	mov	r1, r4
   1f81a:	4628      	mov	r0, r5
   1f81c:	f7ff ff31 	bl	1f682 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1f820:	1822      	adds	r2, r4, r0
   1f822:	4628      	mov	r0, r5
   1f824:	f7ff ffb9 	bl	1f79a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1f828:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f82c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1f82e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f832:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1f834:	07db      	lsls	r3, r3, #31
   1f836:	d40c      	bmi.n	1f852 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1f838:	4628      	mov	r0, r5
   1f83a:	f7ff ff6b 	bl	1f714 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1f83e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1f842:	4622      	mov	r2, r4
   1f844:	1a61      	subs	r1, r4, r1
   1f846:	4628      	mov	r0, r5
   1f848:	f7ff ffa7 	bl	1f79a <merge_chunks>
   1f84c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f850:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1f852:	4621      	mov	r1, r4
   1f854:	4628      	mov	r0, r5
}
   1f856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1f85a:	f7ff bf17 	b.w	1f68c <free_list_add>

0001f85e <sys_heap_free>:
	if (mem == NULL) {
   1f85e:	b161      	cbz	r1, 1f87a <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   1f860:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f862:	3904      	subs	r1, #4
   1f864:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1f866:	f021 0307 	bic.w	r3, r1, #7
   1f86a:	4403      	add	r3, r0
	free_chunk(h, c);
   1f86c:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f86e:	885a      	ldrh	r2, [r3, #2]
   1f870:	f022 0201 	bic.w	r2, r2, #1
   1f874:	805a      	strh	r2, [r3, #2]
   1f876:	f7ff bfc1 	b.w	1f7fc <free_chunk>
}
   1f87a:	4770      	bx	lr

0001f87c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1f87c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1f87e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1f880:	b909      	cbnz	r1, 1f886 <sys_heap_alloc+0xa>
		return NULL;
   1f882:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
   1f884:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1f886:	68ab      	ldr	r3, [r5, #8]
   1f888:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1f88c:	d9f9      	bls.n	1f882 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f88e:	310b      	adds	r1, #11
   1f890:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1f892:	4621      	mov	r1, r4
   1f894:	4628      	mov	r0, r5
   1f896:	f7ff ff4a 	bl	1f72e <alloc_chunk>
	if (c == 0U) {
   1f89a:	4606      	mov	r6, r0
   1f89c:	2800      	cmp	r0, #0
   1f89e:	d0f0      	beq.n	1f882 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1f8a0:	4601      	mov	r1, r0
   1f8a2:	4628      	mov	r0, r5
   1f8a4:	f7ff feed 	bl	1f682 <chunk_size>
   1f8a8:	42a0      	cmp	r0, r4
   1f8aa:	d908      	bls.n	1f8be <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   1f8ac:	4434      	add	r4, r6
   1f8ae:	4628      	mov	r0, r5
   1f8b0:	4622      	mov	r2, r4
   1f8b2:	f7ff ff89 	bl	1f7c8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1f8b6:	4621      	mov	r1, r4
   1f8b8:	4628      	mov	r0, r5
   1f8ba:	f7ff fee7 	bl	1f68c <free_list_add>
	void *cmem = &buf[c];
   1f8be:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1f8c2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f8c4:	8853      	ldrh	r3, [r2, #2]
   1f8c6:	f043 0301 	orr.w	r3, r3, #1
   1f8ca:	8053      	strh	r3, [r2, #2]
   1f8cc:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   1f8ce:	e7d9      	b.n	1f884 <sys_heap_alloc+0x8>

0001f8d0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1f8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f8d4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1f8d6:	424a      	negs	r2, r1
   1f8d8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1f8dc:	ea31 0202 	bics.w	r2, r1, r2
{
   1f8e0:	4603      	mov	r3, r0
	if (align != rew) {
   1f8e2:	d00a      	beq.n	1f8fa <sys_heap_aligned_alloc+0x2a>
		return false;
   1f8e4:	2f04      	cmp	r7, #4
   1f8e6:	463a      	mov	r2, r7
   1f8e8:	46b9      	mov	r9, r7
   1f8ea:	bf28      	it	cs
   1f8ec:	2204      	movcs	r2, #4
		align -= rew;
   1f8ee:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1f8f0:	b974      	cbnz	r4, 1f910 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1f8f2:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   1f8f4:	4628      	mov	r0, r5
   1f8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1f8fa:	2904      	cmp	r1, #4
   1f8fc:	d804      	bhi.n	1f908 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1f8fe:	4621      	mov	r1, r4
}
   1f900:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1f904:	f7ff bfba 	b.w	1f87c <sys_heap_alloc>
		rew = 0;
   1f908:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1f90c:	2204      	movs	r2, #4
   1f90e:	e7ef      	b.n	1f8f0 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1f910:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1f912:	68b3      	ldr	r3, [r6, #8]
   1f914:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1f918:	d9eb      	bls.n	1f8f2 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f91a:	f104 010b 	add.w	r1, r4, #11
   1f91e:	4439      	add	r1, r7
   1f920:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1f922:	08c9      	lsrs	r1, r1, #3
   1f924:	4630      	mov	r0, r6
   1f926:	f7ff ff02 	bl	1f72e <alloc_chunk>
	if (c0 == 0) {
   1f92a:	4680      	mov	r8, r0
   1f92c:	2800      	cmp	r0, #0
   1f92e:	d0e0      	beq.n	1f8f2 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1f930:	f109 0504 	add.w	r5, r9, #4
   1f934:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1f938:	1e7b      	subs	r3, r7, #1
   1f93a:	4435      	add	r5, r6
   1f93c:	441d      	add	r5, r3
   1f93e:	427f      	negs	r7, r7
   1f940:	403d      	ands	r5, r7
   1f942:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f946:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f948:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f94a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f94c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f94e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1f952:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1f954:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f958:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1f95c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1f960:	d208      	bcs.n	1f974 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1f962:	4601      	mov	r1, r0
   1f964:	463a      	mov	r2, r7
   1f966:	4630      	mov	r0, r6
   1f968:	f7ff ff2e 	bl	1f7c8 <split_chunks>
		free_list_add(h, c0);
   1f96c:	4641      	mov	r1, r8
   1f96e:	4630      	mov	r0, r6
   1f970:	f7ff fe8c 	bl	1f68c <free_list_add>
	return c + chunk_size(h, c);
   1f974:	4639      	mov	r1, r7
   1f976:	4630      	mov	r0, r6
   1f978:	f7ff fe83 	bl	1f682 <chunk_size>
   1f97c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1f97e:	4284      	cmp	r4, r0
   1f980:	d207      	bcs.n	1f992 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1f982:	4630      	mov	r0, r6
   1f984:	4622      	mov	r2, r4
   1f986:	f7ff ff1f 	bl	1f7c8 <split_chunks>
		free_list_add(h, c_end);
   1f98a:	4621      	mov	r1, r4
   1f98c:	4630      	mov	r0, r6
   1f98e:	f7ff fe7d 	bl	1f68c <free_list_add>
	void *cmem = &buf[c];
   1f992:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f996:	8873      	ldrh	r3, [r6, #2]
   1f998:	f043 0301 	orr.w	r3, r3, #1
   1f99c:	8073      	strh	r3, [r6, #2]
   1f99e:	e7a9      	b.n	1f8f4 <sys_heap_aligned_alloc+0x24>

0001f9a0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1f9a0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f9a2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f9a4:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f9a6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f9aa:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1f9ae:	1ad2      	subs	r2, r2, r3
{
   1f9b0:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1f9b2:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1f9b4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1f9b6:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1f9ba:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   1f9be:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f9c0:	1dc1      	adds	r1, r0, #7
	h->avail_buckets = 0;
   1f9c2:	2500      	movs	r5, #0
	h->end_chunk = heap_sz;
   1f9c4:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   1f9c6:	60dd      	str	r5, [r3, #12]
   1f9c8:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1f9ca:	f103 0610 	add.w	r6, r3, #16
   1f9ce:	4418      	add	r0, r3
   1f9d0:	4286      	cmp	r6, r0
   1f9d2:	d118      	bne.n	1fa06 <sys_heap_init+0x66>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f9d4:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f9d6:	f040 0001 	orr.w	r0, r0, #1
   1f9da:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1f9dc:	eb03 06c1 	add.w	r6, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1f9e0:	1a60      	subs	r0, r4, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f9e2:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1f9e4:	801d      	strh	r5, [r3, #0]
   1f9e6:	8077      	strh	r7, [r6, #2]
   1f9e8:	189e      	adds	r6, r3, r2
   1f9ea:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1f9ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		((uint16_t *)cmem)[f] = val;
   1f9f2:	8075      	strh	r5, [r6, #2]
   1f9f4:	5298      	strh	r0, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f9f6:	8862      	ldrh	r2, [r4, #2]
   1f9f8:	f042 0201 	orr.w	r2, r2, #1
   1f9fc:	8062      	strh	r2, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1f9fe:	4618      	mov	r0, r3
}
   1fa00:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fa02:	f7ff be43 	b.w	1f68c <free_list_add>
		h->buckets[i].next = 0;
   1fa06:	f846 5b04 	str.w	r5, [r6], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fa0a:	e7e1      	b.n	1f9d0 <sys_heap_init+0x30>

0001fa0c <encode_uint>:
{
   1fa0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa10:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1fa12:	78d3      	ldrb	r3, [r2, #3]
{
   1fa14:	4614      	mov	r4, r2
	switch (specifier) {
   1fa16:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1fa18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1fa1c:	4606      	mov	r6, r0
   1fa1e:	460f      	mov	r7, r1
   1fa20:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1fa22:	d02d      	beq.n	1fa80 <encode_uint+0x74>
   1fa24:	d828      	bhi.n	1fa78 <encode_uint+0x6c>
		return 16;
   1fa26:	2b58      	cmp	r3, #88	; 0x58
   1fa28:	bf14      	ite	ne
   1fa2a:	250a      	movne	r5, #10
   1fa2c:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1fa2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1fa32:	46aa      	mov	sl, r5
   1fa34:	f04f 0b00 	mov.w	fp, #0
   1fa38:	4652      	mov	r2, sl
   1fa3a:	465b      	mov	r3, fp
   1fa3c:	4630      	mov	r0, r6
   1fa3e:	4639      	mov	r1, r7
   1fa40:	f7e1 ff9c 	bl	197c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fa44:	2a09      	cmp	r2, #9
   1fa46:	b2d3      	uxtb	r3, r2
   1fa48:	d81f      	bhi.n	1fa8a <encode_uint+0x7e>
   1fa4a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1fa4c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fa4e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1fa50:	bf08      	it	eq
   1fa52:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fa54:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1fa58:	d301      	bcc.n	1fa5e <encode_uint+0x52>
   1fa5a:	45c8      	cmp	r8, r9
   1fa5c:	d812      	bhi.n	1fa84 <encode_uint+0x78>
	if (conv->flag_hash) {
   1fa5e:	7823      	ldrb	r3, [r4, #0]
   1fa60:	069b      	lsls	r3, r3, #26
   1fa62:	d505      	bpl.n	1fa70 <encode_uint+0x64>
		if (radix == 8) {
   1fa64:	2d08      	cmp	r5, #8
   1fa66:	d116      	bne.n	1fa96 <encode_uint+0x8a>
			conv->altform_0 = true;
   1fa68:	78a3      	ldrb	r3, [r4, #2]
   1fa6a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1fa6e:	70a3      	strb	r3, [r4, #2]
}
   1fa70:	4640      	mov	r0, r8
   1fa72:	b003      	add	sp, #12
   1fa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fa78:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fa7c:	2b70      	cmp	r3, #112	; 0x70
   1fa7e:	e7d3      	b.n	1fa28 <encode_uint+0x1c>
	switch (specifier) {
   1fa80:	2508      	movs	r5, #8
   1fa82:	e7d4      	b.n	1fa2e <encode_uint+0x22>
		value /= radix;
   1fa84:	4606      	mov	r6, r0
   1fa86:	460f      	mov	r7, r1
   1fa88:	e7d6      	b.n	1fa38 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fa8a:	9a01      	ldr	r2, [sp, #4]
   1fa8c:	2a19      	cmp	r2, #25
   1fa8e:	bf94      	ite	ls
   1fa90:	3337      	addls	r3, #55	; 0x37
   1fa92:	3357      	addhi	r3, #87	; 0x57
   1fa94:	e7da      	b.n	1fa4c <encode_uint+0x40>
		} else if (radix == 16) {
   1fa96:	2d10      	cmp	r5, #16
   1fa98:	d1ea      	bne.n	1fa70 <encode_uint+0x64>
			conv->altform_0c = true;
   1fa9a:	78a3      	ldrb	r3, [r4, #2]
   1fa9c:	f043 0310 	orr.w	r3, r3, #16
   1faa0:	e7e5      	b.n	1fa6e <encode_uint+0x62>

0001faa2 <outs>:
{
   1faa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faa6:	4607      	mov	r7, r0
   1faa8:	4688      	mov	r8, r1
   1faaa:	4615      	mov	r5, r2
   1faac:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1faae:	4614      	mov	r4, r2
   1fab0:	42b4      	cmp	r4, r6
   1fab2:	eba4 0005 	sub.w	r0, r4, r5
   1fab6:	d302      	bcc.n	1fabe <outs+0x1c>
   1fab8:	b93e      	cbnz	r6, 1faca <outs+0x28>
   1faba:	7823      	ldrb	r3, [r4, #0]
   1fabc:	b12b      	cbz	r3, 1faca <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fabe:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fac2:	4641      	mov	r1, r8
   1fac4:	47b8      	blx	r7
		if (rc < 0) {
   1fac6:	2800      	cmp	r0, #0
   1fac8:	daf2      	bge.n	1fab0 <outs+0xe>
}
   1faca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001face <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1face:	4770      	bx	lr

0001fad0 <z_impl_flash_write>:
{
   1fad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   1fad4:	6886      	ldr	r6, [r0, #8]
{
   1fad6:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   1fad8:	68f3      	ldr	r3, [r6, #12]
{
   1fada:	4605      	mov	r5, r0
   1fadc:	460f      	mov	r7, r1
   1fade:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   1fae0:	b95b      	cbnz	r3, 1fafa <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   1fae2:	6874      	ldr	r4, [r6, #4]
   1fae4:	464b      	mov	r3, r9
   1fae6:	4642      	mov	r2, r8
   1fae8:	4639      	mov	r1, r7
   1faea:	4628      	mov	r0, r5
   1faec:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   1faee:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   1faf0:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1faf2:	b943      	cbnz	r3, 1fb06 <z_impl_flash_write+0x36>
}
   1faf4:	4620      	mov	r0, r4
   1faf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   1fafa:	2100      	movs	r1, #0
   1fafc:	4798      	blx	r3
		if (rc) {
   1fafe:	4604      	mov	r4, r0
   1fb00:	2800      	cmp	r0, #0
   1fb02:	d0ee      	beq.n	1fae2 <z_impl_flash_write+0x12>
   1fb04:	e7f6      	b.n	1faf4 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   1fb06:	2101      	movs	r1, #1
   1fb08:	4628      	mov	r0, r5
   1fb0a:	4798      	blx	r3
   1fb0c:	e7f2      	b.n	1faf4 <z_impl_flash_write+0x24>

0001fb0e <nvs_flash_rd>:
{
   1fb0e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1fb10:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fb12:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1fb14:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fb16:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1fb18:	fa16 f181 	uxtah	r1, r6, r1
   1fb1c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1fb20:	6884      	ldr	r4, [r0, #8]
   1fb22:	6824      	ldr	r4, [r4, #0]
   1fb24:	46a4      	mov	ip, r4
}
   1fb26:	bc70      	pop	{r4, r5, r6}
   1fb28:	4760      	bx	ip

0001fb2a <nvs_flash_block_cmp>:
{
   1fb2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fb2e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1fb30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1fb32:	681d      	ldr	r5, [r3, #0]
   1fb34:	426d      	negs	r5, r5
{
   1fb36:	b089      	sub	sp, #36	; 0x24
   1fb38:	4681      	mov	r9, r0
   1fb3a:	460e      	mov	r6, r1
   1fb3c:	4617      	mov	r7, r2
	block_size =
   1fb3e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1fb42:	b91c      	cbnz	r4, 1fb4c <nvs_flash_block_cmp+0x22>
	return 0;
   1fb44:	4620      	mov	r0, r4
}
   1fb46:	b009      	add	sp, #36	; 0x24
   1fb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1fb4c:	42ac      	cmp	r4, r5
   1fb4e:	46a0      	mov	r8, r4
   1fb50:	bf28      	it	cs
   1fb52:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1fb54:	4643      	mov	r3, r8
   1fb56:	466a      	mov	r2, sp
   1fb58:	4631      	mov	r1, r6
   1fb5a:	4648      	mov	r0, r9
   1fb5c:	f7ff ffd7 	bl	1fb0e <nvs_flash_rd>
		if (rc) {
   1fb60:	2800      	cmp	r0, #0
   1fb62:	d1f0      	bne.n	1fb46 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1fb64:	4642      	mov	r2, r8
   1fb66:	4669      	mov	r1, sp
   1fb68:	4638      	mov	r0, r7
   1fb6a:	f000 fc25 	bl	203b8 <memcmp>
		if (rc) {
   1fb6e:	b920      	cbnz	r0, 1fb7a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1fb70:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1fb74:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1fb76:	4447      	add	r7, r8
   1fb78:	e7e3      	b.n	1fb42 <nvs_flash_block_cmp+0x18>
			return 1;
   1fb7a:	2001      	movs	r0, #1
   1fb7c:	e7e3      	b.n	1fb46 <nvs_flash_block_cmp+0x1c>

0001fb7e <nvs_flash_cmp_const>:
{
   1fb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb82:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1fb84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1fb86:	681d      	ldr	r5, [r3, #0]
   1fb88:	426d      	negs	r5, r5
{
   1fb8a:	b088      	sub	sp, #32
	block_size =
   1fb8c:	f005 0520 	and.w	r5, r5, #32
{
   1fb90:	4607      	mov	r7, r0
   1fb92:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1fb94:	4668      	mov	r0, sp
{
   1fb96:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1fb98:	462a      	mov	r2, r5
   1fb9a:	f000 fc3f 	bl	2041c <memset>
	while (len) {
   1fb9e:	b91c      	cbnz	r4, 1fba8 <nvs_flash_cmp_const+0x2a>
	return 0;
   1fba0:	4620      	mov	r0, r4
}
   1fba2:	b008      	add	sp, #32
   1fba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1fba8:	42ac      	cmp	r4, r5
   1fbaa:	46a0      	mov	r8, r4
   1fbac:	bf28      	it	cs
   1fbae:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1fbb0:	4643      	mov	r3, r8
   1fbb2:	466a      	mov	r2, sp
   1fbb4:	4631      	mov	r1, r6
   1fbb6:	4638      	mov	r0, r7
   1fbb8:	f7ff ffb7 	bl	1fb2a <nvs_flash_block_cmp>
		if (rc) {
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	d1f0      	bne.n	1fba2 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1fbc0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1fbc4:	4446      	add	r6, r8
   1fbc6:	e7ea      	b.n	1fb9e <nvs_flash_cmp_const+0x20>

0001fbc8 <nvs_flash_erase_sector>:
{
   1fbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fbcc:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   1fbd0:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1fbd2:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   1fbd4:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fbd8:	0c09      	lsrs	r1, r1, #16
{
   1fbda:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   1fbdc:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fbe0:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   1fbe4:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   1fbe8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1fbec:	b9b3      	cbnz	r3, 1fc1c <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   1fbee:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1fbf2:	4652      	mov	r2, sl
   1fbf4:	4631      	mov	r1, r6
   1fbf6:	4638      	mov	r0, r7
   1fbf8:	4798      	blx	r3
	if (api->write_protection != NULL) {
   1fbfa:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   1fbfe:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1fc00:	b9ab      	cbnz	r3, 1fc2e <nvs_flash_erase_sector+0x66>
	if (rc) {
   1fc02:	b98c      	cbnz	r4, 1fc28 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1fc04:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1fc06:	89ab      	ldrh	r3, [r5, #12]
   1fc08:	7912      	ldrb	r2, [r2, #4]
   1fc0a:	4641      	mov	r1, r8
   1fc0c:	4628      	mov	r0, r5
   1fc0e:	f7ff ffb6 	bl	1fb7e <nvs_flash_cmp_const>
		rc = -ENXIO;
   1fc12:	1e04      	subs	r4, r0, #0
   1fc14:	bf18      	it	ne
   1fc16:	f06f 0405 	mvnne.w	r4, #5
   1fc1a:	e005      	b.n	1fc28 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   1fc1c:	2100      	movs	r1, #0
   1fc1e:	4638      	mov	r0, r7
   1fc20:	4798      	blx	r3
		if (rc) {
   1fc22:	4604      	mov	r4, r0
   1fc24:	2800      	cmp	r0, #0
   1fc26:	d0e2      	beq.n	1fbee <nvs_flash_erase_sector+0x26>
}
   1fc28:	4620      	mov	r0, r4
   1fc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   1fc2e:	2101      	movs	r1, #1
   1fc30:	4638      	mov	r0, r7
   1fc32:	4798      	blx	r3
   1fc34:	e7e5      	b.n	1fc02 <nvs_flash_erase_sector+0x3a>

0001fc36 <nvs_ate_crc8_update>:
{
   1fc36:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1fc38:	4601      	mov	r1, r0
{
   1fc3a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1fc3c:	2207      	movs	r2, #7
   1fc3e:	20ff      	movs	r0, #255	; 0xff
   1fc40:	f7f1 ffe6 	bl	11c10 <crc8_ccitt>
	entry->crc8 = crc8;
   1fc44:	71e0      	strb	r0, [r4, #7]
}
   1fc46:	bd10      	pop	{r4, pc}

0001fc48 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1fc48:	7800      	ldrb	r0, [r0, #0]
   1fc4a:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1fc4c:	bf81      	itttt	hi
   1fc4e:	1809      	addhi	r1, r1, r0
   1fc50:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1fc54:	4240      	neghi	r0, r0
   1fc56:	4001      	andhi	r1, r0
}
   1fc58:	4608      	mov	r0, r1
   1fc5a:	4770      	bx	lr

0001fc5c <nvs_ate_valid>:
{
   1fc5c:	b570      	push	{r4, r5, r6, lr}
   1fc5e:	460c      	mov	r4, r1
   1fc60:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fc62:	2108      	movs	r1, #8
   1fc64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1fc66:	f7ff ffef 	bl	1fc48 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1fc6a:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fc6c:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1fc6e:	4621      	mov	r1, r4
   1fc70:	20ff      	movs	r0, #255	; 0xff
   1fc72:	f7f1 ffcd 	bl	11c10 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1fc76:	79e3      	ldrb	r3, [r4, #7]
   1fc78:	4283      	cmp	r3, r0
   1fc7a:	d107      	bne.n	1fc8c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   1fc7c:	89a8      	ldrh	r0, [r5, #12]
   1fc7e:	8863      	ldrh	r3, [r4, #2]
   1fc80:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1fc82:	4283      	cmp	r3, r0
   1fc84:	bf2c      	ite	cs
   1fc86:	2000      	movcs	r0, #0
   1fc88:	2001      	movcc	r0, #1
}
   1fc8a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1fc8c:	2000      	movs	r0, #0
   1fc8e:	e7fc      	b.n	1fc8a <nvs_ate_valid+0x2e>

0001fc90 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1fc90:	680b      	ldr	r3, [r1, #0]
   1fc92:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1fc96:	0c1a      	lsrs	r2, r3, #16
   1fc98:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1fc9c:	bf08      	it	eq
   1fc9e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1fca2:	600b      	str	r3, [r1, #0]
}
   1fca4:	4770      	bx	lr

0001fca6 <nvs_close_ate_valid>:
{
   1fca6:	b538      	push	{r3, r4, r5, lr}
   1fca8:	4605      	mov	r5, r0
   1fcaa:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1fcac:	f7ff ffd6 	bl	1fc5c <nvs_ate_valid>
   1fcb0:	b1a0      	cbz	r0, 1fcdc <nvs_close_ate_valid+0x36>
   1fcb2:	88a0      	ldrh	r0, [r4, #4]
   1fcb4:	b998      	cbnz	r0, 1fcde <nvs_close_ate_valid+0x38>
   1fcb6:	8822      	ldrh	r2, [r4, #0]
   1fcb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fcbc:	429a      	cmp	r2, r3
   1fcbe:	d10d      	bne.n	1fcdc <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fcc0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1fcc2:	2108      	movs	r1, #8
   1fcc4:	f7ff ffc0 	bl	1fc48 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   1fcc8:	8862      	ldrh	r2, [r4, #2]
   1fcca:	89ab      	ldrh	r3, [r5, #12]
   1fccc:	1a9b      	subs	r3, r3, r2
   1fcce:	fbb3 f2f0 	udiv	r2, r3, r0
   1fcd2:	fb02 3010 	mls	r0, r2, r0, r3
   1fcd6:	fab0 f080 	clz	r0, r0
   1fcda:	0940      	lsrs	r0, r0, #5
}
   1fcdc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1fcde:	2000      	movs	r0, #0
   1fce0:	e7fc      	b.n	1fcdc <nvs_close_ate_valid+0x36>

0001fce2 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1fce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fce6:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1fce8:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   1fcea:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1fcec:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1fcee:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1fcf0:	fa10 f181 	uxtah	r1, r0, r1
   1fcf4:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1fcf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fcfa:	681e      	ldr	r6, [r3, #0]
   1fcfc:	4276      	negs	r6, r6
	if (blen > 0) {
   1fcfe:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1fd00:	b088      	sub	sp, #32
   1fd02:	4690      	mov	r8, r2
	if (blen > 0) {
   1fd04:	d008      	beq.n	1fd18 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1fd06:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   1fd08:	4633      	mov	r3, r6
   1fd0a:	4639      	mov	r1, r7
   1fd0c:	f7ff fee0 	bl	1fad0 <z_impl_flash_write>
		if (rc) {
   1fd10:	b9b8      	cbnz	r0, 1fd42 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   1fd12:	1ba4      	subs	r4, r4, r6
		offset += blen;
   1fd14:	4437      	add	r7, r6
		data8 += blen;
   1fd16:	44b0      	add	r8, r6
	if (len) {
   1fd18:	b1b4      	cbz	r4, 1fd48 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   1fd1a:	4622      	mov	r2, r4
   1fd1c:	4641      	mov	r1, r8
   1fd1e:	4668      	mov	r0, sp
   1fd20:	f000 fb71 	bl	20406 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1fd24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fd26:	681a      	ldr	r2, [r3, #0]
   1fd28:	7919      	ldrb	r1, [r3, #4]
   1fd2a:	1b12      	subs	r2, r2, r4
   1fd2c:	eb0d 0004 	add.w	r0, sp, r4
   1fd30:	f000 fb74 	bl	2041c <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1fd34:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1fd38:	681b      	ldr	r3, [r3, #0]
   1fd3a:	466a      	mov	r2, sp
   1fd3c:	4639      	mov	r1, r7
   1fd3e:	f7ff fec7 	bl	1fad0 <z_impl_flash_write>
}
   1fd42:	b008      	add	sp, #32
   1fd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   1fd48:	4620      	mov	r0, r4
   1fd4a:	e7fa      	b.n	1fd42 <nvs_flash_al_wrt.part.0+0x60>

0001fd4c <nvs_flash_ate_wrt>:
{
   1fd4c:	b510      	push	{r4, lr}
   1fd4e:	460a      	mov	r2, r1
	if (!len) {
   1fd50:	2308      	movs	r3, #8
   1fd52:	6841      	ldr	r1, [r0, #4]
{
   1fd54:	4604      	mov	r4, r0
   1fd56:	f7ff ffc4 	bl	1fce2 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1fd5a:	2108      	movs	r1, #8
   1fd5c:	4603      	mov	r3, r0
   1fd5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1fd60:	f7ff ff72 	bl	1fc48 <nvs_al_size.isra.0>
   1fd64:	6862      	ldr	r2, [r4, #4]
   1fd66:	1a12      	subs	r2, r2, r0
   1fd68:	6062      	str	r2, [r4, #4]
}
   1fd6a:	4618      	mov	r0, r3
   1fd6c:	bd10      	pop	{r4, pc}

0001fd6e <nvs_add_gc_done_ate>:
{
   1fd6e:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   1fd70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fd74:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   1fd78:	2300      	movs	r3, #0
{
   1fd7a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   1fd7c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1fd80:	6883      	ldr	r3, [r0, #8]
   1fd82:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   1fd86:	4668      	mov	r0, sp
   1fd88:	f7ff ff55 	bl	1fc36 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   1fd8c:	4669      	mov	r1, sp
   1fd8e:	4620      	mov	r0, r4
   1fd90:	f7ff ffdc 	bl	1fd4c <nvs_flash_ate_wrt>
}
   1fd94:	b002      	add	sp, #8
   1fd96:	bd10      	pop	{r4, pc}

0001fd98 <nvs_prev_ate>:
{
   1fd98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fd9a:	4605      	mov	r5, r0
   1fd9c:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fd9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1fda0:	2108      	movs	r1, #8
   1fda2:	f7ff ff51 	bl	1fc48 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1fda6:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fda8:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1fdaa:	2308      	movs	r3, #8
   1fdac:	4628      	mov	r0, r5
   1fdae:	f7ff feae 	bl	1fb0e <nvs_flash_rd>
	if (rc) {
   1fdb2:	4604      	mov	r4, r0
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	d138      	bne.n	1fe2a <nvs_prev_ate+0x92>
	*addr += ate_size;
   1fdb8:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1fdba:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   1fdbc:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1fdbe:	b29a      	uxth	r2, r3
   1fdc0:	1bc7      	subs	r7, r0, r7
   1fdc2:	42ba      	cmp	r2, r7
	*addr += ate_size;
   1fdc4:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1fdc6:	d130      	bne.n	1fe2a <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1fdc8:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1fdca:	bf03      	ittte	eq
   1fdcc:	89e9      	ldrheq	r1, [r5, #14]
   1fdce:	f101 31ff 	addeq.w	r1, r1, #4294967295
   1fdd2:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   1fdd6:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   1fdda:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1fddc:	2308      	movs	r3, #8
   1fdde:	466a      	mov	r2, sp
   1fde0:	4628      	mov	r0, r5
   1fde2:	f7ff fe94 	bl	1fb0e <nvs_flash_rd>
	if (rc) {
   1fde6:	4604      	mov	r4, r0
   1fde8:	b9f8      	cbnz	r0, 1fe2a <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1fdea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1fdec:	466a      	mov	r2, sp
   1fdee:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1fdf0:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1fdf2:	f812 0b01 	ldrb.w	r0, [r2], #1
   1fdf6:	4281      	cmp	r1, r0
   1fdf8:	d10c      	bne.n	1fe14 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1fdfa:	3301      	adds	r3, #1
   1fdfc:	2b08      	cmp	r3, #8
   1fdfe:	d1f8      	bne.n	1fdf2 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   1fe00:	686b      	ldr	r3, [r5, #4]
   1fe02:	e005      	b.n	1fe10 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   1fe04:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   1fe06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   1fe0a:	0c1b      	lsrs	r3, r3, #16
   1fe0c:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   1fe0e:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1fe10:	6033      	str	r3, [r6, #0]
		return 0;
   1fe12:	e00a      	b.n	1fe2a <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1fe14:	4669      	mov	r1, sp
   1fe16:	4628      	mov	r0, r5
   1fe18:	f7ff ff45 	bl	1fca6 <nvs_close_ate_valid>
   1fe1c:	2800      	cmp	r0, #0
   1fe1e:	d1f1      	bne.n	1fe04 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   1fe20:	4631      	mov	r1, r6
   1fe22:	4628      	mov	r0, r5
   1fe24:	f7f2 fbdc 	bl	125e0 <nvs_recover_last_ate>
   1fe28:	4604      	mov	r4, r0
}
   1fe2a:	4620      	mov	r0, r4
   1fe2c:	b003      	add	sp, #12
   1fe2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe30 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   1fe30:	2300      	movs	r3, #0
   1fe32:	461a      	mov	r2, r3
   1fe34:	f7f2 be34 	b.w	12aa0 <nvs_write>

0001fe38 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1fe38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1fe3c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1fe3e:	7c03      	ldrb	r3, [r0, #16]
{
   1fe40:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   1fe44:	4604      	mov	r4, r0
   1fe46:	460f      	mov	r7, r1
   1fe48:	4690      	mov	r8, r2
	if (!fs->ready) {
   1fe4a:	2b00      	cmp	r3, #0
   1fe4c:	d045      	beq.n	1feda <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1fe4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1fe50:	2108      	movs	r1, #8
   1fe52:	f7ff fef9 	bl	1fc48 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   1fe56:	89a3      	ldrh	r3, [r4, #12]
   1fe58:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1fe5c:	429e      	cmp	r6, r3
   1fe5e:	d83f      	bhi.n	1fee0 <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   1fe60:	6863      	ldr	r3, [r4, #4]
   1fe62:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   1fe64:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1fe68:	aa02      	add	r2, sp, #8
   1fe6a:	a901      	add	r1, sp, #4
   1fe6c:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1fe6e:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1fe70:	f7ff ff92 	bl	1fd98 <nvs_prev_ate>
		if (rc) {
   1fe74:	bb38      	cbnz	r0, 1fec6 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1fe76:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fe7a:	42bb      	cmp	r3, r7
   1fe7c:	d108      	bne.n	1fe90 <nvs_read_hist+0x58>
   1fe7e:	a902      	add	r1, sp, #8
   1fe80:	4620      	mov	r0, r4
   1fe82:	f7ff feeb 	bl	1fc5c <nvs_ate_valid>
   1fe86:	b118      	cbz	r0, 1fe90 <nvs_read_hist+0x58>
			cnt_his++;
   1fe88:	f10a 0a01 	add.w	sl, sl, #1
   1fe8c:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   1fe90:	6862      	ldr	r2, [r4, #4]
   1fe92:	9b01      	ldr	r3, [sp, #4]
   1fe94:	429a      	cmp	r2, r3
   1fe96:	d019      	beq.n	1fecc <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   1fe98:	45d1      	cmp	r9, sl
   1fe9a:	d2e5      	bcs.n	1fe68 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1fe9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1fea0:	b1c3      	cbz	r3, 1fed4 <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1fea2:	45d1      	cmp	r9, sl
   1fea4:	d816      	bhi.n	1fed4 <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   1fea6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   1feaa:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1feac:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1feae:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1feb2:	bf28      	it	cs
   1feb4:	4633      	movcs	r3, r6
   1feb6:	4642      	mov	r2, r8
   1feb8:	4429      	add	r1, r5
   1feba:	4620      	mov	r0, r4
   1febc:	f7ff fe27 	bl	1fb0e <nvs_flash_rd>
	if (rc) {
   1fec0:	b908      	cbnz	r0, 1fec6 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   1fec2:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   1fec6:	b004      	add	sp, #16
   1fec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1fecc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fed0:	42bb      	cmp	r3, r7
   1fed2:	d0e3      	beq.n	1fe9c <nvs_read_hist+0x64>
		return -ENOENT;
   1fed4:	f06f 0001 	mvn.w	r0, #1
   1fed8:	e7f5      	b.n	1fec6 <nvs_read_hist+0x8e>
		return -EACCES;
   1feda:	f06f 000c 	mvn.w	r0, #12
   1fede:	e7f2      	b.n	1fec6 <nvs_read_hist+0x8e>
		return -EINVAL;
   1fee0:	f06f 0015 	mvn.w	r0, #21
   1fee4:	e7ef      	b.n	1fec6 <nvs_read_hist+0x8e>

0001fee6 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1fee6:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1fee8:	2400      	movs	r4, #0
   1feea:	9400      	str	r4, [sp, #0]
   1feec:	f7ff ffa4 	bl	1fe38 <nvs_read_hist>
	return rc;
}
   1fef0:	b002      	add	sp, #8
   1fef2:	bd10      	pop	{r4, pc}

0001fef4 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   1fef4:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   1fef6:	b11b      	cbz	r3, 1ff00 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   1fef8:	791b      	ldrb	r3, [r3, #4]
   1fefa:	700b      	strb	r3, [r1, #0]

	return 0;
   1fefc:	2000      	movs	r0, #0
   1fefe:	4770      	bx	lr
		return -ENOSYS;
   1ff00:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   1ff04:	4770      	bx	lr

0001ff06 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   1ff06:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   1ff08:	b130      	cbz	r0, 1ff18 <pm_device_is_busy+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ff0a:	f3bf 8f5b 	dmb	ish
   1ff0e:	6800      	ldr	r0, [r0, #0]
   1ff10:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ff14:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   1ff18:	4770      	bx	lr

0001ff1a <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   1ff1a:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   1ff1c:	b130      	cbz	r0, 1ff2c <pm_device_wakeup_is_enabled+0x12>
   1ff1e:	f3bf 8f5b 	dmb	ish
   1ff22:	6800      	ldr	r0, [r0, #0]
   1ff24:	f3bf 8f5b 	dmb	ish
   1ff28:	f3c0 0080 	ubfx	r0, r0, #2, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   1ff2c:	4770      	bx	lr

0001ff2e <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   1ff2e:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   1ff30:	b130      	cbz	r0, 1ff40 <pm_device_state_is_locked+0x12>
   1ff32:	f3bf 8f5b 	dmb	ish
   1ff36:	6800      	ldr	r0, [r0, #0]
   1ff38:	f3bf 8f5b 	dmb	ish
   1ff3c:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   1ff40:	4770      	bx	lr

0001ff42 <pm_device_action_run>:
{
   1ff42:	b538      	push	{r3, r4, r5, lr}
	struct pm_device *pm = dev->pm;
   1ff44:	6984      	ldr	r4, [r0, #24]
{
   1ff46:	4603      	mov	r3, r0
	if (pm == NULL) {
   1ff48:	b1fc      	cbz	r4, 1ff8a <pm_device_action_run+0x48>
	if (pm_device_state_is_locked(dev)) {
   1ff4a:	f7ff fff0 	bl	1ff2e <pm_device_state_is_locked>
   1ff4e:	b9f8      	cbnz	r0, 1ff90 <pm_device_action_run+0x4e>
	switch (action) {
   1ff50:	2903      	cmp	r1, #3
   1ff52:	d820      	bhi.n	1ff96 <pm_device_action_run+0x54>
   1ff54:	e8df f001 	tbb	[pc, r1]
   1ff58:	02141002 	.word	0x02141002
		if (pm->state == PM_DEVICE_STATE_SUSPENDED) {
   1ff5c:	7922      	ldrb	r2, [r4, #4]
   1ff5e:	2a01      	cmp	r2, #1
   1ff60:	d01c      	beq.n	1ff9c <pm_device_action_run+0x5a>
		} else if (pm->state == PM_DEVICE_STATE_OFF) {
   1ff62:	2a03      	cmp	r2, #3
   1ff64:	d017      	beq.n	1ff96 <pm_device_action_run+0x54>
		state = PM_DEVICE_STATE_SUSPENDED;
   1ff66:	2501      	movs	r5, #1
	ret = pm->action_cb(dev, action);
   1ff68:	68a2      	ldr	r2, [r4, #8]
   1ff6a:	4618      	mov	r0, r3
   1ff6c:	4790      	blx	r2
	if (ret < 0) {
   1ff6e:	2800      	cmp	r0, #0
   1ff70:	db01      	blt.n	1ff76 <pm_device_action_run+0x34>
	pm->state = state;
   1ff72:	7125      	strb	r5, [r4, #4]
	return 0;
   1ff74:	2000      	movs	r0, #0
}
   1ff76:	bd38      	pop	{r3, r4, r5, pc}
		if (pm->state == PM_DEVICE_STATE_ACTIVE) {
   1ff78:	7922      	ldrb	r2, [r4, #4]
   1ff7a:	b17a      	cbz	r2, 1ff9c <pm_device_action_run+0x5a>
		state = PM_DEVICE_STATE_ACTIVE;
   1ff7c:	2500      	movs	r5, #0
   1ff7e:	e7f3      	b.n	1ff68 <pm_device_action_run+0x26>
		if (pm->state == PM_DEVICE_STATE_OFF) {
   1ff80:	7922      	ldrb	r2, [r4, #4]
   1ff82:	2a03      	cmp	r2, #3
   1ff84:	d00a      	beq.n	1ff9c <pm_device_action_run+0x5a>
		state = PM_DEVICE_STATE_OFF;
   1ff86:	2503      	movs	r5, #3
   1ff88:	e7ee      	b.n	1ff68 <pm_device_action_run+0x26>
		return -ENOSYS;
   1ff8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1ff8e:	e7f2      	b.n	1ff76 <pm_device_action_run+0x34>
		return -EPERM;
   1ff90:	f04f 30ff 	mov.w	r0, #4294967295
   1ff94:	e7ef      	b.n	1ff76 <pm_device_action_run+0x34>
			return -ENOTSUP;
   1ff96:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ff9a:	e7ec      	b.n	1ff76 <pm_device_action_run+0x34>
			return -EALREADY;
   1ff9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ffa0:	e7e9      	b.n	1ff76 <pm_device_action_run+0x34>

0001ffa2 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1ffa2:	2200      	movs	r2, #0
   1ffa4:	e9c0 2200 	strd	r2, r2, [r0]
   1ffa8:	6082      	str	r2, [r0, #8]
}
   1ffaa:	4770      	bx	lr

0001ffac <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ffac:	b538      	push	{r3, r4, r5, lr}
   1ffae:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ffb0:	42ab      	cmp	r3, r5
{
   1ffb2:	4611      	mov	r1, r2
   1ffb4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ffb6:	d804      	bhi.n	1ffc2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1ffb8:	461a      	mov	r2, r3
   1ffba:	f000 fa24 	bl	20406 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ffbe:	4620      	mov	r0, r4
   1ffc0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ffc2:	2400      	movs	r4, #0
   1ffc4:	e7fb      	b.n	1ffbe <_copy+0x12>

0001ffc6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1ffc6:	f000 ba29 	b.w	2041c <memset>

0001ffca <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1ffca:	09c3      	lsrs	r3, r0, #7
   1ffcc:	005a      	lsls	r2, r3, #1
   1ffce:	4413      	add	r3, r2
   1ffd0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1ffd4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ffd8:	b2c0      	uxtb	r0, r0
   1ffda:	4770      	bx	lr

0001ffdc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1ffdc:	78cb      	ldrb	r3, [r1, #3]
   1ffde:	7802      	ldrb	r2, [r0, #0]
   1ffe0:	4053      	eors	r3, r2
   1ffe2:	7003      	strb	r3, [r0, #0]
   1ffe4:	884b      	ldrh	r3, [r1, #2]
   1ffe6:	7842      	ldrb	r2, [r0, #1]
   1ffe8:	4053      	eors	r3, r2
   1ffea:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1ffec:	680a      	ldr	r2, [r1, #0]
   1ffee:	7883      	ldrb	r3, [r0, #2]
   1fff0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fff4:	7083      	strb	r3, [r0, #2]
   1fff6:	680a      	ldr	r2, [r1, #0]
   1fff8:	78c3      	ldrb	r3, [r0, #3]
   1fffa:	4053      	eors	r3, r2
   1fffc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fffe:	79cb      	ldrb	r3, [r1, #7]
   20000:	7902      	ldrb	r2, [r0, #4]
   20002:	4053      	eors	r3, r2
   20004:	7103      	strb	r3, [r0, #4]
   20006:	88cb      	ldrh	r3, [r1, #6]
   20008:	7942      	ldrb	r2, [r0, #5]
   2000a:	4053      	eors	r3, r2
   2000c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2000e:	684a      	ldr	r2, [r1, #4]
   20010:	7983      	ldrb	r3, [r0, #6]
   20012:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20016:	7183      	strb	r3, [r0, #6]
   20018:	684a      	ldr	r2, [r1, #4]
   2001a:	79c3      	ldrb	r3, [r0, #7]
   2001c:	4053      	eors	r3, r2
   2001e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20020:	7acb      	ldrb	r3, [r1, #11]
   20022:	7a02      	ldrb	r2, [r0, #8]
   20024:	4053      	eors	r3, r2
   20026:	7203      	strb	r3, [r0, #8]
   20028:	7a42      	ldrb	r2, [r0, #9]
   2002a:	894b      	ldrh	r3, [r1, #10]
   2002c:	4053      	eors	r3, r2
   2002e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20030:	688a      	ldr	r2, [r1, #8]
   20032:	7a83      	ldrb	r3, [r0, #10]
   20034:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20038:	7283      	strb	r3, [r0, #10]
   2003a:	688a      	ldr	r2, [r1, #8]
   2003c:	7ac3      	ldrb	r3, [r0, #11]
   2003e:	4053      	eors	r3, r2
   20040:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   20042:	7bcb      	ldrb	r3, [r1, #15]
   20044:	7b02      	ldrb	r2, [r0, #12]
   20046:	4053      	eors	r3, r2
   20048:	7303      	strb	r3, [r0, #12]
   2004a:	89cb      	ldrh	r3, [r1, #14]
   2004c:	7b42      	ldrb	r2, [r0, #13]
   2004e:	4053      	eors	r3, r2
   20050:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   20052:	68ca      	ldr	r2, [r1, #12]
   20054:	7b83      	ldrb	r3, [r0, #14]
   20056:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2005a:	7383      	strb	r3, [r0, #14]
   2005c:	68ca      	ldr	r2, [r1, #12]
   2005e:	7bc3      	ldrb	r3, [r0, #15]
   20060:	4053      	eors	r3, r2
   20062:	73c3      	strb	r3, [r0, #15]
}
   20064:	4770      	bx	lr

00020066 <shift_rows>:
{
   20066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   20068:	7802      	ldrb	r2, [r0, #0]
   2006a:	f88d 2000 	strb.w	r2, [sp]
   2006e:	7942      	ldrb	r2, [r0, #5]
   20070:	f88d 2001 	strb.w	r2, [sp, #1]
   20074:	7a82      	ldrb	r2, [r0, #10]
   20076:	f88d 2002 	strb.w	r2, [sp, #2]
   2007a:	7bc2      	ldrb	r2, [r0, #15]
   2007c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   20080:	7902      	ldrb	r2, [r0, #4]
   20082:	f88d 2004 	strb.w	r2, [sp, #4]
   20086:	7a42      	ldrb	r2, [r0, #9]
   20088:	f88d 2005 	strb.w	r2, [sp, #5]
   2008c:	7b82      	ldrb	r2, [r0, #14]
   2008e:	f88d 2006 	strb.w	r2, [sp, #6]
   20092:	78c2      	ldrb	r2, [r0, #3]
   20094:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20098:	7a02      	ldrb	r2, [r0, #8]
   2009a:	f88d 2008 	strb.w	r2, [sp, #8]
   2009e:	7b42      	ldrb	r2, [r0, #13]
   200a0:	f88d 2009 	strb.w	r2, [sp, #9]
   200a4:	7882      	ldrb	r2, [r0, #2]
   200a6:	f88d 200a 	strb.w	r2, [sp, #10]
   200aa:	79c2      	ldrb	r2, [r0, #7]
   200ac:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   200b0:	7b02      	ldrb	r2, [r0, #12]
   200b2:	f88d 200c 	strb.w	r2, [sp, #12]
   200b6:	7842      	ldrb	r2, [r0, #1]
   200b8:	7ac3      	ldrb	r3, [r0, #11]
   200ba:	f88d 200d 	strb.w	r2, [sp, #13]
   200be:	7982      	ldrb	r2, [r0, #6]
   200c0:	f88d 200e 	strb.w	r2, [sp, #14]
   200c4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   200c8:	2310      	movs	r3, #16
   200ca:	466a      	mov	r2, sp
   200cc:	4619      	mov	r1, r3
   200ce:	f7ff ff6d 	bl	1ffac <_copy>
}
   200d2:	b005      	add	sp, #20
   200d4:	f85d fb04 	ldr.w	pc, [sp], #4

000200d8 <mult_row_column>:
{
   200d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200da:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   200dc:	7808      	ldrb	r0, [r1, #0]
{
   200de:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   200e0:	f7ff ff73 	bl	1ffca <_double_byte>
   200e4:	4605      	mov	r5, r0
   200e6:	7860      	ldrb	r0, [r4, #1]
   200e8:	f7ff ff6f 	bl	1ffca <_double_byte>
   200ec:	78a2      	ldrb	r2, [r4, #2]
   200ee:	7863      	ldrb	r3, [r4, #1]
   200f0:	4053      	eors	r3, r2
   200f2:	78e2      	ldrb	r2, [r4, #3]
   200f4:	4053      	eors	r3, r2
   200f6:	405d      	eors	r5, r3
   200f8:	4045      	eors	r5, r0
   200fa:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   200fc:	7860      	ldrb	r0, [r4, #1]
   200fe:	7827      	ldrb	r7, [r4, #0]
   20100:	f7ff ff63 	bl	1ffca <_double_byte>
   20104:	4605      	mov	r5, r0
   20106:	78a0      	ldrb	r0, [r4, #2]
   20108:	f7ff ff5f 	bl	1ffca <_double_byte>
   2010c:	78a3      	ldrb	r3, [r4, #2]
   2010e:	405f      	eors	r7, r3
   20110:	78e3      	ldrb	r3, [r4, #3]
   20112:	405f      	eors	r7, r3
   20114:	407d      	eors	r5, r7
   20116:	4045      	eors	r5, r0
   20118:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2011a:	78a0      	ldrb	r0, [r4, #2]
   2011c:	7865      	ldrb	r5, [r4, #1]
   2011e:	7827      	ldrb	r7, [r4, #0]
   20120:	f7ff ff53 	bl	1ffca <_double_byte>
   20124:	406f      	eors	r7, r5
   20126:	4605      	mov	r5, r0
   20128:	78e0      	ldrb	r0, [r4, #3]
   2012a:	f7ff ff4e 	bl	1ffca <_double_byte>
   2012e:	78e3      	ldrb	r3, [r4, #3]
   20130:	405f      	eors	r7, r3
   20132:	407d      	eors	r5, r7
   20134:	4045      	eors	r5, r0
   20136:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   20138:	7820      	ldrb	r0, [r4, #0]
   2013a:	f7ff ff46 	bl	1ffca <_double_byte>
   2013e:	7863      	ldrb	r3, [r4, #1]
   20140:	7825      	ldrb	r5, [r4, #0]
   20142:	405d      	eors	r5, r3
   20144:	78a3      	ldrb	r3, [r4, #2]
   20146:	405d      	eors	r5, r3
   20148:	4045      	eors	r5, r0
   2014a:	78e0      	ldrb	r0, [r4, #3]
   2014c:	f7ff ff3d 	bl	1ffca <_double_byte>
   20150:	b2ed      	uxtb	r5, r5
   20152:	4045      	eors	r5, r0
   20154:	70f5      	strb	r5, [r6, #3]
}
   20156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020158 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20158:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2015a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2015c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2015e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20162:	2b00      	cmp	r3, #0
   20164:	bfb4      	ite	lt
   20166:	2387      	movlt	r3, #135	; 0x87
   20168:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2016a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2016e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   20172:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20174:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   20178:	d002      	beq.n	20180 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2017a:	7813      	ldrb	r3, [r2, #0]
   2017c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2017e:	e7f4      	b.n	2016a <gf_double+0x12>
	}
}
   20180:	bd10      	pop	{r4, pc}

00020182 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   20182:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20184:	b120      	cbz	r0, 20190 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20186:	2258      	movs	r2, #88	; 0x58
   20188:	2100      	movs	r1, #0
   2018a:	f7ff ff1c 	bl	1ffc6 <_set>
   2018e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   20190:	bd08      	pop	{r3, pc}

00020192 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   20192:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20194:	4604      	mov	r4, r0
   20196:	b188      	cbz	r0, 201bc <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   20198:	2210      	movs	r2, #16
   2019a:	2100      	movs	r1, #0
   2019c:	f7ff ff13 	bl	1ffc6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   201a0:	2210      	movs	r2, #16
   201a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   201a6:	2100      	movs	r1, #0
   201a8:	f7ff ff0d 	bl	1ffc6 <_set>
	s->leftover_offset = 0;
   201ac:	2300      	movs	r3, #0
   201ae:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   201b0:	2200      	movs	r2, #0
   201b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   201b6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   201ba:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   201bc:	bd10      	pop	{r4, pc}

000201be <tc_cmac_setup>:
{
   201be:	b570      	push	{r4, r5, r6, lr}
   201c0:	460d      	mov	r5, r1
   201c2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   201c4:	4604      	mov	r4, r0
   201c6:	b310      	cbz	r0, 2020e <tc_cmac_setup+0x50>
   201c8:	b311      	cbz	r1, 20210 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   201ca:	2258      	movs	r2, #88	; 0x58
   201cc:	2100      	movs	r1, #0
   201ce:	f7ff fefa 	bl	1ffc6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   201d2:	4629      	mov	r1, r5
	s->sched = sched;
   201d4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   201d6:	4630      	mov	r0, r6
   201d8:	f7f2 fed0 	bl	12f7c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   201dc:	2210      	movs	r2, #16
   201de:	2100      	movs	r1, #0
   201e0:	4620      	mov	r0, r4
   201e2:	f7ff fef0 	bl	1ffc6 <_set>
	gf_double (s->K1, s->iv);
   201e6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   201ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   201ec:	4621      	mov	r1, r4
   201ee:	4620      	mov	r0, r4
   201f0:	f7f2 ff16 	bl	13020 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   201f4:	4621      	mov	r1, r4
   201f6:	4628      	mov	r0, r5
   201f8:	f7ff ffae 	bl	20158 <gf_double>
	gf_double (s->K2, s->K1);
   201fc:	4629      	mov	r1, r5
   201fe:	f104 0020 	add.w	r0, r4, #32
   20202:	f7ff ffa9 	bl	20158 <gf_double>
	tc_cmac_init(s);
   20206:	4620      	mov	r0, r4
   20208:	f7ff ffc3 	bl	20192 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2020c:	2001      	movs	r0, #1
}
   2020e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20210:	4608      	mov	r0, r1
   20212:	e7fc      	b.n	2020e <tc_cmac_setup+0x50>

00020214 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20218:	460d      	mov	r5, r1
   2021a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2021c:	4604      	mov	r4, r0
   2021e:	2800      	cmp	r0, #0
   20220:	d062      	beq.n	202e8 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20222:	b912      	cbnz	r2, 2022a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20224:	2001      	movs	r0, #1
}
   20226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2022a:	2900      	cmp	r1, #0
   2022c:	d05c      	beq.n	202e8 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2022e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20232:	ea50 0301 	orrs.w	r3, r0, r1
   20236:	d057      	beq.n	202e8 <tc_cmac_update+0xd4>
	s->countdown--;
   20238:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2023c:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   20240:	f141 33ff 	adc.w	r3, r1, #4294967295
   20244:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20248:	f1b8 0f00 	cmp.w	r8, #0
   2024c:	d02a      	beq.n	202a4 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2024e:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20252:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20256:	42be      	cmp	r6, r7
   20258:	4420      	add	r0, r4
   2025a:	d208      	bcs.n	2026e <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2025c:	462a      	mov	r2, r5
   2025e:	4633      	mov	r3, r6
   20260:	4631      	mov	r1, r6
   20262:	f7ff fea3 	bl	1ffac <_copy>
			s->leftover_offset += data_length;
   20266:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20268:	4432      	add	r2, r6
   2026a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2026c:	e7da      	b.n	20224 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2026e:	463b      	mov	r3, r7
   20270:	462a      	mov	r2, r5
   20272:	4639      	mov	r1, r7
   20274:	f7ff fe9a 	bl	1ffac <_copy>
		data_length -= remaining_space;
   20278:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2027a:	2300      	movs	r3, #0
   2027c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2027e:	4446      	add	r6, r8
		data += remaining_space;
   20280:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20282:	1e63      	subs	r3, r4, #1
   20284:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20288:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2028c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20290:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   20292:	ea82 0200 	eor.w	r2, r2, r0
   20296:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20298:	d1f6      	bne.n	20288 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2029a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2029c:	4621      	mov	r1, r4
   2029e:	4620      	mov	r0, r4
   202a0:	f7f2 febe 	bl	13020 <tc_aes_encrypt>
   202a4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   202a8:	2e10      	cmp	r6, #16
   202aa:	d80a      	bhi.n	202c2 <tc_cmac_update+0xae>
	if (data_length > 0) {
   202ac:	2e00      	cmp	r6, #0
   202ae:	d0b9      	beq.n	20224 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   202b0:	4633      	mov	r3, r6
   202b2:	462a      	mov	r2, r5
   202b4:	4631      	mov	r1, r6
   202b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   202ba:	f7ff fe77 	bl	1ffac <_copy>
		s->leftover_offset = data_length;
   202be:	6466      	str	r6, [r4, #68]	; 0x44
   202c0:	e7b0      	b.n	20224 <tc_cmac_update+0x10>
   202c2:	1e63      	subs	r3, r4, #1
   202c4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   202c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   202ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   202ce:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   202d0:	ea82 0200 	eor.w	r2, r2, r0
   202d4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   202d6:	d1f6      	bne.n	202c6 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   202d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   202da:	4621      	mov	r1, r4
   202dc:	4620      	mov	r0, r4
   202de:	f7f2 fe9f 	bl	13020 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   202e2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   202e4:	3e10      	subs	r6, #16
   202e6:	e7df      	b.n	202a8 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   202e8:	2000      	movs	r0, #0
   202ea:	e79c      	b.n	20226 <tc_cmac_update+0x12>

000202ec <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   202ec:	b570      	push	{r4, r5, r6, lr}
   202ee:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   202f0:	4605      	mov	r5, r0
   202f2:	b1e8      	cbz	r0, 20330 <tc_cmac_final+0x44>
   202f4:	b369      	cbz	r1, 20352 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   202f6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   202f8:	2a10      	cmp	r2, #16
   202fa:	d11a      	bne.n	20332 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   202fc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   202fe:	1e63      	subs	r3, r4, #1
   20300:	3901      	subs	r1, #1
   20302:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20306:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2030a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2030e:	4072      	eors	r2, r6
   20310:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20314:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20316:	ea82 0206 	eor.w	r2, r2, r6
   2031a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2031c:	d1f3      	bne.n	20306 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2031e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20320:	4621      	mov	r1, r4
   20322:	4628      	mov	r0, r5
   20324:	f7f2 fe7c 	bl	13020 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20328:	4620      	mov	r0, r4
   2032a:	f7ff ff2a 	bl	20182 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2032e:	2001      	movs	r0, #1
}
   20330:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20332:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20336:	2100      	movs	r1, #0
   20338:	f1c2 0210 	rsb	r2, r2, #16
   2033c:	4420      	add	r0, r4
   2033e:	f7ff fe42 	bl	1ffc6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20342:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20344:	4423      	add	r3, r4
   20346:	2280      	movs	r2, #128	; 0x80
   20348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2034c:	f104 0120 	add.w	r1, r4, #32
   20350:	e7d5      	b.n	202fe <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20352:	4608      	mov	r0, r1
   20354:	e7ec      	b.n	20330 <tc_cmac_final+0x44>

00020356 <abort_function>:
{
   20356:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   20358:	2000      	movs	r0, #0
   2035a:	f7f2 f92d 	bl	125b8 <sys_reboot>

0002035e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2035e:	f003 b89b 	b.w	23498 <z_fatal_error>

00020362 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20362:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   20364:	6800      	ldr	r0, [r0, #0]
   20366:	f003 b897 	b.w	23498 <z_fatal_error>

0002036a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2036a:	2100      	movs	r1, #0
   2036c:	2001      	movs	r0, #1
   2036e:	f7ff bff6 	b.w	2035e <z_arm_fatal_error>

00020372 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   20372:	b508      	push	{r3, lr}
	handler();
   20374:	f7f3 f800 	bl	13378 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2037c:	f7f3 b8dc 	b.w	13538 <z_arm_exc_exit>

00020380 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   20380:	4603      	mov	r3, r0
	size_t n = 0;
   20382:	2000      	movs	r0, #0

	while (*s != '\0') {
   20384:	5c1a      	ldrb	r2, [r3, r0]
   20386:	b902      	cbnz	r2, 2038a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   20388:	4770      	bx	lr
		n++;
   2038a:	3001      	adds	r0, #1
   2038c:	e7fa      	b.n	20384 <strlen+0x4>

0002038e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2038e:	4603      	mov	r3, r0
	size_t n = 0;
   20390:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   20392:	5c1a      	ldrb	r2, [r3, r0]
   20394:	b10a      	cbz	r2, 2039a <strnlen+0xc>
   20396:	4288      	cmp	r0, r1
   20398:	d100      	bne.n	2039c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2039a:	4770      	bx	lr
		n++;
   2039c:	3001      	adds	r0, #1
   2039e:	e7f8      	b.n	20392 <strnlen+0x4>

000203a0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   203a0:	1e43      	subs	r3, r0, #1
   203a2:	3901      	subs	r1, #1
   203a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   203a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   203ac:	4282      	cmp	r2, r0
   203ae:	d101      	bne.n	203b4 <strcmp+0x14>
   203b0:	2a00      	cmp	r2, #0
   203b2:	d1f7      	bne.n	203a4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   203b4:	1a10      	subs	r0, r2, r0
   203b6:	4770      	bx	lr

000203b8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   203b8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   203ba:	b15a      	cbz	r2, 203d4 <memcmp+0x1c>
   203bc:	3901      	subs	r1, #1
   203be:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   203c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   203c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   203c8:	42a0      	cmp	r0, r4
   203ca:	d001      	beq.n	203d0 <memcmp+0x18>
   203cc:	429a      	cmp	r2, r3
   203ce:	d0f7      	beq.n	203c0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   203d0:	1ad0      	subs	r0, r2, r3
}
   203d2:	bd10      	pop	{r4, pc}
		return 0;
   203d4:	4610      	mov	r0, r2
   203d6:	e7fc      	b.n	203d2 <memcmp+0x1a>

000203d8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   203d8:	1a43      	subs	r3, r0, r1
   203da:	4293      	cmp	r3, r2
{
   203dc:	b510      	push	{r4, lr}
   203de:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   203e2:	d308      	bcc.n	203f6 <memmove+0x1e>
   203e4:	3901      	subs	r1, #1
	char *dest = d;
   203e6:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   203e8:	429a      	cmp	r2, r3
   203ea:	d00b      	beq.n	20404 <memmove+0x2c>
			*dest = *src;
   203ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   203f0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   203f4:	e7f8      	b.n	203e8 <memmove+0x10>
   203f6:	440a      	add	r2, r1
			dest[n] = src[n];
   203f8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   203fc:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   20400:	428a      	cmp	r2, r1
   20402:	d1f9      	bne.n	203f8 <memmove+0x20>
		}
	}

	return d;
}
   20404:	bd10      	pop	{r4, pc}

00020406 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   20406:	b510      	push	{r4, lr}
   20408:	1e43      	subs	r3, r0, #1
   2040a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2040c:	4291      	cmp	r1, r2
   2040e:	d100      	bne.n	20412 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   20410:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   20412:	f811 4b01 	ldrb.w	r4, [r1], #1
   20416:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2041a:	e7f7      	b.n	2040c <memcpy+0x6>

0002041c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2041c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2041e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   20420:	4603      	mov	r3, r0
	while (n > 0) {
   20422:	4293      	cmp	r3, r2
   20424:	d100      	bne.n	20428 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   20426:	4770      	bx	lr
		*(d_byte++) = c_byte;
   20428:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2042c:	e7f9      	b.n	20422 <memset+0x6>

0002042e <smf_set_initial>:
	struct internal_ctx * const internal = (void *) &ctx->internal;

	internal->exit = false;
	internal->terminate = false;
	ctx->current = init_state;
	ctx->previous = NULL;
   2042e:	2200      	movs	r2, #0
	ctx->terminate_val = 0;
   20430:	e9c0 2201 	strd	r2, r2, [r0, #4]
	internal->terminate = false;
   20434:	7b02      	ldrb	r2, [r0, #12]
			return;
		}
	}

	/* Now execute the initial state's entry action */
	if (init_state->entry) {
   20436:	680b      	ldr	r3, [r1, #0]
	ctx->current = init_state;
   20438:	6001      	str	r1, [r0, #0]
	internal->terminate = false;
   2043a:	f022 0206 	bic.w	r2, r2, #6
   2043e:	7302      	strb	r2, [r0, #12]
	if (init_state->entry) {
   20440:	b103      	cbz	r3, 20444 <smf_set_initial+0x16>
		init_state->entry(ctx);
   20442:	4718      	bx	r3
	}
}
   20444:	4770      	bx	lr

00020446 <smf_set_state>:
	/*
	 * It does not make sense to call set_state in an exit phase of a state
	 * since we are already in a transition; we would always ignore the
	 * intended state to transition into.
	 */
	if (internal->exit) {
   20446:	7b03      	ldrb	r3, [r0, #12]
   20448:	075a      	lsls	r2, r3, #29
{
   2044a:	b570      	push	{r4, r5, r6, lr}
   2044c:	4604      	mov	r4, r0
   2044e:	460d      	mov	r5, r1
	if (internal->exit) {
   20450:	d40e      	bmi.n	20470 <smf_set_state+0x2a>
		LOG_WRN("Calling %s from exit action", __func__);
		return;
	}

	internal->exit = true;
   20452:	f043 0304 	orr.w	r3, r3, #4
   20456:	7303      	strb	r3, [r0, #12]

	/* Execute the current states exit action */
	if (ctx->current->exit) {
   20458:	6803      	ldr	r3, [r0, #0]
   2045a:	689b      	ldr	r3, [r3, #8]
   2045c:	b94b      	cbnz	r3, 20472 <smf_set_state+0x2c>
		if (smf_execute_ancestor_exit_actions(ctx, target)) {
			return;
		}
	}

	internal->exit = false;
   2045e:	7b23      	ldrb	r3, [r4, #12]
   20460:	f36f 0382 	bfc	r3, #2, #1
   20464:	7323      	strb	r3, [r4, #12]

	/* update the state variables */
	ctx->previous = ctx->current;
   20466:	6823      	ldr	r3, [r4, #0]
	ctx->current = target;
   20468:	e9c4 5300 	strd	r5, r3, [r4]
			return;
		}
	}

	/* Now execute the target entry action */
	if (ctx->current->entry) {
   2046c:	682b      	ldr	r3, [r5, #0]
   2046e:	b92b      	cbnz	r3, 2047c <smf_set_state+0x36>
		/*
		 * If terminate was set, it will be handled in the
		 * smf_run_state function
		 */
	}
}
   20470:	bd70      	pop	{r4, r5, r6, pc}
		ctx->current->exit(ctx);
   20472:	4798      	blx	r3
		if (internal->terminate) {
   20474:	7b23      	ldrb	r3, [r4, #12]
   20476:	079b      	lsls	r3, r3, #30
   20478:	d5f1      	bpl.n	2045e <smf_set_state+0x18>
   2047a:	e7f9      	b.n	20470 <smf_set_state+0x2a>
		ctx->current->entry(ctx);
   2047c:	4620      	mov	r0, r4
}
   2047e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ctx->current->entry(ctx);
   20482:	4718      	bx	r3

00020484 <smf_run_state>:
int32_t smf_run_state(struct smf_ctx *const ctx)
{
	struct internal_ctx * const internal = (void *) &ctx->internal;

	/* No need to continue if terminate was set */
	if (internal->terminate) {
   20484:	7b03      	ldrb	r3, [r0, #12]
{
   20486:	b510      	push	{r4, lr}
	if (internal->terminate) {
   20488:	f013 0402 	ands.w	r4, r3, #2
   2048c:	d001      	beq.n	20492 <smf_run_state+0xe>
		return ctx->terminate_val;
   2048e:	6880      	ldr	r0, [r0, #8]
			return ctx->terminate_val;
		}
	}

	return 0;
}
   20490:	bd10      	pop	{r4, pc}
	if (ctx->current->run) {
   20492:	6803      	ldr	r3, [r0, #0]
   20494:	685b      	ldr	r3, [r3, #4]
   20496:	b113      	cbz	r3, 2049e <smf_run_state+0x1a>
		ctx->current->run(ctx);
   20498:	4798      	blx	r3
	return 0;
   2049a:	4620      	mov	r0, r4
   2049c:	e7f8      	b.n	20490 <smf_run_state+0xc>
   2049e:	4618      	mov	r0, r3
   204a0:	e7f6      	b.n	20490 <smf_run_state+0xc>

000204a2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   204a2:	b084      	sub	sp, #16
   204a4:	ab04      	add	r3, sp, #16
   204a6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   204aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   204ae:	2b06      	cmp	r3, #6
   204b0:	d108      	bne.n	204c4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   204b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   204b6:	2201      	movs	r2, #1
   204b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   204bc:	f3bf 8f4f 	dsb	sy
        __WFE();
   204c0:	bf20      	wfe
    while (true)
   204c2:	e7fd      	b.n	204c0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   204c4:	b004      	add	sp, #16
   204c6:	4770      	bx	lr

000204c8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   204c8:	b084      	sub	sp, #16
   204ca:	ab04      	add	r3, sp, #16
   204cc:	e903 0007 	stmdb	r3, {r0, r1, r2}
   204d0:	2300      	movs	r3, #0
   204d2:	f383 8811 	msr	BASEPRI, r3
   204d6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   204da:	b004      	add	sp, #16
   204dc:	4770      	bx	lr

000204de <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   204de:	b510      	push	{r4, lr}
   204e0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   204e2:	7801      	ldrb	r1, [r0, #0]
   204e4:	7822      	ldrb	r2, [r4, #0]
   204e6:	428a      	cmp	r2, r1
{
   204e8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   204ea:	d00e      	beq.n	2050a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   204ec:	4669      	mov	r1, sp
   204ee:	f7f3 fb03 	bl	13af8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   204f2:	a905      	add	r1, sp, #20
   204f4:	4620      	mov	r0, r4
   204f6:	f7f3 faff 	bl	13af8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   204fa:	2210      	movs	r2, #16
   204fc:	f10d 0115 	add.w	r1, sp, #21
   20500:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20504:	f7ff ff58 	bl	203b8 <memcmp>
   20508:	e007      	b.n	2051a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2050a:	2a01      	cmp	r2, #1
   2050c:	d007      	beq.n	2051e <bt_uuid_cmp+0x40>
   2050e:	2a02      	cmp	r2, #2
   20510:	d008      	beq.n	20524 <bt_uuid_cmp+0x46>
   20512:	b95a      	cbnz	r2, 2052c <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20514:	8840      	ldrh	r0, [r0, #2]
   20516:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20518:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   2051a:	b00a      	add	sp, #40	; 0x28
   2051c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2051e:	6840      	ldr	r0, [r0, #4]
   20520:	6863      	ldr	r3, [r4, #4]
   20522:	e7f9      	b.n	20518 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20524:	2210      	movs	r2, #16
   20526:	1c61      	adds	r1, r4, #1
   20528:	3001      	adds	r0, #1
   2052a:	e7eb      	b.n	20504 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2052c:	f06f 0015 	mvn.w	r0, #21
   20530:	e7f3      	b.n	2051a <bt_uuid_cmp+0x3c>

00020532 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20532:	2a04      	cmp	r2, #4
{
   20534:	b538      	push	{r3, r4, r5, lr}
   20536:	460c      	mov	r4, r1
	switch (data_len) {
   20538:	d00d      	beq.n	20556 <bt_uuid_create+0x24>
   2053a:	2a10      	cmp	r2, #16
   2053c:	d019      	beq.n	20572 <bt_uuid_create+0x40>
   2053e:	2a02      	cmp	r2, #2
   20540:	f04f 0300 	mov.w	r3, #0
   20544:	d11b      	bne.n	2057e <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   20546:	7003      	strb	r3, [r0, #0]
   20548:	784a      	ldrb	r2, [r1, #1]
   2054a:	780b      	ldrb	r3, [r1, #0]
   2054c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   20550:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   20552:	2001      	movs	r0, #1
}
   20554:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   20556:	2301      	movs	r3, #1
   20558:	7003      	strb	r3, [r0, #0]
   2055a:	78a2      	ldrb	r2, [r4, #2]
   2055c:	78c9      	ldrb	r1, [r1, #3]
   2055e:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20560:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   20564:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   20566:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2056e:	6042      	str	r2, [r0, #4]
		break;
   20570:	e7ef      	b.n	20552 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   20572:	2302      	movs	r3, #2
   20574:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   20578:	f7ff ff45 	bl	20406 <memcpy>
		break;
   2057c:	e7e9      	b.n	20552 <bt_uuid_create+0x20>
	switch (data_len) {
   2057e:	4618      	mov	r0, r3
   20580:	e7e8      	b.n	20554 <bt_uuid_create+0x22>

00020582 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   20582:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   20584:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   20586:	2106      	movs	r1, #6
{
   20588:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2058a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2058e:	f7f9 f995 	bl	198bc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   20592:	b918      	cbnz	r0, 2059c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   20594:	79a3      	ldrb	r3, [r4, #6]
   20596:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2059a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2059c:	bd10      	pop	{r4, pc}

0002059e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2059e:	280f      	cmp	r0, #15
   205a0:	d806      	bhi.n	205b0 <bt_hci_evt_get_flags+0x12>
   205a2:	280d      	cmp	r0, #13
   205a4:	d80b      	bhi.n	205be <bt_hci_evt_get_flags+0x20>
   205a6:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   205a8:	bf14      	ite	ne
   205aa:	2002      	movne	r0, #2
   205ac:	2003      	moveq	r0, #3
   205ae:	4770      	bx	lr
	switch (evt) {
   205b0:	2813      	cmp	r0, #19
   205b2:	d004      	beq.n	205be <bt_hci_evt_get_flags+0x20>
   205b4:	281a      	cmp	r0, #26
   205b6:	bf14      	ite	ne
   205b8:	2002      	movne	r0, #2
   205ba:	2001      	moveq	r0, #1
   205bc:	4770      	bx	lr
   205be:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   205c0:	4770      	bx	lr

000205c2 <handle_event>:
{
   205c2:	b410      	push	{r4}
   205c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   205c8:	4604      	mov	r4, r0
   205ca:	4608      	mov	r0, r1
		if (handler->event != event) {
   205cc:	7811      	ldrb	r1, [r2, #0]
   205ce:	42a1      	cmp	r1, r4
   205d0:	d004      	beq.n	205dc <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   205d2:	3208      	adds	r2, #8
   205d4:	429a      	cmp	r2, r3
   205d6:	d1f9      	bne.n	205cc <handle_event+0xa>
}
   205d8:	bc10      	pop	{r4}
   205da:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   205dc:	8981      	ldrh	r1, [r0, #12]
   205de:	7853      	ldrb	r3, [r2, #1]
   205e0:	4299      	cmp	r1, r3
   205e2:	d3f9      	bcc.n	205d8 <handle_event+0x16>
		handler->handler(buf);
   205e4:	6853      	ldr	r3, [r2, #4]
}
   205e6:	bc10      	pop	{r4}
		handler->handler(buf);
   205e8:	4718      	bx	r3

000205ea <hci_data_buf_overflow>:
}
   205ea:	4770      	bx	lr

000205ec <hci_disconn_complete>:
{
   205ec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   205ee:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   205f0:	782e      	ldrb	r6, [r5, #0]
   205f2:	b97e      	cbnz	r6, 20614 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   205f4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   205f8:	f7f4 ffd0 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   205fc:	4604      	mov	r4, r0
   205fe:	b148      	cbz	r0, 20614 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   20600:	78eb      	ldrb	r3, [r5, #3]
   20602:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20604:	4631      	mov	r1, r6
   20606:	f7f4 ffd5 	bl	155b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2060a:	4620      	mov	r0, r4
}
   2060c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   20610:	f000 bc5f 	b.w	20ed2 <bt_conn_unref>
}
   20614:	bd70      	pop	{r4, r5, r6, pc}

00020616 <le_data_len_change>:
{
   20616:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20618:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2061a:	8818      	ldrh	r0, [r3, #0]
   2061c:	f7f4 ffbe 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   20620:	b118      	cbz	r0, 2062a <le_data_len_change+0x14>
}
   20622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20626:	f000 bc54 	b.w	20ed2 <bt_conn_unref>
}
   2062a:	bd08      	pop	{r3, pc}

0002062c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   2062c:	2101      	movs	r1, #1
   2062e:	3008      	adds	r0, #8
   20630:	f001 bea6 	b.w	22380 <net_buf_simple_pull_mem>

00020634 <hci_vendor_event>:
   20634:	4770      	bx	lr

00020636 <hci_num_completed_packets>:
{
   20636:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   2063a:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   2063c:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   2063e:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   20640:	783b      	ldrb	r3, [r7, #0]
   20642:	429d      	cmp	r5, r3
   20644:	db01      	blt.n	2064a <hci_num_completed_packets+0x14>
}
   20646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   2064a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   2064e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   20652:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   20656:	f7f4 ffa1 	bl	1559c <bt_conn_lookup_handle>
		if (!conn) {
   2065a:	4604      	mov	r4, r0
   2065c:	b350      	cbz	r0, 206b4 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   2065e:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   20662:	b326      	cbz	r6, 206ae <hci_num_completed_packets+0x78>
	__asm__ volatile(
   20664:	f04f 0340 	mov.w	r3, #64	; 0x40
   20668:	f3ef 8211 	mrs	r2, BASEPRI
   2066c:	f383 8812 	msr	BASEPRI_MAX, r3
   20670:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   20674:	69e3      	ldr	r3, [r4, #28]
   20676:	b16b      	cbz	r3, 20694 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   20678:	3b01      	subs	r3, #1
   2067a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2067c:	f382 8811 	msr	BASEPRI, r2
   20680:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   20684:	4620      	mov	r0, r4
   20686:	f7f4 fedd 	bl	15444 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   2068a:	3e01      	subs	r6, #1
   2068c:	f7fb f98e 	bl	1b9ac <z_impl_k_sem_give>
   20690:	b2b6      	uxth	r6, r6
   20692:	e7e6      	b.n	20662 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   20694:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   20696:	b12b      	cbz	r3, 206a4 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20698:	69a1      	ldr	r1, [r4, #24]
   2069a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   2069c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2069e:	428b      	cmp	r3, r1
	list->tail = node;
   206a0:	bf08      	it	eq
   206a2:	61a0      	streq	r0, [r4, #24]
   206a4:	f382 8811 	msr	BASEPRI, r2
   206a8:	f3bf 8f6f 	isb	sy
			if (!node) {
   206ac:	b923      	cbnz	r3, 206b8 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   206ae:	4620      	mov	r0, r4
   206b0:	f000 fc0f 	bl	20ed2 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   206b4:	3501      	adds	r5, #1
   206b6:	e7c3      	b.n	20640 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   206b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   206bc:	f3ef 8111 	mrs	r1, BASEPRI
   206c0:	f382 8812 	msr	BASEPRI_MAX, r2
   206c4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   206c8:	68da      	ldr	r2, [r3, #12]
   206ca:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   206cc:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   206d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   206d2:	f8c3 800c 	str.w	r8, [r3, #12]
   206d6:	b94a      	cbnz	r2, 206ec <hci_num_completed_packets+0xb6>
	list->head = node;
   206d8:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   206dc:	f381 8811 	msr	BASEPRI, r1
   206e0:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   206e4:	4648      	mov	r0, r9
   206e6:	f7fb faf9 	bl	1bcdc <k_work_submit>
   206ea:	e7cb      	b.n	20684 <hci_num_completed_packets+0x4e>
	parent->next = child;
   206ec:	6013      	str	r3, [r2, #0]
	list->tail = node;
   206ee:	6263      	str	r3, [r4, #36]	; 0x24
}
   206f0:	e7f4      	b.n	206dc <hci_num_completed_packets+0xa6>

000206f2 <le_conn_update_complete>:
{
   206f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   206f4:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   206f6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   206fa:	f7f4 ff4f 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   206fe:	4604      	mov	r4, r0
   20700:	b1c0      	cbz	r0, 20734 <le_conn_update_complete+0x42>
	if (!evt->status) {
   20702:	782b      	ldrb	r3, [r5, #0]
   20704:	b9c3      	cbnz	r3, 20738 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   20706:	792a      	ldrb	r2, [r5, #4]
   20708:	78eb      	ldrb	r3, [r5, #3]
   2070a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2070e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   20712:	79aa      	ldrb	r2, [r5, #6]
   20714:	796b      	ldrb	r3, [r5, #5]
   20716:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2071a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2071e:	79eb      	ldrb	r3, [r5, #7]
   20720:	7a2a      	ldrb	r2, [r5, #8]
   20722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20726:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   2072a:	f7f5 f809 	bl	15740 <notify_le_param_updated>
	bt_conn_unref(conn);
   2072e:	4620      	mov	r0, r4
   20730:	f000 fbcf 	bl	20ed2 <bt_conn_unref>
}
   20734:	b003      	add	sp, #12
   20736:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20738:	2b1a      	cmp	r3, #26
   2073a:	d1f8      	bne.n	2072e <le_conn_update_complete+0x3c>
   2073c:	78c3      	ldrb	r3, [r0, #3]
   2073e:	2b01      	cmp	r3, #1
   20740:	d1f5      	bne.n	2072e <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20742:	f3bf 8f5b 	dmb	ish
   20746:	1d03      	adds	r3, r0, #4
   20748:	e853 2f00 	ldrex	r2, [r3]
   2074c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   20750:	e843 1500 	strex	r5, r1, [r3]
   20754:	2d00      	cmp	r5, #0
   20756:	d1f7      	bne.n	20748 <le_conn_update_complete+0x56>
   20758:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2075c:	0553      	lsls	r3, r2, #21
   2075e:	d4e6      	bmi.n	2072e <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   20760:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   20764:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   20766:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   20768:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2076c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2076e:	f7f5 fac1 	bl	15cf4 <bt_l2cap_update_conn_param>
   20772:	e7dc      	b.n	2072e <le_conn_update_complete+0x3c>

00020774 <hci_le_read_max_data_len>:
{
   20774:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20776:	4606      	mov	r6, r0
   20778:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   2077a:	aa01      	add	r2, sp, #4
   2077c:	2100      	movs	r1, #0
   2077e:	f242 002f 	movw	r0, #8239	; 0x202f
   20782:	f7f3 fc03 	bl	13f8c <bt_hci_cmd_send_sync>
	if (err) {
   20786:	4604      	mov	r4, r0
   20788:	b948      	cbnz	r0, 2079e <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   2078a:	9801      	ldr	r0, [sp, #4]
   2078c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   2078e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20792:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   20794:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   20798:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   2079a:	f7f6 fd39 	bl	17210 <net_buf_unref>
}
   2079e:	4620      	mov	r0, r4
   207a0:	b002      	add	sp, #8
   207a2:	bd70      	pop	{r4, r5, r6, pc}

000207a4 <bt_hci_disconnect>:
{
   207a4:	b570      	push	{r4, r5, r6, lr}
   207a6:	4606      	mov	r6, r0
   207a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   207aa:	f240 4006 	movw	r0, #1030	; 0x406
   207ae:	2103      	movs	r1, #3
   207b0:	f7f3 fbb4 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   207b4:	4604      	mov	r4, r0
   207b6:	b168      	cbz	r0, 207d4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   207b8:	2103      	movs	r1, #3
   207ba:	3008      	adds	r0, #8
   207bc:	f001 fdb9 	bl	22332 <net_buf_simple_add>
	disconn->reason = reason;
   207c0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   207c2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   207c4:	4621      	mov	r1, r4
   207c6:	2200      	movs	r2, #0
}
   207c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   207cc:	f240 4006 	movw	r0, #1030	; 0x406
   207d0:	f7f3 bbdc 	b.w	13f8c <bt_hci_cmd_send_sync>
}
   207d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   207d8:	bd70      	pop	{r4, r5, r6, pc}

000207da <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   207da:	8802      	ldrh	r2, [r0, #0]
   207dc:	8843      	ldrh	r3, [r0, #2]
   207de:	429a      	cmp	r2, r3
{
   207e0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   207e2:	d818      	bhi.n	20816 <bt_le_conn_params_valid+0x3c>
   207e4:	2a05      	cmp	r2, #5
   207e6:	d916      	bls.n	20816 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   207e8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   207ec:	d813      	bhi.n	20816 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   207ee:	8884      	ldrh	r4, [r0, #4]
   207f0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   207f4:	d20f      	bcs.n	20816 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   207f6:	88c1      	ldrh	r1, [r0, #6]
   207f8:	f1a1 020a 	sub.w	r2, r1, #10
   207fc:	b292      	uxth	r2, r2
   207fe:	f640 4076 	movw	r0, #3190	; 0xc76
   20802:	4282      	cmp	r2, r0
   20804:	d807      	bhi.n	20816 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   20806:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2080a:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2080e:	bf34      	ite	cc
   20810:	2001      	movcc	r0, #1
   20812:	2000      	movcs	r0, #0
}
   20814:	bd10      	pop	{r4, pc}
		return false;
   20816:	2000      	movs	r0, #0
   20818:	e7fc      	b.n	20814 <bt_le_conn_params_valid+0x3a>

0002081a <bt_le_set_data_len>:
{
   2081a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2081c:	4607      	mov	r7, r0
   2081e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20820:	f242 0022 	movw	r0, #8226	; 0x2022
   20824:	2106      	movs	r1, #6
{
   20826:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20828:	f7f3 fb78 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   2082c:	4604      	mov	r4, r0
   2082e:	b170      	cbz	r0, 2084e <bt_le_set_data_len+0x34>
   20830:	2106      	movs	r1, #6
   20832:	3008      	adds	r0, #8
   20834:	f001 fd7d 	bl	22332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20838:	883b      	ldrh	r3, [r7, #0]
   2083a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2083c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2083e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20840:	4621      	mov	r1, r4
   20842:	f242 0022 	movw	r0, #8226	; 0x2022
}
   20846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2084a:	f7f3 bdd5 	b.w	143f8 <bt_hci_cmd_send>
}
   2084e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020854 <bt_le_set_phy>:
{
   20854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20858:	4680      	mov	r8, r0
   2085a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2085c:	f242 0032 	movw	r0, #8242	; 0x2032
   20860:	2107      	movs	r1, #7
{
   20862:	f89d 9020 	ldrb.w	r9, [sp, #32]
   20866:	4616      	mov	r6, r2
   20868:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2086a:	f7f3 fb57 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   2086e:	4604      	mov	r4, r0
   20870:	b190      	cbz	r0, 20898 <bt_le_set_phy+0x44>
   20872:	2107      	movs	r1, #7
   20874:	3008      	adds	r0, #8
   20876:	f001 fd5c 	bl	22332 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2087a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2087e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20880:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20882:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20884:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   20886:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2088a:	4621      	mov	r1, r4
   2088c:	f242 0032 	movw	r0, #8242	; 0x2032
}
   20890:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20894:	f7f3 bdb0 	b.w	143f8 <bt_hci_cmd_send>
}
   20898:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2089c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000208a0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   208a0:	6880      	ldr	r0, [r0, #8]
   208a2:	f7f3 be31 	b.w	14508 <bt_hci_le_enh_conn_complete>

000208a6 <le_legacy_conn_complete>:
{
   208a6:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   208a8:	6881      	ldr	r1, [r0, #8]
{
   208aa:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   208ac:	780b      	ldrb	r3, [r1, #0]
   208ae:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   208b2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   208b6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   208ba:	78cb      	ldrb	r3, [r1, #3]
   208bc:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   208c0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   208c4:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   208c8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   208cc:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   208d0:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   208d4:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   208d8:	7c4b      	ldrb	r3, [r1, #17]
   208da:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   208de:	2207      	movs	r2, #7
   208e0:	3104      	adds	r1, #4
   208e2:	a803      	add	r0, sp, #12
   208e4:	f7ff fd8f 	bl	20406 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   208e8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   208ea:	4669      	mov	r1, sp
   208ec:	2206      	movs	r2, #6
   208ee:	f10d 0013 	add.w	r0, sp, #19
   208f2:	9400      	str	r4, [sp, #0]
   208f4:	f8ad 4004 	strh.w	r4, [sp, #4]
   208f8:	f7ff fd85 	bl	20406 <memcpy>
   208fc:	2206      	movs	r2, #6
   208fe:	4669      	mov	r1, sp
   20900:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20904:	9400      	str	r4, [sp, #0]
   20906:	f8ad 4004 	strh.w	r4, [sp, #4]
   2090a:	f7ff fd7c 	bl	20406 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   2090e:	a802      	add	r0, sp, #8
   20910:	f7f3 fdfa 	bl	14508 <bt_hci_le_enh_conn_complete>
}
   20914:	b00a      	add	sp, #40	; 0x28
   20916:	bd10      	pop	{r4, pc}

00020918 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20918:	6883      	ldr	r3, [r0, #8]
{
   2091a:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   2091c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20920:	f7f4 fe3c 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   20924:	4604      	mov	r4, r0
   20926:	b310      	cbz	r0, 2096e <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20928:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   2092c:	1d03      	adds	r3, r0, #4
   2092e:	e853 2f00 	ldrex	r2, [r3]
   20932:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   20936:	e843 1c00 	strex	ip, r1, [r3]
   2093a:	f1bc 0f00 	cmp.w	ip, #0
   2093e:	d1f6      	bne.n	2092e <le_phy_update_complete+0x16>
   20940:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   20944:	0612      	lsls	r2, r2, #24
   20946:	d50d      	bpl.n	20964 <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20948:	f3bf 8f5b 	dmb	ish
   2094c:	e853 2f00 	ldrex	r2, [r3]
   20950:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   20954:	e843 2100 	strex	r1, r2, [r3]
   20958:	2900      	cmp	r1, #0
   2095a:	d1f7      	bne.n	2094c <le_phy_update_complete+0x34>
   2095c:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   20960:	f7f3 fd6c 	bl	1443c <conn_auto_initiate>
	bt_conn_unref(conn);
   20964:	4620      	mov	r0, r4
}
   20966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   2096a:	f000 bab2 	b.w	20ed2 <bt_conn_unref>
}
   2096e:	bd10      	pop	{r4, pc}

00020970 <le_remote_feat_complete>:
{
   20970:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   20972:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20974:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20978:	f7f4 fe10 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   2097c:	4604      	mov	r4, r0
   2097e:	b1d8      	cbz	r0, 209b8 <le_remote_feat_complete+0x48>
	if (!evt->status) {
   20980:	782b      	ldrb	r3, [r5, #0]
   20982:	b923      	cbnz	r3, 2098e <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   20984:	2208      	movs	r2, #8
   20986:	1ce9      	adds	r1, r5, #3
   20988:	30ac      	adds	r0, #172	; 0xac
   2098a:	f7ff fd3c 	bl	20406 <memcpy>
   2098e:	f3bf 8f5b 	dmb	ish
   20992:	1d23      	adds	r3, r4, #4
   20994:	e853 2f00 	ldrex	r2, [r3]
   20998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2099c:	e843 2100 	strex	r1, r2, [r3]
   209a0:	2900      	cmp	r1, #0
   209a2:	d1f7      	bne.n	20994 <le_remote_feat_complete+0x24>
   209a4:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   209a8:	4620      	mov	r0, r4
   209aa:	f7f3 fd47 	bl	1443c <conn_auto_initiate>
	bt_conn_unref(conn);
   209ae:	4620      	mov	r0, r4
}
   209b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   209b4:	f000 ba8d 	b.w	20ed2 <bt_conn_unref>
}
   209b8:	bd38      	pop	{r3, r4, r5, pc}

000209ba <le_conn_param_neg_reply>:
{
   209ba:	b570      	push	{r4, r5, r6, lr}
   209bc:	4606      	mov	r6, r0
   209be:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   209c0:	f242 0021 	movw	r0, #8225	; 0x2021
   209c4:	2103      	movs	r1, #3
   209c6:	f7f3 faa9 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   209ca:	4604      	mov	r4, r0
   209cc:	b160      	cbz	r0, 209e8 <le_conn_param_neg_reply+0x2e>
   209ce:	2103      	movs	r1, #3
   209d0:	3008      	adds	r0, #8
   209d2:	f001 fcae 	bl	22332 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   209d6:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   209d8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   209da:	4621      	mov	r1, r4
   209dc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   209e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   209e4:	f7f3 bd08 	b.w	143f8 <bt_hci_cmd_send>
}
   209e8:	bd70      	pop	{r4, r5, r6, pc}

000209ea <le_conn_param_req>:
{
   209ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   209ec:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   209ee:	78d9      	ldrb	r1, [r3, #3]
   209f0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   209f2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   209f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   209f8:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   209fc:	7959      	ldrb	r1, [r3, #5]
   209fe:	791a      	ldrb	r2, [r3, #4]
   20a00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20a04:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20a08:	799a      	ldrb	r2, [r3, #6]
   20a0a:	79d9      	ldrb	r1, [r3, #7]
   20a0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20a10:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20a14:	7a1a      	ldrb	r2, [r3, #8]
   20a16:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20a18:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20a1a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   20a1e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20a20:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20a24:	f7f4 fdba 	bl	1559c <bt_conn_lookup_handle>
	if (!conn) {
   20a28:	4606      	mov	r6, r0
   20a2a:	b928      	cbnz	r0, 20a38 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20a2c:	2102      	movs	r1, #2
   20a2e:	4620      	mov	r0, r4
   20a30:	f7ff ffc3 	bl	209ba <le_conn_param_neg_reply>
}
   20a34:	b003      	add	sp, #12
   20a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20a38:	4669      	mov	r1, sp
   20a3a:	f7f4 fecd 	bl	157d8 <le_param_req>
   20a3e:	b938      	cbnz	r0, 20a50 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20a40:	211e      	movs	r1, #30
   20a42:	4620      	mov	r0, r4
   20a44:	f7ff ffb9 	bl	209ba <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20a48:	4630      	mov	r0, r6
   20a4a:	f000 fa42 	bl	20ed2 <bt_conn_unref>
   20a4e:	e7f1      	b.n	20a34 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20a50:	210e      	movs	r1, #14
   20a52:	f242 0020 	movw	r0, #8224	; 0x2020
   20a56:	f7f3 fa61 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   20a5a:	4605      	mov	r5, r0
   20a5c:	2800      	cmp	r0, #0
   20a5e:	d0f3      	beq.n	20a48 <le_conn_param_req+0x5e>
   20a60:	210e      	movs	r1, #14
   20a62:	3008      	adds	r0, #8
   20a64:	f001 fc65 	bl	22332 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   20a68:	220e      	movs	r2, #14
   20a6a:	4604      	mov	r4, r0
   20a6c:	2100      	movs	r1, #0
   20a6e:	f7ff fcd5 	bl	2041c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20a72:	f8bd 3000 	ldrh.w	r3, [sp]
   20a76:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20a78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20a7c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20a7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20a82:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20a84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   20a88:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20a8a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20a8c:	4629      	mov	r1, r5
   20a8e:	f242 0020 	movw	r0, #8224	; 0x2020
   20a92:	f7f3 fcb1 	bl	143f8 <bt_hci_cmd_send>
   20a96:	e7d7      	b.n	20a48 <le_conn_param_req+0x5e>

00020a98 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20a98:	2000      	movs	r0, #0
   20a9a:	4770      	bx	lr

00020a9c <bt_lookup_id_addr>:
}
   20a9c:	4608      	mov	r0, r1
   20a9e:	4770      	bx	lr

00020aa0 <bt_id_set_adv_private_addr>:
{
   20aa0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20aa2:	2106      	movs	r1, #6
   20aa4:	4668      	mov	r0, sp
   20aa6:	f7f8 ff09 	bl	198bc <bt_rand>
	if (err) {
   20aaa:	b940      	cbnz	r0, 20abe <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20aac:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20ab0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20ab6:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20aba:	f7f3 ffdd 	bl	14a78 <set_random_address>
}
   20abe:	b003      	add	sp, #12
   20ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00020ac4 <bt_id_adv_random_addr_check>:
}
   20ac4:	2001      	movs	r0, #1
   20ac6:	4770      	bx	lr

00020ac8 <get_adv_channel_map>:
{
   20ac8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20aca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20ace:	bf0c      	ite	eq
   20ad0:	2007      	moveq	r0, #7
   20ad2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20ad4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20ad6:	bf48      	it	mi
   20ad8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20adc:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20ade:	bf48      	it	mi
   20ae0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20ae4:	4770      	bx	lr

00020ae6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20ae6:	f3bf 8f5b 	dmb	ish
   20aea:	6800      	ldr	r0, [r0, #0]
   20aec:	f3bf 8f5b 	dmb	ish
}
   20af0:	4770      	bx	lr

00020af2 <atomic_and>:
{
   20af2:	4603      	mov	r3, r0
}
   20af4:	f3bf 8f5b 	dmb	ish
   20af8:	e853 0f00 	ldrex	r0, [r3]
   20afc:	ea00 0201 	and.w	r2, r0, r1
   20b00:	e843 2c00 	strex	ip, r2, [r3]
   20b04:	f1bc 0f00 	cmp.w	ip, #0
   20b08:	d1f6      	bne.n	20af8 <atomic_and+0x6>
   20b0a:	f3bf 8f5b 	dmb	ish
   20b0e:	4770      	bx	lr

00020b10 <hci_set_ad>:
{
   20b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b14:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20b16:	2120      	movs	r1, #32
{
   20b18:	4682      	mov	sl, r0
   20b1a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20b1c:	f7f3 f9fe 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   20b20:	4606      	mov	r6, r0
   20b22:	2800      	cmp	r0, #0
   20b24:	d04a      	beq.n	20bbc <hci_set_ad+0xac>
   20b26:	2120      	movs	r1, #32
   20b28:	3008      	adds	r0, #8
   20b2a:	f001 fc02 	bl	22332 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   20b2e:	2220      	movs	r2, #32
   20b30:	2100      	movs	r1, #0
   20b32:	4681      	mov	r9, r0
   20b34:	f7ff fc72 	bl	2041c <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   20b38:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   20b3c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   20b40:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   20b42:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   20b44:	f8d4 8000 	ldr.w	r8, [r4]
   20b48:	2300      	movs	r3, #0
   20b4a:	6862      	ldr	r2, [r4, #4]
   20b4c:	4293      	cmp	r3, r2
   20b4e:	d30d      	bcc.n	20b6c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   20b50:	9b00      	ldr	r3, [sp, #0]
   20b52:	3408      	adds	r4, #8
   20b54:	42a3      	cmp	r3, r4
   20b56:	d1f5      	bne.n	20b44 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20b58:	2200      	movs	r2, #0
   20b5a:	4631      	mov	r1, r6
   20b5c:	4650      	mov	r0, sl
	*data_len = set_data_len;
   20b5e:	f889 5000 	strb.w	r5, [r9]
}
   20b62:	b003      	add	sp, #12
   20b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20b68:	f7f3 ba10 	b.w	13f8c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   20b6c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   20b70:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   20b74:	1ca8      	adds	r0, r5, #2
   20b76:	1811      	adds	r1, r2, r0
   20b78:	291f      	cmp	r1, #31
   20b7a:	d908      	bls.n	20b8e <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20b7c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   20b80:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20b84:	d11f      	bne.n	20bc6 <hci_set_ad+0xb6>
   20b86:	2a00      	cmp	r2, #0
   20b88:	dd1d      	ble.n	20bc6 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   20b8a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20b8e:	b2d7      	uxtb	r7, r2
   20b90:	1c79      	adds	r1, r7, #1
   20b92:	f80b 1005 	strb.w	r1, [fp, r5]
   20b96:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   20b98:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   20b9a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   20b9e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   20ba2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20ba6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   20ba8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   20baa:	f7ff fc2c 	bl	20406 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   20bae:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   20bb0:	443d      	add	r5, r7
   20bb2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   20bb4:	3301      	adds	r3, #1
   20bb6:	f108 0808 	add.w	r8, r8, #8
   20bba:	e7c6      	b.n	20b4a <hci_set_ad+0x3a>
		return -ENOBUFS;
   20bbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   20bc0:	b003      	add	sp, #12
   20bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   20bc6:	4630      	mov	r0, r6
   20bc8:	f7f6 fb22 	bl	17210 <net_buf_unref>
		return err;
   20bcc:	f06f 0015 	mvn.w	r0, #21
   20bd0:	e7f6      	b.n	20bc0 <hci_set_ad+0xb0>

00020bd2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20bd2:	2301      	movs	r3, #1
{
   20bd4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20bd6:	fa03 f101 	lsl.w	r1, r3, r1
{
   20bda:	4604      	mov	r4, r0
	if (val) {
   20bdc:	b162      	cbz	r2, 20bf8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20bde:	f3bf 8f5b 	dmb	ish
   20be2:	e854 3f00 	ldrex	r3, [r4]
   20be6:	430b      	orrs	r3, r1
   20be8:	e844 3200 	strex	r2, r3, [r4]
   20bec:	2a00      	cmp	r2, #0
   20bee:	d1f8      	bne.n	20be2 <atomic_set_bit_to+0x10>
   20bf0:	f3bf 8f5b 	dmb	ish
	}
}
   20bf4:	bc10      	pop	{r4}
   20bf6:	4770      	bx	lr
   20bf8:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20bfa:	43c9      	mvns	r1, r1
   20bfc:	f7ff bf79 	b.w	20af2 <atomic_and>

00020c00 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   20c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c04:	b087      	sub	sp, #28
   20c06:	4605      	mov	r5, r0
   20c08:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   20c0c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   20c10:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   20c14:	460c      	mov	r4, r1
   20c16:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   20c18:	2100      	movs	r1, #0
   20c1a:	2210      	movs	r2, #16
   20c1c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20c1e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   20c20:	f7ff fbfc 	bl	2041c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   20c24:	b186      	cbz	r6, 20c48 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   20c26:	f7f3 ff09 	bl	14a3c <bt_get_name>
   20c2a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   20c2c:	2c00      	cmp	r4, #0
   20c2e:	d139      	bne.n	20ca4 <le_adv_update.constprop.0+0xa4>
   20c30:	2f00      	cmp	r7, #0
   20c32:	d142      	bne.n	20cba <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   20c34:	4658      	mov	r0, fp
   20c36:	f7ff fba3 	bl	20380 <strlen>
   20c3a:	2309      	movs	r3, #9
   20c3c:	f88d 3000 	strb.w	r3, [sp]
   20c40:	f88d 0001 	strb.w	r0, [sp, #1]
   20c44:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   20c48:	2e01      	cmp	r6, #1
			d_len = 2;
   20c4a:	bf0c      	ite	eq
   20c4c:	2202      	moveq	r2, #2
		d_len = 1;
   20c4e:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20c50:	a902      	add	r1, sp, #8
   20c52:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   20c56:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   20c5a:	bf04      	itt	eq
   20c5c:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   20c60:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20c62:	f7ff ff55 	bl	20b10 <hci_set_ad>
		if (err) {
   20c66:	4604      	mov	r4, r0
   20c68:	b978      	cbnz	r0, 20c8a <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   20c6a:	f1ba 0f00 	cmp.w	sl, #0
   20c6e:	d126      	bne.n	20cbe <le_adv_update.constprop.0+0xbe>
   20c70:	3510      	adds	r5, #16
   20c72:	f3bf 8f5b 	dmb	ish
   20c76:	e855 3f00 	ldrex	r3, [r5]
   20c7a:	f043 0304 	orr.w	r3, r3, #4
   20c7e:	e845 3200 	strex	r2, r3, [r5]
   20c82:	2a00      	cmp	r2, #0
   20c84:	d1f7      	bne.n	20c76 <le_adv_update.constprop.0+0x76>
   20c86:	f3bf 8f5b 	dmb	ish
}
   20c8a:	4620      	mov	r0, r4
   20c8c:	b007      	add	sp, #28
   20c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20c92:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   20c96:	3a08      	subs	r2, #8
   20c98:	2a01      	cmp	r2, #1
   20c9a:	d925      	bls.n	20ce8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20c9c:	3301      	adds	r3, #1
   20c9e:	4598      	cmp	r8, r3
   20ca0:	d1f7      	bne.n	20c92 <le_adv_update.constprop.0+0x92>
   20ca2:	e7c5      	b.n	20c30 <le_adv_update.constprop.0+0x30>
   20ca4:	2300      	movs	r3, #0
   20ca6:	e7fa      	b.n	20c9e <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20ca8:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   20cac:	3a08      	subs	r2, #8
   20cae:	2a01      	cmp	r2, #1
   20cb0:	d91a      	bls.n	20ce8 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20cb2:	3301      	adds	r3, #1
   20cb4:	4599      	cmp	r9, r3
   20cb6:	d1f7      	bne.n	20ca8 <le_adv_update.constprop.0+0xa8>
   20cb8:	e7bc      	b.n	20c34 <le_adv_update.constprop.0+0x34>
   20cba:	2300      	movs	r3, #0
   20cbc:	e7fa      	b.n	20cb4 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   20cbe:	2e02      	cmp	r6, #2
   20cc0:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   20cc4:	bf08      	it	eq
   20cc6:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20cc8:	a902      	add	r1, sp, #8
			d_len = 2;
   20cca:	bf08      	it	eq
   20ccc:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20cce:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   20cd2:	bf08      	it	eq
   20cd4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   20cd8:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20cdc:	f7ff ff18 	bl	20b10 <hci_set_ad>
		if (err) {
   20ce0:	2800      	cmp	r0, #0
   20ce2:	d0c5      	beq.n	20c70 <le_adv_update.constprop.0+0x70>
   20ce4:	4604      	mov	r4, r0
   20ce6:	e7d0      	b.n	20c8a <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   20ce8:	f06f 0415 	mvn.w	r4, #21
   20cec:	e7cd      	b.n	20c8a <le_adv_update.constprop.0+0x8a>

00020cee <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   20cee:	6843      	ldr	r3, [r0, #4]
   20cf0:	f013 0008 	ands.w	r0, r3, #8
   20cf4:	d00a      	beq.n	20d0c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   20cf6:	035a      	lsls	r2, r3, #13
   20cf8:	d407      	bmi.n	20d0a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   20cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   20cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   20d02:	bf0c      	ite	eq
   20d04:	2001      	moveq	r0, #1
   20d06:	2002      	movne	r0, #2
   20d08:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   20d0a:	2001      	movs	r0, #1
}
   20d0c:	4770      	bx	lr

00020d0e <bt_le_adv_set_enable_legacy>:
{
   20d0e:	b570      	push	{r4, r5, r6, lr}
   20d10:	4606      	mov	r6, r0
   20d12:	b086      	sub	sp, #24
   20d14:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   20d16:	f242 000a 	movw	r0, #8202	; 0x200a
   20d1a:	2101      	movs	r1, #1
   20d1c:	f7f3 f8fe 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   20d20:	4604      	mov	r4, r0
   20d22:	b1b0      	cbz	r0, 20d52 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   20d24:	3008      	adds	r0, #8
   20d26:	b195      	cbz	r5, 20d4e <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   20d28:	2101      	movs	r1, #1
   20d2a:	f001 fb11 	bl	22350 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   20d2e:	f106 0210 	add.w	r2, r6, #16
   20d32:	a903      	add	r1, sp, #12
   20d34:	4620      	mov	r0, r4
   20d36:	9500      	str	r5, [sp, #0]
   20d38:	2306      	movs	r3, #6
   20d3a:	f7f3 f8dd 	bl	13ef8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   20d3e:	2200      	movs	r2, #0
   20d40:	4621      	mov	r1, r4
   20d42:	f242 000a 	movw	r0, #8202	; 0x200a
   20d46:	f7f3 f921 	bl	13f8c <bt_hci_cmd_send_sync>
}
   20d4a:	b006      	add	sp, #24
   20d4c:	bd70      	pop	{r4, r5, r6, pc}
   20d4e:	4629      	mov	r1, r5
   20d50:	e7eb      	b.n	20d2a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   20d52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20d56:	e7f8      	b.n	20d4a <bt_le_adv_set_enable_legacy+0x3c>

00020d58 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   20d58:	3018      	adds	r0, #24
   20d5a:	f002 bdf7 	b.w	2394c <k_work_cancel_delayable>

00020d5e <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   20d5e:	f7f4 ba2b 	b.w	151b8 <bt_le_adv_stop>

00020d62 <tx_notify>:
{
   20d62:	b570      	push	{r4, r5, r6, lr}
   20d64:	4604      	mov	r4, r0
	__asm__ volatile(
   20d66:	f04f 0240 	mov.w	r2, #64	; 0x40
   20d6a:	f3ef 8311 	mrs	r3, BASEPRI
   20d6e:	f382 8812 	msr	BASEPRI_MAX, r2
   20d72:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   20d76:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20d78:	b920      	cbnz	r0, 20d84 <tx_notify+0x22>
	__asm__ volatile(
   20d7a:	f383 8811 	msr	BASEPRI, r3
   20d7e:	f3bf 8f6f 	isb	sy
}
   20d82:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20d86:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20d88:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d8a:	4288      	cmp	r0, r1
	list->tail = node;
   20d8c:	bf08      	it	eq
   20d8e:	6262      	streq	r2, [r4, #36]	; 0x24
   20d90:	f383 8811 	msr	BASEPRI, r3
   20d94:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20d98:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20d9c:	f7f4 fa9a 	bl	152d4 <tx_free>
		cb(conn, user_data);
   20da0:	4631      	mov	r1, r6
   20da2:	4620      	mov	r0, r4
   20da4:	47a8      	blx	r5
	while (1) {
   20da6:	e7de      	b.n	20d66 <tx_notify+0x4>

00020da8 <tx_complete_work>:
	tx_notify(conn);
   20da8:	3828      	subs	r0, #40	; 0x28
   20daa:	f7ff bfda 	b.w	20d62 <tx_notify>

00020dae <bt_conn_reset_rx_state>:
{
   20dae:	b510      	push	{r4, lr}
   20db0:	4604      	mov	r4, r0
	if (!conn->rx) {
   20db2:	6900      	ldr	r0, [r0, #16]
   20db4:	b118      	cbz	r0, 20dbe <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20db6:	f7f6 fa2b 	bl	17210 <net_buf_unref>
	conn->rx = NULL;
   20dba:	2300      	movs	r3, #0
   20dbc:	6123      	str	r3, [r4, #16]
}
   20dbe:	bd10      	pop	{r4, pc}

00020dc0 <conn_cleanup>:
{
   20dc0:	b570      	push	{r4, r5, r6, lr}
   20dc2:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   20dc4:	f100 0638 	add.w	r6, r0, #56	; 0x38
   20dc8:	2200      	movs	r2, #0
   20dca:	2300      	movs	r3, #0
   20dcc:	4630      	mov	r0, r6
   20dce:	f001 fa5f 	bl	22290 <net_buf_get>
   20dd2:	4605      	mov	r5, r0
   20dd4:	b950      	cbnz	r0, 20dec <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   20dd6:	4620      	mov	r0, r4
   20dd8:	f7ff ffe9 	bl	20dae <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20de0:	2200      	movs	r2, #0
}
   20de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20de6:	2300      	movs	r3, #0
   20de8:	f7fb b816 	b.w	1be18 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   20dec:	6968      	ldr	r0, [r5, #20]
   20dee:	b108      	cbz	r0, 20df4 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   20df0:	f7f4 fa70 	bl	152d4 <tx_free>
		net_buf_unref(buf);
   20df4:	4628      	mov	r0, r5
   20df6:	f7f6 fa0b 	bl	17210 <net_buf_unref>
   20dfa:	e7e5      	b.n	20dc8 <conn_cleanup+0x8>

00020dfc <bt_conn_recv>:
{
   20dfc:	b570      	push	{r4, r5, r6, lr}
   20dfe:	4616      	mov	r6, r2
   20e00:	4604      	mov	r4, r0
   20e02:	460d      	mov	r5, r1
	tx_notify(conn);
   20e04:	f7ff ffad 	bl	20d62 <tx_notify>
	switch (flags) {
   20e08:	2e01      	cmp	r6, #1
   20e0a:	d01a      	beq.n	20e42 <bt_conn_recv+0x46>
   20e0c:	2e02      	cmp	r6, #2
   20e0e:	d11a      	bne.n	20e46 <bt_conn_recv+0x4a>
		if (conn->rx) {
   20e10:	6923      	ldr	r3, [r4, #16]
   20e12:	b113      	cbz	r3, 20e1a <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   20e14:	4620      	mov	r0, r4
   20e16:	f7ff ffca 	bl	20dae <bt_conn_reset_rx_state>
		conn->rx = buf;
   20e1a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   20e1c:	6921      	ldr	r1, [r4, #16]
   20e1e:	898a      	ldrh	r2, [r1, #12]
   20e20:	2a01      	cmp	r2, #1
   20e22:	d93a      	bls.n	20e9a <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   20e24:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   20e26:	7845      	ldrb	r5, [r0, #1]
   20e28:	7803      	ldrb	r3, [r0, #0]
   20e2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   20e2e:	3304      	adds	r3, #4
   20e30:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   20e32:	429a      	cmp	r2, r3
   20e34:	d331      	bcc.n	20e9a <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   20e36:	d928      	bls.n	20e8a <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   20e38:	4620      	mov	r0, r4
}
   20e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   20e3e:	f7ff bfb6 	b.w	20dae <bt_conn_reset_rx_state>
		if (!conn->rx) {
   20e42:	6920      	ldr	r0, [r4, #16]
   20e44:	b918      	cbnz	r0, 20e4e <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   20e46:	4620      	mov	r0, r4
   20e48:	f7ff ffb1 	bl	20dae <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   20e4c:	e001      	b.n	20e52 <bt_conn_recv+0x56>
		if (!buf->len) {
   20e4e:	89ae      	ldrh	r6, [r5, #12]
   20e50:	b926      	cbnz	r6, 20e5c <bt_conn_recv+0x60>
			net_buf_unref(buf);
   20e52:	4628      	mov	r0, r5
}
   20e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   20e58:	f7f6 b9da 	b.w	17210 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   20e5c:	3008      	adds	r0, #8
   20e5e:	f001 faa3 	bl	223a8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   20e62:	4286      	cmp	r6, r0
   20e64:	d907      	bls.n	20e76 <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   20e66:	6921      	ldr	r1, [r4, #16]
   20e68:	2200      	movs	r2, #0
   20e6a:	4620      	mov	r0, r4
   20e6c:	f000 f9a8 	bl	211c0 <bt_l2cap_recv>
			conn->rx = NULL;
   20e70:	2300      	movs	r3, #0
   20e72:	6123      	str	r3, [r4, #16]
   20e74:	e7ed      	b.n	20e52 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20e76:	6920      	ldr	r0, [r4, #16]
   20e78:	89aa      	ldrh	r2, [r5, #12]
   20e7a:	68a9      	ldr	r1, [r5, #8]
   20e7c:	3008      	adds	r0, #8
   20e7e:	f001 fa5e 	bl	2233e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   20e82:	4628      	mov	r0, r5
   20e84:	f7f6 f9c4 	bl	17210 <net_buf_unref>
		break;
   20e88:	e7c8      	b.n	20e1c <bt_conn_recv+0x20>
	conn->rx = NULL;
   20e8a:	2300      	movs	r3, #0
   20e8c:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   20e8e:	4620      	mov	r0, r4
   20e90:	2201      	movs	r2, #1
}
   20e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   20e96:	f000 b993 	b.w	211c0 <bt_l2cap_recv>
}
   20e9a:	bd70      	pop	{r4, r5, r6, pc}

00020e9c <bt_conn_ref>:
{
   20e9c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20e9e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20ea2:	f3bf 8f5b 	dmb	ish
   20ea6:	6813      	ldr	r3, [r2, #0]
   20ea8:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20eac:	b17b      	cbz	r3, 20ece <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20eae:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20eb2:	1c59      	adds	r1, r3, #1
   20eb4:	e852 4f00 	ldrex	r4, [r2]
   20eb8:	429c      	cmp	r4, r3
   20eba:	d104      	bne.n	20ec6 <bt_conn_ref+0x2a>
   20ebc:	e842 1c00 	strex	ip, r1, [r2]
   20ec0:	f1bc 0f00 	cmp.w	ip, #0
   20ec4:	d1f6      	bne.n	20eb4 <bt_conn_ref+0x18>
   20ec6:	f3bf 8f5b 	dmb	ish
   20eca:	d1ea      	bne.n	20ea2 <bt_conn_ref+0x6>
}
   20ecc:	bd10      	pop	{r4, pc}
			return NULL;
   20ece:	4618      	mov	r0, r3
   20ed0:	e7fc      	b.n	20ecc <bt_conn_ref+0x30>

00020ed2 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   20ed2:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20ed6:	f3bf 8f5b 	dmb	ish
   20eda:	e853 2f00 	ldrex	r2, [r3]
   20ede:	3a01      	subs	r2, #1
   20ee0:	e843 2100 	strex	r1, r2, [r3]
   20ee4:	2900      	cmp	r1, #0
   20ee6:	d1f8      	bne.n	20eda <bt_conn_unref+0x8>
   20ee8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   20eec:	7883      	ldrb	r3, [r0, #2]
   20eee:	2b01      	cmp	r3, #1
   20ef0:	d108      	bne.n	20f04 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20ef2:	f3bf 8f5b 	dmb	ish
   20ef6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20efa:	f3bf 8f5b 	dmb	ish
   20efe:	b90b      	cbnz	r3, 20f04 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   20f00:	f7f4 b9a8 	b.w	15254 <bt_le_adv_resume>
}
   20f04:	4770      	bx	lr

00020f06 <conn_lookup_handle>:
{
   20f06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f0a:	4607      	mov	r7, r0
   20f0c:	460e      	mov	r6, r1
   20f0e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20f10:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20f12:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20f16:	42b4      	cmp	r4, r6
   20f18:	d103      	bne.n	20f22 <conn_lookup_handle+0x1c>
	return NULL;
   20f1a:	2300      	movs	r3, #0
}
   20f1c:	4618      	mov	r0, r3
   20f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20f22:	fb09 7004 	mla	r0, r9, r4, r7
   20f26:	f7ff ffb9 	bl	20e9c <bt_conn_ref>
   20f2a:	4603      	mov	r3, r0
		if (!conn) {
   20f2c:	b158      	cbz	r0, 20f46 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20f2e:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20f30:	2d01      	cmp	r5, #1
   20f32:	d002      	beq.n	20f3a <conn_lookup_handle+0x34>
   20f34:	3d07      	subs	r5, #7
   20f36:	2d01      	cmp	r5, #1
   20f38:	d803      	bhi.n	20f42 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20f3a:	881a      	ldrh	r2, [r3, #0]
   20f3c:	4542      	cmp	r2, r8
   20f3e:	d0ed      	beq.n	20f1c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20f40:	4618      	mov	r0, r3
   20f42:	f7ff ffc6 	bl	20ed2 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20f46:	3401      	adds	r4, #1
   20f48:	e7e5      	b.n	20f16 <conn_lookup_handle+0x10>

00020f4a <bt_conn_connected>:
{
   20f4a:	b510      	push	{r4, lr}
   20f4c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20f4e:	f7f4 fe75 	bl	15c3c <bt_l2cap_connected>
	notify_connected(conn);
   20f52:	4620      	mov	r0, r4
}
   20f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20f58:	f7f4 b9c6 	b.w	152e8 <notify_connected>

00020f5c <bt_conn_get_security>:
}
   20f5c:	2001      	movs	r0, #1
   20f5e:	4770      	bx	lr

00020f60 <bt_conn_is_peer_addr_le>:
{
   20f60:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20f62:	7a03      	ldrb	r3, [r0, #8]
   20f64:	428b      	cmp	r3, r1
{
   20f66:	4604      	mov	r4, r0
   20f68:	4615      	mov	r5, r2
	if (id != conn->id) {
   20f6a:	d115      	bne.n	20f98 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20f6c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20f70:	2207      	movs	r2, #7
   20f72:	4628      	mov	r0, r5
   20f74:	f7ff fa20 	bl	203b8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20f78:	b180      	cbz	r0, 20f9c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20f7a:	78e3      	ldrb	r3, [r4, #3]
   20f7c:	2207      	movs	r2, #7
   20f7e:	b943      	cbnz	r3, 20f92 <bt_conn_is_peer_addr_le+0x32>
   20f80:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20f84:	4628      	mov	r0, r5
   20f86:	f7ff fa17 	bl	203b8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20f8a:	fab0 f080 	clz	r0, r0
   20f8e:	0940      	lsrs	r0, r0, #5
}
   20f90:	bd38      	pop	{r3, r4, r5, pc}
   20f92:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20f96:	e7f5      	b.n	20f84 <bt_conn_is_peer_addr_le+0x24>
		return false;
   20f98:	2000      	movs	r0, #0
   20f9a:	e7f9      	b.n	20f90 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20f9c:	2001      	movs	r0, #1
   20f9e:	e7f7      	b.n	20f90 <bt_conn_is_peer_addr_le+0x30>

00020fa0 <bt_conn_exists_le>:
{
   20fa0:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   20fa2:	f7f4 fc75 	bl	15890 <bt_conn_lookup_addr_le>
	if (conn) {
   20fa6:	b110      	cbz	r0, 20fae <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   20fa8:	f7ff ff93 	bl	20ed2 <bt_conn_unref>
		return true;
   20fac:	2001      	movs	r0, #1
}
   20fae:	bd08      	pop	{r3, pc}

00020fb0 <bt_conn_le_conn_update>:
{
   20fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fb2:	4607      	mov	r7, r0
   20fb4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20fb6:	f242 0013 	movw	r0, #8211	; 0x2013
   20fba:	210e      	movs	r1, #14
   20fbc:	f7f2 ffae 	bl	13f1c <bt_hci_cmd_create>
	if (!buf) {
   20fc0:	4606      	mov	r6, r0
   20fc2:	b1d0      	cbz	r0, 20ffa <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20fc4:	210e      	movs	r1, #14
   20fc6:	3008      	adds	r0, #8
   20fc8:	f001 f9b3 	bl	22332 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   20fcc:	220e      	movs	r2, #14
   20fce:	4604      	mov	r4, r0
   20fd0:	2100      	movs	r1, #0
   20fd2:	f7ff fa23 	bl	2041c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20fd6:	883b      	ldrh	r3, [r7, #0]
   20fd8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20fda:	882b      	ldrh	r3, [r5, #0]
   20fdc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20fde:	886b      	ldrh	r3, [r5, #2]
   20fe0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20fe2:	88ab      	ldrh	r3, [r5, #4]
   20fe4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20fe6:	88eb      	ldrh	r3, [r5, #6]
   20fe8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20fea:	4631      	mov	r1, r6
   20fec:	2200      	movs	r2, #0
}
   20fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20ff2:	f242 0013 	movw	r0, #8211	; 0x2013
   20ff6:	f7f2 bfc9 	b.w	13f8c <bt_hci_cmd_send_sync>
}
   20ffa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021000 <l2cap_connected>:
}
   21000:	4770      	bx	lr

00021002 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   21002:	3010      	adds	r0, #16
   21004:	f002 bca2 	b.w	2394c <k_work_cancel_delayable>

00021008 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   21008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2100a:	4607      	mov	r7, r0
   2100c:	460e      	mov	r6, r1
   2100e:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   21010:	2300      	movs	r3, #0
   21012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21016:	2104      	movs	r1, #4
   21018:	2000      	movs	r0, #0
   2101a:	f7f4 fb7f 	bl	1571c <bt_conn_create_pdu_timeout>
	if (!buf) {
   2101e:	4604      	mov	r4, r0
   21020:	b130      	cbz	r0, 21030 <l2cap_create_le_sig_pdu.isra.0+0x28>
   21022:	2104      	movs	r1, #4
   21024:	3008      	adds	r0, #8
   21026:	f001 f984 	bl	22332 <net_buf_simple_add>
	hdr->code = code;
   2102a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   2102c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2102e:	8045      	strh	r5, [r0, #2]
}
   21030:	4620      	mov	r0, r4
   21032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021034 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21034:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   21036:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21038:	b17b      	cbz	r3, 2105a <bt_l2cap_chan_remove+0x26>
   2103a:	3b08      	subs	r3, #8
   2103c:	2200      	movs	r2, #0
   2103e:	b163      	cbz	r3, 2105a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   21040:	428b      	cmp	r3, r1
   21042:	f103 0408 	add.w	r4, r3, #8
   21046:	d10f      	bne.n	21068 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   21048:	688b      	ldr	r3, [r1, #8]
   2104a:	b93a      	cbnz	r2, 2105c <bt_l2cap_chan_remove+0x28>
   2104c:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   2104e:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   21050:	4294      	cmp	r4, r2
   21052:	d100      	bne.n	21056 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   21054:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   21056:	2300      	movs	r3, #0
   21058:	608b      	str	r3, [r1, #8]
}
   2105a:	bd10      	pop	{r4, pc}
   2105c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2105e:	6d43      	ldr	r3, [r0, #84]	; 0x54
   21060:	429c      	cmp	r4, r3
	list->tail = node;
   21062:	bf08      	it	eq
   21064:	6542      	streq	r2, [r0, #84]	; 0x54
}
   21066:	e7f6      	b.n	21056 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21068:	2c00      	cmp	r4, #0
   2106a:	d0f6      	beq.n	2105a <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2106c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2106e:	2b00      	cmp	r3, #0
   21070:	d0f3      	beq.n	2105a <bt_l2cap_chan_remove+0x26>
   21072:	3b08      	subs	r3, #8
   21074:	4622      	mov	r2, r4
   21076:	e7e2      	b.n	2103e <bt_l2cap_chan_remove+0xa>

00021078 <bt_l2cap_chan_del>:
{
   21078:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2107a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2107e:	4604      	mov	r4, r0
	if (!chan->conn) {
   21080:	b123      	cbz	r3, 2108c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21082:	686b      	ldr	r3, [r5, #4]
   21084:	b103      	cbz	r3, 21088 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21086:	4798      	blx	r3
	chan->conn = NULL;
   21088:	2300      	movs	r3, #0
   2108a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2108c:	68e3      	ldr	r3, [r4, #12]
   2108e:	b10b      	cbz	r3, 21094 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21090:	4620      	mov	r0, r4
   21092:	4798      	blx	r3
	if (ops->released) {
   21094:	69eb      	ldr	r3, [r5, #28]
   21096:	b11b      	cbz	r3, 210a0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   21098:	4620      	mov	r0, r4
}
   2109a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2109e:	4718      	bx	r3
}
   210a0:	bd70      	pop	{r4, r5, r6, pc}

000210a2 <l2cap_rtx_timeout>:
{
   210a2:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   210a4:	f1a0 0110 	sub.w	r1, r0, #16
   210a8:	f850 0c10 	ldr.w	r0, [r0, #-16]
   210ac:	f7ff ffc2 	bl	21034 <bt_l2cap_chan_remove>
}
   210b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   210b4:	4608      	mov	r0, r1
   210b6:	f7ff bfdf 	b.w	21078 <bt_l2cap_chan_del>

000210ba <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   210bc:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210be:	b18b      	cbz	r3, 210e4 <bt_l2cap_disconnected+0x2a>
   210c0:	f1b3 0008 	subs.w	r0, r3, #8
   210c4:	d00e      	beq.n	210e4 <bt_l2cap_disconnected+0x2a>
   210c6:	681c      	ldr	r4, [r3, #0]
   210c8:	b104      	cbz	r4, 210cc <bt_l2cap_disconnected+0x12>
   210ca:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   210cc:	f7ff ffd4 	bl	21078 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210d0:	b144      	cbz	r4, 210e4 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   210d2:	f114 0308 	adds.w	r3, r4, #8
   210d6:	d002      	beq.n	210de <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   210d8:	68a3      	ldr	r3, [r4, #8]
   210da:	b103      	cbz	r3, 210de <bt_l2cap_disconnected+0x24>
   210dc:	3b08      	subs	r3, #8
{
   210de:	4620      	mov	r0, r4
   210e0:	461c      	mov	r4, r3
   210e2:	e7f3      	b.n	210cc <bt_l2cap_disconnected+0x12>
}
   210e4:	bd10      	pop	{r4, pc}

000210e6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   210e6:	3104      	adds	r1, #4
   210e8:	f7f4 bb18 	b.w	1571c <bt_conn_create_pdu_timeout>

000210ec <bt_l2cap_send_cb>:
{
   210ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210f0:	4614      	mov	r4, r2
   210f2:	4605      	mov	r5, r0
   210f4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   210f6:	f102 0008 	add.w	r0, r2, #8
   210fa:	2104      	movs	r1, #4
   210fc:	461e      	mov	r6, r3
   210fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21102:	f001 f92d 	bl	22360 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21106:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   21108:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2110a:	3a04      	subs	r2, #4
   2110c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2110e:	4643      	mov	r3, r8
   21110:	4632      	mov	r2, r6
   21112:	4621      	mov	r1, r4
   21114:	4628      	mov	r0, r5
}
   21116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2111a:	f7f4 b9cb 	b.w	154b4 <bt_conn_send_cb>

0002111e <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   2111e:	898b      	ldrh	r3, [r1, #12]
   21120:	2b03      	cmp	r3, #3
{
   21122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21124:	4605      	mov	r5, r0
   21126:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   21128:	d927      	bls.n	2117a <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2112a:	2104      	movs	r1, #4
   2112c:	f104 0008 	add.w	r0, r4, #8
   21130:	f001 f926 	bl	22380 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   21134:	89a3      	ldrh	r3, [r4, #12]
   21136:	8842      	ldrh	r2, [r0, #2]
   21138:	429a      	cmp	r2, r3
   2113a:	d11e      	bne.n	2117a <l2cap_recv+0x5c>
	if (!hdr->ident) {
   2113c:	7841      	ldrb	r1, [r0, #1]
   2113e:	b1e1      	cbz	r1, 2117a <l2cap_recv+0x5c>
	switch (hdr->code) {
   21140:	7803      	ldrb	r3, [r0, #0]
   21142:	2b01      	cmp	r3, #1
   21144:	d019      	beq.n	2117a <l2cap_recv+0x5c>
   21146:	2b13      	cmp	r3, #19
   21148:	d017      	beq.n	2117a <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2114a:	2202      	movs	r2, #2
   2114c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   2114e:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21150:	f7ff ff5a 	bl	21008 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   21154:	4604      	mov	r4, r0
   21156:	b180      	cbz	r0, 2117a <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   21158:	2102      	movs	r1, #2
   2115a:	3008      	adds	r0, #8
   2115c:	f001 f8e9 	bl	22332 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   21160:	2300      	movs	r3, #0
   21162:	7003      	strb	r3, [r0, #0]
   21164:	7043      	strb	r3, [r0, #1]
   21166:	4622      	mov	r2, r4
   21168:	9300      	str	r3, [sp, #0]
   2116a:	2105      	movs	r1, #5
   2116c:	4628      	mov	r0, r5
   2116e:	f7ff ffbd 	bl	210ec <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21172:	b110      	cbz	r0, 2117a <l2cap_recv+0x5c>
		net_buf_unref(buf);
   21174:	4620      	mov	r0, r4
   21176:	f7f6 f84b 	bl	17210 <net_buf_unref>
}
   2117a:	2000      	movs	r0, #0
   2117c:	b003      	add	sp, #12
   2117e:	bd30      	pop	{r4, r5, pc}

00021180 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21180:	6d00      	ldr	r0, [r0, #80]	; 0x50
   21182:	b160      	cbz	r0, 2119e <bt_l2cap_le_lookup_tx_cid+0x1e>
   21184:	3808      	subs	r0, #8
   21186:	b900      	cbnz	r0, 2118a <bt_l2cap_le_lookup_tx_cid+0xa>
   21188:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2118a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2118e:	428b      	cmp	r3, r1
   21190:	d005      	beq.n	2119e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21192:	f110 0308 	adds.w	r3, r0, #8
   21196:	d001      	beq.n	2119c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21198:	6880      	ldr	r0, [r0, #8]
   2119a:	e7f2      	b.n	21182 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2119c:	4618      	mov	r0, r3
}
   2119e:	4770      	bx	lr

000211a0 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   211a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   211a2:	b160      	cbz	r0, 211be <bt_l2cap_le_lookup_rx_cid+0x1e>
   211a4:	3808      	subs	r0, #8
   211a6:	b900      	cbnz	r0, 211aa <bt_l2cap_le_lookup_rx_cid+0xa>
   211a8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   211aa:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   211ae:	428b      	cmp	r3, r1
   211b0:	d005      	beq.n	211be <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   211b2:	f110 0308 	adds.w	r3, r0, #8
   211b6:	d001      	beq.n	211bc <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   211b8:	6880      	ldr	r0, [r0, #8]
   211ba:	e7f2      	b.n	211a2 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   211bc:	4618      	mov	r0, r3
}
   211be:	4770      	bx	lr

000211c0 <bt_l2cap_recv>:
{
   211c0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   211c2:	898b      	ldrh	r3, [r1, #12]
   211c4:	2b03      	cmp	r3, #3
{
   211c6:	4605      	mov	r5, r0
   211c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   211ca:	d804      	bhi.n	211d6 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   211cc:	4620      	mov	r0, r4
}
   211ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   211d2:	f7f6 b81d 	b.w	17210 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   211d6:	2104      	movs	r1, #4
   211d8:	f104 0008 	add.w	r0, r4, #8
   211dc:	f001 f8d0 	bl	22380 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   211e0:	8841      	ldrh	r1, [r0, #2]
   211e2:	4628      	mov	r0, r5
   211e4:	f7ff ffdc 	bl	211a0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   211e8:	2800      	cmp	r0, #0
   211ea:	d0ef      	beq.n	211cc <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   211ec:	6843      	ldr	r3, [r0, #4]
   211ee:	4621      	mov	r1, r4
   211f0:	691b      	ldr	r3, [r3, #16]
   211f2:	4798      	blx	r3
   211f4:	e7ea      	b.n	211cc <bt_l2cap_recv+0xc>

000211f6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   211f6:	4770      	bx	lr

000211f8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   211f8:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   211fa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   211fc:	b128      	cbz	r0, 2120a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   211fe:	6859      	ldr	r1, [r3, #4]
   21200:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21202:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21204:	4288      	cmp	r0, r1
	list->tail = node;
   21206:	bf08      	it	eq
   21208:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2120a:	4770      	bx	lr

0002120c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2120c:	4603      	mov	r3, r0
   2120e:	6800      	ldr	r0, [r0, #0]
   21210:	2200      	movs	r2, #0
   21212:	b900      	cbnz	r0, 21216 <sys_slist_find_and_remove+0xa>
   21214:	4770      	bx	lr
   21216:	4288      	cmp	r0, r1
   21218:	d110      	bne.n	2123c <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2121a:	6808      	ldr	r0, [r1, #0]
   2121c:	b942      	cbnz	r2, 21230 <sys_slist_find_and_remove+0x24>
   2121e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   21220:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   21222:	4291      	cmp	r1, r2
   21224:	d100      	bne.n	21228 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   21226:	6058      	str	r0, [r3, #4]
	parent->next = child;
   21228:	2300      	movs	r3, #0
   2122a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2122c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2122e:	4770      	bx	lr
	parent->next = child;
   21230:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21232:	6858      	ldr	r0, [r3, #4]
   21234:	4281      	cmp	r1, r0
	list->tail = node;
   21236:	bf08      	it	eq
   21238:	605a      	streq	r2, [r3, #4]
}
   2123a:	e7f5      	b.n	21228 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2123c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2123e:	6800      	ldr	r0, [r0, #0]
   21240:	e7e7      	b.n	21212 <sys_slist_find_and_remove+0x6>

00021242 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   21242:	4603      	mov	r3, r0
	size_t bytes = 0;
   21244:	2000      	movs	r0, #0

	while (buf) {
   21246:	b903      	cbnz	r3, 2124a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   21248:	4770      	bx	lr
		bytes += buf->len;
   2124a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2124c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2124e:	4410      	add	r0, r2
		buf = buf->frags;
   21250:	e7f9      	b.n	21246 <net_buf_frags_len+0x4>

00021252 <att_sent>:
	if (chan->ops->sent) {
   21252:	684b      	ldr	r3, [r1, #4]
   21254:	695b      	ldr	r3, [r3, #20]
{
   21256:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   21258:	b103      	cbz	r3, 2125c <att_sent+0xa>
		chan->ops->sent(chan);
   2125a:	4718      	bx	r3
}
   2125c:	4770      	bx	lr

0002125e <attr_read_type_cb>:
{
   2125e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   21260:	68d4      	ldr	r4, [r2, #12]
   21262:	7823      	ldrb	r3, [r4, #0]
   21264:	3102      	adds	r1, #2
   21266:	b913      	cbnz	r3, 2126e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   21268:	7021      	strb	r1, [r4, #0]
	return true;
   2126a:	2001      	movs	r0, #1
   2126c:	e006      	b.n	2127c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2126e:	428b      	cmp	r3, r1
   21270:	d0fb      	beq.n	2126a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21272:	8983      	ldrh	r3, [r0, #12]
   21274:	3b02      	subs	r3, #2
   21276:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21278:	2000      	movs	r0, #0
   2127a:	6110      	str	r0, [r2, #16]
}
   2127c:	bd10      	pop	{r4, pc}

0002127e <att_prepare_write_req>:
}
   2127e:	2006      	movs	r0, #6
   21280:	4770      	bx	lr

00021282 <att_op_get_type>:
	switch (op) {
   21282:	281e      	cmp	r0, #30
   21284:	d816      	bhi.n	212b4 <att_op_get_type+0x32>
   21286:	b308      	cbz	r0, 212cc <att_op_get_type+0x4a>
   21288:	1e43      	subs	r3, r0, #1
   2128a:	2b1d      	cmp	r3, #29
   2128c:	d81e      	bhi.n	212cc <att_op_get_type+0x4a>
   2128e:	e8df f003 	tbb	[pc, r3]
   21292:	2317      	.short	0x2317
   21294:	23172317 	.word	0x23172317
   21298:	23172317 	.word	0x23172317
   2129c:	23172317 	.word	0x23172317
   212a0:	23172317 	.word	0x23172317
   212a4:	231d1d17 	.word	0x231d1d17
   212a8:	1d172317 	.word	0x1d172317
   212ac:	0f1b1d19 	.word	0x0f1b1d19
   212b0:	2004      	movs	r0, #4
   212b2:	4770      	bx	lr
   212b4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   212b8:	2b52      	cmp	r3, #82	; 0x52
   212ba:	d107      	bne.n	212cc <att_op_get_type+0x4a>
		return ATT_COMMAND;
   212bc:	2000      	movs	r0, #0
}
   212be:	4770      	bx	lr
		return ATT_RESPONSE;
   212c0:	2002      	movs	r0, #2
   212c2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   212c4:	2003      	movs	r0, #3
   212c6:	4770      	bx	lr
		return ATT_INDICATION;
   212c8:	2005      	movs	r0, #5
   212ca:	4770      	bx	lr
		return ATT_COMMAND;
   212cc:	f010 0f40 	tst.w	r0, #64	; 0x40
   212d0:	bf0c      	ite	eq
   212d2:	2006      	moveq	r0, #6
   212d4:	2000      	movne	r0, #0
   212d6:	4770      	bx	lr
		return ATT_REQUEST;
   212d8:	2001      	movs	r0, #1
   212da:	4770      	bx	lr

000212dc <chan_req_send>:
{
   212dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   212de:	688f      	ldr	r7, [r1, #8]
{
   212e0:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   212e2:	4638      	mov	r0, r7
{
   212e4:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   212e6:	f7ff ffac 	bl	21242 <net_buf_frags_len>
   212ea:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   212ee:	4283      	cmp	r3, r0
   212f0:	d30d      	bcc.n	2130e <chan_req_send+0x32>
	req->buf = NULL;
   212f2:	2600      	movs	r6, #0
	chan->req = req;
   212f4:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   212f8:	4632      	mov	r2, r6
	req->buf = NULL;
   212fa:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   212fc:	4620      	mov	r0, r4
   212fe:	4639      	mov	r1, r7
   21300:	f7f4 fd4e 	bl	15da0 <chan_send>
	if (err) {
   21304:	b110      	cbz	r0, 2130c <chan_req_send+0x30>
		req->buf = buf;
   21306:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   21308:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2130e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21312:	e7fb      	b.n	2130c <chan_req_send+0x30>

00021314 <process_queue>:
{
   21314:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21316:	2200      	movs	r2, #0
{
   21318:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2131a:	2300      	movs	r3, #0
   2131c:	4608      	mov	r0, r1
{
   2131e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21320:	f000 ffb6 	bl	22290 <net_buf_get>
	if (buf) {
   21324:	4605      	mov	r5, r0
   21326:	b160      	cbz	r0, 21342 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21328:	4601      	mov	r1, r0
   2132a:	2200      	movs	r2, #0
   2132c:	4620      	mov	r0, r4
   2132e:	f7f4 fd37 	bl	15da0 <chan_send>
		if (err) {
   21332:	4604      	mov	r4, r0
   21334:	b118      	cbz	r0, 2133e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   21336:	4629      	mov	r1, r5
   21338:	4630      	mov	r0, r6
   2133a:	f002 fa18 	bl	2376e <k_queue_prepend>
}
   2133e:	4620      	mov	r0, r4
   21340:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21342:	f06f 0401 	mvn.w	r4, #1
   21346:	e7fa      	b.n	2133e <process_queue+0x2a>

00021348 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   21348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2134a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2134e:	2300      	movs	r3, #0
   21350:	9300      	str	r3, [sp, #0]
   21352:	461a      	mov	r2, r3
   21354:	f7f5 fbba 	bl	16acc <bt_gatt_foreach_attr_type>
				  user_data);
}
   21358:	b005      	add	sp, #20
   2135a:	f85d fb04 	ldr.w	pc, [sp], #4

0002135e <att_chan_read>:
{
   2135e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21362:	4680      	mov	r8, r0
   21364:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21366:	4610      	mov	r0, r2
{
   21368:	4699      	mov	r9, r3
   2136a:	468b      	mov	fp, r1
   2136c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2136e:	f7ff ff68 	bl	21242 <net_buf_frags_len>
   21372:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   21376:	4283      	cmp	r3, r0
   21378:	d97a      	bls.n	21470 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2137a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2137e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   21380:	4630      	mov	r0, r6
   21382:	f000 ffb4 	bl	222ee <net_buf_frag_last>
	size_t len, total = 0;
   21386:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2138a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2138c:	4630      	mov	r0, r6
   2138e:	f7ff ff58 	bl	21242 <net_buf_frags_len>
   21392:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   21396:	f105 0708 	add.w	r7, r5, #8
   2139a:	1a24      	subs	r4, r4, r0
   2139c:	4638      	mov	r0, r7
   2139e:	f001 f803 	bl	223a8 <net_buf_simple_tailroom>
   213a2:	4284      	cmp	r4, r0
   213a4:	d211      	bcs.n	213ca <att_chan_read+0x6c>
   213a6:	4630      	mov	r0, r6
   213a8:	f7ff ff4b 	bl	21242 <net_buf_frags_len>
   213ac:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   213b0:	1a24      	subs	r4, r4, r0
		if (!len) {
   213b2:	bb34      	cbnz	r4, 21402 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   213b4:	79b0      	ldrb	r0, [r6, #6]
   213b6:	f7f5 fe6b 	bl	17090 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   213ba:	2200      	movs	r2, #0
   213bc:	2300      	movs	r3, #0
   213be:	f000 ff62 	bl	22286 <net_buf_alloc_fixed>
			if (!frag) {
   213c2:	4605      	mov	r5, r0
   213c4:	b930      	cbnz	r0, 213d4 <att_chan_read+0x76>
	return total;
   213c6:	4657      	mov	r7, sl
   213c8:	e02c      	b.n	21424 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   213ca:	4638      	mov	r0, r7
   213cc:	f000 ffec 	bl	223a8 <net_buf_simple_tailroom>
   213d0:	4604      	mov	r4, r0
   213d2:	e7ee      	b.n	213b2 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   213d4:	4601      	mov	r1, r0
   213d6:	4630      	mov	r0, r6
   213d8:	f000 ff9a 	bl	22310 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   213dc:	4630      	mov	r0, r6
   213de:	f7ff ff30 	bl	21242 <net_buf_frags_len>
   213e2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   213e6:	f105 0708 	add.w	r7, r5, #8
   213ea:	1a24      	subs	r4, r4, r0
   213ec:	4638      	mov	r0, r7
   213ee:	f000 ffdb 	bl	223a8 <net_buf_simple_tailroom>
   213f2:	4284      	cmp	r4, r0
   213f4:	d21a      	bcs.n	2142c <att_chan_read+0xce>
   213f6:	4630      	mov	r0, r6
   213f8:	f7ff ff23 	bl	21242 <net_buf_frags_len>
   213fc:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   21400:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21402:	68a9      	ldr	r1, [r5, #8]
   21404:	89aa      	ldrh	r2, [r5, #12]
   21406:	f8db 7004 	ldr.w	r7, [fp, #4]
   2140a:	9803      	ldr	r0, [sp, #12]
   2140c:	f8cd 9000 	str.w	r9, [sp]
   21410:	440a      	add	r2, r1
   21412:	b2a3      	uxth	r3, r4
   21414:	4659      	mov	r1, fp
   21416:	47b8      	blx	r7
		if (read < 0) {
   21418:	1e07      	subs	r7, r0, #0
   2141a:	da0c      	bge.n	21436 <att_chan_read+0xd8>
				return total;
   2141c:	f1ba 0f00 	cmp.w	sl, #0
   21420:	bf18      	it	ne
   21422:	4657      	movne	r7, sl
}
   21424:	4638      	mov	r0, r7
   21426:	b005      	add	sp, #20
   21428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2142c:	4638      	mov	r0, r7
   2142e:	f000 ffbb 	bl	223a8 <net_buf_simple_tailroom>
   21432:	4604      	mov	r4, r0
   21434:	e7e5      	b.n	21402 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21438:	b993      	cbnz	r3, 21460 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2143a:	4639      	mov	r1, r7
   2143c:	f105 0008 	add.w	r0, r5, #8
   21440:	f000 ff77 	bl	22332 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21444:	4630      	mov	r0, r6
   21446:	f7ff fefc 	bl	21242 <net_buf_frags_len>
   2144a:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2144e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21450:	4283      	cmp	r3, r0
		total += read;
   21452:	44ba      	add	sl, r7
		offset += read;
   21454:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21458:	d9b5      	bls.n	213c6 <att_chan_read+0x68>
   2145a:	42a7      	cmp	r7, r4
   2145c:	d096      	beq.n	2138c <att_chan_read+0x2e>
   2145e:	e7b2      	b.n	213c6 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   21460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21464:	4639      	mov	r1, r7
   21466:	4628      	mov	r0, r5
   21468:	4798      	blx	r3
   2146a:	2800      	cmp	r0, #0
   2146c:	d1e5      	bne.n	2143a <att_chan_read+0xdc>
   2146e:	e7aa      	b.n	213c6 <att_chan_read+0x68>
		return 0;
   21470:	2700      	movs	r7, #0
   21472:	e7d7      	b.n	21424 <att_chan_read+0xc6>

00021474 <find_type_cb>:
{
   21474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   21478:	f8d2 9000 	ldr.w	r9, [r2]
{
   2147c:	b091      	sub	sp, #68	; 0x44
   2147e:	4607      	mov	r7, r0
   21480:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21482:	2500      	movs	r5, #0
   21484:	f642 0301 	movw	r3, #10241	; 0x2801
   21488:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2148a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2148e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   21492:	a90b      	add	r1, sp, #44	; 0x2c
{
   21494:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21496:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   2149a:	f7ff f820 	bl	204de <bt_uuid_cmp>
   2149e:	2800      	cmp	r0, #0
   214a0:	d079      	beq.n	21596 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   214a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   214a6:	6838      	ldr	r0, [r7, #0]
   214a8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   214ac:	a90b      	add	r1, sp, #44	; 0x2c
   214ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   214b2:	f7ff f814 	bl	204de <bt_uuid_cmp>
   214b6:	b138      	cbz	r0, 214c8 <find_type_cb+0x54>
		if (data->group &&
   214b8:	68a3      	ldr	r3, [r4, #8]
   214ba:	b11b      	cbz	r3, 214c4 <find_type_cb+0x50>
   214bc:	885a      	ldrh	r2, [r3, #2]
   214be:	42b2      	cmp	r2, r6
   214c0:	d200      	bcs.n	214c4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   214c2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   214c4:	2001      	movs	r0, #1
   214c6:	e009      	b.n	214dc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   214c8:	6861      	ldr	r1, [r4, #4]
   214ca:	4608      	mov	r0, r1
   214cc:	f7ff feb9 	bl	21242 <net_buf_frags_len>
   214d0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   214d4:	1a1b      	subs	r3, r3, r0
   214d6:	2b03      	cmp	r3, #3
   214d8:	d803      	bhi.n	214e2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   214da:	2000      	movs	r0, #0
}
   214dc:	b011      	add	sp, #68	; 0x44
   214de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   214e2:	4608      	mov	r0, r1
   214e4:	f000 ff03 	bl	222ee <net_buf_frag_last>
   214e8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   214ea:	6860      	ldr	r0, [r4, #4]
   214ec:	f7ff fea9 	bl	21242 <net_buf_frags_len>
   214f0:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   214f4:	f105 0b08 	add.w	fp, r5, #8
   214f8:	ebaa 0a00 	sub.w	sl, sl, r0
   214fc:	4658      	mov	r0, fp
   214fe:	f000 ff53 	bl	223a8 <net_buf_simple_tailroom>
   21502:	4582      	cmp	sl, r0
   21504:	d23f      	bcs.n	21586 <find_type_cb+0x112>
   21506:	6860      	ldr	r0, [r4, #4]
   21508:	f7ff fe9b 	bl	21242 <net_buf_frags_len>
   2150c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   21510:	1a18      	subs	r0, r3, r0
	if (!len) {
   21512:	b970      	cbnz	r0, 21532 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   21514:	6863      	ldr	r3, [r4, #4]
   21516:	7998      	ldrb	r0, [r3, #6]
   21518:	f7f5 fdba 	bl	17090 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2151c:	2200      	movs	r2, #0
   2151e:	2300      	movs	r3, #0
   21520:	f000 feb1 	bl	22286 <net_buf_alloc_fixed>
		if (!frag) {
   21524:	4605      	mov	r5, r0
   21526:	2800      	cmp	r0, #0
   21528:	d0d7      	beq.n	214da <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   2152a:	4601      	mov	r1, r0
   2152c:	6860      	ldr	r0, [r4, #4]
   2152e:	f000 feef 	bl	22310 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   21532:	2300      	movs	r3, #0
   21534:	9300      	str	r3, [sp, #0]
   21536:	f8d7 9004 	ldr.w	r9, [r7, #4]
   2153a:	4639      	mov	r1, r7
   2153c:	2310      	movs	r3, #16
   2153e:	aa02      	add	r2, sp, #8
   21540:	4640      	mov	r0, r8
   21542:	47c8      	blx	r9
	if (read < 0) {
   21544:	1e07      	subs	r7, r0, #0
   21546:	db26      	blt.n	21596 <find_type_cb+0x122>
	if (read != data->value_len) {
   21548:	7c22      	ldrb	r2, [r4, #16]
   2154a:	68e0      	ldr	r0, [r4, #12]
   2154c:	42ba      	cmp	r2, r7
   2154e:	d01e      	beq.n	2158e <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   21550:	4601      	mov	r1, r0
   21552:	a80b      	add	r0, sp, #44	; 0x2c
   21554:	f7fe ffed 	bl	20532 <bt_uuid_create>
   21558:	b1e8      	cbz	r0, 21596 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   2155a:	b2fa      	uxtb	r2, r7
   2155c:	a902      	add	r1, sp, #8
   2155e:	a806      	add	r0, sp, #24
   21560:	f7fe ffe7 	bl	20532 <bt_uuid_create>
   21564:	b1b8      	cbz	r0, 21596 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   21566:	a906      	add	r1, sp, #24
   21568:	a80b      	add	r0, sp, #44	; 0x2c
   2156a:	f7fe ffb8 	bl	204de <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   2156e:	b990      	cbnz	r0, 21596 <find_type_cb+0x122>
	data->err = 0x00;
   21570:	2300      	movs	r3, #0
   21572:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   21574:	2104      	movs	r1, #4
   21576:	f105 0008 	add.w	r0, r5, #8
   2157a:	f000 feda 	bl	22332 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2157e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   21580:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   21582:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   21584:	e79e      	b.n	214c4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   21586:	4658      	mov	r0, fp
   21588:	f000 ff0e 	bl	223a8 <net_buf_simple_tailroom>
   2158c:	e7c1      	b.n	21512 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   2158e:	a902      	add	r1, sp, #8
   21590:	f7fe ff12 	bl	203b8 <memcmp>
   21594:	e7eb      	b.n	2156e <find_type_cb+0xfa>
	data->group = NULL;
   21596:	2300      	movs	r3, #0
   21598:	60a3      	str	r3, [r4, #8]
   2159a:	e793      	b.n	214c4 <find_type_cb+0x50>

0002159c <find_info_cb>:
{
   2159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2159e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   215a0:	6817      	ldr	r7, [r2, #0]
{
   215a2:	4605      	mov	r5, r0
   215a4:	460e      	mov	r6, r1
   215a6:	4614      	mov	r4, r2
	if (!data->rsp) {
   215a8:	b963      	cbnz	r3, 215c4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   215aa:	6850      	ldr	r0, [r2, #4]
   215ac:	2101      	movs	r1, #1
   215ae:	3008      	adds	r0, #8
   215b0:	f000 febf 	bl	22332 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   215b4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   215b6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   215b8:	781b      	ldrb	r3, [r3, #0]
   215ba:	2b00      	cmp	r3, #0
   215bc:	bf0c      	ite	eq
   215be:	2301      	moveq	r3, #1
   215c0:	2302      	movne	r3, #2
   215c2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   215c4:	68a3      	ldr	r3, [r4, #8]
   215c6:	781b      	ldrb	r3, [r3, #0]
   215c8:	2b01      	cmp	r3, #1
   215ca:	d003      	beq.n	215d4 <find_info_cb+0x38>
   215cc:	2b02      	cmp	r3, #2
   215ce:	d019      	beq.n	21604 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   215d0:	2000      	movs	r0, #0
   215d2:	e016      	b.n	21602 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   215d4:	682b      	ldr	r3, [r5, #0]
   215d6:	781b      	ldrb	r3, [r3, #0]
   215d8:	2b00      	cmp	r3, #0
   215da:	d1f9      	bne.n	215d0 <find_info_cb+0x34>
   215dc:	6860      	ldr	r0, [r4, #4]
   215de:	2104      	movs	r1, #4
   215e0:	3008      	adds	r0, #8
   215e2:	f000 fea6 	bl	22332 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   215e6:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   215e8:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   215ea:	885b      	ldrh	r3, [r3, #2]
   215ec:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   215ee:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   215f0:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   215f2:	899b      	ldrh	r3, [r3, #12]
   215f4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   215f8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   215fa:	2804      	cmp	r0, #4
   215fc:	bf94      	ite	ls
   215fe:	2000      	movls	r0, #0
   21600:	2001      	movhi	r0, #1
}
   21602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21604:	682b      	ldr	r3, [r5, #0]
   21606:	781b      	ldrb	r3, [r3, #0]
   21608:	2b02      	cmp	r3, #2
   2160a:	d1e1      	bne.n	215d0 <find_info_cb+0x34>
   2160c:	6860      	ldr	r0, [r4, #4]
   2160e:	2112      	movs	r1, #18
   21610:	3008      	adds	r0, #8
   21612:	f000 fe8e 	bl	22332 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21616:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21618:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2161a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2161c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   21620:	3101      	adds	r1, #1
   21622:	f7fe fef0 	bl	20406 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   21626:	6863      	ldr	r3, [r4, #4]
   21628:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2162c:	899b      	ldrh	r3, [r3, #12]
   2162e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21630:	2812      	cmp	r0, #18
   21632:	e7e3      	b.n	215fc <find_info_cb+0x60>

00021634 <att_chan_mtu_updated>:
{
   21634:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   21636:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21638:	6a72      	ldr	r2, [r6, #36]	; 0x24
   2163a:	b30a      	cbz	r2, 21680 <att_chan_mtu_updated+0x4c>
   2163c:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   21640:	d01d      	beq.n	2167e <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21642:	6813      	ldr	r3, [r2, #0]
   21644:	b10b      	cbz	r3, 2164a <att_chan_mtu_updated+0x16>
   21646:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2164a:	2200      	movs	r2, #0
   2164c:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2164e:	42a0      	cmp	r0, r4
   21650:	d009      	beq.n	21666 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   21652:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21656:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2165a:	42a9      	cmp	r1, r5
   2165c:	bf38      	it	cc
   2165e:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   21660:	42a2      	cmp	r2, r4
   21662:	bf38      	it	cc
   21664:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21666:	b163      	cbz	r3, 21682 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21668:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   2166c:	d004      	beq.n	21678 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2166e:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   21672:	b10d      	cbz	r5, 21678 <att_chan_mtu_updated+0x44>
   21674:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   21678:	461c      	mov	r4, r3
   2167a:	462b      	mov	r3, r5
   2167c:	e7e7      	b.n	2164e <att_chan_mtu_updated+0x1a>
   2167e:	4622      	mov	r2, r4
   21680:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21682:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21686:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2168a:	428b      	cmp	r3, r1
   2168c:	d801      	bhi.n	21692 <att_chan_mtu_updated+0x5e>
   2168e:	4290      	cmp	r0, r2
   21690:	d909      	bls.n	216a6 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21692:	4282      	cmp	r2, r0
   21694:	bf38      	it	cc
   21696:	4602      	movcc	r2, r0
   21698:	4299      	cmp	r1, r3
   2169a:	6830      	ldr	r0, [r6, #0]
   2169c:	bf38      	it	cc
   2169e:	4619      	movcc	r1, r3
}
   216a0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   216a2:	f7f5 bc6f 	b.w	16f84 <bt_gatt_att_max_mtu_changed>
}
   216a6:	bc70      	pop	{r4, r5, r6}
   216a8:	4770      	bx	lr

000216aa <attr_read_group_cb>:
	if (!data->rsp->len) {
   216aa:	68d0      	ldr	r0, [r2, #12]
   216ac:	7803      	ldrb	r3, [r0, #0]
   216ae:	3104      	adds	r1, #4
   216b0:	b913      	cbnz	r3, 216b8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   216b2:	7001      	strb	r1, [r0, #0]
	return true;
   216b4:	2001      	movs	r0, #1
}
   216b6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   216b8:	428b      	cmp	r3, r1
   216ba:	d0fb      	beq.n	216b4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   216bc:	6891      	ldr	r1, [r2, #8]
   216be:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   216c0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   216c2:	3b04      	subs	r3, #4
   216c4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   216c6:	6110      	str	r0, [r2, #16]
		return false;
   216c8:	4770      	bx	lr

000216ca <chan_req_sent>:
	if (chan->req) {
   216ca:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   216ce:	b133      	cbz	r3, 216de <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   216d0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   216d4:	2300      	movs	r3, #0
   216d6:	f500 7088 	add.w	r0, r0, #272	; 0x110
   216da:	f7fa bb9d 	b.w	1be18 <k_work_reschedule>
}
   216de:	4770      	bx	lr

000216e0 <att_exec_write_req>:
   216e0:	2006      	movs	r0, #6
   216e2:	4770      	bx	lr

000216e4 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   216e4:	30f0      	adds	r0, #240	; 0xf0
   216e6:	f3bf 8f5b 	dmb	ish
   216ea:	e850 3f00 	ldrex	r3, [r0]
   216ee:	f023 0301 	bic.w	r3, r3, #1
   216f2:	e840 3200 	strex	r2, r3, [r0]
   216f6:	2a00      	cmp	r2, #0
   216f8:	d1f7      	bne.n	216ea <chan_rsp_sent+0x6>
   216fa:	f3bf 8f5b 	dmb	ish
}
   216fe:	4770      	bx	lr

00021700 <chan_cfm_sent>:
   21700:	30f0      	adds	r0, #240	; 0xf0
   21702:	f3bf 8f5b 	dmb	ish
   21706:	e850 3f00 	ldrex	r3, [r0]
   2170a:	f023 0302 	bic.w	r3, r3, #2
   2170e:	e840 3200 	strex	r2, r3, [r0]
   21712:	2a00      	cmp	r2, #0
   21714:	d1f7      	bne.n	21706 <chan_cfm_sent+0x6>
   21716:	f3bf 8f5b 	dmb	ish
}
   2171a:	4770      	bx	lr

0002171c <att_get>:
{
   2171c:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2171e:	7a83      	ldrb	r3, [r0, #10]
   21720:	2b07      	cmp	r3, #7
   21722:	d001      	beq.n	21728 <att_get+0xc>
		return NULL;
   21724:	2000      	movs	r0, #0
}
   21726:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21728:	2104      	movs	r1, #4
   2172a:	f7ff fd39 	bl	211a0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2172e:	2800      	cmp	r0, #0
   21730:	d0f8      	beq.n	21724 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21732:	f3bf 8f5b 	dmb	ish
   21736:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   2173a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   2173e:	075b      	lsls	r3, r3, #29
   21740:	d4f0      	bmi.n	21724 <att_get+0x8>
	return att_chan->att;
   21742:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21746:	e7ee      	b.n	21726 <att_get+0xa>

00021748 <bt_att_status>:
{
   21748:	b538      	push	{r3, r4, r5, lr}
   2174a:	f3bf 8f5b 	dmb	ish
   2174e:	680b      	ldr	r3, [r1, #0]
   21750:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21754:	07db      	lsls	r3, r3, #31
{
   21756:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21758:	d519      	bpl.n	2178e <bt_att_status+0x46>
	if (!chan->att) {
   2175a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2175e:	b1b0      	cbz	r0, 2178e <bt_att_status+0x46>
	if (chan->req) {
   21760:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   21764:	b99b      	cbnz	r3, 2178e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   21766:	3004      	adds	r0, #4
   21768:	f7ff fd46 	bl	211f8 <sys_slist_get>
	if (!node) {
   2176c:	4604      	mov	r4, r0
   2176e:	b170      	cbz	r0, 2178e <bt_att_status+0x46>
	return chan_req_send(chan, req);
   21770:	4601      	mov	r1, r0
   21772:	f1a5 0008 	sub.w	r0, r5, #8
   21776:	f7ff fdb1 	bl	212dc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2177a:	2800      	cmp	r0, #0
   2177c:	da07      	bge.n	2178e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2177e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   21782:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21784:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21786:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21788:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2178a:	b902      	cbnz	r2, 2178e <bt_att_status+0x46>
	list->tail = node;
   2178c:	609c      	str	r4, [r3, #8]
}
   2178e:	bd38      	pop	{r3, r4, r5, pc}

00021790 <att_req_send_process>:
{
   21790:	b570      	push	{r4, r5, r6, lr}
   21792:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   21794:	3004      	adds	r0, #4
   21796:	f7ff fd2f 	bl	211f8 <sys_slist_get>
	if (!node) {
   2179a:	4606      	mov	r6, r0
   2179c:	b1c0      	cbz	r0, 217d0 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2179e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   217a0:	b153      	cbz	r3, 217b8 <att_req_send_process+0x28>
   217a2:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   217a6:	d007      	beq.n	217b8 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   217a8:	681c      	ldr	r4, [r3, #0]
   217aa:	b10c      	cbz	r4, 217b0 <att_req_send_process+0x20>
   217ac:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   217b0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   217b4:	b13b      	cbz	r3, 217c6 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   217b6:	b964      	cbnz	r4, 217d2 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   217b8:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   217ba:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   217bc:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   217be:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   217c0:	b933      	cbnz	r3, 217d0 <att_req_send_process+0x40>
	list->tail = node;
   217c2:	60ae      	str	r6, [r5, #8]
}
   217c4:	e004      	b.n	217d0 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   217c6:	4631      	mov	r1, r6
   217c8:	f7ff fd88 	bl	212dc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   217cc:	2800      	cmp	r0, #0
   217ce:	dbf2      	blt.n	217b6 <att_req_send_process+0x26>
}
   217d0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   217d2:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   217d6:	d004      	beq.n	217e2 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   217d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   217dc:	b10b      	cbz	r3, 217e2 <att_req_send_process+0x52>
   217de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   217e2:	4620      	mov	r0, r4
   217e4:	461c      	mov	r4, r3
   217e6:	e7e3      	b.n	217b0 <att_req_send_process+0x20>

000217e8 <write_cb>:
{
   217e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   217ea:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   217ec:	4601      	mov	r1, r0
{
   217ee:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   217f0:	222a      	movs	r2, #42	; 0x2a
   217f2:	6820      	ldr	r0, [r4, #0]
   217f4:	f000 fc93 	bl	2211e <bt_gatt_check_perm>
   217f8:	4605      	mov	r5, r0
   217fa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   217fc:	bb20      	cbnz	r0, 21848 <write_cb+0x60>
	if (!data->req) {
   217fe:	7a23      	ldrb	r3, [r4, #8]
   21800:	b1ab      	cbz	r3, 2182e <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   21802:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   21804:	bf14      	ite	ne
   21806:	2300      	movne	r3, #0
   21808:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2180a:	9301      	str	r3, [sp, #4]
   2180c:	8a63      	ldrh	r3, [r4, #18]
   2180e:	9300      	str	r3, [sp, #0]
   21810:	68b7      	ldr	r7, [r6, #8]
   21812:	8a23      	ldrh	r3, [r4, #16]
   21814:	68e2      	ldr	r2, [r4, #12]
   21816:	6820      	ldr	r0, [r4, #0]
   21818:	4631      	mov	r1, r6
   2181a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2181c:	1e03      	subs	r3, r0, #0
   2181e:	db08      	blt.n	21832 <write_cb+0x4a>
   21820:	8a22      	ldrh	r2, [r4, #16]
   21822:	4293      	cmp	r3, r2
   21824:	d10e      	bne.n	21844 <write_cb+0x5c>
	data->err = 0U;
   21826:	2300      	movs	r3, #0
   21828:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2182a:	2501      	movs	r5, #1
   2182c:	e007      	b.n	2183e <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2182e:	2302      	movs	r3, #2
   21830:	e7eb      	b.n	2180a <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   21832:	f113 0fff 	cmn.w	r3, #255	; 0xff
   21836:	d305      	bcc.n	21844 <write_cb+0x5c>
		return -err;
   21838:	425b      	negs	r3, r3
   2183a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2183c:	7523      	strb	r3, [r4, #20]
}
   2183e:	4628      	mov	r0, r5
   21840:	b003      	add	sp, #12
   21842:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21844:	230e      	movs	r3, #14
   21846:	e7f9      	b.n	2183c <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   21848:	2500      	movs	r5, #0
   2184a:	e7f8      	b.n	2183e <write_cb+0x56>

0002184c <bt_att_sent>:
{
   2184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2184e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   21852:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   21856:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21858:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2185c:	b10b      	cbz	r3, 21862 <bt_att_sent+0x16>
		chan->sent(chan);
   2185e:	4638      	mov	r0, r7
   21860:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21862:	f3bf 8f5b 	dmb	ish
   21866:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2186a:	e853 2f00 	ldrex	r2, [r3]
   2186e:	f022 0210 	bic.w	r2, r2, #16
   21872:	e843 2100 	strex	r1, r2, [r3]
   21876:	2900      	cmp	r1, #0
   21878:	d1f7      	bne.n	2186a <bt_att_sent+0x1e>
   2187a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2187e:	b30c      	cbz	r4, 218c4 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21880:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   21884:	b98b      	cbnz	r3, 218aa <bt_att_sent+0x5e>
   21886:	6863      	ldr	r3, [r4, #4]
   21888:	b17b      	cbz	r3, 218aa <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2188a:	1d20      	adds	r0, r4, #4
   2188c:	f7ff fcb4 	bl	211f8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21890:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21892:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21894:	4638      	mov	r0, r7
   21896:	f7ff fd21 	bl	212dc <chan_req_send>
   2189a:	2800      	cmp	r0, #0
   2189c:	da12      	bge.n	218c4 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2189e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   218a0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   218a2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   218a4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   218a6:	b903      	cbnz	r3, 218aa <bt_att_sent+0x5e>
	list->tail = node;
   218a8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   218aa:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   218ae:	4638      	mov	r0, r7
   218b0:	f7ff fd30 	bl	21314 <process_queue>
	if (!err) {
   218b4:	b130      	cbz	r0, 218c4 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   218b6:	f104 010c 	add.w	r1, r4, #12
   218ba:	4638      	mov	r0, r7
}
   218bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   218c0:	f7ff bd28 	b.w	21314 <process_queue>
}
   218c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000218c6 <read_cb>:
{
   218c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   218ca:	f8d2 8000 	ldr.w	r8, [r2]
{
   218ce:	4606      	mov	r6, r0
	data->err = 0x00;
   218d0:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   218d2:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   218d6:	7317      	strb	r7, [r2, #12]
{
   218d8:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   218da:	4631      	mov	r1, r6
   218dc:	2215      	movs	r2, #21
   218de:	f000 fc1e 	bl	2211e <bt_gatt_check_perm>
   218e2:	4604      	mov	r4, r0
   218e4:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   218e6:	b9a0      	cbnz	r0, 21912 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   218e8:	e9cd 0000 	strd	r0, r0, [sp]
   218ec:	88ab      	ldrh	r3, [r5, #4]
   218ee:	68aa      	ldr	r2, [r5, #8]
   218f0:	4631      	mov	r1, r6
   218f2:	4640      	mov	r0, r8
   218f4:	f7ff fd33 	bl	2135e <att_chan_read>
	if (ret < 0) {
   218f8:	1e03      	subs	r3, r0, #0
   218fa:	da0c      	bge.n	21916 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   218fc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   21900:	bf26      	itte	cs
   21902:	425b      	negcs	r3, r3
   21904:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21906:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21908:	732b      	strb	r3, [r5, #12]
}
   2190a:	4620      	mov	r0, r4
   2190c:	b002      	add	sp, #8
   2190e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   21912:	463c      	mov	r4, r7
   21914:	e7f9      	b.n	2190a <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   21916:	2401      	movs	r4, #1
   21918:	e7f7      	b.n	2190a <read_cb+0x44>

0002191a <bt_att_chan_create_pdu>:
{
   2191a:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2191c:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   21920:	3201      	adds	r2, #1
   21922:	429a      	cmp	r2, r3
{
   21924:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21926:	d81b      	bhi.n	21960 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   21928:	4608      	mov	r0, r1
   2192a:	f7ff fcaa 	bl	21282 <att_op_get_type>
   2192e:	2802      	cmp	r0, #2
   21930:	d001      	beq.n	21936 <bt_att_chan_create_pdu+0x1c>
   21932:	2804      	cmp	r0, #4
   21934:	d10f      	bne.n	21956 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   21936:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2193a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   2193c:	2100      	movs	r1, #0
   2193e:	4608      	mov	r0, r1
   21940:	f7ff fbd1 	bl	210e6 <bt_l2cap_create_pdu_timeout>
   21944:	4604      	mov	r4, r0
	if (!buf) {
   21946:	b120      	cbz	r0, 21952 <bt_att_chan_create_pdu+0x38>
   21948:	2101      	movs	r1, #1
   2194a:	3008      	adds	r0, #8
   2194c:	f000 fcf1 	bl	22332 <net_buf_simple_add>
	hdr->code = op;
   21950:	7005      	strb	r5, [r0, #0]
}
   21952:	4620      	mov	r0, r4
   21954:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   21956:	f04f 32ff 	mov.w	r2, #4294967295
   2195a:	f04f 33ff 	mov.w	r3, #4294967295
   2195e:	e7ed      	b.n	2193c <bt_att_chan_create_pdu+0x22>
		return NULL;
   21960:	2400      	movs	r4, #0
   21962:	e7f6      	b.n	21952 <bt_att_chan_create_pdu+0x38>

00021964 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21968:	4688      	mov	r8, r1
   2196a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2196c:	2101      	movs	r1, #1
   2196e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21970:	4605      	mov	r5, r0
   21972:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21974:	f7ff ffd1 	bl	2191a <bt_att_chan_create_pdu>
	if (!buf) {
   21978:	4604      	mov	r4, r0
   2197a:	b170      	cbz	r0, 2199a <send_err_rsp.part.0+0x36>
   2197c:	2104      	movs	r1, #4
   2197e:	3008      	adds	r0, #8
   21980:	f000 fcd7 	bl	22332 <net_buf_simple_add>
	rsp->request = req;
   21984:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   21988:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2198a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2198e:	4621      	mov	r1, r4
   21990:	4628      	mov	r0, r5
}
   21992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21996:	f7f4 bb0b 	b.w	15fb0 <bt_att_chan_send_rsp.constprop.0>
}
   2199a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002199e <bt_att_create_pdu>:
{
   2199e:	b570      	push	{r4, r5, r6, lr}
   219a0:	460e      	mov	r6, r1
   219a2:	4615      	mov	r5, r2
	att = att_get(conn);
   219a4:	f7ff feba 	bl	2171c <att_get>
	if (!att) {
   219a8:	b170      	cbz	r0, 219c8 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   219ac:	b163      	cbz	r3, 219c8 <bt_att_create_pdu+0x2a>
   219ae:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   219b2:	d009      	beq.n	219c8 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   219b4:	681b      	ldr	r3, [r3, #0]
   219b6:	b10b      	cbz	r3, 219bc <bt_att_create_pdu+0x1e>
   219b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   219bc:	1c6a      	adds	r2, r5, #1
   219be:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   219c2:	428a      	cmp	r2, r1
   219c4:	d902      	bls.n	219cc <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219c6:	b93b      	cbnz	r3, 219d8 <bt_att_create_pdu+0x3a>
}
   219c8:	2000      	movs	r0, #0
   219ca:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   219cc:	462a      	mov	r2, r5
   219ce:	4631      	mov	r1, r6
}
   219d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   219d4:	f7ff bfa1 	b.w	2191a <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   219d8:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   219dc:	d004      	beq.n	219e8 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   219de:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219e2:	b10c      	cbz	r4, 219e8 <bt_att_create_pdu+0x4a>
   219e4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   219e8:	4618      	mov	r0, r3
   219ea:	4623      	mov	r3, r4
   219ec:	e7e7      	b.n	219be <bt_att_create_pdu+0x20>

000219ee <att_read_blob_req>:
{
   219ee:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   219f0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   219f2:	8813      	ldrh	r3, [r2, #0]
   219f4:	8852      	ldrh	r2, [r2, #2]
   219f6:	9200      	str	r2, [sp, #0]
   219f8:	210c      	movs	r1, #12
   219fa:	220d      	movs	r2, #13
   219fc:	f7f4 fd3a 	bl	16474 <att_read_rsp>
}
   21a00:	b003      	add	sp, #12
   21a02:	f85d fb04 	ldr.w	pc, [sp], #4

00021a06 <att_read_req>:
{
   21a06:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21a08:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21a0a:	2200      	movs	r2, #0
   21a0c:	881b      	ldrh	r3, [r3, #0]
   21a0e:	9200      	str	r2, [sp, #0]
   21a10:	210a      	movs	r1, #10
   21a12:	220b      	movs	r2, #11
   21a14:	f7f4 fd2e 	bl	16474 <att_read_rsp>
}
   21a18:	b003      	add	sp, #12
   21a1a:	f85d fb04 	ldr.w	pc, [sp], #4

00021a1e <att_mtu_req>:
{
   21a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21a20:	6803      	ldr	r3, [r0, #0]
{
   21a22:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   21a24:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a26:	f3bf 8f5b 	dmb	ish
   21a2a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   21a2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21a32:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   21a36:	071b      	lsls	r3, r3, #28
   21a38:	d421      	bmi.n	21a7e <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21a3a:	688b      	ldr	r3, [r1, #8]
   21a3c:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21a3e:	2e16      	cmp	r6, #22
   21a40:	d91f      	bls.n	21a82 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21a42:	2202      	movs	r2, #2
   21a44:	2103      	movs	r1, #3
   21a46:	f7ff ffaa 	bl	2199e <bt_att_create_pdu>
	if (!pdu) {
   21a4a:	4607      	mov	r7, r0
   21a4c:	b1d8      	cbz	r0, 21a86 <att_mtu_req+0x68>
   21a4e:	2102      	movs	r1, #2
   21a50:	3008      	adds	r0, #8
   21a52:	f000 fc6e 	bl	22332 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21a56:	f06f 0303 	mvn.w	r3, #3
   21a5a:	7003      	strb	r3, [r0, #0]
   21a5c:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21a5e:	4639      	mov	r1, r7
   21a60:	4620      	mov	r0, r4
   21a62:	f7f4 faa5 	bl	15fb0 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21a66:	2efc      	cmp	r6, #252	; 0xfc
   21a68:	bf28      	it	cs
   21a6a:	26fc      	movcs	r6, #252	; 0xfc
	att_chan_mtu_updated(chan);
   21a6c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21a6e:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21a72:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   21a76:	f7ff fddd 	bl	21634 <att_chan_mtu_updated>
	return 0;
   21a7a:	4628      	mov	r0, r5
}
   21a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21a7e:	2006      	movs	r0, #6
   21a80:	e7fc      	b.n	21a7c <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   21a82:	2004      	movs	r0, #4
   21a84:	e7fa      	b.n	21a7c <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   21a86:	200e      	movs	r0, #14
   21a88:	e7f8      	b.n	21a7c <att_mtu_req+0x5e>

00021a8a <bt_att_init>:
	bt_gatt_init();
   21a8a:	f7f4 bf99 	b.w	169c0 <bt_gatt_init>

00021a8e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21a8e:	898a      	ldrh	r2, [r1, #12]
   21a90:	6889      	ldr	r1, [r1, #8]
   21a92:	2300      	movs	r3, #0
   21a94:	f7f4 be60 	b.w	16758 <att_handle_rsp>

00021a98 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   21a98:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   21a9c:	f7f4 be8e 	b.w	167bc <bt_att_disconnected>

00021aa0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21aa4:	4607      	mov	r7, r0
   21aa6:	460d      	mov	r5, r1
   21aa8:	4616      	mov	r6, r2
   21aaa:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21aac:	f7ff fe36 	bl	2171c <att_get>
	if (!att) {
   21ab0:	4604      	mov	r4, r0
   21ab2:	b938      	cbnz	r0, 21ac4 <bt_att_send+0x24>
		net_buf_unref(buf);
   21ab4:	4628      	mov	r0, r5
   21ab6:	f7f5 fbab 	bl	17210 <net_buf_unref>
		return -ENOTCONN;
   21aba:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21abe:	b002      	add	sp, #8
   21ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21ac4:	b146      	cbz	r6, 21ad8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21ac6:	f8cd 8000 	str.w	r8, [sp]
   21aca:	4633      	mov	r3, r6
   21acc:	462a      	mov	r2, r5
   21ace:	2104      	movs	r1, #4
   21ad0:	4638      	mov	r0, r7
   21ad2:	f7ff fb0b 	bl	210ec <bt_l2cap_send_cb>
   21ad6:	e7f2      	b.n	21abe <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21ad8:	f100 060c 	add.w	r6, r0, #12
   21adc:	4629      	mov	r1, r5
   21ade:	4630      	mov	r0, r6
   21ae0:	f000 fbf4 	bl	222cc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21ae4:	2200      	movs	r2, #0
   21ae6:	2300      	movs	r3, #0
   21ae8:	4630      	mov	r0, r6
   21aea:	f000 fbd1 	bl	22290 <net_buf_get>
	if (!buf) {
   21aee:	4605      	mov	r5, r0
   21af0:	b908      	cbnz	r0, 21af6 <bt_att_send+0x56>
	return 0;
   21af2:	2000      	movs	r0, #0
   21af4:	e7e3      	b.n	21abe <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21af8:	b1c3      	cbz	r3, 21b2c <bt_att_send+0x8c>
   21afa:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   21afe:	d015      	beq.n	21b2c <bt_att_send+0x8c>
   21b00:	681c      	ldr	r4, [r3, #0]
   21b02:	b10c      	cbz	r4, 21b08 <bt_att_send+0x68>
   21b04:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   21b08:	2200      	movs	r2, #0
   21b0a:	4629      	mov	r1, r5
   21b0c:	f7f4 f948 	bl	15da0 <chan_send>
		if (err >= 0) {
   21b10:	2800      	cmp	r0, #0
   21b12:	daee      	bge.n	21af2 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b14:	b154      	cbz	r4, 21b2c <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21b16:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   21b1a:	d004      	beq.n	21b26 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b1c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   21b20:	b10b      	cbz	r3, 21b26 <bt_att_send+0x86>
   21b22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   21b26:	4620      	mov	r0, r4
   21b28:	461c      	mov	r4, r3
   21b2a:	e7ed      	b.n	21b08 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   21b2c:	4629      	mov	r1, r5
   21b2e:	4630      	mov	r0, r6
   21b30:	f001 fe1d 	bl	2376e <k_queue_prepend>
   21b34:	e7dd      	b.n	21af2 <bt_att_send+0x52>

00021b36 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   21b36:	b510      	push	{r4, lr}
   21b38:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   21b3a:	f7ff fdef 	bl	2171c <att_get>
	if (!att) {
   21b3e:	b160      	cbz	r0, 21b5a <bt_att_req_send+0x24>
	parent->next = child;
   21b40:	2300      	movs	r3, #0
   21b42:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21b44:	6883      	ldr	r3, [r0, #8]
   21b46:	b92b      	cbnz	r3, 21b54 <bt_att_req_send+0x1e>
	list->head = node;
   21b48:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   21b4c:	f7ff fe20 	bl	21790 <att_req_send_process>

	return 0;
   21b50:	2000      	movs	r0, #0
}
   21b52:	bd10      	pop	{r4, pc}
	parent->next = child;
   21b54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21b56:	6084      	str	r4, [r0, #8]
}
   21b58:	e7f8      	b.n	21b4c <bt_att_req_send+0x16>
		return -ENOTCONN;
   21b5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21b5e:	e7f8      	b.n	21b52 <bt_att_req_send+0x1c>

00021b60 <gatt_ccc_changed>:
{
   21b60:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21b62:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21b64:	895a      	ldrh	r2, [r3, #10]
   21b66:	428a      	cmp	r2, r1
   21b68:	d003      	beq.n	21b72 <gatt_ccc_changed+0x12>
		ccc->value = value;
   21b6a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21b6c:	68db      	ldr	r3, [r3, #12]
   21b6e:	b103      	cbz	r3, 21b72 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21b70:	4718      	bx	r3
}
   21b72:	4770      	bx	lr

00021b74 <gatt_indicate_rsp>:
{
   21b74:	b510      	push	{r4, lr}
   21b76:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21b78:	68a3      	ldr	r3, [r4, #8]
{
   21b7a:	460a      	mov	r2, r1
	if (params->func) {
   21b7c:	b10b      	cbz	r3, 21b82 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21b7e:	4621      	mov	r1, r4
   21b80:	4798      	blx	r3
	params->_ref--;
   21b82:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b84:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21b86:	3b01      	subs	r3, #1
   21b88:	b2db      	uxtb	r3, r3
   21b8a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21b8c:	b122      	cbz	r2, 21b98 <gatt_indicate_rsp+0x24>
   21b8e:	b91b      	cbnz	r3, 21b98 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21b90:	4620      	mov	r0, r4
}
   21b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21b96:	4710      	bx	r2
}
   21b98:	bd10      	pop	{r4, pc}

00021b9a <match_uuid>:
	data->attr = attr;
   21b9a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21b9c:	8091      	strh	r1, [r2, #4]
}
   21b9e:	2000      	movs	r0, #0
   21ba0:	4770      	bx	lr

00021ba2 <gen_hash_m>:
{
   21ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21ba4:	6807      	ldr	r7, [r0, #0]
   21ba6:	783d      	ldrb	r5, [r7, #0]
{
   21ba8:	b089      	sub	sp, #36	; 0x24
   21baa:	4606      	mov	r6, r0
   21bac:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21bae:	b10d      	cbz	r5, 21bb4 <gen_hash_m+0x12>
	switch (u16->val) {
   21bb0:	2501      	movs	r5, #1
   21bb2:	e014      	b.n	21bde <gen_hash_m+0x3c>
   21bb4:	887b      	ldrh	r3, [r7, #2]
   21bb6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21bba:	d004      	beq.n	21bc6 <gen_hash_m+0x24>
   21bbc:	d812      	bhi.n	21be4 <gen_hash_m+0x42>
   21bbe:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21bc2:	2b03      	cmp	r3, #3
   21bc4:	d8f4      	bhi.n	21bb0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21bc6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bca:	2202      	movs	r2, #2
   21bcc:	f10d 010e 	add.w	r1, sp, #14
   21bd0:	4620      	mov	r0, r4
   21bd2:	f7fe fb1f 	bl	20214 <tc_cmac_update>
   21bd6:	b9e0      	cbnz	r0, 21c12 <gen_hash_m+0x70>
			state->err = -EINVAL;
   21bd8:	f06f 0315 	mvn.w	r3, #21
   21bdc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21bde:	4628      	mov	r0, r5
   21be0:	b009      	add	sp, #36	; 0x24
   21be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21be4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21be8:	33ff      	adds	r3, #255	; 0xff
   21bea:	b29b      	uxth	r3, r3
   21bec:	2b04      	cmp	r3, #4
   21bee:	d8df      	bhi.n	21bb0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21bf0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21bf4:	2202      	movs	r2, #2
   21bf6:	f10d 010e 	add.w	r1, sp, #14
   21bfa:	4620      	mov	r0, r4
   21bfc:	f7fe fb0a 	bl	20214 <tc_cmac_update>
   21c00:	2800      	cmp	r0, #0
   21c02:	d0e9      	beq.n	21bd8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21c04:	887b      	ldrh	r3, [r7, #2]
   21c06:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c0a:	2202      	movs	r2, #2
   21c0c:	f10d 010e 	add.w	r1, sp, #14
   21c10:	e017      	b.n	21c42 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   21c12:	887b      	ldrh	r3, [r7, #2]
   21c14:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c18:	2202      	movs	r2, #2
   21c1a:	f10d 010e 	add.w	r1, sp, #14
   21c1e:	4620      	mov	r0, r4
   21c20:	f7fe faf8 	bl	20214 <tc_cmac_update>
   21c24:	2800      	cmp	r0, #0
   21c26:	d0d7      	beq.n	21bd8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21c28:	2000      	movs	r0, #0
   21c2a:	2310      	movs	r3, #16
   21c2c:	eb0d 0203 	add.w	r2, sp, r3
   21c30:	6877      	ldr	r7, [r6, #4]
   21c32:	9000      	str	r0, [sp, #0]
   21c34:	4631      	mov	r1, r6
   21c36:	47b8      	blx	r7
		if (len < 0) {
   21c38:	1e02      	subs	r2, r0, #0
   21c3a:	da01      	bge.n	21c40 <gen_hash_m+0x9e>
			state->err = len;
   21c3c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21c3e:	e7ce      	b.n	21bde <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21c40:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c42:	4620      	mov	r0, r4
   21c44:	f7fe fae6 	bl	20214 <tc_cmac_update>
   21c48:	2800      	cmp	r0, #0
   21c4a:	d1b1      	bne.n	21bb0 <gen_hash_m+0xe>
   21c4c:	e7c4      	b.n	21bd8 <gen_hash_m+0x36>

00021c4e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21c4e:	2301      	movs	r3, #1
   21c50:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21c52:	f3bf 8f5b 	dmb	ish
   21c56:	e850 2f00 	ldrex	r2, [r0]
   21c5a:	431a      	orrs	r2, r3
   21c5c:	e840 2100 	strex	r1, r2, [r0]
   21c60:	2900      	cmp	r1, #0
   21c62:	d1f8      	bne.n	21c56 <atomic_set_bit+0x8>
   21c64:	f3bf 8f5b 	dmb	ish
}
   21c68:	4770      	bx	lr

00021c6a <find_ccc_cfg>:
{
   21c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21c6c:	460c      	mov	r4, r1
   21c6e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   21c70:	b148      	cbz	r0, 21c86 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21c72:	7809      	ldrb	r1, [r1, #0]
   21c74:	462a      	mov	r2, r5
   21c76:	f7ff f973 	bl	20f60 <bt_conn_is_peer_addr_le>
   21c7a:	2800      	cmp	r0, #0
	return NULL;
   21c7c:	bf08      	it	eq
   21c7e:	2400      	moveq	r4, #0
}
   21c80:	4620      	mov	r0, r4
   21c82:	b003      	add	sp, #12
   21c84:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21c86:	9000      	str	r0, [sp, #0]
   21c88:	2207      	movs	r2, #7
   21c8a:	f8cd 0003 	str.w	r0, [sp, #3]
   21c8e:	4669      	mov	r1, sp
   21c90:	4628      	mov	r0, r5
   21c92:	f7fe fb91 	bl	203b8 <memcmp>
   21c96:	2800      	cmp	r0, #0
	return NULL;
   21c98:	bf18      	it	ne
   21c9a:	2400      	movne	r4, #0
   21c9c:	e7f0      	b.n	21c80 <find_ccc_cfg+0x16>

00021c9e <sc_restore_rsp>:
{
   21c9e:	b538      	push	{r3, r4, r5, lr}
   21ca0:	4605      	mov	r5, r0
   21ca2:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   21ca4:	f7f4 fdf0 	bl	16888 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   21ca8:	b130      	cbz	r0, 21cb8 <sc_restore_rsp+0x1a>
   21caa:	7a03      	ldrb	r3, [r0, #8]
   21cac:	07db      	lsls	r3, r3, #31
   21cae:	d503      	bpl.n	21cb8 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21cb0:	2100      	movs	r1, #0
   21cb2:	300c      	adds	r0, #12
   21cb4:	f7ff ffcb 	bl	21c4e <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   21cb8:	b964      	cbnz	r4, 21cd4 <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21cba:	7a28      	ldrb	r0, [r5, #8]
   21cbc:	f105 0188 	add.w	r1, r5, #136	; 0x88
   21cc0:	f7f4 fdd2 	bl	16868 <find_sc_cfg>
		if (sc_cfg) {
   21cc4:	b130      	cbz	r0, 21cd4 <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   21cc6:	4621      	mov	r1, r4
   21cc8:	2204      	movs	r2, #4
}
   21cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   21cce:	3008      	adds	r0, #8
   21cd0:	f7fe bba4 	b.w	2041c <memset>
}
   21cd4:	bd38      	pop	{r3, r4, r5, pc}

00021cd6 <bt_gatt_attr_write_ccc>:
{
   21cd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21cda:	461f      	mov	r7, r3
   21cdc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   21ce0:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   21ce4:	4606      	mov	r6, r0
   21ce6:	4688      	mov	r8, r1
	if (offset) {
   21ce8:	2b00      	cmp	r3, #0
   21cea:	d146      	bne.n	21d7a <bt_gatt_attr_write_ccc+0xa4>
	if (!len || len > sizeof(uint16_t)) {
   21cec:	1e7b      	subs	r3, r7, #1
   21cee:	2b01      	cmp	r3, #1
   21cf0:	d846      	bhi.n	21d80 <bt_gatt_attr_write_ccc+0xaa>
	if (len < sizeof(uint16_t)) {
   21cf2:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   21cf4:	7815      	ldrb	r5, [r2, #0]
   21cf6:	bf18      	it	ne
   21cf8:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   21cfa:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   21cfc:	bf0c      	ite	eq
   21cfe:	b2ad      	uxtheq	r5, r5
   21d00:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   21d04:	f7ff ffb1 	bl	21c6a <find_ccc_cfg>
	if (!cfg) {
   21d08:	4604      	mov	r4, r0
   21d0a:	b988      	cbnz	r0, 21d30 <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   21d0c:	b91d      	cbnz	r5, 21d16 <bt_gatt_attr_write_ccc+0x40>
			return len;
   21d0e:	4638      	mov	r0, r7
}
   21d10:	b003      	add	sp, #12
   21d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   21d16:	4649      	mov	r1, r9
   21d18:	f7ff ffa7 	bl	21c6a <find_ccc_cfg>
		if (!cfg) {
   21d1c:	4604      	mov	r4, r0
   21d1e:	b390      	cbz	r0, 21d86 <bt_gatt_attr_write_ccc+0xb0>
	memcpy(dst, src, sizeof(*dst));
   21d20:	2207      	movs	r2, #7
   21d22:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21d26:	3001      	adds	r0, #1
   21d28:	f7fe fb6d 	bl	20406 <memcpy>
		cfg->id = conn->id;
   21d2c:	7a33      	ldrb	r3, [r6, #8]
   21d2e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   21d30:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21d34:	b9ab      	cbnz	r3, 21d62 <bt_gatt_attr_write_ccc+0x8c>
	if (cfg->value != ccc->value) {
   21d36:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   21d3a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   21d3c:	42ab      	cmp	r3, r5
   21d3e:	d003      	beq.n	21d48 <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   21d40:	4649      	mov	r1, r9
   21d42:	4640      	mov	r0, r8
   21d44:	f7ff ff0c 	bl	21b60 <gatt_ccc_changed>
	if (!value) {
   21d48:	2d00      	cmp	r5, #0
   21d4a:	d1e0      	bne.n	21d0e <bt_gatt_attr_write_ccc+0x38>
   21d4c:	2207      	movs	r2, #7
   21d4e:	4669      	mov	r1, sp
   21d50:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21d52:	9500      	str	r5, [sp, #0]
   21d54:	f8cd 5003 	str.w	r5, [sp, #3]
   21d58:	f7fe fb55 	bl	20406 <memcpy>
	cfg->id = 0U;
   21d5c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   21d5e:	8125      	strh	r5, [r4, #8]
}
   21d60:	e7d5      	b.n	21d0e <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   21d62:	462a      	mov	r2, r5
   21d64:	4641      	mov	r1, r8
   21d66:	4630      	mov	r0, r6
   21d68:	4798      	blx	r3
		if (write < 0) {
   21d6a:	2800      	cmp	r0, #0
   21d6c:	dbd0      	blt.n	21d10 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   21d6e:	3801      	subs	r0, #1
   21d70:	2801      	cmp	r0, #1
   21d72:	d9e0      	bls.n	21d36 <bt_gatt_attr_write_ccc+0x60>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   21d74:	f06f 000d 	mvn.w	r0, #13
   21d78:	e7ca      	b.n	21d10 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21d7a:	f06f 0006 	mvn.w	r0, #6
   21d7e:	e7c7      	b.n	21d10 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21d80:	f06f 000c 	mvn.w	r0, #12
   21d84:	e7c4      	b.n	21d10 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21d86:	f06f 0010 	mvn.w	r0, #16
   21d8a:	e7c1      	b.n	21d10 <bt_gatt_attr_write_ccc+0x3a>

00021d8c <clear_cf_cfg>:
{
   21d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21d8e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21d90:	2500      	movs	r5, #0
   21d92:	2207      	movs	r2, #7
   21d94:	4669      	mov	r1, sp
   21d96:	3001      	adds	r0, #1
   21d98:	9500      	str	r5, [sp, #0]
   21d9a:	f8cd 5003 	str.w	r5, [sp, #3]
   21d9e:	f7fe fb32 	bl	20406 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   21da2:	f104 0008 	add.w	r0, r4, #8
   21da6:	2201      	movs	r2, #1
   21da8:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21daa:	340c      	adds	r4, #12
   21dac:	f7fe fb36 	bl	2041c <memset>
   21db0:	f3bf 8f5b 	dmb	ish
   21db4:	e854 3f00 	ldrex	r3, [r4]
   21db8:	e844 5200 	strex	r2, r5, [r4]
   21dbc:	2a00      	cmp	r2, #0
   21dbe:	d1f9      	bne.n	21db4 <clear_cf_cfg+0x28>
   21dc0:	f3bf 8f5b 	dmb	ish
}
   21dc4:	b003      	add	sp, #12
   21dc6:	bd30      	pop	{r4, r5, pc}

00021dc8 <cf_write>:
{
   21dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dcc:	4698      	mov	r8, r3
   21dce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   21dd2:	2b01      	cmp	r3, #1
{
   21dd4:	4606      	mov	r6, r0
   21dd6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   21dd8:	d831      	bhi.n	21e3e <cf_write+0x76>
	if (offset + len > sizeof(cfg->data)) {
   21dda:	4443      	add	r3, r8
   21ddc:	2b01      	cmp	r3, #1
   21dde:	4645      	mov	r5, r8
   21de0:	dc30      	bgt.n	21e44 <cf_write+0x7c>
	cfg = find_cf_cfg(conn);
   21de2:	f7f4 fd51 	bl	16888 <find_cf_cfg>
	if (!cfg) {
   21de6:	4604      	mov	r4, r0
   21de8:	b918      	cbnz	r0, 21df2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   21dea:	f7f4 fd4d 	bl	16888 <find_cf_cfg>
	if (!cfg) {
   21dee:	4604      	mov	r4, r0
   21df0:	b358      	cbz	r0, 21e4a <cf_write+0x82>
{
   21df2:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21df4:	f1b8 0f00 	cmp.w	r8, #0
   21df8:	d10f      	bne.n	21e1a <cf_write+0x52>
   21dfa:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21dfe:	2207      	movs	r2, #7
   21e00:	1c60      	adds	r0, r4, #1
   21e02:	f7fe fb00 	bl	20406 <memcpy>
	cfg->id = conn->id;
   21e06:	4620      	mov	r0, r4
   21e08:	7a33      	ldrb	r3, [r6, #8]
   21e0a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21e0e:	2100      	movs	r1, #0
   21e10:	f7ff ff1d 	bl	21c4e <atomic_set_bit>
}
   21e14:	4628      	mov	r0, r5
   21e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21e1a:	7a20      	ldrb	r0, [r4, #8]
   21e1c:	fa20 f301 	lsr.w	r3, r0, r1
   21e20:	07da      	lsls	r2, r3, #31
   21e22:	d503      	bpl.n	21e2c <cf_write+0x64>
		    !(value[i / 8] & BIT(i % 8))) {
   21e24:	783b      	ldrb	r3, [r7, #0]
   21e26:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21e28:	07db      	lsls	r3, r3, #31
   21e2a:	d511      	bpl.n	21e50 <cf_write+0x88>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21e2c:	3101      	adds	r1, #1
   21e2e:	2903      	cmp	r1, #3
   21e30:	d1e0      	bne.n	21df4 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   21e32:	783b      	ldrb	r3, [r7, #0]
   21e34:	f003 0307 	and.w	r3, r3, #7
   21e38:	4318      	orrs	r0, r3
   21e3a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   21e3c:	e7dd      	b.n	21dfa <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e3e:	f06f 0506 	mvn.w	r5, #6
   21e42:	e7e7      	b.n	21e14 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21e44:	f06f 050c 	mvn.w	r5, #12
   21e48:	e7e4      	b.n	21e14 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21e4a:	f06f 0510 	mvn.w	r5, #16
   21e4e:	e7e1      	b.n	21e14 <cf_write+0x4c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   21e50:	f06f 0512 	mvn.w	r5, #18
   21e54:	e7de      	b.n	21e14 <cf_write+0x4c>

00021e56 <read_appearance>:
{
   21e56:	b513      	push	{r0, r1, r4, lr}
   21e58:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21e5c:	4610      	mov	r0, r2
	if (offset > value_len) {
   21e5e:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   21e60:	f44f 6218 	mov.w	r2, #2432	; 0x980
   21e64:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   21e68:	d80d      	bhi.n	21e86 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   21e6a:	f1c1 0402 	rsb	r4, r1, #2
   21e6e:	429c      	cmp	r4, r3
   21e70:	bfa8      	it	ge
   21e72:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   21e74:	f10d 0306 	add.w	r3, sp, #6
   21e78:	4622      	mov	r2, r4
   21e7a:	4419      	add	r1, r3
   21e7c:	f7fe fac3 	bl	20406 <memcpy>
}
   21e80:	4620      	mov	r0, r4
   21e82:	b002      	add	sp, #8
   21e84:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21e86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21e8a:	e7f9      	b.n	21e80 <read_appearance+0x2a>

00021e8c <read_name>:
{
   21e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e90:	4698      	mov	r8, r3
   21e92:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   21e96:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   21e98:	f7f2 fdd0 	bl	14a3c <bt_get_name>
   21e9c:	4607      	mov	r7, r0
				 strlen(name));
   21e9e:	f7fe fa6f 	bl	20380 <strlen>
	if (offset > value_len) {
   21ea2:	b283      	uxth	r3, r0
   21ea4:	42b3      	cmp	r3, r6
   21ea6:	d30c      	bcc.n	21ec2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   21ea8:	1b9c      	subs	r4, r3, r6
   21eaa:	4544      	cmp	r4, r8
   21eac:	bfa8      	it	ge
   21eae:	4644      	movge	r4, r8
   21eb0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   21eb2:	4622      	mov	r2, r4
   21eb4:	19b9      	adds	r1, r7, r6
   21eb6:	4628      	mov	r0, r5
   21eb8:	f7fe faa5 	bl	20406 <memcpy>
}
   21ebc:	4620      	mov	r0, r4
   21ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21ec2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21ec6:	e7f9      	b.n	21ebc <read_name+0x30>

00021ec8 <cf_read>:
{
   21ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21eca:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   21ecc:	2300      	movs	r3, #0
{
   21ece:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   21ed2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   21ed6:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   21ed8:	f7f4 fcd6 	bl	16888 <find_cf_cfg>
	if (cfg) {
   21edc:	b128      	cbz	r0, 21eea <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   21ede:	f100 0108 	add.w	r1, r0, #8
   21ee2:	2201      	movs	r2, #1
   21ee4:	a801      	add	r0, sp, #4
   21ee6:	f7fe fa8e 	bl	20406 <memcpy>
	if (offset > value_len) {
   21eea:	2e01      	cmp	r6, #1
   21eec:	d80d      	bhi.n	21f0a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   21eee:	f1c6 0401 	rsb	r4, r6, #1
   21ef2:	42bc      	cmp	r4, r7
   21ef4:	bfa8      	it	ge
   21ef6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21ef8:	ab01      	add	r3, sp, #4
   21efa:	4622      	mov	r2, r4
   21efc:	1999      	adds	r1, r3, r6
   21efe:	4628      	mov	r0, r5
   21f00:	f7fe fa81 	bl	20406 <memcpy>
}
   21f04:	4620      	mov	r0, r4
   21f06:	b003      	add	sp, #12
   21f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f0a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21f0e:	e7f9      	b.n	21f04 <cf_read+0x3c>

00021f10 <bt_gatt_attr_read_ccc>:
{
   21f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21f12:	68c9      	ldr	r1, [r1, #12]
{
   21f14:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   21f18:	4615      	mov	r5, r2
   21f1a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   21f1c:	f7ff fea5 	bl	21c6a <find_ccc_cfg>
	if (cfg) {
   21f20:	b100      	cbz	r0, 21f24 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   21f22:	8900      	ldrh	r0, [r0, #8]
   21f24:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   21f28:	2e02      	cmp	r6, #2
   21f2a:	d80e      	bhi.n	21f4a <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   21f2c:	f1c6 0402 	rsb	r4, r6, #2
   21f30:	42bc      	cmp	r4, r7
   21f32:	bfa8      	it	ge
   21f34:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   21f36:	f10d 0306 	add.w	r3, sp, #6
   21f3a:	4622      	mov	r2, r4
   21f3c:	1999      	adds	r1, r3, r6
   21f3e:	4628      	mov	r0, r5
   21f40:	f7fe fa61 	bl	20406 <memcpy>
}
   21f44:	4620      	mov	r0, r4
   21f46:	b003      	add	sp, #12
   21f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f4a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21f4e:	e7f9      	b.n	21f44 <bt_gatt_attr_read_ccc+0x34>

00021f50 <bt_gatt_attr_read_service>:
{
   21f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   21f52:	68c9      	ldr	r1, [r1, #12]
{
   21f54:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   21f58:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   21f5a:	780b      	ldrb	r3, [r1, #0]
{
   21f5c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   21f5e:	b993      	cbnz	r3, 21f86 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21f60:	884b      	ldrh	r3, [r1, #2]
   21f62:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   21f66:	2d02      	cmp	r5, #2
   21f68:	d819      	bhi.n	21f9e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21f6a:	f1c5 0202 	rsb	r2, r5, #2
   21f6e:	4294      	cmp	r4, r2
   21f70:	bfa8      	it	ge
   21f72:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21f74:	f10d 0306 	add.w	r3, sp, #6
   21f78:	4622      	mov	r2, r4
   21f7a:	1959      	adds	r1, r3, r5
   21f7c:	f7fe fa43 	bl	20406 <memcpy>
}
   21f80:	4620      	mov	r0, r4
   21f82:	b003      	add	sp, #12
   21f84:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   21f86:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   21f88:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   21f8c:	d807      	bhi.n	21f9e <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   21f8e:	f1c5 0210 	rsb	r2, r5, #16
   21f92:	4294      	cmp	r4, r2
   21f94:	bfa8      	it	ge
   21f96:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   21f98:	4622      	mov	r2, r4
   21f9a:	4429      	add	r1, r5
   21f9c:	e7ee      	b.n	21f7c <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21f9e:	f06f 0406 	mvn.w	r4, #6
   21fa2:	e7ed      	b.n	21f80 <bt_gatt_attr_read_service+0x30>

00021fa4 <sc_save>:
{
   21fa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21fa8:	4680      	mov	r8, r0
   21faa:	460f      	mov	r7, r1
   21fac:	4616      	mov	r6, r2
   21fae:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   21fb0:	f7f4 fc5a 	bl	16868 <find_sc_cfg>
	if (!cfg) {
   21fb4:	4604      	mov	r4, r0
   21fb6:	b968      	cbnz	r0, 21fd4 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   21fb8:	4669      	mov	r1, sp
   21fba:	9000      	str	r0, [sp, #0]
   21fbc:	f8cd 0003 	str.w	r0, [sp, #3]
   21fc0:	f7f4 fc52 	bl	16868 <find_sc_cfg>
		if (!cfg) {
   21fc4:	4604      	mov	r4, r0
   21fc6:	b180      	cbz	r0, 21fea <sc_save+0x46>
		cfg->id = id;
   21fc8:	f800 8b01 	strb.w	r8, [r0], #1
   21fcc:	2207      	movs	r2, #7
   21fce:	4639      	mov	r1, r7
   21fd0:	f7fe fa19 	bl	20406 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   21fd4:	8922      	ldrh	r2, [r4, #8]
   21fd6:	8963      	ldrh	r3, [r4, #10]
   21fd8:	b91a      	cbnz	r2, 21fe2 <sc_save+0x3e>
   21fda:	b923      	cbnz	r3, 21fe6 <sc_save+0x42>
		cfg->data.start = start;
   21fdc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   21fde:	8165      	strh	r5, [r4, #10]
   21fe0:	e003      	b.n	21fea <sc_save+0x46>
	if (new_start >= *start && new_end <= *end) {
   21fe2:	4296      	cmp	r6, r2
   21fe4:	d304      	bcc.n	21ff0 <sc_save+0x4c>
   21fe6:	429d      	cmp	r5, r3
   21fe8:	d8f9      	bhi.n	21fde <sc_save+0x3a>
}
   21fea:	b002      	add	sp, #8
   21fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   21ff0:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   21ff2:	e7f8      	b.n	21fe6 <sc_save+0x42>

00021ff4 <sc_clear>:
{
   21ff4:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21ff6:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   21ffa:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21ffc:	4631      	mov	r1, r6
   21ffe:	7a00      	ldrb	r0, [r0, #8]
   22000:	f7fe fd4a 	bl	20a98 <bt_addr_le_is_bonded>
   22004:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22006:	4631      	mov	r1, r6
   22008:	f7f4 fc2e 	bl	16868 <find_sc_cfg>
	if (!cfg) {
   2200c:	b128      	cbz	r0, 2201a <sc_clear+0x26>
}
   2200e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   22012:	220c      	movs	r2, #12
   22014:	2100      	movs	r1, #0
   22016:	f7fe ba01 	b.w	2041c <memset>
}
   2201a:	bd70      	pop	{r4, r5, r6, pc}

0002201c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2201c:	2a02      	cmp	r2, #2
{
   2201e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22020:	d108      	bne.n	22034 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22022:	2300      	movs	r3, #0
   22024:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22028:	461a      	mov	r2, r3
   2202a:	7a00      	ldrb	r0, [r0, #8]
   2202c:	f7ff ffba 	bl	21fa4 <sc_save>
}
   22030:	2002      	movs	r0, #2
   22032:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   22034:	f7ff ffde 	bl	21ff4 <sc_clear>
   22038:	e7fa      	b.n	22030 <sc_ccc_cfg_write+0x14>

0002203a <bt_gatt_attr_read>:
{
   2203a:	b538      	push	{r3, r4, r5, lr}
   2203c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22040:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   22044:	42a9      	cmp	r1, r5
{
   22046:	4610      	mov	r0, r2
	if (offset > value_len) {
   22048:	d80b      	bhi.n	22062 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2204a:	1a6d      	subs	r5, r5, r1
   2204c:	429d      	cmp	r5, r3
   2204e:	bfa8      	it	ge
   22050:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22052:	9b05      	ldr	r3, [sp, #20]
   22054:	b2ad      	uxth	r5, r5
   22056:	462a      	mov	r2, r5
   22058:	4419      	add	r1, r3
   2205a:	f7fe f9d4 	bl	20406 <memcpy>
}
   2205e:	4628      	mov	r0, r5
   22060:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22062:	f06f 0506 	mvn.w	r5, #6
   22066:	e7fa      	b.n	2205e <bt_gatt_attr_read+0x24>

00022068 <bt_gatt_attr_value_handle>:
{
   22068:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2206a:	4604      	mov	r4, r0
   2206c:	b910      	cbnz	r0, 22074 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2206e:	2000      	movs	r0, #0
}
   22070:	b002      	add	sp, #8
   22072:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22074:	2300      	movs	r3, #0
   22076:	f88d 3004 	strb.w	r3, [sp, #4]
   2207a:	6800      	ldr	r0, [r0, #0]
   2207c:	f642 0303 	movw	r3, #10243	; 0x2803
   22080:	a901      	add	r1, sp, #4
   22082:	f8ad 3006 	strh.w	r3, [sp, #6]
   22086:	f7fe fa2a 	bl	204de <bt_uuid_cmp>
   2208a:	2800      	cmp	r0, #0
   2208c:	d1ef      	bne.n	2206e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2208e:	68e3      	ldr	r3, [r4, #12]
   22090:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22092:	2800      	cmp	r0, #0
   22094:	d1ec      	bne.n	22070 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   22096:	4620      	mov	r0, r4
   22098:	f7f4 fce8 	bl	16a6c <bt_gatt_attr_get_handle>
   2209c:	3001      	adds	r0, #1
   2209e:	b280      	uxth	r0, r0
	return handle;
   220a0:	e7e6      	b.n	22070 <bt_gatt_attr_value_handle+0x8>

000220a2 <bt_gatt_attr_read_chrc>:
{
   220a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   220a4:	68cf      	ldr	r7, [r1, #12]
{
   220a6:	b087      	sub	sp, #28
   220a8:	4608      	mov	r0, r1
   220aa:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   220ac:	79bb      	ldrb	r3, [r7, #6]
   220ae:	f88d 3004 	strb.w	r3, [sp, #4]
{
   220b2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   220b6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   220b8:	f7ff ffd6 	bl	22068 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   220bc:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   220be:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   220c2:	780b      	ldrb	r3, [r1, #0]
   220c4:	b99b      	cbnz	r3, 220ee <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   220c6:	884b      	ldrh	r3, [r1, #2]
   220c8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   220cc:	2105      	movs	r1, #5
	if (offset > value_len) {
   220ce:	42b1      	cmp	r1, r6
   220d0:	d315      	bcc.n	220fe <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   220d2:	1b89      	subs	r1, r1, r6
   220d4:	42a1      	cmp	r1, r4
   220d6:	bfa8      	it	ge
   220d8:	4621      	movge	r1, r4
   220da:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   220dc:	ab01      	add	r3, sp, #4
   220de:	4622      	mov	r2, r4
   220e0:	1999      	adds	r1, r3, r6
   220e2:	4628      	mov	r0, r5
   220e4:	f7fe f98f 	bl	20406 <memcpy>
}
   220e8:	4620      	mov	r0, r4
   220ea:	b007      	add	sp, #28
   220ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   220ee:	3101      	adds	r1, #1
   220f0:	2210      	movs	r2, #16
   220f2:	f10d 0007 	add.w	r0, sp, #7
   220f6:	f7fe f986 	bl	20406 <memcpy>
		value_len += 16U;
   220fa:	2113      	movs	r1, #19
   220fc:	e7e7      	b.n	220ce <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   220fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22102:	e7f1      	b.n	220e8 <bt_gatt_attr_read_chrc+0x46>

00022104 <bt_gatt_foreach_attr>:
{
   22104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22106:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2210a:	2300      	movs	r3, #0
   2210c:	9300      	str	r3, [sp, #0]
   2210e:	461a      	mov	r2, r3
   22110:	f7f4 fcdc 	bl	16acc <bt_gatt_foreach_attr_type>
}
   22114:	b005      	add	sp, #20
   22116:	f85d fb04 	ldr.w	pc, [sp], #4

0002211a <db_hash_process>:
	db_hash_gen(true);
   2211a:	f7f4 bd31 	b.w	16b80 <db_hash_gen.isra.0>

0002211e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2211e:	07d3      	lsls	r3, r2, #31
{
   22120:	b510      	push	{r4, lr}
   22122:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   22124:	d504      	bpl.n	22130 <bt_gatt_check_perm+0x12>
   22126:	f014 0f15 	tst.w	r4, #21
   2212a:	d017      	beq.n	2215c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2212c:	684b      	ldr	r3, [r1, #4]
   2212e:	b1ab      	cbz	r3, 2215c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   22130:	0793      	lsls	r3, r2, #30
   22132:	d504      	bpl.n	2213e <bt_gatt_check_perm+0x20>
   22134:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   22138:	d012      	beq.n	22160 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2213a:	688b      	ldr	r3, [r1, #8]
   2213c:	b183      	cbz	r3, 22160 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2213e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   22140:	f014 0f30 	tst.w	r4, #48	; 0x30
   22144:	d104      	bne.n	22150 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   22146:	f014 000c 	ands.w	r0, r4, #12
   2214a:	bf18      	it	ne
   2214c:	200f      	movne	r0, #15
}
   2214e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   22150:	f7fe ff04 	bl	20f5c <bt_conn_get_security>
   22154:	2802      	cmp	r0, #2
   22156:	d8f6      	bhi.n	22146 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   22158:	2005      	movs	r0, #5
   2215a:	e7f8      	b.n	2214e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2215c:	2002      	movs	r0, #2
   2215e:	e7f6      	b.n	2214e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   22160:	2003      	movs	r0, #3
   22162:	e7f4      	b.n	2214e <bt_gatt_check_perm+0x30>

00022164 <gatt_notify>:
{
   22164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22168:	4614      	mov	r4, r2
   2216a:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2216c:	2214      	movs	r2, #20
   2216e:	6861      	ldr	r1, [r4, #4]
{
   22170:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   22172:	f7ff ffd4 	bl	2211e <bt_gatt_check_perm>
   22176:	bb08      	cbnz	r0, 221bc <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   22178:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2217a:	211b      	movs	r1, #27
   2217c:	3202      	adds	r2, #2
   2217e:	4638      	mov	r0, r7
   22180:	f7ff fc0d 	bl	2199e <bt_att_create_pdu>
	if (!buf) {
   22184:	4605      	mov	r5, r0
   22186:	b1e8      	cbz	r0, 221c4 <gatt_notify+0x60>
   22188:	f100 0908 	add.w	r9, r0, #8
   2218c:	2102      	movs	r1, #2
   2218e:	4648      	mov	r0, r9
   22190:	f000 f8cf 	bl	22332 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   22194:	4606      	mov	r6, r0
   22196:	89a1      	ldrh	r1, [r4, #12]
   22198:	f826 8b02 	strh.w	r8, [r6], #2
   2219c:	4648      	mov	r0, r9
   2219e:	f000 f8c8 	bl	22332 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   221a2:	89a2      	ldrh	r2, [r4, #12]
   221a4:	68a1      	ldr	r1, [r4, #8]
   221a6:	4630      	mov	r0, r6
   221a8:	f7fe f92d 	bl	20406 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   221ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   221b0:	4629      	mov	r1, r5
   221b2:	4638      	mov	r0, r7
}
   221b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   221b8:	f7ff bc72 	b.w	21aa0 <bt_att_send>
		return -EPERM;
   221bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   221c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   221c4:	f06f 000b 	mvn.w	r0, #11
   221c8:	e7fa      	b.n	221c0 <gatt_notify+0x5c>

000221ca <bt_gatt_change_aware>:
{
   221ca:	b510      	push	{r4, lr}
   221cc:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   221ce:	f7f4 fb5b 	bl	16888 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   221d2:	4603      	mov	r3, r0
   221d4:	b910      	cbnz	r0, 221dc <bt_gatt_change_aware+0x12>
		return true;
   221d6:	2401      	movs	r4, #1
}
   221d8:	4620      	mov	r0, r4
   221da:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   221dc:	7a02      	ldrb	r2, [r0, #8]
   221de:	07d2      	lsls	r2, r2, #31
   221e0:	d5f9      	bpl.n	221d6 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   221e2:	f3bf 8f5b 	dmb	ish
   221e6:	68d9      	ldr	r1, [r3, #12]
   221e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   221ec:	f011 0101 	ands.w	r1, r1, #1
   221f0:	f100 000c 	add.w	r0, r0, #12
   221f4:	d1ef      	bne.n	221d6 <bt_gatt_change_aware+0xc>
	if (!req) {
   221f6:	2c00      	cmp	r4, #0
   221f8:	d0ee      	beq.n	221d8 <bt_gatt_change_aware+0xe>
   221fa:	f3bf 8f5b 	dmb	ish
   221fe:	68db      	ldr	r3, [r3, #12]
   22200:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22204:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   22208:	079b      	lsls	r3, r3, #30
   2220a:	d50e      	bpl.n	2222a <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2220c:	f3bf 8f5b 	dmb	ish
   22210:	e850 3f00 	ldrex	r3, [r0]
   22214:	f023 0302 	bic.w	r3, r3, #2
   22218:	e840 3200 	strex	r2, r3, [r0]
   2221c:	2a00      	cmp	r2, #0
   2221e:	d1f7      	bne.n	22210 <bt_gatt_change_aware+0x46>
   22220:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   22224:	f7ff fd13 	bl	21c4e <atomic_set_bit>
	return false;
   22228:	e7d6      	b.n	221d8 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2222a:	2101      	movs	r1, #1
   2222c:	e7fa      	b.n	22224 <bt_gatt_change_aware+0x5a>

0002222e <bt_smp_recv>:
{
   2222e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   22230:	2100      	movs	r1, #0
   22232:	f04f 32ff 	mov.w	r2, #4294967295
   22236:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2223a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2223c:	4608      	mov	r0, r1
   2223e:	f7fe ff52 	bl	210e6 <bt_l2cap_create_pdu_timeout>
   22242:	f100 0608 	add.w	r6, r0, #8
   22246:	4604      	mov	r4, r0
   22248:	2101      	movs	r1, #1
   2224a:	4630      	mov	r0, r6
   2224c:	f000 f871 	bl	22332 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22250:	2505      	movs	r5, #5
   22252:	7005      	strb	r5, [r0, #0]
   22254:	2101      	movs	r1, #1
   22256:	4630      	mov	r0, r6
   22258:	f000 f86b 	bl	22332 <net_buf_simple_add>
   2225c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2225e:	7005      	strb	r5, [r0, #0]
   22260:	4622      	mov	r2, r4
   22262:	9300      	str	r3, [sp, #0]
   22264:	2106      	movs	r1, #6
   22266:	4638      	mov	r0, r7
   22268:	f7fe ff40 	bl	210ec <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2226c:	b110      	cbz	r0, 22274 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2226e:	4620      	mov	r0, r4
   22270:	f7f4 ffce 	bl	17210 <net_buf_unref>
}
   22274:	2000      	movs	r0, #0
   22276:	b003      	add	sp, #12
   22278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002227a <bt_smp_sign>:
   2227a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2227e:	4770      	bx	lr

00022280 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   22280:	2000      	movs	r0, #0
   22282:	4770      	bx	lr

00022284 <fixed_data_unref>:
}
   22284:	4770      	bx	lr

00022286 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22286:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22288:	6849      	ldr	r1, [r1, #4]
   2228a:	6809      	ldr	r1, [r1, #0]
   2228c:	f7f4 bf30 	b.w	170f0 <net_buf_alloc_len>

00022290 <net_buf_get>:
{
   22290:	b570      	push	{r4, r5, r6, lr}
   22292:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   22294:	f7f9 fb56 	bl	1b944 <z_impl_k_queue_get>
	if (!buf) {
   22298:	4605      	mov	r5, r0
   2229a:	b128      	cbz	r0, 222a8 <net_buf_get+0x18>
   2229c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2229e:	7963      	ldrb	r3, [r4, #5]
   222a0:	f013 0301 	ands.w	r3, r3, #1
   222a4:	d102      	bne.n	222ac <net_buf_get+0x1c>
	frag->frags = NULL;
   222a6:	6023      	str	r3, [r4, #0]
}
   222a8:	4628      	mov	r0, r5
   222aa:	bd70      	pop	{r4, r5, r6, pc}
   222ac:	2300      	movs	r3, #0
   222ae:	2200      	movs	r2, #0
   222b0:	4630      	mov	r0, r6
   222b2:	f7f9 fb47 	bl	1b944 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   222b6:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   222b8:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   222ba:	f023 0301 	bic.w	r3, r3, #1
   222be:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   222c0:	4604      	mov	r4, r0
   222c2:	e7ec      	b.n	2229e <net_buf_get+0xe>

000222c4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   222c4:	6883      	ldr	r3, [r0, #8]
   222c6:	440b      	add	r3, r1
   222c8:	6003      	str	r3, [r0, #0]
}
   222ca:	4770      	bx	lr

000222cc <net_buf_put>:
{
   222cc:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   222ce:	460a      	mov	r2, r1
   222d0:	6814      	ldr	r4, [r2, #0]
   222d2:	b914      	cbnz	r4, 222da <net_buf_put+0xe>
}
   222d4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   222d6:	f001 ba54 	b.w	23782 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   222da:	7953      	ldrb	r3, [r2, #5]
   222dc:	f043 0301 	orr.w	r3, r3, #1
   222e0:	7153      	strb	r3, [r2, #5]
   222e2:	4622      	mov	r2, r4
   222e4:	e7f4      	b.n	222d0 <net_buf_put+0x4>

000222e6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   222e6:	7902      	ldrb	r2, [r0, #4]
   222e8:	3201      	adds	r2, #1
   222ea:	7102      	strb	r2, [r0, #4]
	return buf;
}
   222ec:	4770      	bx	lr

000222ee <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   222ee:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   222f0:	4618      	mov	r0, r3
   222f2:	681b      	ldr	r3, [r3, #0]
   222f4:	2b00      	cmp	r3, #0
   222f6:	d1fb      	bne.n	222f0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   222f8:	4770      	bx	lr

000222fa <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   222fa:	6802      	ldr	r2, [r0, #0]
{
   222fc:	b510      	push	{r4, lr}
	if (parent->frags) {
   222fe:	b12a      	cbz	r2, 2230c <net_buf_frag_insert+0x12>
   22300:	460b      	mov	r3, r1
	while (buf->frags) {
   22302:	461c      	mov	r4, r3
   22304:	681b      	ldr	r3, [r3, #0]
   22306:	2b00      	cmp	r3, #0
   22308:	d1fb      	bne.n	22302 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2230a:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2230c:	6001      	str	r1, [r0, #0]
}
   2230e:	bd10      	pop	{r4, pc}

00022310 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22310:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22312:	4604      	mov	r4, r0
   22314:	b920      	cbnz	r0, 22320 <net_buf_frag_add+0x10>
	buf->ref++;
   22316:	790b      	ldrb	r3, [r1, #4]
   22318:	3301      	adds	r3, #1
   2231a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2231c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2231e:	bd10      	pop	{r4, pc}
   22320:	4603      	mov	r3, r0
	while (buf->frags) {
   22322:	4618      	mov	r0, r3
   22324:	681b      	ldr	r3, [r3, #0]
   22326:	2b00      	cmp	r3, #0
   22328:	d1fb      	bne.n	22322 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2232a:	f7ff ffe6 	bl	222fa <net_buf_frag_insert>
   2232e:	4620      	mov	r0, r4
   22330:	e7f5      	b.n	2231e <net_buf_frag_add+0xe>

00022332 <net_buf_simple_add>:
	return buf->data + buf->len;
   22332:	8883      	ldrh	r3, [r0, #4]
   22334:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22336:	4419      	add	r1, r3
   22338:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2233a:	18d0      	adds	r0, r2, r3
   2233c:	4770      	bx	lr

0002233e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2233e:	b430      	push	{r4, r5}
   22340:	8884      	ldrh	r4, [r0, #4]
   22342:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   22344:	18a3      	adds	r3, r4, r2
   22346:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   22348:	1928      	adds	r0, r5, r4
}
   2234a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2234c:	f7fe b85b 	b.w	20406 <memcpy>

00022350 <net_buf_simple_add_u8>:
   22350:	8883      	ldrh	r3, [r0, #4]
   22352:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   22354:	b510      	push	{r4, lr}
	buf->len += len;
   22356:	1c5c      	adds	r4, r3, #1
   22358:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2235a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2235c:	18d0      	adds	r0, r2, r3
   2235e:	bd10      	pop	{r4, pc}

00022360 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   22360:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22362:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   22364:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   22366:	1a40      	subs	r0, r0, r1
	buf->len += len;
   22368:	4411      	add	r1, r2
	buf->data -= len;
   2236a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2236c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2236e:	4770      	bx	lr

00022370 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22370:	8882      	ldrh	r2, [r0, #4]
   22372:	1a52      	subs	r2, r2, r1
{
   22374:	4603      	mov	r3, r0
	buf->len -= len;
   22376:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22378:	6800      	ldr	r0, [r0, #0]
   2237a:	4408      	add	r0, r1
   2237c:	6018      	str	r0, [r3, #0]
}
   2237e:	4770      	bx	lr

00022380 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   22380:	4603      	mov	r3, r0
	void *data = buf->data;
   22382:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22384:	889a      	ldrh	r2, [r3, #4]
   22386:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22388:	4401      	add	r1, r0
	buf->len -= len;
   2238a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2238c:	6019      	str	r1, [r3, #0]

	return data;
}
   2238e:	4770      	bx	lr

00022390 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   22390:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22392:	6803      	ldr	r3, [r0, #0]
   22394:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22396:	2102      	movs	r1, #2
   22398:	f7ff ffea 	bl	22370 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2239c:	4620      	mov	r0, r4
   2239e:	bd10      	pop	{r4, pc}

000223a0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   223a0:	6802      	ldr	r2, [r0, #0]
   223a2:	6880      	ldr	r0, [r0, #8]
}
   223a4:	1a10      	subs	r0, r2, r0
   223a6:	4770      	bx	lr

000223a8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   223a8:	8883      	ldrh	r3, [r0, #4]
   223aa:	88c2      	ldrh	r2, [r0, #6]
   223ac:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   223ae:	6803      	ldr	r3, [r0, #0]
   223b0:	6880      	ldr	r0, [r0, #8]
   223b2:	1a18      	subs	r0, r3, r0
}
   223b4:	1a10      	subs	r0, r2, r0
   223b6:	4770      	bx	lr

000223b8 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   223b8:	f1a0 0308 	sub.w	r3, r0, #8
   223bc:	f3bf 8f5b 	dmb	ish
   223c0:	e853 2f00 	ldrex	r2, [r3]
   223c4:	1c51      	adds	r1, r2, #1
   223c6:	e843 1c00 	strex	ip, r1, [r3]
   223ca:	f1bc 0f00 	cmp.w	ip, #0
   223ce:	d1f7      	bne.n	223c0 <adc_context_on_timer_expired+0x8>
   223d0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   223d4:	b91a      	cbnz	r2, 223de <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   223d6:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   223da:	f7f4 bf4b 	b.w	17274 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   223de:	f06f 030f 	mvn.w	r3, #15
   223e2:	6683      	str	r3, [r0, #104]	; 0x68
}
   223e4:	4770      	bx	lr

000223e6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   223e6:	6902      	ldr	r2, [r0, #16]
   223e8:	b2cb      	uxtb	r3, r1
   223ea:	210c      	movs	r1, #12
   223ec:	fb03 2101 	mla	r1, r3, r1, r2
   223f0:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   223f2:	f000 0007 	and.w	r0, r0, #7
   223f6:	4770      	bx	lr

000223f8 <set_off_state>:
	__asm__ volatile(
   223f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   223fc:	f3ef 8211 	mrs	r2, BASEPRI
   22400:	f383 8812 	msr	BASEPRI_MAX, r3
   22404:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22408:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2240a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2240e:	d001      	beq.n	22414 <set_off_state+0x1c>
   22410:	428b      	cmp	r3, r1
   22412:	d107      	bne.n	22424 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22414:	2301      	movs	r3, #1
   22416:	6003      	str	r3, [r0, #0]
	int err = 0;
   22418:	2000      	movs	r0, #0
	__asm__ volatile(
   2241a:	f382 8811 	msr	BASEPRI, r2
   2241e:	f3bf 8f6f 	isb	sy
}
   22422:	4770      	bx	lr
		err = -EPERM;
   22424:	f04f 30ff 	mov.w	r0, #4294967295
   22428:	e7f7      	b.n	2241a <set_off_state+0x22>

0002242a <set_starting_state>:
{
   2242a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2242c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22430:	f3ef 8211 	mrs	r2, BASEPRI
   22434:	f383 8812 	msr	BASEPRI_MAX, r3
   22438:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2243c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2243e:	f003 0407 	and.w	r4, r3, #7
   22442:	2c01      	cmp	r4, #1
   22444:	d106      	bne.n	22454 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22446:	6001      	str	r1, [r0, #0]
	int err = 0;
   22448:	2000      	movs	r0, #0
	__asm__ volatile(
   2244a:	f382 8811 	msr	BASEPRI, r2
   2244e:	f3bf 8f6f 	isb	sy
}
   22452:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22454:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   22458:	428b      	cmp	r3, r1
		err = -EALREADY;
   2245a:	bf14      	ite	ne
   2245c:	f04f 30ff 	movne.w	r0, #4294967295
   22460:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   22464:	e7f1      	b.n	2244a <set_starting_state+0x20>

00022466 <set_on_state>:
	__asm__ volatile(
   22466:	f04f 0340 	mov.w	r3, #64	; 0x40
   2246a:	f3ef 8211 	mrs	r2, BASEPRI
   2246e:	f383 8812 	msr	BASEPRI_MAX, r3
   22472:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22476:	6803      	ldr	r3, [r0, #0]
   22478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2247c:	f043 0302 	orr.w	r3, r3, #2
   22480:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22482:	f382 8811 	msr	BASEPRI, r2
   22486:	f3bf 8f6f 	isb	sy
}
   2248a:	4770      	bx	lr

0002248c <onoff_started_callback>:
	return &data->mgr[type];
   2248c:	6900      	ldr	r0, [r0, #16]
{
   2248e:	b410      	push	{r4}
	return &data->mgr[type];
   22490:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22492:	241c      	movs	r4, #28
   22494:	fb03 0004 	mla	r0, r3, r4, r0
   22498:	2100      	movs	r1, #0
}
   2249a:	bc10      	pop	{r4}
	notify(mgr, 0);
   2249c:	4710      	bx	r2

0002249e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2249e:	2000      	movs	r0, #0
   224a0:	f7f7 baa6 	b.w	199f0 <nrfx_clock_start>

000224a4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   224a4:	2000      	movs	r0, #0
   224a6:	f000 be49 	b.w	2313c <nrfx_clock_stop>

000224aa <blocking_start_callback>:
{
   224aa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   224ac:	f7f9 ba7e 	b.w	1b9ac <z_impl_k_sem_give>

000224b0 <api_stop>:
{
   224b0:	b538      	push	{r3, r4, r5, lr}
   224b2:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   224b4:	230c      	movs	r3, #12
{
   224b6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   224b8:	4363      	muls	r3, r4
   224ba:	6900      	ldr	r0, [r0, #16]
   224bc:	3340      	adds	r3, #64	; 0x40
   224be:	2180      	movs	r1, #128	; 0x80
   224c0:	4418      	add	r0, r3
   224c2:	f7ff ff99 	bl	223f8 <set_off_state>
	if (err < 0) {
   224c6:	2800      	cmp	r0, #0
   224c8:	db05      	blt.n	224d6 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   224ca:	6869      	ldr	r1, [r5, #4]
   224cc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   224d0:	6863      	ldr	r3, [r4, #4]
   224d2:	4798      	blx	r3
	return 0;
   224d4:	2000      	movs	r0, #0
}
   224d6:	bd38      	pop	{r3, r4, r5, pc}

000224d8 <api_start>:
{
   224d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   224dc:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   224de:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   224e0:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   224e2:	436f      	muls	r7, r5
{
   224e4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   224e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
   224ea:	2180      	movs	r1, #128	; 0x80
   224ec:	4420      	add	r0, r4
{
   224ee:	4690      	mov	r8, r2
   224f0:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   224f2:	f7ff ff9a 	bl	2242a <set_starting_state>
	if (err < 0) {
   224f6:	2800      	cmp	r0, #0
   224f8:	db07      	blt.n	2250a <api_start+0x32>
	subdata->cb = cb;
   224fa:	443c      	add	r4, r7
	subdata->user_data = user_data;
   224fc:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   22500:	6873      	ldr	r3, [r6, #4]
   22502:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   22506:	4798      	blx	r3
	return 0;
   22508:	2000      	movs	r0, #0
}
   2250a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002250e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2250e:	6843      	ldr	r3, [r0, #4]
   22510:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22512:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22516:	600b      	str	r3, [r1, #0]
}
   22518:	2000      	movs	r0, #0
   2251a:	4770      	bx	lr

0002251c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2251c:	6843      	ldr	r3, [r0, #4]
   2251e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   22520:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22524:	4042      	eors	r2, r0
   22526:	400a      	ands	r2, r1
   22528:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2252a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2252e:	2000      	movs	r0, #0
   22530:	4770      	bx	lr

00022532 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22532:	6843      	ldr	r3, [r0, #4]
   22534:	685b      	ldr	r3, [r3, #4]
}
   22536:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22538:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2253c:	4770      	bx	lr

0002253e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2253e:	6843      	ldr	r3, [r0, #4]
   22540:	685b      	ldr	r3, [r3, #4]
}
   22542:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22544:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22548:	4770      	bx	lr

0002254a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2254a:	6843      	ldr	r3, [r0, #4]
   2254c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2254e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22552:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22554:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22558:	2000      	movs	r0, #0
   2255a:	4770      	bx	lr

0002255c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2255c:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   2255e:	6858      	ldr	r0, [r3, #4]
{
   22560:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   22562:	b158      	cbz	r0, 2257c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22564:	2400      	movs	r4, #0
   22566:	4281      	cmp	r1, r0
   22568:	d113      	bne.n	22592 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2256a:	6808      	ldr	r0, [r1, #0]
   2256c:	b95c      	cbnz	r4, 22586 <gpio_nrfx_manage_callback+0x2a>
   2256e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   22570:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   22572:	42a1      	cmp	r1, r4
   22574:	d100      	bne.n	22578 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22576:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22578:	2000      	movs	r0, #0
   2257a:	6008      	str	r0, [r1, #0]
	if (set) {
   2257c:	b972      	cbnz	r2, 2259c <gpio_nrfx_manage_callback+0x40>
	return 0;
   2257e:	2000      	movs	r0, #0
}
   22580:	bd30      	pop	{r4, r5, pc}
   22582:	4628      	mov	r0, r5
   22584:	e7ef      	b.n	22566 <gpio_nrfx_manage_callback+0xa>
   22586:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   22588:	6898      	ldr	r0, [r3, #8]
   2258a:	4281      	cmp	r1, r0
	list->tail = node;
   2258c:	bf08      	it	eq
   2258e:	609c      	streq	r4, [r3, #8]
}
   22590:	e7f2      	b.n	22578 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22592:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22594:	4604      	mov	r4, r0
   22596:	2d00      	cmp	r5, #0
   22598:	d1f3      	bne.n	22582 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2259a:	b13a      	cbz	r2, 225ac <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2259c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2259e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   225a0:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   225a2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   225a4:	2800      	cmp	r0, #0
   225a6:	d1ea      	bne.n	2257e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   225a8:	6099      	str	r1, [r3, #8]
}
   225aa:	e7e9      	b.n	22580 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   225ac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   225b0:	e7e6      	b.n	22580 <gpio_nrfx_manage_callback+0x24>

000225b2 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   225b2:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   225b4:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   225b6:	d405      	bmi.n	225c4 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   225b8:	f3c1 0242 	ubfx	r2, r1, #1, #3
   225bc:	2a01      	cmp	r2, #1
   225be:	d004      	beq.n	225ca <i2c_nrfx_twi_configure+0x18>
   225c0:	2a02      	cmp	r2, #2
   225c2:	d00b      	beq.n	225dc <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
   225c4:	f06f 0015 	mvn.w	r0, #21
}
   225c8:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   225ca:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   225cc:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   225d0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   225d4:	6903      	ldr	r3, [r0, #16]
	return 0;
   225d6:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   225d8:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   225da:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   225dc:	681b      	ldr	r3, [r3, #0]
   225de:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   225e2:	e7f5      	b.n	225d0 <i2c_nrfx_twi_configure+0x1e>

000225e4 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
   225e4:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   225e6:	6904      	ldr	r4, [r0, #16]
   225e8:	6864      	ldr	r4, [r4, #4]
   225ea:	46a4      	mov	ip, r4
}
   225ec:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   225ee:	4760      	bx	ip

000225f0 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
   225f0:	6903      	ldr	r3, [r0, #16]
   225f2:	689b      	ldr	r3, [r3, #8]
   225f4:	4718      	bx	r3

000225f6 <bme280_wait_until_ready>:
{
   225f6:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
   225f8:	2300      	movs	r3, #0
{
   225fa:	4604      	mov	r4, r0
	uint8_t status = 0;
   225fc:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
   22600:	2100      	movs	r1, #0
   22602:	2063      	movs	r0, #99	; 0x63
   22604:	f7f9 fef8 	bl	1c3f8 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
   22608:	6860      	ldr	r0, [r4, #4]
   2260a:	2301      	movs	r3, #1
   2260c:	f10d 0207 	add.w	r2, sp, #7
   22610:	21f3      	movs	r1, #243	; 0xf3
   22612:	f7ff ffe7 	bl	225e4 <bme280_reg_read.isra.0>
		if (ret < 0) {
   22616:	2800      	cmp	r0, #0
   22618:	db04      	blt.n	22624 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
   2261a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2261e:	f013 0009 	ands.w	r0, r3, #9
   22622:	d1ed      	bne.n	22600 <bme280_wait_until_ready+0xa>
}
   22624:	b002      	add	sp, #8
   22626:	bd10      	pop	{r4, pc}

00022628 <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
   22628:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = to_data(dev);
   2262a:	6905      	ldr	r5, [r0, #16]
{
   2262c:	4604      	mov	r4, r0
	int err;

	err = bme280_bus_check(dev);
   2262e:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
   22630:	6903      	ldr	r3, [r0, #16]
{
   22632:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
   22634:	681b      	ldr	r3, [r3, #0]
   22636:	4798      	blx	r3
	if (err < 0) {
   22638:	2800      	cmp	r0, #0
   2263a:	f2c0 808c 	blt.w	22756 <bme280_chip_init+0x12e>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
   2263e:	6860      	ldr	r0, [r4, #4]
   22640:	2301      	movs	r3, #1
   22642:	f105 0234 	add.w	r2, r5, #52	; 0x34
   22646:	21d0      	movs	r1, #208	; 0xd0
   22648:	f7ff ffcc 	bl	225e4 <bme280_reg_read.isra.0>
	if (err < 0) {
   2264c:	2800      	cmp	r0, #0
   2264e:	f2c0 8082 	blt.w	22756 <bme280_chip_init+0x12e>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
   22652:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   22656:	3b56      	subs	r3, #86	; 0x56
   22658:	b2db      	uxtb	r3, r3
   2265a:	2b0a      	cmp	r3, #10
   2265c:	f200 8092 	bhi.w	22784 <bme280_chip_init+0x15c>
   22660:	f240 4205 	movw	r2, #1029	; 0x405
   22664:	fa22 f303 	lsr.w	r3, r2, r3
   22668:	07db      	lsls	r3, r3, #31
   2266a:	f140 808b 	bpl.w	22784 <bme280_chip_init+0x15c>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
   2266e:	22b6      	movs	r2, #182	; 0xb6
   22670:	21e0      	movs	r1, #224	; 0xe0
   22672:	6860      	ldr	r0, [r4, #4]
   22674:	f7ff ffbc 	bl	225f0 <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
   22678:	4620      	mov	r0, r4
   2267a:	f7ff ffbc 	bl	225f6 <bme280_wait_until_ready>
	if (err < 0) {
   2267e:	2800      	cmp	r0, #0
   22680:	db69      	blt.n	22756 <bme280_chip_init+0x12e>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   22682:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = to_data(dev);
   22684:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   22686:	2318      	movs	r3, #24
   22688:	aa02      	add	r2, sp, #8
   2268a:	2188      	movs	r1, #136	; 0x88
   2268c:	f7ff ffaa 	bl	225e4 <bme280_reg_read.isra.0>
	if (err < 0) {
   22690:	2800      	cmp	r0, #0
   22692:	db60      	blt.n	22756 <bme280_chip_init+0x12e>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
   22694:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22698:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
   2269a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2269e:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
   226a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   226a4:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
   226a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   226aa:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
   226ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   226b0:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
   226b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   226b6:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
   226b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   226bc:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
   226be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   226c2:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
   226c4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   226c8:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
   226ca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   226ce:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
   226d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   226d4:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
   226d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   226da:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
   226dc:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   226e0:	2b60      	cmp	r3, #96	; 0x60
   226e2:	d12d      	bne.n	22740 <bme280_chip_init+0x118>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
   226e4:	6860      	ldr	r0, [r4, #4]
   226e6:	2301      	movs	r3, #1
   226e8:	f106 0218 	add.w	r2, r6, #24
   226ec:	21a1      	movs	r1, #161	; 0xa1
   226ee:	f7ff ff79 	bl	225e4 <bme280_reg_read.isra.0>
		if (err < 0) {
   226f2:	2800      	cmp	r0, #0
   226f4:	db2f      	blt.n	22756 <bme280_chip_init+0x12e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
   226f6:	6860      	ldr	r0, [r4, #4]
   226f8:	2307      	movs	r3, #7
   226fa:	466a      	mov	r2, sp
   226fc:	21e1      	movs	r1, #225	; 0xe1
   226fe:	f7ff ff71 	bl	225e4 <bme280_reg_read.isra.0>
		if (err < 0) {
   22702:	2800      	cmp	r0, #0
   22704:	db27      	blt.n	22756 <bme280_chip_init+0x12e>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   22706:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2270a:	f89d 3000 	ldrb.w	r3, [sp]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   2270e:	f89d 1003 	ldrb.w	r1, [sp, #3]
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   22712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22716:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
   22718:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2271c:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   2271e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22722:	f003 020f 	and.w	r2, r3, #15
   22726:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   2272a:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
   2272c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   22730:	091b      	lsrs	r3, r3, #4
   22732:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   22736:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
   22738:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2273c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
   22740:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   22744:	2b60      	cmp	r3, #96	; 0x60
   22746:	d008      	beq.n	2275a <bme280_chip_init+0x132>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
   22748:	6860      	ldr	r0, [r4, #4]
   2274a:	2255      	movs	r2, #85	; 0x55
   2274c:	21f4      	movs	r1, #244	; 0xf4
   2274e:	f7ff ff4f 	bl	225f0 <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
   22752:	2800      	cmp	r0, #0
   22754:	da09      	bge.n	2276a <bme280_chip_init+0x142>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
   22756:	b008      	add	sp, #32
   22758:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
   2275a:	6860      	ldr	r0, [r4, #4]
   2275c:	2202      	movs	r2, #2
   2275e:	21f2      	movs	r1, #242	; 0xf2
   22760:	f7ff ff46 	bl	225f0 <bme280_reg_write.isra.0>
		if (err < 0) {
   22764:	2800      	cmp	r0, #0
   22766:	daef      	bge.n	22748 <bme280_chip_init+0x120>
   22768:	e7f5      	b.n	22756 <bme280_chip_init+0x12e>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
   2276a:	6860      	ldr	r0, [r4, #4]
   2276c:	22a8      	movs	r2, #168	; 0xa8
   2276e:	21f5      	movs	r1, #245	; 0xf5
   22770:	f7ff ff3e 	bl	225f0 <bme280_reg_write.isra.0>
	if (err < 0) {
   22774:	2800      	cmp	r0, #0
   22776:	dbee      	blt.n	22756 <bme280_chip_init+0x12e>
   22778:	2021      	movs	r0, #33	; 0x21
   2277a:	2100      	movs	r1, #0
   2277c:	f7f9 fe3c 	bl	1c3f8 <z_impl_k_sleep>
	return 0;
   22780:	2000      	movs	r0, #0
   22782:	e7e8      	b.n	22756 <bme280_chip_init+0x12e>
		return -ENOTSUP;
   22784:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22788:	e7e5      	b.n	22756 <bme280_chip_init+0x12e>

0002278a <bme280_pm_action>:
static int bme280_pm_action(const struct device *dev,
			    enum pm_device_action action)
{
	int ret = 0;

	switch (action) {
   2278a:	b119      	cbz	r1, 22794 <bme280_pm_action+0xa>
   2278c:	2901      	cmp	r1, #1
   2278e:	d106      	bne.n	2279e <bme280_pm_action+0x14>
	case PM_DEVICE_ACTION_RESUME:
		/* Re-initialize the chip */
		ret = bme280_chip_init(dev);
   22790:	f7ff bf4a 	b.w	22628 <bme280_chip_init>
		break;
	case PM_DEVICE_ACTION_SUSPEND:
		/* Put the chip into sleep mode */
		ret = bme280_reg_write(dev,
   22794:	6840      	ldr	r0, [r0, #4]
   22796:	2254      	movs	r2, #84	; 0x54
   22798:	21f4      	movs	r1, #244	; 0xf4
   2279a:	f7ff bf29 	b.w	225f0 <bme280_reg_write.isra.0>
	default:
		return -ENOTSUP;
	}

	return ret;
}
   2279e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   227a2:	4770      	bx	lr

000227a4 <bme280_sample_fetch>:
{
   227a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227a8:	b087      	sub	sp, #28
	(void)pm_device_state_get(dev, &state);
   227aa:	f10d 010f 	add.w	r1, sp, #15
	struct bme280_data *data = to_data(dev);
   227ae:	6905      	ldr	r5, [r0, #16]
{
   227b0:	4604      	mov	r4, r0
	(void)pm_device_state_get(dev, &state);
   227b2:	f7fd fb9f 	bl	1fef4 <pm_device_state_get>
	if (state == PM_DEVICE_STATE_SUSPENDED)
   227b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   227ba:	2b01      	cmp	r3, #1
   227bc:	f000 8145 	beq.w	22a4a <bme280_sample_fetch+0x2a6>
	ret = bme280_reg_write(dev, BME280_REG_CTRL_MEAS, BME280_CTRL_MEAS_VAL);
   227c0:	6860      	ldr	r0, [r4, #4]
   227c2:	2255      	movs	r2, #85	; 0x55
   227c4:	21f4      	movs	r1, #244	; 0xf4
   227c6:	f7ff ff13 	bl	225f0 <bme280_reg_write.isra.0>
	if (ret < 0) {
   227ca:	2800      	cmp	r0, #0
   227cc:	f2c0 813f 	blt.w	22a4e <bme280_sample_fetch+0x2aa>
	ret = bme280_wait_until_ready(dev);
   227d0:	4620      	mov	r0, r4
   227d2:	f7ff ff10 	bl	225f6 <bme280_wait_until_ready>
	if (ret < 0) {
   227d6:	2800      	cmp	r0, #0
   227d8:	f2c0 8139 	blt.w	22a4e <bme280_sample_fetch+0x2aa>
	if (data->chip_id == BME280_CHIP_ID) {
   227dc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   227e0:	6860      	ldr	r0, [r4, #4]
	if (data->chip_id == BME280_CHIP_ID) {
   227e2:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   227e4:	bf14      	ite	ne
   227e6:	2306      	movne	r3, #6
   227e8:	2308      	moveq	r3, #8
   227ea:	aa04      	add	r2, sp, #16
   227ec:	21f7      	movs	r1, #247	; 0xf7
   227ee:	f7ff fef9 	bl	225e4 <bme280_reg_read.isra.0>
	if (ret < 0) {
   227f2:	2800      	cmp	r0, #0
   227f4:	f2c0 812b 	blt.w	22a4e <bme280_sample_fetch+0x2aa>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   227f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   227fc:	f89d 2013 	ldrb.w	r2, [sp, #19]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   22800:	f89d 9011 	ldrb.w	r9, [sp, #17]
   22804:	f89d 8012 	ldrb.w	r8, [sp, #18]
   22808:	461e      	mov	r6, r3
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   2280a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2280e:	011b      	lsls	r3, r3, #4
   22810:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   22814:	f89d 2015 	ldrb.w	r2, [sp, #21]
   22818:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   2281c:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   2281e:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   22822:	0052      	lsls	r2, r2, #1
   22824:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
   22828:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   2282c:	435b      	muls	r3, r3
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   2282e:	4362      	muls	r2, r4
		((int32_t)data->dig_t3)) >> 14;
   22830:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
   22834:	131b      	asrs	r3, r3, #12
   22836:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   22838:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
   2283a:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2283e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
	var1 = ((int64_t)data->t_fine) - 128000;
   22842:	f5b4 3efa 	subs.w	lr, r4, #128000	; 0x1f400
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   22846:	f103 0380 	add.w	r3, r3, #128	; 0x80
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2284a:	fbae 120e 	umull	r1, r2, lr, lr
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   2284e:	ea4f 2323 	mov.w	r3, r3, asr #8
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   22852:	e9cd 1200 	strd	r1, r2, [sp]
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   22856:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((int64_t)data->t_fine) - 128000;
   22858:	ea4f 73e4 	mov.w	r3, r4, asr #31
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2285c:	9a01      	ldr	r2, [sp, #4]
	data->t_fine = var1 + var2;
   2285e:	632c      	str	r4, [r5, #48]	; 0x30
	var1 = ((int64_t)data->t_fine) - 128000;
   22860:	f143 3cff 	adc.w	ip, r3, #4294967295
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   22864:	fb0e f30c 	mul.w	r3, lr, ip
   22868:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		((var1 * (int64_t)data->dig_p2) << 12);
   2286c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   22870:	9301      	str	r3, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
   22872:	fb02 f10c 	mul.w	r1, r2, ip
   22876:	17d3      	asrs	r3, r2, #31
   22878:	fb0e 1103 	mla	r1, lr, r3, r1
   2287c:	fba2 230e 	umull	r2, r3, r2, lr
   22880:	440b      	add	r3, r1
   22882:	0319      	lsls	r1, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   22884:	9f01      	ldr	r7, [sp, #4]
		((var1 * (int64_t)data->dig_p2) << 12);
   22886:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   2288a:	0310      	lsls	r0, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   2288c:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
   22890:	fb02 fa07 	mul.w	sl, r2, r7
   22894:	9f00      	ldr	r7, [sp, #0]
   22896:	17d3      	asrs	r3, r2, #31
   22898:	fb07 aa03 	mla	sl, r7, r3, sl
   2289c:	fba2 2307 	umull	r2, r3, r2, r7
   228a0:	4453      	add	r3, sl
   228a2:	ea4f 2a12 	mov.w	sl, r2, lsr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   228a6:	3000      	adds	r0, #0
   228a8:	88ea      	ldrh	r2, [r5, #6]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   228aa:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   228ae:	f541 4100 	adc.w	r1, r1, #32768	; 0x8000
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   228b2:	ea4f 2b23 	mov.w	fp, r3, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   228b6:	eb10 000a 	adds.w	r0, r0, sl
   228ba:	eb41 0b0b 	adc.w	fp, r1, fp
   228be:	fba0 0102 	umull	r0, r1, r0, r2
   228c2:	fb02 110b 	mla	r1, r2, fp, r1
   228c6:	104a      	asrs	r2, r1, #1
   228c8:	17cb      	asrs	r3, r1, #31
	if (var1 == 0) {
   228ca:	ea52 0103 	orrs.w	r1, r2, r3
   228ce:	f000 80ba 	beq.w	22a46 <bme280_sample_fetch+0x2a2>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   228d2:	ea4f 1818 	mov.w	r8, r8, lsr #4
   228d6:	ea48 1909 	orr.w	r9, r8, r9, lsl #4
   228da:	ea49 3906 	orr.w	r9, r9, r6, lsl #12
	p = 1048576 - adc_press;
   228de:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
   228e2:	4648      	mov	r0, r9
   228e4:	17c1      	asrs	r1, r0, #31
	p = (((p << 31) - var2) * 3125) / var1;
   228e6:	ea4f 78c1 	mov.w	r8, r1, lsl #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   228ea:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
	p = (((p << 31) - var2) * 3125) / var1;
   228ee:	ea4f 7ac9 	mov.w	sl, r9, lsl #31
   228f2:	ea48 0859 	orr.w	r8, r8, r9, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   228f6:	f04f 0900 	mov.w	r9, #0
	p = (((p << 31) - var2) * 3125) / var1;
   228fa:	ebba 0909 	subs.w	r9, sl, r9
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   228fe:	ea4f 01c0 	mov.w	r1, r0, lsl #3
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   22902:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
   22906:	9800      	ldr	r0, [sp, #0]
	p = (((p << 31) - var2) * 3125) / var1;
   22908:	eb68 0801 	sbc.w	r8, r8, r1
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   2290c:	9901      	ldr	r1, [sp, #4]
   2290e:	fb0a f701 	mul.w	r7, sl, r1
   22912:	9900      	ldr	r1, [sp, #0]
   22914:	ea4f 7bea 	mov.w	fp, sl, asr #31
   22918:	fb01 710b 	mla	r1, r1, fp, r7
   2291c:	fbaa 6700 	umull	r6, r7, sl, r0
	p = (((p << 31) - var2) * 3125) / var1;
   22920:	ebb9 0006 	subs.w	r0, r9, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   22924:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   22928:	440f      	add	r7, r1
	p = (((p << 31) - var2) * 3125) / var1;
   2292a:	eb68 0107 	sbc.w	r1, r8, r7
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   2292e:	fb06 fc0c 	mul.w	ip, r6, ip
   22932:	17f7      	asrs	r7, r6, #31
   22934:	fb0e cc07 	mla	ip, lr, r7, ip
   22938:	fba6 670e 	umull	r6, r7, r6, lr
   2293c:	4467      	add	r7, ip
   2293e:	ea4f 4e46 	mov.w	lr, r6, lsl #17
   22942:	ea4f 4c47 	mov.w	ip, r7, lsl #17
	p = (((p << 31) - var2) * 3125) / var1;
   22946:	ebb0 000e 	subs.w	r0, r0, lr
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   2294a:	ea4c 3cd6 	orr.w	ip, ip, r6, lsr #15
	p = (((p << 31) - var2) * 3125) / var1;
   2294e:	f640 4635 	movw	r6, #3125	; 0xc35
   22952:	eb61 0c0c 	sbc.w	ip, r1, ip
   22956:	fba0 0106 	umull	r0, r1, r0, r6
   2295a:	fb06 110c 	mla	r1, r6, ip, r1
   2295e:	f7de ffbd 	bl	18dc <__aeabi_ldivmod>
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   22962:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   22966:	f9b5 a016 	ldrsh.w	sl, [r5, #22]
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   2296a:	fb06 f301 	mul.w	r3, r6, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   2296e:	0b42      	lsrs	r2, r0, #13
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   22970:	17f7      	asrs	r7, r6, #31
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   22972:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   22976:	fb00 3307 	mla	r3, r0, r7, r3
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   2297a:	ea4f 3c61 	mov.w	ip, r1, asr #13
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   2297e:	fba6 6700 	umull	r6, r7, r6, r0
   22982:	441f      	add	r7, r3
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   22984:	fba2 8902 	umull	r8, r9, r2, r2
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   22988:	0cf3      	lsrs	r3, r6, #19
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   2298a:	ea4f 7bea 	mov.w	fp, sl, asr #31
   2298e:	fb02 f60c 	mul.w	r6, r2, ip
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   22992:	ea43 3347 	orr.w	r3, r3, r7, lsl #13
   22996:	ea4f 4ee7 	mov.w	lr, r7, asr #19
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   2299a:	eb09 0946 	add.w	r9, r9, r6, lsl #1
   2299e:	fb08 f70b 	mul.w	r7, r8, fp
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   229a2:	1818      	adds	r0, r3, r0
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   229a4:	fb0a 7309 	mla	r3, sl, r9, r7
   229a8:	fba8 670a 	umull	r6, r7, r8, sl
   229ac:	441f      	add	r7, r3
   229ae:	ea4f 6356 	mov.w	r3, r6, lsr #25
   229b2:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   229b6:	eb4e 0101 	adc.w	r1, lr, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   229ba:	167a      	asrs	r2, r7, #25
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   229bc:	18c0      	adds	r0, r0, r3
   229be:	eb42 0101 	adc.w	r1, r2, r1
   229c2:	0a02      	lsrs	r2, r0, #8
   229c4:	f9b5 0012 	ldrsh.w	r0, [r5, #18]
   229c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   229cc:	0103      	lsls	r3, r0, #4
	data->comp_press = (uint32_t)p;
   229ce:	4413      	add	r3, r2
   229d0:	62ab      	str	r3, [r5, #40]	; 0x28
	if (data->chip_id == BME280_CHIP_ID) {
   229d2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   229d6:	2b60      	cmp	r3, #96	; 0x60
   229d8:	d133      	bne.n	22a42 <bme280_sample_fetch+0x29e>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   229da:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   229de:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   229e2:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   229e6:	ba5b      	rev16	r3, r3
   229e8:	b29b      	uxth	r3, r3
   229ea:	039b      	lsls	r3, r3, #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   229ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	h = (data->t_fine - ((int32_t)76800));
   229f0:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   229f4:	eba3 5302 	sub.w	r3, r3, r2, lsl #20
   229f8:	fb04 3311 	mls	r3, r4, r1, r3
   229fc:	13d9      	asrs	r1, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   229fe:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   22a00:	4363      	muls	r3, r4
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   22a02:	12db      	asrs	r3, r3, #11
   22a04:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   22a08:	f995 3022 	ldrsb.w	r3, [r5, #34]	; 0x22
   22a0c:	435c      	muls	r4, r3
   22a0e:	12a3      	asrs	r3, r4, #10
   22a10:	4353      	muls	r3, r2
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   22a12:	129b      	asrs	r3, r3, #10
   22a14:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   22a18:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
   22a1c:	4353      	muls	r3, r2
   22a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   22a22:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   22a24:	434b      	muls	r3, r1
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   22a26:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
   22a28:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   22a2a:	4352      	muls	r2, r2
   22a2c:	11d2      	asrs	r2, r2, #7
   22a2e:	434a      	muls	r2, r1
   22a30:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
   22a34:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   22a38:	bfa8      	it	ge
   22a3a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
   22a3e:	131b      	asrs	r3, r3, #12
   22a40:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
   22a42:	2000      	movs	r0, #0
   22a44:	e003      	b.n	22a4e <bme280_sample_fetch+0x2aa>
		data->comp_press = 0U;
   22a46:	2300      	movs	r3, #0
   22a48:	e7c2      	b.n	229d0 <bme280_sample_fetch+0x22c>
		return -EIO;
   22a4a:	f06f 0004 	mvn.w	r0, #4
}
   22a4e:	b007      	add	sp, #28
   22a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022a54 <bme280_reg_write_spi>:
	return 0;
}

static int bme280_reg_write_spi(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
   22a54:	b510      	push	{r4, lr}
   22a56:	b086      	sub	sp, #24
	uint8_t cmd[] = { reg & 0x7F, val };
	const struct spi_buf tx_buf = {
   22a58:	ab01      	add	r3, sp, #4
	uint8_t cmd[] = { reg & 0x7F, val };
   22a5a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
   22a5e:	9302      	str	r3, [sp, #8]
   22a60:	2302      	movs	r3, #2
	uint8_t cmd[] = { reg & 0x7F, val };
   22a62:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf tx_buf = {
   22a66:	9303      	str	r3, [sp, #12]
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
   22a68:	4601      	mov	r1, r0
		.buf = cmd,
		.len = sizeof(cmd)
	};
	const struct spi_buf_set tx = {
   22a6a:	ab02      	add	r3, sp, #8
   22a6c:	9304      	str	r3, [sp, #16]
   22a6e:	2301      	movs	r3, #1
   22a70:	f851 0b04 	ldr.w	r0, [r1], #4
	uint8_t cmd[] = { reg & 0x7F, val };
   22a74:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf_set tx = {
   22a78:	9305      	str	r3, [sp, #20]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   22a7a:	6883      	ldr	r3, [r0, #8]
   22a7c:	aa04      	add	r2, sp, #16
   22a7e:	681c      	ldr	r4, [r3, #0]
   22a80:	2300      	movs	r3, #0
   22a82:	47a0      	blx	r4
	if (ret) {
		LOG_DBG("spi_write FAIL %d\n", ret);
		return ret;
	}
	return 0;
}
   22a84:	b006      	add	sp, #24
   22a86:	bd10      	pop	{r4, pc}

00022a88 <bme280_reg_read_spi>:
{
   22a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22a8c:	b08c      	sub	sp, #48	; 0x30
   22a8e:	461e      	mov	r6, r3
	const struct spi_buf tx_buf = {
   22a90:	f10d 0307 	add.w	r3, sp, #7
{
   22a94:	4605      	mov	r5, r0
	const struct spi_buf tx_buf = {
   22a96:	9302      	str	r3, [sp, #8]
   22a98:	2001      	movs	r0, #1
	const struct spi_buf_set tx = {
   22a9a:	ab02      	add	r3, sp, #8
   22a9c:	e9cd 3004 	strd	r3, r0, [sp, #16]
	const struct spi_buf_set rx = {
   22aa0:	ab08      	add	r3, sp, #32
   22aa2:	9306      	str	r3, [sp, #24]
	rx_buf[0].buf = NULL;
   22aa4:	2400      	movs	r4, #0
   22aa6:	2302      	movs	r3, #2
   22aa8:	e9cd 3407 	strd	r3, r4, [sp, #28]
{
   22aac:	460f      	mov	r7, r1
   22aae:	4690      	mov	r8, r2
	const struct spi_buf tx_buf = {
   22ab0:	9003      	str	r0, [sp, #12]
	rx_buf[0].len = 1;
   22ab2:	9009      	str	r0, [sp, #36]	; 0x24
	rx_buf[1].len = 1;
   22ab4:	900b      	str	r0, [sp, #44]	; 0x2c
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   22ab6:	f105 0904 	add.w	r9, r5, #4
	for (i = 0; i < size; i++) {
   22aba:	42a6      	cmp	r6, r4
   22abc:	dc03      	bgt.n	22ac6 <bme280_reg_read_spi+0x3e>
	return 0;
   22abe:	2000      	movs	r0, #0
}
   22ac0:	b00c      	add	sp, #48	; 0x30
   22ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		addr = (start + i) | 0x80;
   22ac6:	193b      	adds	r3, r7, r4
   22ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22acc:	f88d 3007 	strb.w	r3, [sp, #7]
		rx_buf[1].buf = &buf[i];
   22ad0:	eb08 0304 	add.w	r3, r8, r4
   22ad4:	6828      	ldr	r0, [r5, #0]
   22ad6:	930a      	str	r3, [sp, #40]	; 0x28
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   22ad8:	6883      	ldr	r3, [r0, #8]
   22ada:	aa04      	add	r2, sp, #16
   22adc:	f8d3 a000 	ldr.w	sl, [r3]
   22ae0:	4649      	mov	r1, r9
   22ae2:	ab06      	add	r3, sp, #24
   22ae4:	47d0      	blx	sl
		if (ret) {
   22ae6:	2800      	cmp	r0, #0
   22ae8:	d1ea      	bne.n	22ac0 <bme280_reg_read_spi+0x38>
	for (i = 0; i < size; i++) {
   22aea:	3401      	adds	r4, #1
   22aec:	e7e5      	b.n	22aba <bme280_reg_read_spi+0x32>

00022aee <bme280_bus_check_spi>:
{
   22aee:	b510      	push	{r4, lr}
   22af0:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
   22af2:	6800      	ldr	r0, [r0, #0]
   22af4:	f000 fcc6 	bl	23484 <z_device_ready>
   22af8:	b140      	cbz	r0, 22b0c <bme280_bus_check_spi+0x1e>
	if (spec->config.cs &&
   22afa:	68e3      	ldr	r3, [r4, #12]
   22afc:	b90b      	cbnz	r3, 22b02 <bme280_bus_check_spi+0x14>
	return spi_is_ready(&bus->spi) ? 0 : -ENODEV;
   22afe:	2000      	movs	r0, #0
}
   22b00:	bd10      	pop	{r4, pc}
	    !device_is_ready(spec->config.cs->gpio.port)) {
   22b02:	6818      	ldr	r0, [r3, #0]
   22b04:	f000 fcbe 	bl	23484 <z_device_ready>
   22b08:	2800      	cmp	r0, #0
   22b0a:	d1f8      	bne.n	22afe <bme280_bus_check_spi+0x10>
	return spi_is_ready(&bus->spi) ? 0 : -ENODEV;
   22b0c:	f06f 0012 	mvn.w	r0, #18
   22b10:	e7f6      	b.n	22b00 <bme280_bus_check_spi+0x12>

00022b12 <gpio_pin_set_dt>:
{
   22b12:	4603      	mov	r3, r0
   22b14:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   22b16:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22b18:	7919      	ldrb	r1, [r3, #4]
   22b1a:	2301      	movs	r3, #1
   22b1c:	fa03 f101 	lsl.w	r1, r3, r1
   22b20:	6903      	ldr	r3, [r0, #16]
   22b22:	681b      	ldr	r3, [r3, #0]
   22b24:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   22b26:	bf18      	it	ne
   22b28:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   22b2c:	b112      	cbz	r2, 22b34 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   22b2e:	6883      	ldr	r3, [r0, #8]
   22b30:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   22b32:	4718      	bx	r3
   22b34:	6883      	ldr	r3, [r0, #8]
   22b36:	691b      	ldr	r3, [r3, #16]
   22b38:	e7fb      	b.n	22b32 <gpio_pin_set_dt+0x20>

00022b3a <spi_nrfx_pm_action>:


#ifdef CONFIG_PM_DEVICE
static int spi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   22b3a:	b538      	push	{r3, r4, r5, lr}
   22b3c:	4603      	mov	r3, r0
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
	const struct spi_nrfx_config *config = get_dev_config(dev);

	switch (action) {
   22b3e:	460c      	mov	r4, r1
   22b40:	b129      	cbz	r1, 22b4e <spi_nrfx_pm_action+0x14>
   22b42:	2901      	cmp	r1, #1
	int ret = 0;
   22b44:	bf14      	ite	ne
   22b46:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   22b4a:	2000      	moveq	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   22b4c:	bd38      	pop	{r3, r4, r5, pc}
	struct spi_nrfx_data *data = get_dev_data(dev);
   22b4e:	6905      	ldr	r5, [r0, #16]
		if (data->initialized) {
   22b50:	f895 006d 	ldrb.w	r0, [r5, #109]	; 0x6d
   22b54:	2800      	cmp	r0, #0
   22b56:	d0f9      	beq.n	22b4c <spi_nrfx_pm_action+0x12>
			nrfx_spi_uninit(&config->spi);
   22b58:	6858      	ldr	r0, [r3, #4]
   22b5a:	f7f7 fd7b 	bl	1a654 <nrfx_spi_uninit>
			data->initialized = false;
   22b5e:	f885 406d 	strb.w	r4, [r5, #109]	; 0x6d
	int ret = 0;
   22b62:	4620      	mov	r0, r4
   22b64:	e7f2      	b.n	22b4c <spi_nrfx_pm_action+0x12>

00022b66 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   22b66:	b530      	push	{r4, r5, lr}
   22b68:	4604      	mov	r4, r0
	while (*count) {
   22b6a:	6808      	ldr	r0, [r1, #0]
   22b6c:	b908      	cbnz	r0, 22b72 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   22b6e:	6010      	str	r0, [r2, #0]
	return NULL;
   22b70:	e004      	b.n	22b7c <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   22b72:	6823      	ldr	r3, [r4, #0]
   22b74:	685d      	ldr	r5, [r3, #4]
   22b76:	b115      	cbz	r5, 22b7e <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   22b78:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   22b7a:	6015      	str	r5, [r2, #0]
}
   22b7c:	bd30      	pop	{r4, r5, pc}
		++(*current);
   22b7e:	3308      	adds	r3, #8
		--(*count);
   22b80:	3801      	subs	r0, #1
		++(*current);
   22b82:	6023      	str	r3, [r4, #0]
		--(*count);
   22b84:	6008      	str	r0, [r1, #0]
   22b86:	e7f0      	b.n	22b6a <spi_context_get_next_buf.constprop.0+0x4>

00022b88 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22b88:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   22b8a:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22b8c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   22b8e:	b1e3      	cbz	r3, 22bca <_spi_context_cs_control.isra.0+0x42>
   22b90:	6898      	ldr	r0, [r3, #8]
   22b92:	b1d0      	cbz	r0, 22bca <_spi_context_cs_control.isra.0+0x42>
   22b94:	6805      	ldr	r5, [r0, #0]
   22b96:	b1c5      	cbz	r5, 22bca <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   22b98:	b149      	cbz	r1, 22bae <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   22b9a:	2101      	movs	r1, #1
   22b9c:	f7ff ffb9 	bl	22b12 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   22ba0:	6823      	ldr	r3, [r4, #0]
   22ba2:	689b      	ldr	r3, [r3, #8]
   22ba4:	6898      	ldr	r0, [r3, #8]
}
   22ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   22baa:	f001 b86b 	b.w	23c84 <z_impl_k_busy_wait>
			if (!force_off &&
   22bae:	b912      	cbnz	r2, 22bb6 <_spi_context_cs_control.isra.0+0x2e>
   22bb0:	889b      	ldrh	r3, [r3, #4]
   22bb2:	04db      	lsls	r3, r3, #19
   22bb4:	d409      	bmi.n	22bca <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   22bb6:	6880      	ldr	r0, [r0, #8]
   22bb8:	f001 f864 	bl	23c84 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   22bbc:	6823      	ldr	r3, [r4, #0]
   22bbe:	2100      	movs	r1, #0
   22bc0:	6898      	ldr	r0, [r3, #8]
}
   22bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   22bc6:	f7ff bfa4 	b.w	22b12 <gpio_pin_set_dt>
}
   22bca:	bd38      	pop	{r3, r4, r5, pc}

00022bcc <spi_context_unlock_unconditionally>:
{
   22bcc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   22bce:	2201      	movs	r2, #1
   22bd0:	2100      	movs	r1, #0
{
   22bd2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   22bd4:	f7ff ffd8 	bl	22b88 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   22bd8:	69a3      	ldr	r3, [r4, #24]
   22bda:	b933      	cbnz	r3, 22bea <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   22bdc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   22bde:	f104 0010 	add.w	r0, r4, #16
}
   22be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22be6:	f7f8 bee1 	b.w	1b9ac <z_impl_k_sem_give>
   22bea:	bd10      	pop	{r4, pc}

00022bec <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   22bec:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22bee:	6803      	ldr	r3, [r0, #0]
   22bf0:	428b      	cmp	r3, r1
{
   22bf2:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22bf4:	d106      	bne.n	22c04 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   22bf6:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   22bfa:	b934      	cbnz	r4, 22c0a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   22bfc:	f7ff ffe6 	bl	22bcc <spi_context_unlock_unconditionally>
	return 0;
   22c00:	4620      	mov	r0, r4
}
   22c02:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22c04:	f06f 0015 	mvn.w	r0, #21
   22c08:	e7fb      	b.n	22c02 <spi_nrfx_release+0x16>
		return -EBUSY;
   22c0a:	f06f 000f 	mvn.w	r0, #15
   22c0e:	e7f8      	b.n	22c02 <spi_nrfx_release+0x16>

00022c10 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   22c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c14:	4605      	mov	r5, r0
   22c16:	2200      	movs	r2, #0
   22c18:	2101      	movs	r1, #1
   22c1a:	2004      	movs	r0, #4
   22c1c:	f7f0 fb84 	bl	13328 <z_arm_irq_priority_set>
   22c20:	692f      	ldr	r7, [r5, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   22c22:	68bc      	ldr	r4, [r7, #8]
   22c24:	2601      	movs	r6, #1
   22c26:	3408      	adds	r4, #8
   22c28:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
   22c2c:	f1a4 0208 	sub.w	r2, r4, #8
   22c30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   22c34:	429a      	cmp	r2, r3
   22c36:	d304      	bcc.n	22c42 <spi_1_init+0x32>
   22c38:	6928      	ldr	r0, [r5, #16]
   22c3a:	f7ff ffc7 	bl	22bcc <spi_context_unlock_unconditionally>
   22c3e:	2000      	movs	r0, #0
   22c40:	e029      	b.n	22c96 <spi_1_init+0x86>
		if (!device_is_ready(cs_gpio->port)) {
   22c42:	f854 0c08 	ldr.w	r0, [r4, #-8]
   22c46:	f000 fc1d 	bl	23484 <z_device_ready>
   22c4a:	b330      	cbz	r0, 22c9a <spi_1_init+0x8a>
	return gpio_pin_configure(spec->port,
   22c4c:	f854 0c08 	ldr.w	r0, [r4, #-8]
   22c50:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   22c54:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
   22c58:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   22c5c:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   22c60:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   22c64:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   22c66:	bf54      	ite	pl
   22c68:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   22c6c:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   22c70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   22c74:	fa06 f801 	lsl.w	r8, r6, r1
   22c78:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22c7a:	bf4c      	ite	mi
   22c7c:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22c80:	ea2c 0308 	bicpl.w	r3, ip, r8
   22c84:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   22c88:	f8d9 3000 	ldr.w	r3, [r9]
   22c8c:	4798      	blx	r3
		if (ret < 0) {
   22c8e:	2800      	cmp	r0, #0
   22c90:	f104 0408 	add.w	r4, r4, #8
   22c94:	dac8      	bge.n	22c28 <spi_1_init+0x18>
   22c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -ENODEV;
   22c9a:	f06f 0012 	mvn.w	r0, #18
   22c9e:	e7fa      	b.n	22c96 <spi_1_init+0x86>

00022ca0 <event_handler>:
{
   22ca0:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   22ca2:	7803      	ldrb	r3, [r0, #0]
{
   22ca4:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   22ca6:	2b00      	cmp	r3, #0
   22ca8:	d13d      	bne.n	22d26 <event_handler+0x86>
	if (!ctx->tx_len) {
   22caa:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   22cac:	b19b      	cbz	r3, 22cd6 <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   22cae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   22cb0:	429a      	cmp	r2, r3
   22cb2:	d810      	bhi.n	22cd6 <event_handler+0x36>
	ctx->tx_len -= len;
   22cb4:	1a9b      	subs	r3, r3, r2
   22cb6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   22cb8:	bb4b      	cbnz	r3, 22d0e <event_handler+0x6e>
		++ctx->current_tx;
   22cba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   22cbc:	3308      	adds	r3, #8
   22cbe:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   22cc0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   22cc2:	3b01      	subs	r3, #1
   22cc4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   22cc6:	f101 0258 	add.w	r2, r1, #88	; 0x58
   22cca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   22cce:	3148      	adds	r1, #72	; 0x48
   22cd0:	f7ff ff49 	bl	22b66 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   22cd4:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   22cd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   22cd8:	b1a3      	cbz	r3, 22d04 <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   22cda:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   22cdc:	429a      	cmp	r2, r3
   22cde:	d811      	bhi.n	22d04 <event_handler+0x64>
	ctx->rx_len -= len;
   22ce0:	1a9b      	subs	r3, r3, r2
   22ce2:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   22ce4:	b9cb      	cbnz	r3, 22d1a <event_handler+0x7a>
		++ctx->current_rx;
   22ce6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22ce8:	3308      	adds	r3, #8
   22cea:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   22cec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   22cee:	3b01      	subs	r3, #1
   22cf0:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   22cf2:	f104 0260 	add.w	r2, r4, #96	; 0x60
   22cf6:	f104 0150 	add.w	r1, r4, #80	; 0x50
   22cfa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   22cfe:	f7ff ff32 	bl	22b66 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   22d02:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   22d04:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   22d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   22d0a:	f7f5 b88d 	b.w	17e28 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   22d0e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   22d10:	2b00      	cmp	r3, #0
   22d12:	d0e0      	beq.n	22cd6 <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   22d14:	4413      	add	r3, r2
   22d16:	654b      	str	r3, [r1, #84]	; 0x54
   22d18:	e7dd      	b.n	22cd6 <event_handler+0x36>
	} else if (ctx->rx_buf) {
   22d1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22d1c:	2b00      	cmp	r3, #0
   22d1e:	d0f1      	beq.n	22d04 <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   22d20:	4413      	add	r3, r2
   22d22:	65e3      	str	r3, [r4, #92]	; 0x5c
   22d24:	e7ee      	b.n	22d04 <event_handler+0x64>
}
   22d26:	bd10      	pop	{r4, pc}

00022d28 <gpio_pin_set_dt>:
{
   22d28:	4603      	mov	r3, r0
   22d2a:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   22d2c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   22d2e:	7919      	ldrb	r1, [r3, #4]
   22d30:	2301      	movs	r3, #1
   22d32:	fa03 f101 	lsl.w	r1, r3, r1
   22d36:	6903      	ldr	r3, [r0, #16]
   22d38:	681b      	ldr	r3, [r3, #0]
   22d3a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   22d3c:	bf18      	it	ne
   22d3e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   22d42:	b112      	cbz	r2, 22d4a <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   22d44:	6883      	ldr	r3, [r0, #8]
   22d46:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   22d48:	4718      	bx	r3
   22d4a:	6883      	ldr	r3, [r0, #8]
   22d4c:	691b      	ldr	r3, [r3, #16]
   22d4e:	e7fb      	b.n	22d48 <gpio_pin_set_dt+0x20>

00022d50 <spim_nrfx_pm_action>:
};

#ifdef CONFIG_PM_DEVICE
static int spim_nrfx_pm_action(const struct device *dev,
			       enum pm_device_action action)
{
   22d50:	b538      	push	{r3, r4, r5, lr}
   22d52:	4603      	mov	r3, r0
	int ret = 0;
	struct spi_nrfx_data *data = get_dev_data(dev);
	const struct spi_nrfx_config *config = get_dev_config(dev);

	switch (action) {
   22d54:	460c      	mov	r4, r1
   22d56:	b129      	cbz	r1, 22d64 <spim_nrfx_pm_action+0x14>
   22d58:	2901      	cmp	r1, #1
	int ret = 0;
   22d5a:	bf14      	ite	ne
   22d5c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   22d60:	2000      	moveq	r0, #0
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   22d62:	bd38      	pop	{r3, r4, r5, pc}
	struct spi_nrfx_data *data = get_dev_data(dev);
   22d64:	6905      	ldr	r5, [r0, #16]
		if (data->initialized) {
   22d66:	f895 006d 	ldrb.w	r0, [r5, #109]	; 0x6d
   22d6a:	2800      	cmp	r0, #0
   22d6c:	d0f9      	beq.n	22d62 <spim_nrfx_pm_action+0x12>
			nrfx_spim_uninit(&config->spim);
   22d6e:	6858      	ldr	r0, [r3, #4]
   22d70:	f7f7 fe84 	bl	1aa7c <nrfx_spim_uninit>
			data->initialized = false;
   22d74:	f885 406d 	strb.w	r4, [r5, #109]	; 0x6d
	int ret = 0;
   22d78:	4620      	mov	r0, r4
   22d7a:	e7f2      	b.n	22d62 <spim_nrfx_pm_action+0x12>

00022d7c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   22d7c:	b530      	push	{r4, r5, lr}
   22d7e:	4604      	mov	r4, r0
	while (*count) {
   22d80:	6808      	ldr	r0, [r1, #0]
   22d82:	b908      	cbnz	r0, 22d88 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   22d84:	6010      	str	r0, [r2, #0]
	return NULL;
   22d86:	e004      	b.n	22d92 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
   22d88:	6823      	ldr	r3, [r4, #0]
   22d8a:	685d      	ldr	r5, [r3, #4]
   22d8c:	b115      	cbz	r5, 22d94 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
   22d8e:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
   22d90:	6015      	str	r5, [r2, #0]
}
   22d92:	bd30      	pop	{r4, r5, pc}
		++(*current);
   22d94:	3308      	adds	r3, #8
		--(*count);
   22d96:	3801      	subs	r0, #1
		++(*current);
   22d98:	6023      	str	r3, [r4, #0]
		--(*count);
   22d9a:	6008      	str	r0, [r1, #0]
   22d9c:	e7f0      	b.n	22d80 <spi_context_get_next_buf.constprop.0+0x4>

00022d9e <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22d9e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   22da0:	6803      	ldr	r3, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   22da2:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   22da4:	b1e3      	cbz	r3, 22de0 <_spi_context_cs_control.isra.0+0x42>
   22da6:	6898      	ldr	r0, [r3, #8]
   22da8:	b1d0      	cbz	r0, 22de0 <_spi_context_cs_control.isra.0+0x42>
   22daa:	6805      	ldr	r5, [r0, #0]
   22dac:	b1c5      	cbz	r5, 22de0 <_spi_context_cs_control.isra.0+0x42>
		if (on) {
   22dae:	b149      	cbz	r1, 22dc4 <_spi_context_cs_control.isra.0+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   22db0:	2101      	movs	r1, #1
   22db2:	f7ff ffb9 	bl	22d28 <gpio_pin_set_dt>
			k_busy_wait(ctx->config->cs->delay);
   22db6:	6823      	ldr	r3, [r4, #0]
   22db8:	689b      	ldr	r3, [r3, #8]
   22dba:	6898      	ldr	r0, [r3, #8]
}
   22dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   22dc0:	f000 bf60 	b.w	23c84 <z_impl_k_busy_wait>
			if (!force_off &&
   22dc4:	b912      	cbnz	r2, 22dcc <_spi_context_cs_control.isra.0+0x2e>
   22dc6:	889b      	ldrh	r3, [r3, #4]
   22dc8:	04db      	lsls	r3, r3, #19
   22dca:	d409      	bmi.n	22de0 <_spi_context_cs_control.isra.0+0x42>
			k_busy_wait(ctx->config->cs->delay);
   22dcc:	6880      	ldr	r0, [r0, #8]
   22dce:	f000 ff59 	bl	23c84 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   22dd2:	6823      	ldr	r3, [r4, #0]
   22dd4:	2100      	movs	r1, #0
   22dd6:	6898      	ldr	r0, [r3, #8]
}
   22dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   22ddc:	f7ff bfa4 	b.w	22d28 <gpio_pin_set_dt>
}
   22de0:	bd38      	pop	{r3, r4, r5, pc}

00022de2 <spi_context_unlock_unconditionally>:
{
   22de2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   22de4:	2201      	movs	r2, #1
   22de6:	2100      	movs	r1, #0
{
   22de8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   22dea:	f7ff ffd8 	bl	22d9e <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   22dee:	69a3      	ldr	r3, [r4, #24]
   22df0:	b933      	cbnz	r3, 22e00 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   22df2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   22df4:	f104 0010 	add.w	r0, r4, #16
}
   22df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22dfc:	f7f8 bdd6 	b.w	1b9ac <z_impl_k_sem_give>
   22e00:	bd10      	pop	{r4, pc}

00022e02 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   22e02:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22e04:	6803      	ldr	r3, [r0, #0]
   22e06:	428b      	cmp	r3, r1
{
   22e08:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   22e0a:	d106      	bne.n	22e1a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   22e0c:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   22e10:	b934      	cbnz	r4, 22e20 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   22e12:	f7ff ffe6 	bl	22de2 <spi_context_unlock_unconditionally>
	return 0;
   22e16:	4620      	mov	r0, r4
}
   22e18:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22e1a:	f06f 0015 	mvn.w	r0, #21
   22e1e:	e7fb      	b.n	22e18 <spi_nrfx_release+0x16>
		return -EBUSY;
   22e20:	f06f 000f 	mvn.w	r0, #15
   22e24:	e7f8      	b.n	22e18 <spi_nrfx_release+0x16>

00022e26 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   22e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22e2a:	4605      	mov	r5, r0
   22e2c:	2200      	movs	r2, #0
   22e2e:	2101      	movs	r1, #1
   22e30:	202f      	movs	r0, #47	; 0x2f
   22e32:	f7f0 fa79 	bl	13328 <z_arm_irq_priority_set>
   22e36:	692f      	ldr	r7, [r5, #16]
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   22e38:	68bc      	ldr	r4, [r7, #8]
   22e3a:	2601      	movs	r6, #1
   22e3c:	3408      	adds	r4, #8
   22e3e:	e9d7 3102 	ldrd	r3, r1, [r7, #8]
   22e42:	f1a4 0208 	sub.w	r2, r4, #8
   22e46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   22e4a:	429a      	cmp	r2, r3
   22e4c:	d304      	bcc.n	22e58 <spi_3_init+0x32>
   22e4e:	6928      	ldr	r0, [r5, #16]
   22e50:	f7ff ffc7 	bl	22de2 <spi_context_unlock_unconditionally>
   22e54:	2000      	movs	r0, #0
   22e56:	e029      	b.n	22eac <spi_3_init+0x86>
		if (!device_is_ready(cs_gpio->port)) {
   22e58:	f854 0c08 	ldr.w	r0, [r4, #-8]
   22e5c:	f000 fb12 	bl	23484 <z_device_ready>
   22e60:	b330      	cbz	r0, 22eb0 <spi_3_init+0x8a>
	return gpio_pin_configure(spec->port,
   22e62:	f854 0c08 	ldr.w	r0, [r4, #-8]
   22e66:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   22e6a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
   22e6e:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   22e72:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   22e76:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   22e7a:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   22e7c:	bf54      	ite	pl
   22e7e:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   22e82:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   22e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   22e8a:	fa06 f801 	lsl.w	r8, r6, r1
   22e8e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   22e90:	bf4c      	ite	mi
   22e92:	ea48 030c 	orrmi.w	r3, r8, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22e96:	ea2c 0308 	bicpl.w	r3, ip, r8
   22e9a:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   22e9e:	f8d9 3000 	ldr.w	r3, [r9]
   22ea2:	4798      	blx	r3
		if (ret < 0) {
   22ea4:	2800      	cmp	r0, #0
   22ea6:	f104 0408 	add.w	r4, r4, #8
   22eaa:	dac8      	bge.n	22e3e <spi_3_init+0x18>
   22eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -ENODEV;
   22eb0:	f06f 0012 	mvn.w	r0, #18
   22eb4:	e7fa      	b.n	22eac <spi_3_init+0x86>

00022eb6 <event_handler>:
{
   22eb6:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   22eb8:	7803      	ldrb	r3, [r0, #0]
{
   22eba:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   22ebc:	2b00      	cmp	r3, #0
   22ebe:	d13d      	bne.n	22f3c <event_handler+0x86>
	if (!ctx->tx_len) {
   22ec0:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   22ec2:	b19b      	cbz	r3, 22eec <event_handler+0x36>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   22ec4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (len > ctx->tx_len) {
   22ec6:	429a      	cmp	r2, r3
   22ec8:	d810      	bhi.n	22eec <event_handler+0x36>
	ctx->tx_len -= len;
   22eca:	1a9b      	subs	r3, r3, r2
   22ecc:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   22ece:	bb4b      	cbnz	r3, 22f24 <event_handler+0x6e>
		++ctx->current_tx;
   22ed0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   22ed2:	3308      	adds	r3, #8
   22ed4:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   22ed6:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   22ed8:	3b01      	subs	r3, #1
   22eda:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   22edc:	f101 0258 	add.w	r2, r1, #88	; 0x58
   22ee0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   22ee4:	3148      	adds	r1, #72	; 0x48
   22ee6:	f7ff ff49 	bl	22d7c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   22eea:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   22eec:	6e23      	ldr	r3, [r4, #96]	; 0x60
   22eee:	b1a3      	cbz	r3, 22f1a <event_handler+0x64>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   22ef0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (len > ctx->rx_len) {
   22ef2:	429a      	cmp	r2, r3
   22ef4:	d811      	bhi.n	22f1a <event_handler+0x64>
	ctx->rx_len -= len;
   22ef6:	1a9b      	subs	r3, r3, r2
   22ef8:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   22efa:	b9cb      	cbnz	r3, 22f30 <event_handler+0x7a>
		++ctx->current_rx;
   22efc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22efe:	3308      	adds	r3, #8
   22f00:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   22f02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   22f04:	3b01      	subs	r3, #1
   22f06:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   22f08:	f104 0260 	add.w	r2, r4, #96	; 0x60
   22f0c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   22f10:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   22f14:	f7ff ff32 	bl	22d7c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   22f18:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   22f1a:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   22f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   22f20:	f7f5 b8ec 	b.w	180fc <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   22f24:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   22f26:	2b00      	cmp	r3, #0
   22f28:	d0e0      	beq.n	22eec <event_handler+0x36>
		ctx->tx_buf += dfs * len;
   22f2a:	4413      	add	r3, r2
   22f2c:	654b      	str	r3, [r1, #84]	; 0x54
   22f2e:	e7dd      	b.n	22eec <event_handler+0x36>
	} else if (ctx->rx_buf) {
   22f30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22f32:	2b00      	cmp	r3, #0
   22f34:	d0f1      	beq.n	22f1a <event_handler+0x64>
		ctx->rx_buf += dfs * len;
   22f36:	4413      	add	r3, r2
   22f38:	65e3      	str	r3, [r4, #92]	; 0x5c
   22f3a:	e7ee      	b.n	22f1a <event_handler+0x64>
}
   22f3c:	bd10      	pop	{r4, pc}

00022f3e <wdt_nrf_disable>:
}
   22f3e:	f04f 30ff 	mov.w	r0, #4294967295
   22f42:	4770      	bx	lr

00022f44 <wdt_nrf_feed>:
{
   22f44:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   22f46:	6903      	ldr	r3, [r0, #16]
   22f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   22f4c:	428b      	cmp	r3, r1
   22f4e:	db05      	blt.n	22f5c <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   22f50:	6840      	ldr	r0, [r0, #4]
   22f52:	b2c9      	uxtb	r1, r1
   22f54:	f7f8 f952 	bl	1b1fc <nrfx_wdt_channel_feed>
	return 0;
   22f58:	2000      	movs	r0, #0
}
   22f5a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   22f5c:	f06f 0015 	mvn.w	r0, #21
   22f60:	e7fb      	b.n	22f5a <wdt_nrf_feed+0x16>

00022f62 <wdt_nrf_setup>:
{
   22f62:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   22f64:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   22f66:	f001 0301 	and.w	r3, r1, #1
   22f6a:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   22f6e:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   22f70:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   22f72:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   22f74:	bf48      	it	mi
   22f76:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   22f7a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   22f7e:	6903      	ldr	r3, [r0, #16]
   22f80:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   22f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22f86:	2300      	movs	r3, #0
   22f88:	03c8      	lsls	r0, r1, #15
   22f8a:	0c49      	lsrs	r1, r1, #17
   22f8c:	f7de fcf6 	bl	197c <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   22f90:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   22f94:	4620      	mov	r0, r4
   22f96:	f7f8 f8fb 	bl	1b190 <nrfx_wdt_enable>
}
   22f9a:	2000      	movs	r0, #0
   22f9c:	bd38      	pop	{r3, r4, r5, pc}

00022f9e <is_regular_addr_valid>:
{
   22f9e:	b538      	push	{r3, r4, r5, lr}
   22fa0:	4604      	mov	r4, r0
   22fa2:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   22fa4:	f000 f939 	bl	2321a <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   22fa8:	4284      	cmp	r4, r0
   22faa:	d209      	bcs.n	22fc0 <is_regular_addr_valid+0x22>
   22fac:	2c00      	cmp	r4, #0
   22fae:	db07      	blt.n	22fc0 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   22fb0:	42a8      	cmp	r0, r5
   22fb2:	d305      	bcc.n	22fc0 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   22fb4:	442c      	add	r4, r5
	    len > flash_size ||
   22fb6:	4284      	cmp	r4, r0
   22fb8:	bf8c      	ite	hi
   22fba:	2000      	movhi	r0, #0
   22fbc:	2001      	movls	r0, #1
}
   22fbe:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   22fc0:	2000      	movs	r0, #0
   22fc2:	e7fc      	b.n	22fbe <is_regular_addr_valid+0x20>

00022fc4 <flash_nrf_read>:
{
   22fc4:	b570      	push	{r4, r5, r6, lr}
   22fc6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   22fc8:	4628      	mov	r0, r5
   22fca:	4619      	mov	r1, r3
{
   22fcc:	4616      	mov	r6, r2
   22fce:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   22fd0:	f7ff ffe5 	bl	22f9e <is_regular_addr_valid>
   22fd4:	b138      	cbz	r0, 22fe6 <flash_nrf_read+0x22>
	if (!len) {
   22fd6:	b14c      	cbz	r4, 22fec <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   22fd8:	4622      	mov	r2, r4
   22fda:	4629      	mov	r1, r5
   22fdc:	4630      	mov	r0, r6
   22fde:	f7fd fa12 	bl	20406 <memcpy>
	return 0;
   22fe2:	2000      	movs	r0, #0
}
   22fe4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22fe6:	f06f 0015 	mvn.w	r0, #21
   22fea:	e7fb      	b.n	22fe4 <flash_nrf_read+0x20>
		return 0;
   22fec:	4620      	mov	r0, r4
   22fee:	e7f9      	b.n	22fe4 <flash_nrf_read+0x20>

00022ff0 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   22ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22ff4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   22ff6:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   22ff8:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   22ffa:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   22ffc:	6025      	str	r5, [r4, #0]
{
   22ffe:	460e      	mov	r6, r1
   23000:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   23002:	4669      	mov	r1, sp
	info->index = 0U;
   23004:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   23006:	aa01      	add	r2, sp, #4
   23008:	4798      	blx	r3

	while (layout_size--) {
   2300a:	e9dd 1c00 	ldrd	r1, ip, [sp]
   2300e:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   23010:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   23014:	4560      	cmp	r0, ip
   23016:	d104      	bne.n	23022 <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   23018:	f06f 0015 	mvn.w	r0, #21
}
   2301c:	b003      	add	sp, #12
   2301e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   23022:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   23026:	68a2      	ldr	r2, [r4, #8]
   23028:	f8d4 9000 	ldr.w	r9, [r4]
   2302c:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   2302e:	b986      	cbnz	r6, 23052 <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   23030:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   23032:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   23036:	4543      	cmp	r3, r8
   23038:	bf28      	it	cs
   2303a:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   2303c:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   23040:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   23042:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   23044:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   23046:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   23048:	f100 0001 	add.w	r0, r0, #1
   2304c:	d9e2      	bls.n	23014 <flash_get_page_info+0x24>
			return 0;
   2304e:	2000      	movs	r0, #0
   23050:	e7e4      	b.n	2301c <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   23052:	eba6 0309 	sub.w	r3, r6, r9
   23056:	fbb3 f3f5 	udiv	r3, r3, r5
   2305a:	e7ea      	b.n	23032 <flash_get_page_info+0x42>

0002305c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2305c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2305e:	2200      	movs	r2, #0
   23060:	f7ff bfc6 	b.w	22ff0 <flash_get_page_info>

00023064 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   23064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23066:	460f      	mov	r7, r1
   23068:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2306a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2306e:	2400      	movs	r4, #0
	int res = -EINVAL;
   23070:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   23074:	42a6      	cmp	r6, r4
   23076:	d801      	bhi.n	2307c <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   23078:	b003      	add	sp, #12
   2307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2307c:	1b33      	subs	r3, r6, r4
   2307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23082:	bf38      	it	cc
   23084:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   23086:	462a      	mov	r2, r5
   23088:	ab01      	add	r3, sp, #4
   2308a:	1939      	adds	r1, r7, r4
   2308c:	2000      	movs	r0, #0
   2308e:	f7f9 fd8f 	bl	1cbb0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   23092:	9b01      	ldr	r3, [sp, #4]
   23094:	42ab      	cmp	r3, r5
   23096:	d103      	bne.n	230a0 <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   23098:	2800      	cmp	r0, #0
   2309a:	d1ed      	bne.n	23078 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   2309c:	442c      	add	r4, r5
   2309e:	e7e9      	b.n	23074 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   230a0:	f06f 0015 	mvn.w	r0, #21
   230a4:	e7e8      	b.n	23078 <entropy_cc3xx_rng_get_entropy+0x14>

000230a6 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   230a6:	2200      	movs	r2, #0
{
   230a8:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   230aa:	4611      	mov	r1, r2
   230ac:	4610      	mov	r0, r2
   230ae:	f7f9 fd4b 	bl	1cb48 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   230b2:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   230b4:	bf18      	it	ne
   230b6:	f06f 0015 	mvnne.w	r0, #21
   230ba:	bd08      	pop	{r3, pc}

000230bc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   230bc:	4770      	bx	lr

000230be <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   230be:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   230c0:	2000      	movs	r0, #0
   230c2:	f7f0 fcbb 	bl	13a3c <sys_arch_reboot>

000230c6 <sdc_assertion_handler>:
	k_oops();
   230c6:	4040      	eors	r0, r0
   230c8:	f380 8811 	msr	BASEPRI, r0
   230cc:	f04f 0003 	mov.w	r0, #3
   230d0:	df02      	svc	2
}
   230d2:	4770      	bx	lr

000230d4 <rand_prio_high_vector_get>:
   230d4:	f7f5 bf5c 	b.w	18f90 <rand_prio_low_vector_get>

000230d8 <m_assert_handler>:
	k_oops();
   230d8:	4040      	eors	r0, r0
   230da:	f380 8811 	msr	BASEPRI, r0
   230de:	f04f 0003 	mov.w	r0, #3
   230e2:	df02      	svc	2
}
   230e4:	4770      	bx	lr

000230e6 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   230e6:	4668      	mov	r0, sp
   230e8:	f020 0107 	bic.w	r1, r0, #7
   230ec:	468d      	mov	sp, r1
   230ee:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   230f0:	f7e1 f86e 	bl	41d0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   230f4:	f7f0 f932 	bl	1335c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   230f8:	f7f0 fa1e 	bl	13538 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   230fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23100:	4685      	mov	sp, r0
   23102:	4770      	bx	lr

00023104 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23104:	4668      	mov	r0, sp
   23106:	f020 0107 	bic.w	r1, r0, #7
   2310a:	468d      	mov	sp, r1
   2310c:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2310e:	f7e0 ffe1 	bl	40d4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   23112:	f7f0 f923 	bl	1335c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   23116:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2311a:	4685      	mov	sp, r0
   2311c:	4770      	bx	lr

0002311e <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2311e:	4668      	mov	r0, sp
   23120:	f020 0107 	bic.w	r1, r0, #7
   23124:	468d      	mov	sp, r1
   23126:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   23128:	f7ea f9dc 	bl	d4e4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2312c:	f7f0 f916 	bl	1335c <_arch_isr_direct_pm>
   23130:	f7f0 fa02 	bl	13538 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   23134:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   23138:	4685      	mov	sp, r0
   2313a:	4770      	bx	lr

0002313c <nrfx_clock_stop>:
	switch (domain) {
   2313c:	2801      	cmp	r0, #1
   2313e:	d101      	bne.n	23144 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   23140:	f7e1 be78 	b.w	4e34 <mpsl_clock_hfclk_release>
}
   23144:	4770      	bx	lr

00023146 <nrfx_clock_enable>:
}
   23146:	4770      	bx	lr

00023148 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   23148:	f7e1 bc92 	b.w	4a70 <MPSL_IRQ_CLOCK_Handler>

0002314c <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2314c:	f7e2 b868 	b.w	5220 <mpsl_is_initialized>

00023150 <nrf_flash_sync_get_timestamp_begin>:
}
   23150:	4770      	bx	lr

00023152 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   23152:	f7f9 bc9d 	b.w	1ca90 <nrf_cc3xx_platform_init>

00023156 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   23156:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   23158:	f7ef ffcc 	bl	130f4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2315c:	f7f0 f87e 	bl	1325c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   23160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   23164:	f7f9 bc94 	b.w	1ca90 <nrf_cc3xx_platform_init>

00023168 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   23168:	4700      	bx	r0

0002316a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2316a:	f000 bd8b 	b.w	23c84 <z_impl_k_busy_wait>

0002316e <nrf_gpio_reconfigure>:
{
   2316e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23170:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23172:	a801      	add	r0, sp, #4
{
   23174:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   23178:	4617      	mov	r7, r2
   2317a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2317c:	f7f6 fe18 	bl	19db0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23180:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   23182:	2f00      	cmp	r7, #0
   23184:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   23188:	bf14      	ite	ne
   2318a:	2302      	movne	r3, #2
   2318c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2318e:	2900      	cmp	r1, #0
   23190:	bf18      	it	ne
   23192:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   23196:	2d00      	cmp	r5, #0
   23198:	bf14      	ite	ne
   2319a:	f04f 0c0c 	movne.w	ip, #12
   2319e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   231a2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   231a4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   231a8:	bf14      	ite	ne
   231aa:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   231ae:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   231b2:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   231b4:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   231b8:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   231bc:	bf14      	ite	ne
   231be:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   231c2:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   231c6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   231ca:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   231ce:	b101      	cbz	r1, 231d2 <nrf_gpio_reconfigure+0x64>
   231d0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   231d2:	b10f      	cbz	r7, 231d8 <nrf_gpio_reconfigure+0x6a>
   231d4:	783f      	ldrb	r7, [r7, #0]
   231d6:	007f      	lsls	r7, r7, #1
   231d8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   231da:	b10d      	cbz	r5, 231e0 <nrf_gpio_reconfigure+0x72>
   231dc:	782d      	ldrb	r5, [r5, #0]
   231de:	00ad      	lsls	r5, r5, #2
   231e0:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   231e2:	b10c      	cbz	r4, 231e8 <nrf_gpio_reconfigure+0x7a>
   231e4:	7822      	ldrb	r2, [r4, #0]
   231e6:	0214      	lsls	r4, r2, #8
   231e8:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   231ea:	b10e      	cbz	r6, 231f0 <nrf_gpio_reconfigure+0x82>
   231ec:	7836      	ldrb	r6, [r6, #0]
   231ee:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   231f0:	432c      	orrs	r4, r5
   231f2:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   231f4:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   231f8:	b003      	add	sp, #12
   231fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000231fc <nrf_gpio_cfg_sense_set>:
{
   231fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   231fe:	f10d 030f 	add.w	r3, sp, #15
   23202:	9301      	str	r3, [sp, #4]
   23204:	2300      	movs	r3, #0
{
   23206:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2320a:	9300      	str	r3, [sp, #0]
   2320c:	461a      	mov	r2, r3
   2320e:	4619      	mov	r1, r3
   23210:	f7ff ffad 	bl	2316e <nrf_gpio_reconfigure>
}
   23214:	b005      	add	sp, #20
   23216:	f85d fb04 	ldr.w	pc, [sp], #4

0002321a <nrfx_nvmc_flash_size_get>:
   2321a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2321e:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   23220:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   23222:	4350      	muls	r0, r2
   23224:	4770      	bx	lr

00023226 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   23226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2322a:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2322c:	4770      	bx	lr

0002322e <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2322e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23232:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   23234:	4770      	bx	lr

00023236 <nrf_gpio_cfg_default>:
{
   23236:	b507      	push	{r0, r1, r2, lr}
   23238:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2323a:	a801      	add	r0, sp, #4
   2323c:	f7f7 f950 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23240:	9b01      	ldr	r3, [sp, #4]
   23242:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23246:	2202      	movs	r2, #2
   23248:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2324c:	b003      	add	sp, #12
   2324e:	f85d fb04 	ldr.w	pc, [sp], #4

00023252 <nrf_gpio_pin_set>:
{
   23252:	b507      	push	{r0, r1, r2, lr}
   23254:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23256:	a801      	add	r0, sp, #4
   23258:	f7f7 f942 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2325c:	9a01      	ldr	r2, [sp, #4]
   2325e:	2301      	movs	r3, #1
   23260:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   23262:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   23266:	b003      	add	sp, #12
   23268:	f85d fb04 	ldr.w	pc, [sp], #4

0002326c <nrf_gpio_pin_clear>:
{
   2326c:	b507      	push	{r0, r1, r2, lr}
   2326e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23270:	a801      	add	r0, sp, #4
   23272:	f7f7 f935 	bl	1a4e0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23276:	9a01      	ldr	r2, [sp, #4]
   23278:	2301      	movs	r3, #1
   2327a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2327c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   23280:	b003      	add	sp, #12
   23282:	f85d fb04 	ldr.w	pc, [sp], #4

00023286 <transfer_byte>:
{
   23286:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   23288:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2328c:	698a      	ldr	r2, [r1, #24]
   2328e:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   23290:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   23294:	6a0b      	ldr	r3, [r1, #32]
   23296:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   23298:	bf3e      	ittt	cc
   2329a:	694a      	ldrcc	r2, [r1, #20]
   2329c:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   232a0:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   232a2:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   232a4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   232a8:	1c53      	adds	r3, r2, #1
   232aa:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   232ac:	3202      	adds	r2, #2
    if (p_cb->abort)
   232ae:	b13c      	cbz	r4, 232c0 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   232b0:	690c      	ldr	r4, [r1, #16]
   232b2:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   232b4:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   232b6:	bf38      	it	cc
   232b8:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   232ba:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   232bc:	bf88      	it	hi
   232be:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   232c0:	690d      	ldr	r5, [r1, #16]
   232c2:	4295      	cmp	r5, r2
   232c4:	d905      	bls.n	232d2 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   232c6:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   232c8:	5c9b      	ldrb	r3, [r3, r2]
   232ca:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   232ce:	2001      	movs	r0, #1
   232d0:	e00a      	b.n	232e8 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   232d2:	698c      	ldr	r4, [r1, #24]
   232d4:	4294      	cmp	r4, r2
   232d6:	d901      	bls.n	232dc <transfer_byte+0x56>
   232d8:	7fcb      	ldrb	r3, [r1, #31]
   232da:	e7f6      	b.n	232ca <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   232dc:	42ab      	cmp	r3, r5
   232de:	d3f6      	bcc.n	232ce <transfer_byte+0x48>
   232e0:	42a3      	cmp	r3, r4
   232e2:	bf2c      	ite	cs
   232e4:	2000      	movcs	r0, #0
   232e6:	2001      	movcc	r0, #1
}
   232e8:	b003      	add	sp, #12
   232ea:	bd30      	pop	{r4, r5, pc}

000232ec <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   232ec:	1c43      	adds	r3, r0, #1
   232ee:	d001      	beq.n	232f4 <spim_pin_uninit+0x8>
    nrf_gpio_cfg_default(pin);
   232f0:	f7f7 ba96 	b.w	1a820 <nrf_gpio_cfg_default>
}
   232f4:	4770      	bx	lr

000232f6 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   232f6:	7f83      	ldrb	r3, [r0, #30]
   232f8:	075a      	lsls	r2, r3, #29
   232fa:	d40b      	bmi.n	23314 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   232fc:	7fc0      	ldrb	r0, [r0, #31]
   232fe:	28ff      	cmp	r0, #255	; 0xff
   23300:	d008      	beq.n	23314 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   23302:	079b      	lsls	r3, r3, #30
   23304:	bf58      	it	pl
   23306:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2330a:	b909      	cbnz	r1, 23310 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2330c:	f7f7 ba78 	b.w	1a800 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   23310:	f7f7 ba96 	b.w	1a840 <nrf_gpio_pin_set>
}
   23314:	4770      	bx	lr

00023316 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   23316:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   23318:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2331a:	6b48      	ldr	r0, [r1, #52]	; 0x34
   2331c:	4298      	cmp	r0, r3
{
   2331e:	b510      	push	{r4, lr}
   23320:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   23324:	d205      	bcs.n	23332 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   23326:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   23328:	5c09      	ldrb	r1, [r1, r0]
   2332a:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   2332e:	4618      	mov	r0, r3
}
   23330:	e004      	b.n	2333c <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   23332:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   23336:	b110      	cbz	r0, 2333e <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23338:	61d3      	str	r3, [r2, #28]
            return false;
   2333a:	2000      	movs	r0, #0
}
   2333c:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   2333e:	6a0c      	ldr	r4, [r1, #32]
   23340:	0664      	lsls	r4, r4, #25
   23342:	d503      	bpl.n	2334c <twi_send_byte+0x36>
   23344:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   23346:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2334a:	e7f7      	b.n	2333c <twi_send_byte+0x26>
   2334c:	6153      	str	r3, [r2, #20]
   2334e:	e7ee      	b.n	2332e <twi_send_byte+0x18>

00023350 <twi_transfer>:
{
   23350:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23352:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   23356:	4604      	mov	r4, r0
   23358:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2335a:	b12e      	cbz	r6, 23368 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2335c:	2300      	movs	r3, #0
   2335e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   23362:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   23366:	2601      	movs	r6, #1
    if (p_cb->error)
   23368:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   2336c:	b320      	cbz	r0, 233b8 <twi_transfer+0x68>
   2336e:	2300      	movs	r3, #0
   23370:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   23374:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   23378:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2337c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   23380:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   23384:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   23388:	2e00      	cmp	r6, #0
   2338a:	d068      	beq.n	2345e <twi_transfer+0x10e>
        if (!p_cb->error)
   2338c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   23390:	2300      	movs	r3, #0
   23392:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   23396:	bb88      	cbnz	r0, 233fc <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   23398:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2339a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   2339c:	429a      	cmp	r2, r3
        return false;
   2339e:	bf1c      	itt	ne
   233a0:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   233a2:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   233a4:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   233a8:	bf1c      	itt	ne
   233aa:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   233ae:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   233b2:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   233b6:	e022      	b.n	233fe <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233b8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   233bc:	b142      	cbz	r2, 233d0 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233be:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   233c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233c6:	2301      	movs	r3, #1
   233c8:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   233ca:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   233ce:	e7db      	b.n	23388 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233d0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   233d4:	b1a3      	cbz	r3, 23400 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233d6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   233da:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   233de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   233e0:	3301      	adds	r3, #1
   233e2:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   233e8:	b113      	cbz	r3, 233f0 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   233ee:	e7e8      	b.n	233c2 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   233f0:	4629      	mov	r1, r5
   233f2:	4620      	mov	r0, r4
   233f4:	f7ff ff8f 	bl	23316 <twi_send_byte>
   233f8:	2800      	cmp	r0, #0
   233fa:	d1c5      	bne.n	23388 <twi_transfer+0x38>
                    return false;
   233fc:	2000      	movs	r0, #0
}
   233fe:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23400:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   23404:	2a00      	cmp	r2, #0
   23406:	d0bf      	beq.n	23388 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23408:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2340c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23410:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   23414:	b112      	cbz	r2, 2341c <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23416:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2341a:	e7d2      	b.n	233c2 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2341c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2341e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   23420:	4293      	cmp	r3, r2
   23422:	d2b1      	bcs.n	23388 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   23424:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   23426:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   2342a:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   2342c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2342e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   23430:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23432:	1e51      	subs	r1, r2, #1
   23434:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   23436:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23438:	d108      	bne.n	2344c <twi_transfer+0xfc>
   2343a:	6a29      	ldr	r1, [r5, #32]
   2343c:	0649      	lsls	r1, r1, #25
   2343e:	d410      	bmi.n	23462 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   23440:	2302      	movs	r3, #2
   23442:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23446:	2301      	movs	r3, #1
   23448:	6223      	str	r3, [r4, #32]
   2344a:	e79d      	b.n	23388 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2344c:	4293      	cmp	r3, r2
   2344e:	d1fa      	bne.n	23446 <twi_transfer+0xf6>
   23450:	6a2b      	ldr	r3, [r5, #32]
   23452:	065b      	lsls	r3, r3, #25
   23454:	d598      	bpl.n	23388 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   23456:	2302      	movs	r3, #2
   23458:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   2345c:	e7cf      	b.n	233fe <twi_transfer+0xae>
    return true;
   2345e:	2001      	movs	r0, #1
   23460:	e7cd      	b.n	233fe <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   23462:	4293      	cmp	r3, r2
   23464:	d1ef      	bne.n	23446 <twi_transfer+0xf6>
   23466:	e7f6      	b.n	23456 <twi_transfer+0x106>

00023468 <nrf_gpio_pin_set>:
{
   23468:	b507      	push	{r0, r1, r2, lr}
   2346a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2346c:	a801      	add	r0, sp, #4
   2346e:	f7f7 fedf 	bl	1b230 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23472:	9a01      	ldr	r2, [sp, #4]
   23474:	2301      	movs	r3, #1
   23476:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   23478:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2347c:	b003      	add	sp, #12
   2347e:	f85d fb04 	ldr.w	pc, [sp], #4

00023482 <z_device_state_init>:
}
   23482:	4770      	bx	lr

00023484 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   23484:	b138      	cbz	r0, 23496 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   23486:	68c3      	ldr	r3, [r0, #12]
   23488:	8818      	ldrh	r0, [r3, #0]
   2348a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2348e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   23492:	4258      	negs	r0, r3
   23494:	4158      	adcs	r0, r3
}
   23496:	4770      	bx	lr

00023498 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2349a:	4605      	mov	r5, r0
   2349c:	460e      	mov	r6, r1
	__asm__ volatile(
   2349e:	f04f 0340 	mov.w	r3, #64	; 0x40
   234a2:	f3ef 8711 	mrs	r7, BASEPRI
   234a6:	f383 8812 	msr	BASEPRI_MAX, r3
   234aa:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   234ae:	f7f8 ffbd 	bl	1c42c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   234b2:	4631      	mov	r1, r6
   234b4:	4604      	mov	r4, r0
   234b6:	4628      	mov	r0, r5
   234b8:	f7ff fe01 	bl	230be <k_sys_fatal_error_handler>
	__asm__ volatile(
   234bc:	f387 8811 	msr	BASEPRI, r7
   234c0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   234c4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   234c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   234ca:	f7f0 b9b7 	b.w	1383c <z_impl_k_thread_abort>

000234ce <k_heap_init>:
{
   234ce:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   234d0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   234d4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   234d8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   234da:	f7fc ba61 	b.w	1f9a0 <sys_heap_init>

000234de <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   234de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234e2:	b087      	sub	sp, #28
   234e4:	4604      	mov	r4, r0
   234e6:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   234e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   234ec:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   234ee:	f000 fbcd 	bl	23c8c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   234f2:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   234f6:	4605      	mov	r5, r0
   234f8:	4688      	mov	r8, r1
	__asm__ volatile(
   234fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   234fe:	f3ef 8b11 	mrs	fp, BASEPRI
   23502:	f383 8812 	msr	BASEPRI_MAX, r3
   23506:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2350a:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2350e:	463a      	mov	r2, r7
   23510:	4631      	mov	r1, r6
   23512:	4620      	mov	r0, r4
   23514:	f7fc f9dc 	bl	1f8d0 <sys_heap_aligned_alloc>
   23518:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   2351a:	f7f9 f95f 	bl	1c7dc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2351e:	9b05      	ldr	r3, [sp, #20]
   23520:	b13b      	cbz	r3, 23532 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   23522:	f38b 8811 	msr	BASEPRI, fp
   23526:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2352a:	4618      	mov	r0, r3
   2352c:	b007      	add	sp, #28
   2352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   23532:	1a2a      	subs	r2, r5, r0
   23534:	9202      	str	r2, [sp, #8]
   23536:	eb68 0201 	sbc.w	r2, r8, r1
   2353a:	9203      	str	r2, [sp, #12]
   2353c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   23540:	2901      	cmp	r1, #1
   23542:	f172 0200 	sbcs.w	r2, r2, #0
   23546:	dbec      	blt.n	23522 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2354c:	4659      	mov	r1, fp
   2354e:	e9cd 2300 	strd	r2, r3, [sp]
   23552:	4648      	mov	r0, r9
   23554:	4652      	mov	r2, sl
   23556:	f7f8 fe07 	bl	1c168 <z_pend_curr>
	__asm__ volatile(
   2355a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2355e:	f3ef 8b11 	mrs	fp, BASEPRI
   23562:	f383 8812 	msr	BASEPRI_MAX, r3
   23566:	f3bf 8f6f 	isb	sy
   2356a:	e7d0      	b.n	2350e <k_heap_aligned_alloc+0x30>

0002356c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2356c:	b538      	push	{r3, r4, r5, lr}
   2356e:	4604      	mov	r4, r0
   23570:	f04f 0340 	mov.w	r3, #64	; 0x40
   23574:	f3ef 8511 	mrs	r5, BASEPRI
   23578:	f383 8812 	msr	BASEPRI_MAX, r3
   2357c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   23580:	f7fc f96d 	bl	1f85e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23584:	f104 000c 	add.w	r0, r4, #12
   23588:	f000 fb0b 	bl	23ba2 <z_unpend_all>
   2358c:	b130      	cbz	r0, 2359c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2358e:	4629      	mov	r1, r5
   23590:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   23598:	f7f8 bc8c 	b.w	1beb4 <z_reschedule>
	__asm__ volatile(
   2359c:	f385 8811 	msr	BASEPRI, r5
   235a0:	f3bf 8f6f 	isb	sy
}
   235a4:	bd38      	pop	{r3, r4, r5, pc}

000235a6 <k_mem_slab_init>:
{
   235a6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   235a8:	2400      	movs	r4, #0
   235aa:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   235ac:	ea41 0402 	orr.w	r4, r1, r2
   235b0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   235b4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   235b8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   235ba:	d10c      	bne.n	235d6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   235bc:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   235be:	42a3      	cmp	r3, r4
   235c0:	d103      	bne.n	235ca <k_mem_slab_init+0x24>
   235c2:	e9c0 0000 	strd	r0, r0, [r0]
}
   235c6:	2000      	movs	r0, #0
}
   235c8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   235ca:	6945      	ldr	r5, [r0, #20]
   235cc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   235ce:	3401      	adds	r4, #1
		slab->free_list = p;
   235d0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   235d2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   235d4:	e7f3      	b.n	235be <k_mem_slab_init+0x18>
		return -EINVAL;
   235d6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   235da:	e7f5      	b.n	235c8 <k_mem_slab_init+0x22>

000235dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   235dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   235de:	4604      	mov	r4, r0
   235e0:	460d      	mov	r5, r1
	__asm__ volatile(
   235e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   235e6:	f3ef 8611 	mrs	r6, BASEPRI
   235ea:	f383 8812 	msr	BASEPRI_MAX, r3
   235ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   235f2:	6947      	ldr	r7, [r0, #20]
   235f4:	b977      	cbnz	r7, 23614 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   235f6:	f000 fabc 	bl	23b72 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   235fa:	b158      	cbz	r0, 23614 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   235fc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   235fe:	6142      	str	r2, [r0, #20]
   23600:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   23602:	f000 fa42 	bl	23a8a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23606:	4631      	mov	r1, r6
   23608:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2360c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   23610:	f7f8 bc50 	b.w	1beb4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23614:	682b      	ldr	r3, [r5, #0]
   23616:	6962      	ldr	r2, [r4, #20]
   23618:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2361a:	682b      	ldr	r3, [r5, #0]
   2361c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2361e:	69a3      	ldr	r3, [r4, #24]
   23620:	3b01      	subs	r3, #1
   23622:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   23624:	f386 8811 	msr	BASEPRI, r6
   23628:	f3bf 8f6f 	isb	sy
}
   2362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002362e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2362e:	f3ef 8005 	mrs	r0, IPSR
}
   23632:	3800      	subs	r0, #0
   23634:	bf18      	it	ne
   23636:	2001      	movne	r0, #1
   23638:	4770      	bx	lr

0002363a <z_impl_k_thread_name_set>:
}
   2363a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2363e:	4770      	bx	lr

00023640 <z_impl_k_thread_start>:
	z_sched_start(thread);
   23640:	f7f8 bd36 	b.w	1c0b0 <z_sched_start>

00023644 <z_pm_save_idle_exit>:
{
   23644:	b508      	push	{r3, lr}
	pm_system_resume();
   23646:	f7ef fb63 	bl	12d10 <pm_system_resume>
}
   2364a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2364e:	f7ff bd35 	b.w	230bc <sys_clock_idle_exit>

00023652 <z_impl_k_mutex_init>:
{
   23652:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23654:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   23656:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2365a:	e9c3 3300 	strd	r3, r3, [r3]
}
   2365e:	4770      	bx	lr

00023660 <queue_insert>:
{
   23660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23664:	4699      	mov	r9, r3
   23666:	4604      	mov	r4, r0
   23668:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2366c:	460d      	mov	r5, r1
   2366e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23670:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23674:	f04f 0240 	mov.w	r2, #64	; 0x40
   23678:	f3ef 8711 	mrs	r7, BASEPRI
   2367c:	f382 8812 	msr	BASEPRI_MAX, r2
   23680:	f3bf 8f6f 	isb	sy
	if (is_append) {
   23684:	b103      	cbz	r3, 23688 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   23686:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23688:	4630      	mov	r0, r6
   2368a:	f000 fa72 	bl	23b72 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2368e:	b158      	cbz	r0, 236a8 <queue_insert+0x48>
   23690:	2400      	movs	r4, #0
   23692:	67c4      	str	r4, [r0, #124]	; 0x7c
   23694:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   23698:	f000 f9f7 	bl	23a8a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2369c:	4630      	mov	r0, r6
   2369e:	4639      	mov	r1, r7
   236a0:	f7f8 fc08 	bl	1beb4 <z_reschedule>
	return 0;
   236a4:	2000      	movs	r0, #0
   236a6:	e00c      	b.n	236c2 <queue_insert+0x62>
	if (alloc) {
   236a8:	f1b9 0f00 	cmp.w	r9, #0
   236ac:	d01b      	beq.n	236e6 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   236ae:	2108      	movs	r1, #8
   236b0:	f7f9 f9d6 	bl	1ca60 <z_thread_aligned_alloc>
		if (anode == NULL) {
   236b4:	b938      	cbnz	r0, 236c6 <queue_insert+0x66>
	__asm__ volatile(
   236b6:	f387 8811 	msr	BASEPRI, r7
   236ba:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   236be:	f06f 000b 	mvn.w	r0, #11
}
   236c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   236c6:	2301      	movs	r3, #1
		anode->data = data;
   236c8:	f8c0 8004 	str.w	r8, [r0, #4]
   236cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   236ce:	6803      	ldr	r3, [r0, #0]
   236d0:	f003 0203 	and.w	r2, r3, #3
   236d4:	b95d      	cbnz	r5, 236ee <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   236d6:	6823      	ldr	r3, [r4, #0]
   236d8:	4313      	orrs	r3, r2
   236da:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   236dc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   236de:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   236e0:	b973      	cbnz	r3, 23700 <queue_insert+0xa0>
	list->tail = node;
   236e2:	6060      	str	r0, [r4, #4]
}
   236e4:	e00c      	b.n	23700 <queue_insert+0xa0>
	node->next_and_flags = flags;
   236e6:	f8c8 9000 	str.w	r9, [r8]
}
   236ea:	4640      	mov	r0, r8
   236ec:	e7ef      	b.n	236ce <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   236ee:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   236f0:	f033 0303 	bics.w	r3, r3, #3
   236f4:	d110      	bne.n	23718 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   236f6:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   236f8:	6862      	ldr	r2, [r4, #4]
   236fa:	b93a      	cbnz	r2, 2370c <queue_insert+0xac>
	list->head = node;
   236fc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   23700:	2104      	movs	r1, #4
   23702:	f104 0010 	add.w	r0, r4, #16
   23706:	f000 fc57 	bl	23fb8 <z_handle_obj_poll_events>
   2370a:	e7c7      	b.n	2369c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2370c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2370e:	f003 0303 	and.w	r3, r3, #3
   23712:	4303      	orrs	r3, r0
   23714:	6013      	str	r3, [r2, #0]
   23716:	e7e4      	b.n	236e2 <queue_insert+0x82>
   23718:	4313      	orrs	r3, r2
   2371a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2371c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2371e:	f003 0303 	and.w	r3, r3, #3
   23722:	4303      	orrs	r3, r0
   23724:	602b      	str	r3, [r5, #0]
}
   23726:	e7eb      	b.n	23700 <queue_insert+0xa0>

00023728 <z_queue_node_peek>:
{
   23728:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2372a:	4604      	mov	r4, r0
   2372c:	b130      	cbz	r0, 2373c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2372e:	6802      	ldr	r2, [r0, #0]
   23730:	0793      	lsls	r3, r2, #30
   23732:	d003      	beq.n	2373c <z_queue_node_peek+0x14>
		ret = anode->data;
   23734:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   23736:	b109      	cbz	r1, 2373c <z_queue_node_peek+0x14>
			k_free(anode);
   23738:	f000 fc5f 	bl	23ffa <k_free>
}
   2373c:	4620      	mov	r0, r4
   2373e:	bd10      	pop	{r4, pc}

00023740 <z_impl_k_queue_init>:
	list->head = NULL;
   23740:	2300      	movs	r3, #0
	list->tail = NULL;
   23742:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   23746:	f100 0308 	add.w	r3, r0, #8
   2374a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2374e:	f100 0310 	add.w	r3, r0, #16
   23752:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   23756:	4770      	bx	lr

00023758 <k_queue_append>:
{
   23758:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2375a:	2301      	movs	r3, #1
   2375c:	9300      	str	r3, [sp, #0]
   2375e:	2300      	movs	r3, #0
{
   23760:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   23762:	4619      	mov	r1, r3
   23764:	f7ff ff7c 	bl	23660 <queue_insert>
}
   23768:	b003      	add	sp, #12
   2376a:	f85d fb04 	ldr.w	pc, [sp], #4

0002376e <k_queue_prepend>:
{
   2376e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   23770:	2300      	movs	r3, #0
{
   23772:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   23774:	9300      	str	r3, [sp, #0]
   23776:	4619      	mov	r1, r3
   23778:	f7ff ff72 	bl	23660 <queue_insert>
}
   2377c:	b003      	add	sp, #12
   2377e:	f85d fb04 	ldr.w	pc, [sp], #4

00023782 <k_queue_append_list>:
{
   23782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23786:	4605      	mov	r5, r0
   23788:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2378a:	460c      	mov	r4, r1
   2378c:	b391      	cbz	r1, 237f4 <k_queue_append_list+0x72>
   2378e:	b38a      	cbz	r2, 237f4 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23790:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   23794:	f04f 0340 	mov.w	r3, #64	; 0x40
   23798:	f3ef 8811 	mrs	r8, BASEPRI
   2379c:	f383 8812 	msr	BASEPRI_MAX, r3
   237a0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   237a4:	4638      	mov	r0, r7
   237a6:	f000 f9e4 	bl	23b72 <z_unpend_first_thread>
   237aa:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   237ae:	b920      	cbnz	r0, 237ba <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   237b0:	686b      	ldr	r3, [r5, #4]
   237b2:	b9cb      	cbnz	r3, 237e8 <k_queue_append_list+0x66>
	list->head = node;
   237b4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   237b6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   237b8:	e00a      	b.n	237d0 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   237ba:	6144      	str	r4, [r0, #20]
   237bc:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   237c0:	f000 f963 	bl	23a8a <z_ready_thread>
		head = *(void **)head;
   237c4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   237c6:	4638      	mov	r0, r7
   237c8:	f000 f9d3 	bl	23b72 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   237cc:	2c00      	cmp	r4, #0
   237ce:	d1ee      	bne.n	237ae <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   237d0:	2104      	movs	r1, #4
   237d2:	f105 0010 	add.w	r0, r5, #16
   237d6:	f000 fbef 	bl	23fb8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   237da:	4638      	mov	r0, r7
   237dc:	4641      	mov	r1, r8
   237de:	f7f8 fb69 	bl	1beb4 <z_reschedule>
	return 0;
   237e2:	2000      	movs	r0, #0
}
   237e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   237e8:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   237ea:	f001 0103 	and.w	r1, r1, #3
   237ee:	430c      	orrs	r4, r1
   237f0:	601c      	str	r4, [r3, #0]
}
   237f2:	e7e0      	b.n	237b6 <k_queue_append_list+0x34>
		return -EINVAL;
   237f4:	f06f 0015 	mvn.w	r0, #21
   237f8:	e7f4      	b.n	237e4 <k_queue_append_list+0x62>

000237fa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   237fa:	b15a      	cbz	r2, 23814 <z_impl_k_sem_init+0x1a>
   237fc:	428a      	cmp	r2, r1
   237fe:	d309      	bcc.n	23814 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   23800:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   23804:	e9c0 1202 	strd	r1, r2, [r0, #8]
   23808:	e9c0 0000 	strd	r0, r0, [r0]
   2380c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   23810:	2000      	movs	r0, #0
   23812:	4770      	bx	lr
		return -EINVAL;
   23814:	f06f 0015 	mvn.w	r0, #21
}
   23818:	4770      	bx	lr

0002381a <notify_queue_locked>:
	if (queue != NULL) {
   2381a:	b120      	cbz	r0, 23826 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2381c:	2200      	movs	r2, #0
   2381e:	4611      	mov	r1, r2
   23820:	3088      	adds	r0, #136	; 0x88
   23822:	f000 b9ce 	b.w	23bc2 <z_sched_wake>
}
   23826:	4770      	bx	lr

00023828 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   23828:	68c3      	ldr	r3, [r0, #12]
{
   2382a:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2382c:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   23830:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   23834:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   23836:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   23838:	d502      	bpl.n	23840 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2383a:	3010      	adds	r0, #16
   2383c:	f000 f9de 	bl	23bfc <z_abort_timeout>
}
   23840:	4620      	mov	r0, r4
   23842:	bd10      	pop	{r4, pc}

00023844 <cancel_async_locked>:
{
   23844:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23846:	68c0      	ldr	r0, [r0, #12]
{
   23848:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2384a:	0784      	lsls	r4, r0, #30
   2384c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   23850:	d416      	bmi.n	23880 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   23852:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   23856:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   23858:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   2385a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2385c:	d510      	bpl.n	23880 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2385e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   23862:	b168      	cbz	r0, 23880 <cancel_async_locked+0x3c>
   23864:	4283      	cmp	r3, r0
   23866:	d11d      	bne.n	238a4 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   23868:	6818      	ldr	r0, [r3, #0]
   2386a:	b999      	cbnz	r1, 23894 <cancel_async_locked+0x50>
   2386c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   23870:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   23874:	428b      	cmp	r3, r1
   23876:	d101      	bne.n	2387c <cancel_async_locked+0x38>
	list->tail = node;
   23878:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   2387c:	2200      	movs	r2, #0
   2387e:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   23880:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   23882:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   23886:	bf1e      	ittt	ne
   23888:	f042 0202 	orrne.w	r2, r2, #2
   2388c:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2388e:	f002 000f 	andne.w	r0, r2, #15
}
   23892:	bd10      	pop	{r4, pc}
   23894:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23896:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2389a:	4283      	cmp	r3, r0
	list->tail = node;
   2389c:	bf08      	it	eq
   2389e:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   238a2:	e7eb      	b.n	2387c <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   238a4:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   238a6:	6800      	ldr	r0, [r0, #0]
   238a8:	e7db      	b.n	23862 <cancel_async_locked+0x1e>

000238aa <work_timeout>:
{
   238aa:	b513      	push	{r0, r1, r4, lr}
   238ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   238b0:	f3ef 8411 	mrs	r4, BASEPRI
   238b4:	f383 8812 	msr	BASEPRI_MAX, r3
   238b8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   238bc:	2300      	movs	r3, #0
   238be:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   238c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   238c4:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   238c8:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   238ca:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   238ce:	d505      	bpl.n	238dc <work_timeout+0x32>
		queue = dw->queue;
   238d0:	6983      	ldr	r3, [r0, #24]
   238d2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   238d4:	a901      	add	r1, sp, #4
   238d6:	3810      	subs	r0, #16
   238d8:	f7f8 f9b0 	bl	1bc3c <submit_to_queue_locked>
	__asm__ volatile(
   238dc:	f384 8811 	msr	BASEPRI, r4
   238e0:	f3bf 8f6f 	isb	sy
}
   238e4:	b002      	add	sp, #8
   238e6:	bd10      	pop	{r4, pc}

000238e8 <k_work_init>:
{
   238e8:	b538      	push	{r3, r4, r5, lr}
   238ea:	4604      	mov	r4, r0
   238ec:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   238ee:	2210      	movs	r2, #16
   238f0:	2100      	movs	r1, #0
   238f2:	f7fc fd93 	bl	2041c <memset>
   238f6:	6065      	str	r5, [r4, #4]
}
   238f8:	bd38      	pop	{r3, r4, r5, pc}

000238fa <k_work_submit_to_queue>:
{
   238fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   238fc:	9001      	str	r0, [sp, #4]
   238fe:	4608      	mov	r0, r1
	__asm__ volatile(
   23900:	f04f 0340 	mov.w	r3, #64	; 0x40
   23904:	f3ef 8511 	mrs	r5, BASEPRI
   23908:	f383 8812 	msr	BASEPRI_MAX, r3
   2390c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   23910:	a901      	add	r1, sp, #4
   23912:	f7f8 f993 	bl	1bc3c <submit_to_queue_locked>
   23916:	4604      	mov	r4, r0
	__asm__ volatile(
   23918:	f385 8811 	msr	BASEPRI, r5
   2391c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   23920:	2800      	cmp	r0, #0
   23922:	dd04      	ble.n	2392e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   23924:	f7f8 fd88 	bl	1c438 <z_impl_k_is_preempt_thread>
   23928:	b108      	cbz	r0, 2392e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2392a:	f7f8 fcd7 	bl	1c2dc <z_impl_k_yield>
}
   2392e:	4620      	mov	r0, r4
   23930:	b003      	add	sp, #12
   23932:	bd30      	pop	{r4, r5, pc}

00023934 <k_work_init_delayable>:
{
   23934:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   23936:	2230      	movs	r2, #48	; 0x30
{
   23938:	4604      	mov	r4, r0
   2393a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2393c:	2100      	movs	r1, #0
   2393e:	f7fc fd6d 	bl	2041c <memset>
   23942:	f44f 7380 	mov.w	r3, #256	; 0x100
   23946:	6065      	str	r5, [r4, #4]
   23948:	60e3      	str	r3, [r4, #12]
}
   2394a:	bd38      	pop	{r3, r4, r5, pc}

0002394c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2394c:	b538      	push	{r3, r4, r5, lr}
   2394e:	4604      	mov	r4, r0
	__asm__ volatile(
   23950:	f04f 0340 	mov.w	r3, #64	; 0x40
   23954:	f3ef 8511 	mrs	r5, BASEPRI
   23958:	f383 8812 	msr	BASEPRI_MAX, r3
   2395c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   23960:	f7ff ff62 	bl	23828 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23964:	4620      	mov	r0, r4
   23966:	f7ff ff6d 	bl	23844 <cancel_async_locked>
	__asm__ volatile(
   2396a:	f385 8811 	msr	BASEPRI, r5
   2396e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   23972:	bd38      	pop	{r3, r4, r5, pc}

00023974 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23976:	4604      	mov	r4, r0
   23978:	460d      	mov	r5, r1
	__asm__ volatile(
   2397a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2397e:	f3ef 8711 	mrs	r7, BASEPRI
   23982:	f383 8812 	msr	BASEPRI_MAX, r3
   23986:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2398a:	68c3      	ldr	r3, [r0, #12]
   2398c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23990:	2b00      	cmp	r3, #0
   23992:	bf14      	ite	ne
   23994:	2601      	movne	r6, #1
   23996:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   23998:	d009      	beq.n	239ae <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2399a:	f7ff ff45 	bl	23828 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2399e:	4620      	mov	r0, r4
   239a0:	f7ff ff50 	bl	23844 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   239a4:	4629      	mov	r1, r5
   239a6:	4620      	mov	r0, r4
   239a8:	f7f8 f92a 	bl	1bc00 <cancel_sync_locked>
   239ac:	4603      	mov	r3, r0
	__asm__ volatile(
   239ae:	f387 8811 	msr	BASEPRI, r7
   239b2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   239b6:	b13b      	cbz	r3, 239c8 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   239b8:	f04f 32ff 	mov.w	r2, #4294967295
   239bc:	f04f 33ff 	mov.w	r3, #4294967295
   239c0:	f105 0008 	add.w	r0, r5, #8
   239c4:	f7f8 f818 	bl	1b9f8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   239c8:	4630      	mov	r0, r6
   239ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000239cc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   239cc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   239d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   239d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   239d4:	2300      	movs	r3, #0
	node->prev = NULL;
   239d6:	e9c0 3300 	strd	r3, r3, [r0]
}
   239da:	4770      	bx	lr

000239dc <unpend_thread_no_timeout>:
{
   239dc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   239de:	f7ff fff5 	bl	239cc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   239e2:	7b43      	ldrb	r3, [r0, #13]
   239e4:	f023 0302 	bic.w	r3, r3, #2
   239e8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   239ea:	2300      	movs	r3, #0
   239ec:	6083      	str	r3, [r0, #8]
}
   239ee:	bd08      	pop	{r3, pc}

000239f0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   239f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   239f4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   239f8:	4283      	cmp	r3, r0
		return b2 - b1;
   239fa:	bf14      	ite	ne
   239fc:	1ac0      	subne	r0, r0, r3
	return 0;
   239fe:	2000      	moveq	r0, #0
}
   23a00:	4770      	bx	lr

00023a02 <z_unpend_thread_no_timeout>:
{
   23a02:	b508      	push	{r3, lr}
	__asm__ volatile(
   23a04:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a08:	f3ef 8111 	mrs	r1, BASEPRI
   23a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a10:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   23a14:	f7ff ffe2 	bl	239dc <unpend_thread_no_timeout>
	__asm__ volatile(
   23a18:	f381 8811 	msr	BASEPRI, r1
   23a1c:	f3bf 8f6f 	isb	sy
}
   23a20:	bd08      	pop	{r3, pc}

00023a22 <z_unpend_thread>:
{
   23a22:	b510      	push	{r4, lr}
	__asm__ volatile(
   23a24:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a28:	f3ef 8411 	mrs	r4, BASEPRI
   23a2c:	f383 8812 	msr	BASEPRI_MAX, r3
   23a30:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   23a34:	f7ff ffd2 	bl	239dc <unpend_thread_no_timeout>
	__asm__ volatile(
   23a38:	f384 8811 	msr	BASEPRI, r4
   23a3c:	f3bf 8f6f 	isb	sy
}
   23a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23a44:	3018      	adds	r0, #24
   23a46:	f000 b8d9 	b.w	23bfc <z_abort_timeout>

00023a4a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23a4a:	4603      	mov	r3, r0
   23a4c:	b920      	cbnz	r0, 23a58 <z_reschedule_irqlock+0xe>
   23a4e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   23a52:	b90a      	cbnz	r2, 23a58 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   23a54:	f7ef bcb0 	b.w	133b8 <arch_swap>
   23a58:	f383 8811 	msr	BASEPRI, r3
   23a5c:	f3bf 8f6f 	isb	sy
}
   23a60:	4770      	bx	lr

00023a62 <z_reschedule_unlocked>:
	__asm__ volatile(
   23a62:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a66:	f3ef 8011 	mrs	r0, BASEPRI
   23a6a:	f383 8812 	msr	BASEPRI_MAX, r3
   23a6e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   23a72:	f7ff bfea 	b.w	23a4a <z_reschedule_irqlock>

00023a76 <z_priq_dumb_best>:
{
   23a76:	4603      	mov	r3, r0
	return list->head == list;
   23a78:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a7a:	4283      	cmp	r3, r0
   23a7c:	d003      	beq.n	23a86 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   23a7e:	2800      	cmp	r0, #0
   23a80:	bf38      	it	cc
   23a82:	2000      	movcc	r0, #0
   23a84:	4770      	bx	lr
	struct k_thread *thread = NULL;
   23a86:	2000      	movs	r0, #0
}
   23a88:	4770      	bx	lr

00023a8a <z_ready_thread>:
{
   23a8a:	b510      	push	{r4, lr}
   23a8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a90:	f3ef 8411 	mrs	r4, BASEPRI
   23a94:	f383 8812 	msr	BASEPRI_MAX, r3
   23a98:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   23a9c:	f7f8 fad0 	bl	1c040 <ready_thread>
	__asm__ volatile(
   23aa0:	f384 8811 	msr	BASEPRI, r4
   23aa4:	f3bf 8f6f 	isb	sy
}
   23aa8:	bd10      	pop	{r4, pc}

00023aaa <z_thread_timeout>:
{
   23aaa:	b510      	push	{r4, lr}
   23aac:	4601      	mov	r1, r0
	__asm__ volatile(
   23aae:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ab2:	f3ef 8411 	mrs	r4, BASEPRI
   23ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   23aba:	f3bf 8f6f 	isb	sy
		if (!killed) {
   23abe:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   23ac2:	f013 0f28 	tst.w	r3, #40	; 0x28
   23ac6:	d10d      	bne.n	23ae4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   23ac8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   23acc:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   23ace:	b10b      	cbz	r3, 23ad4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   23ad0:	f7ff ff84 	bl	239dc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23ad4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   23ad8:	f023 0314 	bic.w	r3, r3, #20
   23adc:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   23ae0:	f7f8 faae 	bl	1c040 <ready_thread>
	__asm__ volatile(
   23ae4:	f384 8811 	msr	BASEPRI, r4
   23ae8:	f3bf 8f6f 	isb	sy
}
   23aec:	bd10      	pop	{r4, pc}

00023aee <add_to_waitq_locked>:
{
   23aee:	b538      	push	{r3, r4, r5, lr}
   23af0:	4604      	mov	r4, r0
   23af2:	460d      	mov	r5, r1
	unready_thread(thread);
   23af4:	f7f8 fafa 	bl	1c0ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23af8:	7b63      	ldrb	r3, [r4, #13]
   23afa:	f043 0302 	orr.w	r3, r3, #2
   23afe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23b00:	b1b5      	cbz	r5, 23b30 <add_to_waitq_locked+0x42>
	return list->head == list;
   23b02:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   23b04:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b06:	429d      	cmp	r5, r3
   23b08:	bf08      	it	eq
   23b0a:	2300      	moveq	r3, #0
   23b0c:	2b00      	cmp	r3, #0
   23b0e:	bf38      	it	cc
   23b10:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23b12:	b19b      	cbz	r3, 23b3c <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   23b14:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23b18:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23b1c:	4291      	cmp	r1, r2
   23b1e:	d008      	beq.n	23b32 <add_to_waitq_locked+0x44>
		return b2 - b1;
   23b20:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23b22:	2a00      	cmp	r2, #0
   23b24:	dd05      	ble.n	23b32 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   23b26:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23b28:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23b2c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23b2e:	605c      	str	r4, [r3, #4]
}
   23b30:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   23b32:	686a      	ldr	r2, [r5, #4]
   23b34:	4293      	cmp	r3, r2
   23b36:	d001      	beq.n	23b3c <add_to_waitq_locked+0x4e>
   23b38:	681b      	ldr	r3, [r3, #0]
   23b3a:	e7ea      	b.n	23b12 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   23b3c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   23b3e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   23b42:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23b44:	606c      	str	r4, [r5, #4]
   23b46:	e7f3      	b.n	23b30 <add_to_waitq_locked+0x42>

00023b48 <z_unpend1_no_timeout>:
{
   23b48:	b510      	push	{r4, lr}
	__asm__ volatile(
   23b4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b4e:	f3ef 8411 	mrs	r4, BASEPRI
   23b52:	f383 8812 	msr	BASEPRI_MAX, r3
   23b56:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23b5a:	f7ff ff8c 	bl	23a76 <z_priq_dumb_best>
		if (thread != NULL) {
   23b5e:	4601      	mov	r1, r0
   23b60:	b108      	cbz	r0, 23b66 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   23b62:	f7ff ff3b 	bl	239dc <unpend_thread_no_timeout>
	__asm__ volatile(
   23b66:	f384 8811 	msr	BASEPRI, r4
   23b6a:	f3bf 8f6f 	isb	sy
}
   23b6e:	4608      	mov	r0, r1
   23b70:	bd10      	pop	{r4, pc}

00023b72 <z_unpend_first_thread>:
{
   23b72:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23b74:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b78:	f3ef 8511 	mrs	r5, BASEPRI
   23b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   23b80:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23b84:	f7ff ff77 	bl	23a76 <z_priq_dumb_best>
		if (thread != NULL) {
   23b88:	4604      	mov	r4, r0
   23b8a:	b120      	cbz	r0, 23b96 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   23b8c:	f7ff ff26 	bl	239dc <unpend_thread_no_timeout>
   23b90:	3018      	adds	r0, #24
   23b92:	f000 f833 	bl	23bfc <z_abort_timeout>
	__asm__ volatile(
   23b96:	f385 8811 	msr	BASEPRI, r5
   23b9a:	f3bf 8f6f 	isb	sy
}
   23b9e:	4620      	mov	r0, r4
   23ba0:	bd38      	pop	{r3, r4, r5, pc}

00023ba2 <z_unpend_all>:
{
   23ba2:	b538      	push	{r3, r4, r5, lr}
   23ba4:	4605      	mov	r5, r0
	int need_sched = 0;
   23ba6:	2000      	movs	r0, #0
	return list->head == list;
   23ba8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23baa:	42a5      	cmp	r5, r4
   23bac:	d000      	beq.n	23bb0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23bae:	b904      	cbnz	r4, 23bb2 <z_unpend_all+0x10>
}
   23bb0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   23bb2:	4620      	mov	r0, r4
   23bb4:	f7ff ff35 	bl	23a22 <z_unpend_thread>
		z_ready_thread(thread);
   23bb8:	4620      	mov	r0, r4
   23bba:	f7ff ff66 	bl	23a8a <z_ready_thread>
		need_sched = 1;
   23bbe:	2001      	movs	r0, #1
   23bc0:	e7f2      	b.n	23ba8 <z_unpend_all+0x6>

00023bc2 <z_sched_wake>:
{
   23bc2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23bc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23bc8:	f3ef 8511 	mrs	r5, BASEPRI
   23bcc:	f383 8812 	msr	BASEPRI_MAX, r3
   23bd0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23bd4:	f7ff ff4f 	bl	23a76 <z_priq_dumb_best>
		if (thread != NULL) {
   23bd8:	4604      	mov	r4, r0
   23bda:	b150      	cbz	r0, 23bf2 <z_sched_wake+0x30>
   23bdc:	67c1      	str	r1, [r0, #124]	; 0x7c
   23bde:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   23be0:	f7ff fefc 	bl	239dc <unpend_thread_no_timeout>
   23be4:	3018      	adds	r0, #24
   23be6:	f000 f809 	bl	23bfc <z_abort_timeout>
			ready_thread(thread);
   23bea:	4620      	mov	r0, r4
   23bec:	f7f8 fa28 	bl	1c040 <ready_thread>
			ret = true;
   23bf0:	2001      	movs	r0, #1
	__asm__ volatile(
   23bf2:	f385 8811 	msr	BASEPRI, r5
   23bf6:	f3bf 8f6f 	isb	sy
}
   23bfa:	bd38      	pop	{r3, r4, r5, pc}

00023bfc <z_abort_timeout>:
{
   23bfc:	b510      	push	{r4, lr}
	__asm__ volatile(
   23bfe:	f04f 0240 	mov.w	r2, #64	; 0x40
   23c02:	f3ef 8411 	mrs	r4, BASEPRI
   23c06:	f382 8812 	msr	BASEPRI_MAX, r2
   23c0a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   23c0e:	6803      	ldr	r3, [r0, #0]
   23c10:	b13b      	cbz	r3, 23c22 <z_abort_timeout+0x26>
			remove_timeout(to);
   23c12:	f7f8 fca9 	bl	1c568 <remove_timeout>
			ret = 0;
   23c16:	2000      	movs	r0, #0
	__asm__ volatile(
   23c18:	f384 8811 	msr	BASEPRI, r4
   23c1c:	f3bf 8f6f 	isb	sy
}
   23c20:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   23c22:	f06f 0015 	mvn.w	r0, #21
   23c26:	e7f7      	b.n	23c18 <z_abort_timeout+0x1c>

00023c28 <z_get_next_timeout_expiry>:
{
   23c28:	b510      	push	{r4, lr}
	__asm__ volatile(
   23c2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c2e:	f3ef 8411 	mrs	r4, BASEPRI
   23c32:	f383 8812 	msr	BASEPRI_MAX, r3
   23c36:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   23c3a:	f7f8 fcaf 	bl	1c59c <next_timeout>
	__asm__ volatile(
   23c3e:	f384 8811 	msr	BASEPRI, r4
   23c42:	f3bf 8f6f 	isb	sy
}
   23c46:	bd10      	pop	{r4, pc}

00023c48 <z_set_timeout_expiry>:
{
   23c48:	b570      	push	{r4, r5, r6, lr}
   23c4a:	4604      	mov	r4, r0
   23c4c:	460d      	mov	r5, r1
	__asm__ volatile(
   23c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c52:	f3ef 8611 	mrs	r6, BASEPRI
   23c56:	f383 8812 	msr	BASEPRI_MAX, r3
   23c5a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   23c5e:	f7f8 fc9d 	bl	1c59c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23c62:	2801      	cmp	r0, #1
   23c64:	dd05      	ble.n	23c72 <z_set_timeout_expiry+0x2a>
   23c66:	42a0      	cmp	r0, r4
   23c68:	db03      	blt.n	23c72 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23c6a:	4629      	mov	r1, r5
   23c6c:	4620      	mov	r0, r4
   23c6e:	f7f5 f92b 	bl	18ec8 <sys_clock_set_timeout>
	__asm__ volatile(
   23c72:	f386 8811 	msr	BASEPRI, r6
   23c76:	f3bf 8f6f 	isb	sy
}
   23c7a:	bd70      	pop	{r4, r5, r6, pc}

00023c7c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   23c7c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   23c7e:	f7f8 fdad 	bl	1c7dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   23c82:	bd08      	pop	{r3, pc}

00023c84 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   23c84:	b108      	cbz	r0, 23c8a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   23c86:	f7ef beef 	b.w	13a68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   23c8a:	4770      	bx	lr

00023c8c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   23c8c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23c8e:	1c4b      	adds	r3, r1, #1
   23c90:	bf08      	it	eq
   23c92:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   23c96:	4604      	mov	r4, r0
   23c98:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23c9a:	d013      	beq.n	23cc4 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23c9c:	ea54 0105 	orrs.w	r1, r4, r5
   23ca0:	d103      	bne.n	23caa <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   23ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   23ca6:	f7f8 bd99 	b.w	1c7dc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   23caa:	f06f 0101 	mvn.w	r1, #1
   23cae:	1a0a      	subs	r2, r1, r0
   23cb0:	f04f 31ff 	mov.w	r1, #4294967295
   23cb4:	eb61 0305 	sbc.w	r3, r1, r5
   23cb8:	2a00      	cmp	r2, #0
   23cba:	f173 0100 	sbcs.w	r1, r3, #0
   23cbe:	db02      	blt.n	23cc6 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   23cc0:	4610      	mov	r0, r2
   23cc2:	4619      	mov	r1, r3
}
   23cc4:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   23cc6:	f7f8 fd89 	bl	1c7dc <sys_clock_tick_get>
   23cca:	2c01      	cmp	r4, #1
   23ccc:	f175 0300 	sbcs.w	r3, r5, #0
   23cd0:	bfbc      	itt	lt
   23cd2:	2401      	movlt	r4, #1
   23cd4:	2500      	movlt	r5, #0
   23cd6:	1820      	adds	r0, r4, r0
   23cd8:	eb45 0101 	adc.w	r1, r5, r1
   23cdc:	e7f2      	b.n	23cc4 <sys_clock_timeout_end_calc+0x38>

00023cde <k_timer_init>:
	timer->status = 0U;
   23cde:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23ce0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   23ce4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   23ce8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   23cec:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23cf0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   23cf2:	6343      	str	r3, [r0, #52]	; 0x34
}
   23cf4:	4770      	bx	lr

00023cf6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   23cf6:	b510      	push	{r4, lr}
   23cf8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23cfa:	f7ff ff7f 	bl	23bfc <z_abort_timeout>

	if (inactive) {
   23cfe:	b9b0      	cbnz	r0, 23d2e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   23d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d02:	b10b      	cbz	r3, 23d08 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   23d04:	4620      	mov	r0, r4
   23d06:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   23d08:	f104 0018 	add.w	r0, r4, #24
   23d0c:	f7ff ff1c 	bl	23b48 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   23d10:	b168      	cbz	r0, 23d2e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   23d12:	f7ff feba 	bl	23a8a <z_ready_thread>
	__asm__ volatile(
   23d16:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d1a:	f3ef 8011 	mrs	r0, BASEPRI
   23d1e:	f383 8812 	msr	BASEPRI_MAX, r3
   23d22:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   23d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   23d2a:	f7ff be8e 	b.w	23a4a <z_reschedule_irqlock>
   23d2e:	bd10      	pop	{r4, pc}

00023d30 <clear_event_registrations>:
	while (num_events--) {
   23d30:	2314      	movs	r3, #20
{
   23d32:	b570      	push	{r4, r5, r6, lr}
   23d34:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   23d38:	2400      	movs	r4, #0
   23d3a:	2601      	movs	r6, #1
	while (num_events--) {
   23d3c:	4281      	cmp	r1, r0
   23d3e:	d100      	bne.n	23d42 <clear_event_registrations+0x12>
}
   23d40:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   23d42:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   23d46:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   23d4a:	f003 031f 	and.w	r3, r3, #31
   23d4e:	2b08      	cmp	r3, #8
   23d50:	d80d      	bhi.n	23d6e <clear_event_registrations+0x3e>
   23d52:	fa06 f303 	lsl.w	r3, r6, r3
   23d56:	f413 7f8b 	tst.w	r3, #278	; 0x116
   23d5a:	d008      	beq.n	23d6e <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23d5c:	f851 3c14 	ldr.w	r3, [r1, #-20]
   23d60:	b12b      	cbz	r3, 23d6e <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   23d62:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   23d66:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   23d68:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23d6a:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   23d6e:	f382 8811 	msr	BASEPRI, r2
   23d72:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23d76:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d7a:	f3ef 8211 	mrs	r2, BASEPRI
   23d7e:	f383 8812 	msr	BASEPRI_MAX, r3
   23d82:	f3bf 8f6f 	isb	sy
   23d86:	3914      	subs	r1, #20
   23d88:	e7d8      	b.n	23d3c <clear_event_registrations+0xc>

00023d8a <add_event>:
{
   23d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d8c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23d8e:	e9d0 2300 	ldrd	r2, r3, [r0]
   23d92:	4290      	cmp	r0, r2
   23d94:	4604      	mov	r4, r0
   23d96:	460d      	mov	r5, r1
   23d98:	d105      	bne.n	23da6 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   23d9a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   23d9c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   23da0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23da2:	6065      	str	r5, [r4, #4]
}
   23da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23da6:	2b00      	cmp	r3, #0
   23da8:	d0f7      	beq.n	23d9a <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23daa:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23dac:	b100      	cbz	r0, 23db0 <add_event+0x26>
   23dae:	3860      	subs	r0, #96	; 0x60
   23db0:	b107      	cbz	r7, 23db4 <add_event+0x2a>
   23db2:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23db4:	4639      	mov	r1, r7
   23db6:	f7ff fe1b 	bl	239f0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   23dba:	2800      	cmp	r0, #0
   23dbc:	dced      	bgt.n	23d9a <add_event+0x10>
	return list->head == list;
   23dbe:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23dc0:	42b4      	cmp	r4, r6
   23dc2:	d0ea      	beq.n	23d9a <add_event+0x10>
   23dc4:	2e00      	cmp	r6, #0
   23dc6:	bf38      	it	cc
   23dc8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23dca:	2e00      	cmp	r6, #0
   23dcc:	d0e5      	beq.n	23d9a <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   23dce:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23dd0:	b101      	cbz	r1, 23dd4 <add_event+0x4a>
   23dd2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   23dd4:	4638      	mov	r0, r7
   23dd6:	f7ff fe0b 	bl	239f0 <z_sched_prio_cmp>
   23dda:	2800      	cmp	r0, #0
   23ddc:	dd05      	ble.n	23dea <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   23dde:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23de0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   23de4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23de6:	6075      	str	r5, [r6, #4]
			return;
   23de8:	e7dc      	b.n	23da4 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   23dea:	6863      	ldr	r3, [r4, #4]
   23dec:	42b3      	cmp	r3, r6
   23dee:	d0d4      	beq.n	23d9a <add_event+0x10>
   23df0:	6836      	ldr	r6, [r6, #0]
   23df2:	e7ea      	b.n	23dca <add_event+0x40>

00023df4 <register_events>:
{
   23df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   23df8:	2500      	movs	r5, #0
{
   23dfa:	468b      	mov	fp, r1
   23dfc:	4614      	mov	r4, r2
   23dfe:	461f      	mov	r7, r3
   23e00:	4682      	mov	sl, r0
	int events_registered = 0;
   23e02:	462e      	mov	r6, r5
	event->poller = NULL;
   23e04:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   23e06:	455d      	cmp	r5, fp
   23e08:	db02      	blt.n	23e10 <register_events+0x1c>
}
   23e0a:	4630      	mov	r0, r6
   23e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e10:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e14:	f3ef 8911 	mrs	r9, BASEPRI
   23e18:	f383 8812 	msr	BASEPRI_MAX, r3
   23e1c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   23e20:	f89a 300d 	ldrb.w	r3, [sl, #13]
   23e24:	f003 031f 	and.w	r3, r3, #31
   23e28:	3b01      	subs	r3, #1
   23e2a:	2b07      	cmp	r3, #7
   23e2c:	d80f      	bhi.n	23e4e <register_events+0x5a>
   23e2e:	e8df f003 	tbb	[pc, r3]
   23e32:	041e      	.short	0x041e
   23e34:	0e0e0a0e 	.word	0x0e0e0a0e
   23e38:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   23e3a:	f8da 3010 	ldr.w	r3, [sl, #16]
   23e3e:	689b      	ldr	r3, [r3, #8]
   23e40:	b12b      	cbz	r3, 23e4e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23e42:	2302      	movs	r3, #2
   23e44:	e020      	b.n	23e88 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   23e46:	f8da 3010 	ldr.w	r3, [sl, #16]
   23e4a:	681b      	ldr	r3, [r3, #0]
   23e4c:	bb8b      	cbnz	r3, 23eb2 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   23e4e:	bb47      	cbnz	r7, 23ea2 <register_events+0xae>
   23e50:	7823      	ldrb	r3, [r4, #0]
   23e52:	b333      	cbz	r3, 23ea2 <register_events+0xae>
	switch (event->type) {
   23e54:	f89a 300d 	ldrb.w	r3, [sl, #13]
   23e58:	f003 031f 	and.w	r3, r3, #31
   23e5c:	3b01      	subs	r3, #1
   23e5e:	2b07      	cmp	r3, #7
   23e60:	d830      	bhi.n	23ec4 <register_events+0xd0>
   23e62:	e8df f003 	tbb	[pc, r3]
   23e66:	2833      	.short	0x2833
   23e68:	2f2f282f 	.word	0x2f2f282f
   23e6c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   23e6e:	f8da 3010 	ldr.w	r3, [sl, #16]
   23e72:	689b      	ldr	r3, [r3, #8]
   23e74:	2b00      	cmp	r3, #0
   23e76:	d0ea      	beq.n	23e4e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   23e78:	2301      	movs	r3, #1
   23e7a:	e005      	b.n	23e88 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   23e7c:	f8da 3010 	ldr.w	r3, [sl, #16]
   23e80:	6a1b      	ldr	r3, [r3, #32]
   23e82:	2b00      	cmp	r3, #0
   23e84:	d0e3      	beq.n	23e4e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   23e86:	2310      	movs	r3, #16
	event->state |= state;
   23e88:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   23e8c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   23e90:	f3c2 3145 	ubfx	r1, r2, #13, #6
   23e94:	430b      	orrs	r3, r1
   23e96:	f363 3252 	bfi	r2, r3, #13, #6
   23e9a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   23e9e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23ea2:	f389 8811 	msr	BASEPRI, r9
   23ea6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23eaa:	3501      	adds	r5, #1
   23eac:	f10a 0a14 	add.w	sl, sl, #20
   23eb0:	e7a9      	b.n	23e06 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23eb2:	2304      	movs	r3, #4
   23eb4:	e7e8      	b.n	23e88 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   23eb6:	f8da 0010 	ldr.w	r0, [sl, #16]
   23eba:	4622      	mov	r2, r4
   23ebc:	4651      	mov	r1, sl
   23ebe:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23ec0:	f7ff ff63 	bl	23d8a <add_event>
	event->poller = poller;
   23ec4:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   23ec8:	3601      	adds	r6, #1
   23eca:	e7ea      	b.n	23ea2 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   23ecc:	f8da 0010 	ldr.w	r0, [sl, #16]
   23ed0:	4622      	mov	r2, r4
   23ed2:	4651      	mov	r1, sl
   23ed4:	e7f4      	b.n	23ec0 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   23ed6:	f8da 0010 	ldr.w	r0, [sl, #16]
   23eda:	4622      	mov	r2, r4
   23edc:	4651      	mov	r1, sl
   23ede:	3024      	adds	r0, #36	; 0x24
   23ee0:	e7ee      	b.n	23ec0 <register_events+0xcc>

00023ee2 <signal_poll_event>:
{
   23ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   23ee6:	6884      	ldr	r4, [r0, #8]
{
   23ee8:	4605      	mov	r5, r0
   23eea:	460e      	mov	r6, r1
	if (poller != NULL) {
   23eec:	b144      	cbz	r4, 23f00 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   23eee:	7863      	ldrb	r3, [r4, #1]
   23ef0:	2b01      	cmp	r3, #1
   23ef2:	d138      	bne.n	23f66 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   23ef4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23ef8:	f013 0302 	ands.w	r3, r3, #2
   23efc:	d10a      	bne.n	23f14 <signal_poll_event+0x32>
		poller->is_polling = false;
   23efe:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   23f00:	68eb      	ldr	r3, [r5, #12]
   23f02:	f3c3 3145 	ubfx	r1, r3, #13, #6
   23f06:	430e      	orrs	r6, r1
	event->poller = NULL;
   23f08:	2000      	movs	r0, #0
	event->state |= state;
   23f0a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   23f0e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   23f10:	60eb      	str	r3, [r5, #12]
	return retcode;
   23f12:	e00d      	b.n	23f30 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   23f14:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   23f18:	f04f 31ff 	mov.w	r1, #4294967295
   23f1c:	f06f 0001 	mvn.w	r0, #1
   23f20:	428b      	cmp	r3, r1
   23f22:	bf08      	it	eq
   23f24:	4282      	cmpeq	r2, r0
   23f26:	d105      	bne.n	23f34 <signal_poll_event+0x52>
		poller->is_polling = false;
   23f28:	2300      	movs	r3, #0
   23f2a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   23f2c:	f06f 000a 	mvn.w	r0, #10
}
   23f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23f34:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   23f38:	4640      	mov	r0, r8
   23f3a:	f7ff fd72 	bl	23a22 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23f3e:	2e08      	cmp	r6, #8
   23f40:	bf0c      	ite	eq
   23f42:	f06f 0303 	mvneq.w	r3, #3
   23f46:	2300      	movne	r3, #0
   23f48:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23f4a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   23f4e:	06db      	lsls	r3, r3, #27
   23f50:	d102      	bne.n	23f58 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   23f52:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23f56:	b10f      	cbz	r7, 23f5c <signal_poll_event+0x7a>
		poller->is_polling = false;
   23f58:	2300      	movs	r3, #0
   23f5a:	e7d0      	b.n	23efe <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23f5c:	4640      	mov	r0, r8
   23f5e:	f7ff fd94 	bl	23a8a <z_ready_thread>
		poller->is_polling = false;
   23f62:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23f64:	e7cc      	b.n	23f00 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23f66:	2b02      	cmp	r3, #2
   23f68:	d1f6      	bne.n	23f58 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23f6a:	7823      	ldrb	r3, [r4, #0]
   23f6c:	2b00      	cmp	r3, #0
   23f6e:	d0c7      	beq.n	23f00 <signal_poll_event+0x1e>
   23f70:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23f74:	2f00      	cmp	r7, #0
   23f76:	d0f4      	beq.n	23f62 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   23f78:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23f7c:	f1a4 0914 	sub.w	r9, r4, #20
   23f80:	f104 0014 	add.w	r0, r4, #20
   23f84:	f7ff fe3a 	bl	23bfc <z_abort_timeout>
		twork->poll_result = 0;
   23f88:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   23f8c:	4649      	mov	r1, r9
   23f8e:	4638      	mov	r0, r7
   23f90:	f7ff fcb3 	bl	238fa <k_work_submit_to_queue>
		poller->is_polling = false;
   23f94:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   23f98:	e7b2      	b.n	23f00 <signal_poll_event+0x1e>

00023f9a <k_poll_event_init>:
{
   23f9a:	b510      	push	{r4, lr}
	event->type = type;
   23f9c:	04d2      	lsls	r2, r2, #19
   23f9e:	0209      	lsls	r1, r1, #8
   23fa0:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   23fa4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   23fa8:	430a      	orrs	r2, r1
   23faa:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23fac:	2400      	movs	r4, #0
	event->type = type;
   23fae:	430a      	orrs	r2, r1
	event->obj = obj;
   23fb0:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23fb4:	6084      	str	r4, [r0, #8]
}
   23fb6:	bd10      	pop	{r4, pc}

00023fb8 <z_handle_obj_poll_events>:
{
   23fb8:	4603      	mov	r3, r0
	return list->head == list;
   23fba:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23fbc:	4283      	cmp	r3, r0
   23fbe:	d008      	beq.n	23fd2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   23fc0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23fc4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23fc6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23fc8:	2300      	movs	r3, #0
	node->prev = NULL;
   23fca:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23fce:	f7ff bf88 	b.w	23ee2 <signal_poll_event>
}
   23fd2:	4770      	bx	lr

00023fd4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23fd4:	2304      	movs	r3, #4
   23fd6:	18d2      	adds	r2, r2, r3
{
   23fd8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   23fda:	4604      	mov	r4, r0
   23fdc:	d207      	bcs.n	23fee <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23fde:	2600      	movs	r6, #0
   23fe0:	2700      	movs	r7, #0
   23fe2:	e9cd 6700 	strd	r6, r7, [sp]
   23fe6:	4319      	orrs	r1, r3
   23fe8:	f7ff fa79 	bl	234de <k_heap_aligned_alloc>
	if (mem == NULL) {
   23fec:	b910      	cbnz	r0, 23ff4 <z_heap_aligned_alloc+0x20>
		return NULL;
   23fee:	2000      	movs	r0, #0
}
   23ff0:	b002      	add	sp, #8
   23ff2:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   23ff4:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   23ff8:	e7fa      	b.n	23ff0 <z_heap_aligned_alloc+0x1c>

00023ffa <k_free>:
	if (ptr != NULL) {
   23ffa:	b120      	cbz	r0, 24006 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23ffc:	1f01      	subs	r1, r0, #4
   23ffe:	f850 0c04 	ldr.w	r0, [r0, #-4]
   24002:	f7ff bab3 	b.w	2356c <k_heap_free>
}
   24006:	4770      	bx	lr

00024008 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   24008:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
   2400a:	4770      	bx	lr

0002400c <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2400c:	4770      	bx	lr

0002400e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2400e:	4770      	bx	lr

00024010 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   24010:	f7f5 bd98 	b.w	19b44 <SystemInit>
